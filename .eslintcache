[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"43","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"44","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"45","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"46","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"47","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"48"},{"size":4817,"mtime":1662753677999,"results":"49","hashOfConfig":"50"},{"size":9052,"mtime":1661972893700,"results":"51","hashOfConfig":"50"},{"size":21222,"mtime":1662754397007,"results":"52","hashOfConfig":"50"},{"size":21559,"mtime":1663105792118,"results":"53","hashOfConfig":"50"},{"size":7544,"mtime":1650310829994,"results":"54","hashOfConfig":"50"},{"size":3414,"mtime":1662477283935,"results":"55","hashOfConfig":"50"},{"size":6609,"mtime":1663016164627,"results":"56","hashOfConfig":"50"},{"size":20258,"mtime":1663105792119,"results":"57","hashOfConfig":"50"},{"size":5699,"mtime":1661974634048,"results":"58","hashOfConfig":"50"},{"size":12826,"mtime":1662044241478,"results":"59","hashOfConfig":"50"},{"size":4314,"mtime":1661975942806,"results":"60","hashOfConfig":"50"},{"size":21460,"mtime":1662058209975,"results":"61","hashOfConfig":"50"},{"size":14755,"mtime":1659986034550,"results":"62","hashOfConfig":"50"},{"size":2185,"mtime":1661972327672,"results":"63","hashOfConfig":"50"},{"size":3416,"mtime":1650310830004,"results":"64","hashOfConfig":"50"},{"size":383,"mtime":1650310830005,"results":"65","hashOfConfig":"50"},{"size":11901,"mtime":1661972327656,"results":"66","hashOfConfig":"50"},{"size":6726,"mtime":1663105792125,"results":"67","hashOfConfig":"50"},{"size":14683,"mtime":1663016164638,"results":"68","hashOfConfig":"50"},{"size":226,"mtime":1659480227124,"results":"69","hashOfConfig":"50"},{"size":25101,"mtime":1663116357337,"results":"70","hashOfConfig":"50"},{"size":1288,"mtime":1648248621496,"results":"71","hashOfConfig":"50"},{"size":1291,"mtime":1661972887777,"results":"72","hashOfConfig":"50"},{"size":8238,"mtime":1663085769845,"results":"73","hashOfConfig":"50"},{"size":8409,"mtime":1663085769868,"results":"74","hashOfConfig":"50"},{"size":1592,"mtime":1650310830008,"results":"75","hashOfConfig":"50"},{"size":1919,"mtime":1661972327646,"results":"76","hashOfConfig":"50"},{"size":3579,"mtime":1614731664824,"results":"77","hashOfConfig":"50"},{"size":835,"mtime":1642711713952,"results":"78","hashOfConfig":"50"},{"size":22970,"mtime":1661972327647,"results":"79","hashOfConfig":"50"},{"size":9694,"mtime":1661972327657,"results":"80","hashOfConfig":"50"},{"size":629,"mtime":1635283796967,"results":"81","hashOfConfig":"50"},{"size":695,"mtime":1635283796969,"results":"82","hashOfConfig":"50"},{"size":362,"mtime":1614731664838,"results":"83","hashOfConfig":"50"},{"size":16521,"mtime":1661972327653,"results":"84","hashOfConfig":"50"},{"size":6280,"mtime":1663085769867,"results":"85","hashOfConfig":"50"},{"size":3844,"mtime":1650310830005,"results":"86","hashOfConfig":"50"},{"size":2975,"mtime":1614731664830,"results":"87","hashOfConfig":"50"},{"size":3170,"mtime":1661972327665,"results":"88","hashOfConfig":"50"},{"size":3326,"mtime":1661972327650,"results":"89","hashOfConfig":"50"},{"size":2042,"mtime":1661972327667,"results":"90","hashOfConfig":"50"},{"size":3339,"mtime":1650310830005,"results":"91","hashOfConfig":"50"},{"size":2011,"mtime":1650310829999,"results":"92","hashOfConfig":"50"},{"size":1520,"mtime":1654019625276,"results":"93","hashOfConfig":"50"},{"size":37290,"mtime":1663161458326,"results":"94","hashOfConfig":"50"},{"size":2535,"mtime":1662754397012,"results":"95","hashOfConfig":"50"},{"size":1505,"mtime":1662223237485,"results":"96","hashOfConfig":"50"},{"size":9889,"mtime":1662477283936,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rfo3np",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"102"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"153"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"167"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"139"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"153"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],["209","210"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["211","212"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",["213"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx",["214"],"import React, { useState, useEffect } from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from \"@material-ui/core\";\n\nimport iconEdit from \"../../assets/Edit.svg\";\nimport { getCustomReward, updateCustomReward } from \"../../services/twitch\";\nimport { getInteractionsRewardData, setAlertSetting, updateStreamerProfile } from \"../../services/database\";\nimport { refreshUserAccessToken } from \"../../services/functions\";\nimport { auth } from \"../../services/firebase\";\nimport { ReactComponent as ConfirmChange } from './../../assets/ConfirmChange.svg';\nimport StreamerProfileModalDisableInteractions from \"../StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions\";\nimport StreamerProfileImgCoin from '../StreamerProfileImgCoin/StreamerProfileImgCoin';\nimport style from \"./StreamerProfileEditCoin.module.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    circularProgress: {\n        color: '#0AFFD2',\n        alignSelf: 'center'\n    }\n}));\n\nconst StreamerProfileEditCoin = ({ user }) => {\n    const [ActiveEditTitle, setActiveEditTitle] = useState(false);\n    const [ActiveEditCoins, setActiveEditCoins] = useState(false);\n    const [rewardId, setRewardId] = useState('');\n    const [rewardName, setRewardName] = useState('');\n    const [rewardCost, setRewardCost] = useState('');\n    const [savingChanges, setSavingChanges] = useState(false);\n    const [rewardBackgroundColor, setRewardBackgroundColor] = useState('');\n    const [modal, setModal] = useState(false);\n    const [titleCheckbox, setTitleCheckbox] = useState('');\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function getRewardData() {\n            try {\n                const rewardData = await getInteractionsRewardData(user.uid);\n                if (rewardData.exists()) {\n                    const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n                    if (userTokensUpdated.data.status === 200) {\n                        const userCredentialsUpdated = userTokensUpdated.data;\n                        updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                        const reward = await getCustomReward(rewardData.val().rewardId, user.id, userCredentialsUpdated.access_token);\n                        if (reward && reward.id) {\n                            setRewardName(reward.title);\n                            setRewardCost(reward.cost);\n                            setRewardBackgroundColor(reward.background_color);\n                            setReactionsEnabled(!reward.is_paused);\n                            setTitleCheckbox(t(!reward.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'));\n                            setRewardId(reward.id);\n                        } else if (reward === 404) {\n                            history.push('/onboarding');\n                        }\n                    }\n                } else {\n                    history.push('/onboarding');\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        if (user.uid) {\n            getRewardData();\n        }\n    }, [user.uid, user.id, user.refreshToken]);\n\n    const saveData = async (event) => {\n        if (event.key === 'Enter' || event.type === 'click') {\n            setSavingChanges(true);\n            const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n            if (userTokensUpdated.data.status === 200) {\n                const userCredentialsUpdated = userTokensUpdated.data;\n                updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                const rewardUpdated = await updateCustomReward(\n                    user.id,\n                    userCredentialsUpdated.access_token,\n                    rewardId,\n                    {\n                        title: rewardName,\n                        cost: rewardCost\n                    }\n                );\n\n                if (rewardUpdated.status === 200) {\n                    setRewardName(rewardUpdated.title);\n                    setRewardCost(rewardUpdated.cost);\n                    setRewardBackgroundColor(rewardUpdated.background_color);\n                    setActiveEditCoins(false);\n                    setActiveEditTitle(false);\n                } else {\n                    switch (rewardUpdated.status) {\n                        case 404:\n                            // Not found (maybe the reward was removed from Twitch)\n                            break;\n                        case 500:\n                            // Twitch internal server error (could not update because of Twitch)\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                setSavingChanges(false);\n            } else {\n                switch (userTokensUpdated.data.status) {\n                    case 401:\n                        // Invalid refresh token (need to sign in again)\n                        handleExpiredSession();\n                        break;\n                    case 500:\n                        // Twitch internal server error\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n\n    const handleCheckbox = (e) => {\n        if (!e.target.checked) {\n            const dontShowDialog = localStorage.getItem('dontShowCloseDisableReactionsDialog');\n            if (!dontShowDialog) {\n                setModal(true);\n            } else {\n                toggleReward();\n            }\n        } else {\n            setTitleCheckbox(t('StreamerProfile.StreamerProfileEditCoin.enabled'));\n            toggleReward();\n        }\n    }\n\n    const toggleReward = async () => {\n        setSavingChanges(true);\n        const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n        if (userTokensUpdated.data.status === 200) {\n            const userCredentialsUpdated = userTokensUpdated.data;\n            updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n            const rewardUpdated = await updateCustomReward(\n                user.id,\n                userCredentialsUpdated.access_token,\n                rewardId,\n                {\n                    is_paused: reactionsEnabled\n                }\n            );\n\n            if (rewardUpdated.status === 200) {\n                setAlertSetting(user.uid, 'reactionsEnabled', !rewardUpdated.is_paused);\n                setReactionsEnabled(!rewardUpdated.is_paused);\n                setTitleCheckbox(t(!rewardUpdated.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'))\n            } else {\n                switch (rewardUpdated.status) {\n                    case 404:\n                        // Not found (maybe the reward was removed from Twitch)\n                        break;\n                    case 500:\n                        // Twitch internal server error (could not update because of Twitch)\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            setSavingChanges(false);\n        } else {\n            switch (userTokensUpdated.data.status) {\n                case 401:\n                    // Invalid refresh token (need to sign in again)\n                    handleExpiredSession();\n                    break;\n                case 500:\n                    // Twitch internal server error\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    return (\n        <div className={style.containerItereractions}>\n            <h1 className={style.Titulo}>\n                {t('StreamerProfile.StreamerProfileEditCoin.reactions')}\n            </h1>\n            {rewardId !== '' && !savingChanges ?\n                <>\n                <StreamerProfileImgCoin rewardCost={rewardCost} backgroundColor={rewardBackgroundColor} />\n                <div className={style.content_input}>\n                    <div className={style.input}>\n                        {ActiveEditTitle ?\n                            <>\n                            <input\n                                className={style.Visibility_input}\n                                type=\"text\"\n                                maxLength={18}\n                                autoFocus\n                                value={rewardName}\n                                onChange={(event) => setRewardName(event.target.value)}\n                                onKeyPress={saveData} />\n                            <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <ConfirmChange />\n                            </Button>\n                            </>\n                            :\n                            <>\n                            <p className={style.p}>\n                                {rewardName}\n                            </p>\n                            <Button onClick={() => setActiveEditTitle(!ActiveEditTitle)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <img src={iconEdit} alt=\"icons-edit\" />\n                            </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.input}>\n                        {ActiveEditCoins ?\n                            <>\n                            <input\n                                className={style.Visibility_input}\n                                type=\"number\"\n                                autoFocus\n                                value={rewardCost}\n                                onChange={(event) => setRewardCost(event.target.value || 0)}\n                                onKeyPress={saveData} />\n                                <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                    <ConfirmChange />\n                                </Button>\n                            </>\n                            :\n                            <>\n                            <p className={style.p}>\n                                {rewardCost.toLocaleString()}\n                            </p>\n                            <Button onClick={() => setActiveEditCoins(!ActiveEditCoins)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <img src={iconEdit} alt=\"icons-edit\" />\n                            </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.disableInteractions}>\n                        <p className={style.p}>{t('StreamerProfile.StreamerProfileEditCoin.reactions')} {titleCheckbox}</p>\n                        <input\n                            className={style.input_checkbox}\n                            type=\"checkbox\"\n                            id=\"boton\"\n                            checked={reactionsEnabled}\n                            onChange={(e) => handleCheckbox(e)}\n                        />\n                        <label for=\"boton\"></label>\n                    </div>\n                </div>\n                </>\n            :\n                <div style={{ display: 'flex', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n                    <CircularProgress className={classes.circularProgress} size={25} />\n                </div>\n            }\n            <Modal className={style.modalContainer}\n                open={modal}\n                onClose={() => setModal(false)}>\n                <StreamerProfileModalDisableInteractions closeDialog={() => setModal(false)}\n                    disableReward={toggleReward}\n                    setReactionsEnabled={setReactionsEnabled}\n                    setTitleCheckbox={setTitleCheckbox} />\n            </Modal>\n        </div>\n    );\n};\n\nexport default StreamerProfileEditCoin;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],["215","216"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx",["217","218"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],["219","220"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["221"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;",["222","223"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",["224"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\nimport { notifyActivationWithReferralCode } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    containerStyle: {\n        padding: 0\n    },\n    background: {\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        minHeight: '100vh',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    card: {\n        backgroundColor: '#141833',\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\n        borderRadius: '35px',\n        [theme.breakpoints.up('md')]: {\n            width: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        paddingTop: 24,\n        paddingBottom: 0\n    },\n    title: {\n        fontWeight: '600',\n        fontSize: '18px',\n        lineHeight: '32px',\n        textAlign: 'center',\n        color: '#FFFFFF',\n        whiteSpace: 'pre-line'\n    },\n    instructions: {\n        marginTop: 15,\n        fontWeight: '400',\n        fontSize: '14px',\n        lineHeight: '22px',\n        textAlign: 'center',\n        color: '#8F9BBA',\n        whiteSpace: 'pre-line'\n    },\n    textInput: {\n        textAlign: 'center',\n        paddingTop: 12,\n        paddingBottom: 12\n    },\n    activeFreeTrialButton: {\n        marginTop: 32,\n        backgroundColor: '#3B4BF9',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        },\n        marginBottom: 60\n    },\n    noCode: {\n        textAlign: 'center',\n        width: '100%',\n        marginTop: 32,\n        fontWeight: '600',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    referralProgram: {\n        textAlign: 'center',\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        marginTop: 32,\n        fontWeight: '400',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    subscribeButton: {\n        marginTop: 40,\n        backgroundColor: '#00FFDD',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    subscribeButtonCointainer: {\n        marginBottom: 24,\n        marginTop: 180\n    }\n}));\n\nconst RequestActivation = ({ user, onSuccessActivation }) => {\n    const [referralCode, setReferralCode] = useState('');\n    const [validatingCode, setValidatingCode] = useState(false);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    const validateCode = async () => {\n        if (user.broadcasterType === '') {\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        setValidatingCode(true);\n        if (referralCode) {\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\n            if (referrerUid) {\n                if (referrerUid !== user.uid) {\n                    if (!user.referredBy) {\n                        activateFreeTrialWithReferralCode(referrerUid, {\n                            redemptionsPerStream: 40,\n                            streamsIncluded: 2\n                        });\n                    } else {\n                        setValidatingCode(false);\n                        alert('Ya usaste un código de referido antes');\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('No puedes usar tu propio código');\n                }\n            } else {\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\n                if (invitationCodeSnap.exists()) {\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('Código invalido');\n                }\n            }\n        } else {\n            setValidatingCode(false);\n        }\n    }\n\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n        await updateStreamerProfile(user.uid, {\n            referredBy: referrerUid,\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\n\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\n\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\n\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n         await updateStreamerProfile(user.uid, {\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await removeInvitationCode(code);\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\n            <div className={classes.background}>\n                <div>\n                <Card className={classes.card}>\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\n                    </div>\n                    <CardContent>\n                        <p className={classes.title}>\n                            {t('RequestActivation.title')} 🚀\n                        </p>\n                        <p className={classes.instructions}>\n                            {validatingCode || !user.referredBy ?\n                                <>\n                                    {t('RequestActivation.descriptionP1')}\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\n                                    {t('RequestActivation.descriptionP2')}\n                                </>\n                                :\n                                t('RequestActivation.buyAMembership')\n                            }\n                        </p>\n                        {validatingCode || !user.referredBy ?\n                            <>\n                                <StreamerTextInput\n                                    placeholder={t('RequestActivation.referralCode')}\n                                    fullWidth\n                                    containerStyle={{ marginTop: 24 }}\n                                    classes={{ input: classes.textInput }}\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\n                                    value={referralCode}\n                                    onChange={(e) => setReferralCode(e.target.value)} />\n                                {validatingCode ?\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\n                                    </div>\n                                    :\n                                    <Button\n                                        onClick={validateCode}\n                                        fullWidth\n                                        classes={{\n                                            root: classes.activeFreeTrialButton\n                                        }}>\n                                        {t('RequestActivation.startFreeTrial')}\n                                    </Button>\n                                }\n                            </>\n                            :\n                            <div className={classes.subscribeButtonCointainer}>\n                                <Button\n                                    fullWidth\n                                    onClick={() => history.push('/membership')}\n                                    classes={{ root: classes.subscribeButton }}>\n                                    {t('RequestActivation.subscribe')}\n                                </Button>\n                            </div>\n                        }\n                    </CardContent>\n                </Card>\n                {validatingCode || !user.referredBy ?\n                    <>\n                        <p className={classes.noCode}>\n                            {t('RequestActivation.dontHaveACode')}\n                        </p>\n                        <Button\n                            fullWidth\n                            onClick={() => history.push('/membership')}\n                            classes={{ root: classes.subscribeButton }}>\n                            {t('RequestActivation.subscribe')}\n                        </Button>\n                    </>\n                    :\n                    <p className={classes.referralProgram}>\n                        {t('RequestActivation.referralProgramP1')}\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\n                        {t('RequestActivation.referralProgramP2')}\n                    </p>\n                }\n                </div>\n            </div>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default RequestActivation;\n",["225","226"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["227","228","229","230"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["231","232"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["233","234","235","236"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx",[],["237","238"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["239","240"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["241","242","243","244","245"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(4) + 1,\n        paddingTop: theme.spacing(4) + 1,\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],["246","247"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["248"],"import React, { useState, useEffect } from 'react';\nimport {\n    makeStyles,\n    Grid,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    withStyles,\n    Avatar,\n    Hidden,\n    InputLabel,\n    InputAdornment\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next'\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\nimport { ReactComponent as EyeIcon } from './../../assets/EyeIcon.svg';\nimport { ReactComponent as DownloadIcon } from './../../assets/DownloadIcon.svg';\n\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport BackButton from '../BackButton/BackButton';\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate } from '../../services/database';\nimport { sednPushNotificationToTopic } from '../../services/functions';\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: '24px',\n        color: '#FFF'\n    },\n    description: {\n        fontSize: '12px',\n        color: 'rgba(255,255,255,0.60)',\n        lineHeight: '18px',\n        paddingRight: '16px',\n        marginTop: '16px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        marginTop: '32px'\n    },\n    containerTextArea: {\n        marginRight: '2.5rem'\n    },\n    textArea: {\n        paddingTop: '1rem'\n    },\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    participantsColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'center'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginBottom: 16\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst SectionHeader = ({ title, description }) => {\n    const classes = useStyles();\n\n    return (\n        <div style={{ marginTop: '48px' }}>\n            <p className={classes.title}>\n                {title}\n            </p>\n            <p className={classes.description}>\n                {description}\n            </p>\n        </div>\n    );\n};\n\nconst EditStreamerEvent = ({ user }) => {\n    const { streamType } = useLocation().state;\n    const { streamId } = useParams();\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\n    const [notificationBody, setNotificationBody] = useState('');\n    const [participantsList, setParticipantsList] = useState({});\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function setStreamData() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\n                if (timeStamp.exists()) {\n                    setSelectedDate(new Date(timeStamp.val()));\n                    setDisplayDate(new Date(timeStamp.val()));\n                    setFirstTimestamp(new Date(timeStamp.val()));\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\n                }\n            }\n        }\n\n        async function setStreamParticipantsList() {\n            const participantsList = await getStreamParticipantsList(streamId);\n            if (participantsList.exists()) {\n                setParticipantsList(participantsList.val());\n            }\n        }\n\n        async function setStreamTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n                setTitle(title.val());\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                if (user.uid) {\n                    const title = await getPastStreamTitle(user.uid, streamId);\n                    setTitle(title.val());\n                }\n            }\n        }\n\n        setStreamData();\n        setStreamParticipantsList();\n        setStreamTitle();\n    }, [streamId, streamType, user]);\n\n    const sendNotification = async () => {\n        const bodys = {\n            es: notificationBody,\n            en: notificationBody\n        };\n\n        const titles = {\n            es: title['en'],\n            en: title['en']\n        };\n\n        try {\n            sednPushNotificationToTopic(streamId, titles, bodys);\n            alert(t('EditStream.alerts.sent'));\n            setNotificationBody('');\n        } catch (error) {\n            alert(t('EditStream.alerts.errorSent'));\n        }\n    }\n\n    const onChangeNotificationBody = (e) => {\n        const body = e.target.value;\n        if (body.length <= 140) {\n            setNotificationBody(body);\n        }\n    }\n\n    const saveDate = async () => {\n        if (selectedDate) {\n            const minValidDate = new Date().getTime() + 300000;\n            if (selectedDate.getTime() >= minValidDate) {\n                const dateRef = new Date(selectedDate);\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\n\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\n\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\n\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\n                let localHour = `${localHours}:${localMinutes}`;\n\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\n                alert(t('EditStream.alerts.updated'));\n            } else {\n                alert(t('EditStream.alerts.errorDate'))\n            }\n        } else {\n            alert(t('EditStream.alerts.errorDate'));\n        }\n    }\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid xs={12}>\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\n                        onClick={history.goBack} />\n                </Grid>\n                {streamType === SCHEDULED_EVENT_TYPE &&\n                    <>\n                        <Grid xs={6}>\n                            <SectionHeader\n                                title={t('EditStream.change')}\n                                description={t('EditStream.changeDesc')} />\n                            <Grid item sm={12}>\n                                <Grid container>\n                                    {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\n                                        <></>\n                                        :\n                                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                                            <Grid container style={{\n                                                marginTop: '24px'\n                                            }}>\n                                                <Grid item sm={7} md={4} spacing={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.date')}\n                                                    </InputLabel>\n                                                    <KeyboardDatePicker\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        open={calendarOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\n                                                        onClose={() => setCalendarOpen(false)}\n                                                        clearable\n                                                        disablePast\n                                                        disableToolbar\n                                                        autoOk\n                                                        value={displayDate}\n                                                        placeholder='10-10-2021'\n                                                        onChange={handleDateChange}\n                                                        minDate={new Date()}\n                                                        format='DD-MM-YY ddd'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <CalendarIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                                <div style={{ minWidth: '16px' }} />\n                                                <Grid item sm={7} md={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.time')}\n                                                    </InputLabel>\n                                                    <KeyboardTimePicker\n                                                        open={clockOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\n                                                        onOpen={() => { }}\n                                                        onClose={() => setClockOpen(false)}\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        autoOk\n                                                        error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\n                                                        value={displayDate}\n                                                        placeholder='08:00 AM'\n                                                        onChange={handleDateChange}\n                                                        // mask='__:__ _M'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <TimeIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </MuiPickersUtilsProvider>\n                                    }\n                                    <ContainedButton className={classes.button}\n                                        onClick={saveDate}\n                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime()}>\n                                        {t('EditStream.save')}\n                                    </ContainedButton>\n                                </Grid>\n                            </Grid>\n                            <SectionHeader title={t('EditStream.sendMessage')}\n                                description={t('EditStream.sendMessageDesc')} />\n                            <Grid item md={12} style={{\n                                marginTop: '24px'\n                            }}>\n                                <StreamerTextInput placeholder={t('EditStream.limit')}\n                                    multiline\n                                    rows={3}\n                                    fullWidth\n                                    textInputClassName={classes.textArea}\n                                    containerClassName={classes.containerTextArea}\n                                    value={notificationBody}\n                                    onChange={onChangeNotificationBody} />\n                                <ContainedButton className={classes.button}\n                                    onClick={sendNotification}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                                </ContainedButton>\n                            </Grid>\n                        </Grid>\n                        {/** To define how this section is going to work\n                            <Grid xs={6}>\n                                <SectionHeader title='Private Rooms'\n                                    description='If you are hosting a private room and want to give access to the participants of the event, you can share the ID with them directly in the Qapla app. Participants will get a notification to see the ID.' />\n                                <StreamerTextInput label='ID'\n                                    placeholder='ID' />\n                                <br/>\n                                <ContainedButton className={classes.button}>\n                                    Send\n                                </ContainedButton>\n                            </Grid>\n                        */}\n                    </>\n                }\n                <Grid xs={12}>\n                    <SectionHeader title={t('EditStream.participants')} />\n                    <TableContainer className={classes.tableContainer}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCellStyled align='center' padding='checkbox'>\n                                        <ProfileIcon />\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.twitch')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.game')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.qapla')}</TableCellStyled>\n                                    <TableCellStyled className={classes.participantsColumn}>\n                                        <EyeIcon /> <p>{Object.keys(participantsList).length}</p>\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>\n                                        <ContainedButton\n                                            startIcon={<DownloadIcon />}>\n                                            {t('EditStream.table.download')}\n                                        </ContainedButton>\n                                    </TableCellStyled>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {Object.keys(participantsList).map((participantUid, index) => (\n                                    <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\n                                        key={`Participant-${participantUid}`}>\n                                        <TableCellStyled align='center' className={classes.firstCell}>\n                                            <Avatar className={classes.avatar} />\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled className={classes.lastCell}>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n            </Grid>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default EditStreamerEvent;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["249"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["250","251","252"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n        if (initialLabel && value === undefined) {\n            setSelectedLabel(initialLabel);\n        }\n    }, [data, initialLabel, value])\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["253","254"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",["255","256"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["257","258","259"],{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":273,"column":21,"nodeType":"266","messageId":"267","endLine":273,"endColumn":31},{"ruleId":"268","severity":1,"message":"269","line":457,"column":8,"nodeType":"270","endLine":457,"endColumn":14,"suggestions":"271"},{"ruleId":"264","severity":1,"message":"272","line":418,"column":11,"nodeType":"266","messageId":"267","endLine":418,"endColumn":26},{"ruleId":"268","severity":1,"message":"273","line":71,"column":8,"nodeType":"270","endLine":71,"endColumn":46,"suggestions":"274"},{"ruleId":"260","replacedBy":"275"},{"ruleId":"262","replacedBy":"276"},{"ruleId":"277","severity":1,"message":"278","line":520,"column":65,"nodeType":"279","endLine":520,"endColumn":80},{"ruleId":"277","severity":1,"message":"278","line":526,"column":29,"nodeType":"279","endLine":526,"endColumn":44},{"ruleId":"260","replacedBy":"280"},{"ruleId":"262","replacedBy":"281"},{"ruleId":"282","severity":1,"message":"283","line":16,"column":1,"nodeType":"284","endLine":16,"endColumn":52},{"ruleId":"260","replacedBy":"285"},{"ruleId":"262","replacedBy":"286"},{"ruleId":"264","severity":1,"message":"287","line":1,"column":17,"nodeType":"266","messageId":"267","endLine":1,"endColumn":26},{"ruleId":"260","replacedBy":"288"},{"ruleId":"262","replacedBy":"289"},{"ruleId":"264","severity":1,"message":"290","line":33,"column":12,"nodeType":"266","messageId":"267","endLine":33,"endColumn":40},{"ruleId":"268","severity":1,"message":"291","line":102,"column":8,"nodeType":"270","endLine":102,"endColumn":38,"suggestions":"292"},{"ruleId":"264","severity":1,"message":"293","line":110,"column":11,"nodeType":"266","messageId":"267","endLine":110,"endColumn":39},{"ruleId":"277","severity":1,"message":"278","line":135,"column":117,"nodeType":"279","endLine":135,"endColumn":132},{"ruleId":"260","replacedBy":"294"},{"ruleId":"262","replacedBy":"295"},{"ruleId":"264","severity":1,"message":"296","line":125,"column":27,"nodeType":"266","messageId":"267","endLine":125,"endColumn":43},{"ruleId":"264","severity":1,"message":"297","line":126,"column":24,"nodeType":"266","messageId":"267","endLine":126,"endColumn":37},{"ruleId":"264","severity":1,"message":"298","line":131,"column":28,"nodeType":"266","messageId":"267","endLine":131,"endColumn":45},{"ruleId":"299","severity":1,"message":"300","line":270,"column":103,"nodeType":"301","messageId":"302","endLine":270,"endColumn":105},{"ruleId":"260","replacedBy":"303"},{"ruleId":"262","replacedBy":"304"},{"ruleId":"268","severity":1,"message":"291","line":179,"column":8,"nodeType":"270","endLine":179,"endColumn":14,"suggestions":"305"},{"ruleId":"306","severity":1,"message":"307","line":235,"column":25,"nodeType":"308","endLine":235,"endColumn":49},{"ruleId":"264","severity":1,"message":"309","line":4,"column":5,"nodeType":"266","messageId":"267","endLine":4,"endColumn":11},{"ruleId":"264","severity":1,"message":"310","line":5,"column":5,"nodeType":"266","messageId":"267","endLine":5,"endColumn":12},{"ruleId":"264","severity":1,"message":"311","line":6,"column":5,"nodeType":"266","messageId":"267","endLine":6,"endColumn":9},{"ruleId":"264","severity":1,"message":"312","line":7,"column":5,"nodeType":"266","messageId":"267","endLine":7,"endColumn":11},{"ruleId":"264","severity":1,"message":"313","line":14,"column":8,"nodeType":"266","messageId":"267","endLine":14,"endColumn":23},{"ruleId":"260","replacedBy":"314"},{"ruleId":"262","replacedBy":"315"},{"ruleId":"264","severity":1,"message":"316","line":13,"column":5,"nodeType":"266","messageId":"267","endLine":13,"endColumn":11},{"ruleId":"282","severity":1,"message":"283","line":26,"column":1,"nodeType":"284","endLine":26,"endColumn":51},{"ruleId":"264","severity":1,"message":"317","line":4,"column":5,"nodeType":"266","messageId":"267","endLine":4,"endColumn":14},{"ruleId":"264","severity":1,"message":"318","line":5,"column":5,"nodeType":"266","messageId":"267","endLine":5,"endColumn":17},{"ruleId":"264","severity":1,"message":"319","line":6,"column":5,"nodeType":"266","messageId":"267","endLine":6,"endColumn":15},{"ruleId":"264","severity":1,"message":"320","line":7,"column":28,"nodeType":"266","messageId":"267","endLine":7,"endColumn":37},{"ruleId":"264","severity":1,"message":"321","line":21,"column":11,"nodeType":"266","messageId":"267","endLine":21,"endColumn":18},{"ruleId":"264","severity":1,"message":"322","line":26,"column":7,"nodeType":"266","messageId":"267","endLine":26,"endColumn":35},{"ruleId":"323","severity":1,"message":"324","line":589,"column":9,"nodeType":"325","messageId":"326","endLine":589,"endColumn":14},{"ruleId":"264","severity":1,"message":"327","line":7,"column":28,"nodeType":"266","messageId":"267","endLine":7,"endColumn":38},{"ruleId":"264","severity":1,"message":"328","line":228,"column":27,"nodeType":"266","messageId":"267","endLine":228,"endColumn":43},{"ruleId":"268","severity":1,"message":"329","line":244,"column":8,"nodeType":"270","endLine":244,"endColumn":44,"suggestions":"330"},"no-native-reassign",["331"],"no-negated-in-lhs",["332"],"no-unused-vars","'setBalance' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["333"],"'shareStreamLink' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["334"],["331"],["332"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["331"],["332"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["331"],["332"],"'useEffect' is defined but never used.",["331"],["332"],"'openTermsAndConditionsDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["335"],"'closeTermsAndConditionsModal' is assigned a value but never used.",["331"],["332"],"'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","'setDropsForStream' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["331"],["332"],["336"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.",["331"],["332"],"'Hidden' is defined but never used.","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","'streamerCustomMediaForCheers' is assigned a value but never used.","no-dupe-keys","Duplicate key 'media'.","ObjectExpression","unexpected","'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["337"],"no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"348","text":"349"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"350","text":"351"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"352","text":"353"},"Update the dependencies array to be: [query, t, user]",{"range":"354","text":"355"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"356","text":"357"},[17811,17817],"[setPendingMessages, user]",[3563,3601],"[user.uid, user.id, user.refreshToken, t, history]",[4606,4636],"[user, history, isLoadingAuth, query, t]",[4767,4773],"[query, t, user]",[6805,6841],"[streamStarted, dots, enablingQoins, stream]"]
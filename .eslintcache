[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"37"},{"size":23358,"mtime":1662505921488,"results":"38","hashOfConfig":"39"},{"size":20005,"mtime":1662492583810,"results":"40","hashOfConfig":"39"},{"size":3364,"mtime":1662483862589,"results":"41","hashOfConfig":"39"},{"size":36131,"mtime":1662494776153,"results":"42","hashOfConfig":"39"},{"size":1953,"mtime":1662503046850,"results":"43","hashOfConfig":"39"},{"size":4069,"mtime":1662502860578,"results":"44","hashOfConfig":"39"},{"size":20857,"mtime":1662491719873,"results":"45","hashOfConfig":"39"},{"size":8372,"mtime":1662492592857,"results":"46","hashOfConfig":"39"},{"size":4014,"mtime":1661972327670,"results":"47","hashOfConfig":"39"},{"size":835,"mtime":1642711713952,"results":"48","hashOfConfig":"39"},{"size":34471,"mtime":1659995821173,"results":"49","hashOfConfig":"39"},{"size":2473,"mtime":1662477283940,"results":"50","hashOfConfig":"39"},{"size":11901,"mtime":1661972327656,"results":"51","hashOfConfig":"39"},{"size":5675,"mtime":1661974732629,"results":"52","hashOfConfig":"39"},{"size":1002,"mtime":1662503098697,"results":"53","hashOfConfig":"39"},{"size":7544,"mtime":1650310829994,"results":"54","hashOfConfig":"39"},{"size":362,"mtime":1614731664838,"results":"55","hashOfConfig":"39"},{"size":25007,"mtime":1662477283934,"results":"56","hashOfConfig":"39"},{"size":14755,"mtime":1659986034550,"results":"57","hashOfConfig":"39"},{"size":2185,"mtime":1661972327672,"results":"58","hashOfConfig":"39"},{"size":4314,"mtime":1662477283938,"results":"59","hashOfConfig":"39"},{"size":6609,"mtime":1662477283934,"results":"60","hashOfConfig":"39"},{"size":870,"mtime":1650310830028,"results":"61","hashOfConfig":"39"},{"size":16521,"mtime":1661972327653,"results":"62","hashOfConfig":"39"},{"size":1505,"mtime":1662223237485,"results":"63","hashOfConfig":"39"},{"size":9052,"mtime":1662477283942,"results":"64","hashOfConfig":"39"},{"size":1592,"mtime":1650310830008,"results":"65","hashOfConfig":"39"},{"size":3844,"mtime":1650310830005,"results":"66","hashOfConfig":"39"},{"size":3326,"mtime":1661972327650,"results":"67","hashOfConfig":"39"},{"size":527,"mtime":1636998131402,"results":"68","hashOfConfig":"39"},{"size":6604,"mtime":1662503875001,"results":"69","hashOfConfig":"39"},{"size":1288,"mtime":1648248621496,"results":"70","hashOfConfig":"39"},{"size":383,"mtime":1650310830005,"results":"71","hashOfConfig":"39"},{"size":4817,"mtime":1662505611357,"results":"72","hashOfConfig":"39"},{"size":1520,"mtime":1654019625276,"results":"73","hashOfConfig":"39"},{"size":503,"mtime":1662477283937,"results":"74","hashOfConfig":"39"},{"size":9694,"mtime":1661972327657,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rfo3np",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["158","159","160"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],["161","162"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",["163","164"],"import { database, databaseServerValue } from './firebase';\n\nconst gamesRef = database.ref('/GamesResources');\nconst InvitationCodeRef = database.ref('/InvitationCode');\nconst userStreamersRef = database.ref('/UserStreamer');\nconst streamsApprovalRef = database.ref('/StreamsApproval');\nconst streamersEventsDataRef = database.ref('/StreamersEventsData');\nconst streamsRef = database.ref('/eventosEspeciales').child('eventsData');\nconst streamersHistoryEventsDataRef = database.ref('/StreamersHistoryEventsData');\nconst streamParticipantsRef = database.ref('/EventParticipants');\nconst userRef = database.ref('/Users');\nconst redeemedCustomRewardsRef = database.ref('/RedeemedCustomRewards');\nconst activeCustomRewardsRef = database.ref('/ActiveCustomRewards');\nconst redemptionsListsRef = database.ref('/RedemptionsLists');\nconst streamersDonationsRef = database.ref('/StreamersDonations');\nconst premiumEventsSubscriptionRef = database.ref('/PremiumEventsSubscription');\nconst streamersDonationsTestRef = database.ref('/StreamersDonationsTest');\nconst paymentsToStreamersHistory = database.ref('/PaymentsToStreamersHistory');\nconst streamerLinksRef = database.ref('/StreamerLinks');\nconst streamsPackagesRef = database.ref('/StreamsPackages');\nconst streamersSubscriptionsDetailsRef = database.ref('/StreamersSubscriptionsDetails');\nconst streamersPublicProfilesRef = database.ref('/StreamersPublicProfiles');\nconst subscriptionPurchaseDetailsRef = database.ref('/SubscriptionPurchaseDetails');\nconst tagsRef = database.ref('/Tags');\nconst streamerAlertsSettingsRef = database.ref('/StreamerAlertsSettings');\nconst streamerCustomMediaForCheers = database.ref('/StreamerCustomMediaForCheers');\nconst qoinsToBitForStreamersRef = database.ref('/QoinsToBitForStreamers');\nconst qlanesRef = database.ref('/Qlanes');\nconst qreatorsCodesRef = database.ref('/QreatorsCodes');\nconst qaplaChallengeRef = database.ref('/QaplaChallenge');\nconst qStoreRef = database.ref('/QStore');\nconst userStreamerPublicDataRef = database.ref('/UserStreamerPublicData');\nconst streamersInteractionsRewardsRef = database.ref('/StreamersInteractionsRewards');\nconst streamerReactionTestMediaRef = database.ref('StreamerReactionTestMedia');\nconst giphyTextRequestsRef = database.ref('/GiphyTextRequests');\nconst streamerCashOutRef = database.ref('/StreamersCashOut');\n\n/**\n * Load all the games ordered by platform from GamesResources\n * database node\n */\nexport async function loadQaplaGames() {\n    return (await gamesRef.once('value')).val();\n}\n\nexport function loadStreamerProfile(uid, dataHandler) {\n    userStreamersRef.child(uid).on('value', (streamerData) => {\n        if (streamerData.exists()) {\n            dataHandler(streamerData.val());\n        }\n    });\n}\n\n/**\n  * Check if the invitation code exists\n  * @param {string} invitationCode Random invitation code\n  */\n export async function invitationCodeExists(invitationCode) {\n    if (invitationCode) {\n        return (await InvitationCodeRef.child(invitationCode).once('value')).exists();\n    }\n\n    return false;\n}\n\n/**\n * Get the invitationCode node information (users with free trials code have special fields)\n * @param {string} invitationCode Random invitation code\n */\nexport async function getInvitationCodeParams(invitationCode) {\n    return await InvitationCodeRef.child(invitationCode).once('value');\n}\n\n/**\n * Removes the given invitation code from database\n * @param {string} invitationCode Invitation code\n */\nexport async function removeInvitationCode(invitationCode) {\n    return await InvitationCodeRef.child(invitationCode).remove();\n}\n\n/**\n * Return true if the streamer id exists\n * @param {string} uid Streamer Identifier\n */\nexport async function streamerProfileExists(uid) {\n    return (await userStreamersRef.child(uid).once('value')).exists();\n}\n\n/**\n * Creates the profile for the streamer\n * @param {string} uid User Identifier\n * @param {object} userData Data to save\n */\nexport async function createStreamerProfile(uid, userData) {\n    if (userData.isNewUser) {\n        delete userData.isNewUser;\n        if (!userData.email) {\n            userData.email = '';\n        }\n    }\n\n    return await userStreamersRef.child(uid).update(userData);\n}\n\n/**\n * Update the streamer private and public (if exists) profile with the given data\n * @param {string} uid User identifier\n * @param {object} userData Data to update\n */\nexport async function updateStreamerProfile(uid, userData) {\n    await userStreamersRef.child(uid).update(userData);\n\n    if (userData.displayName && userData.photoUrl) {\n        const broadcasterType = userData.broadcasterType ? userData.broadcasterType : {};\n        await updateUserStreamerPublicData(uid, {\n            displayName: userData.displayName,\n            photoUrl: userData.photoUrl,\n            displayNameLowerCase: userData.displayName.toLowerCase(),\n            broadcasterType\n        });\n\n        const publicProfile = await streamersPublicProfilesRef.child(uid).once('value');\n        if (publicProfile.exists()) {\n            await streamersPublicProfilesRef.child(uid).update({\n                displayName: userData.displayName,\n                displayNameLowerCase: userData.displayName.toLowerCase(),\n                photoUrl: userData.photoUrl,\n                broadcasterType\n            });\n        }\n    }\n}\n\n/**\n * Update the data on the User Streamer Public Data node\n * @param {string} uid User identifier\n * @param {object} streamerData Data to update\n */\nexport async function updateUserStreamerPublicData(uid, streamerData) {\n    await userStreamerPublicDataRef.child(uid).update(streamerData);\n}\n\n/**\n * Gets the uid of the streamer using theit twitchId\n * @param {string} twitchId Twitch id of the streamer\n */\nexport async function getStreamerUidWithTwitchId(twitchId) {\n    const streamerSnapshot = await userStreamersRef.orderByChild('id').equalTo(twitchId).once('value');\n    let uid = '';\n    streamerSnapshot.forEach((streamer) => {\n        uid = streamer.key;\n    });\n\n    return uid;\n}\n\n/**\n * Save on the streamer profile and in the active custom rewards node a new custom reward created with the\n * dashboard\n * @param {string} uid User identifier\n * @param {string} rewardName String name to identify on the database\n * @param {string} rewardId New custom reward identifier\n * @param {string} title Title of the new reward\n * @param {number} cost Cost (in bits) of the new reward\n * @param {string} streamId Id of the stream event\n */\nexport async function saveStreamTwitchCustomReward(uid, rewardName, rewardId, streamId, webhookId) {\n    const webhookIdKey = `${rewardName}WebhookId`;\n\n    // Timestamp will be overwritten because we used it as a \"last reward created\" record\n    await activeCustomRewardsRef.child(streamId).update({ streamerUid: uid, [rewardName]: rewardId, timestamp: (new Date()).getTime(), [webhookIdKey]: webhookId });\n}\n\n/**\n * Updates an Active Custom Reward node with given rewardsData object\n * @param {string} streamId Stream identifier\n * @param {object} rewardsData Data to update\n */\nexport async function updateActiveCustomReward(streamId, rewardsData) {\n    return await activeCustomRewardsRef.child(streamId).update(rewardsData);\n}\n\n/**\n * Gets the information about the given active event\n * @param {string} streamId Stream identifier\n */\nexport async function checkActiveCustomReward(streamId) {\n    return await activeCustomRewardsRef.child(streamId).once('value');\n}\n\n/**\n * Listen to the value of qoinsEnabled flag\n * @param {string} streamId Stream identifier\n * @param {function} callback Function to handle listener results\n */\nexport function listenToQoinsEnabled(streamId, callback) {\n    activeCustomRewardsRef.child(streamId).child('qoinsEnabled').on('value', callback);\n}\n\nexport function removeQoinsEnabledListener(streamId) {\n    activeCustomRewardsRef.child(streamId).child('qoinsEnabled').off('value');\n}\n\n/**\n * Create a stream request in the nodes StreamersEvents and StreamsApproval\n * @param {string} uid User identifier\n * @param {object} streamerData Streamer data object\n * @param {string} game Selected game for the stream\n * @param {string} date Date in format DD-MM-YYYY\n * @param {string} hour Hour in format hh:mm\n * @param {string} streamType One of 'exp' or 'tournament'\n * @param {timestamp} timestamp Timestamp based on the given date and hour\n * @param {object} optionalData Customizable data for events\n * @param {number} createdAt timestamp of when the request was created\n * @param {string} stringDate Temporary field just to detect a bug\n */\nexport async function createNewStreamRequest(uid, streamerData, game, date, hour, streamType, timestamp, optionalData, createdAt, stringDate) {\n    const event = await streamersEventsDataRef.child(uid).push({\n        date,\n        hour,\n        game,\n        status: 1,\n        streamType,\n        timestamp,\n        optionalData,\n        createdAt,\n        stringDate\n    });\n\n    await premiumEventsSubscriptionRef.child(uid).child(event.key).set({\n        approved: false,\n        timestamp\n    });\n\n    return await streamsApprovalRef.child(event.key).set({\n        date,\n        hour,\n        game,\n        idStreamer: uid,\n        streamerName: streamerData.displayName,\n        streamType,\n        timestamp,\n        streamerChannelLink: 'https://twitch.tv/' + streamerData.login,\n        streamerPhoto: streamerData.photoUrl,\n        optionalData,\n        createdAt,\n        stringDate\n    });\n}\n\nexport async function getUserDisplayName(uid) {\n    return await userStreamersRef.child(uid).child('displayName').once('value');\n}\n\n/**\n * Streams\n */\n\n/**\n * Load all the strams of StreamersEventsData based on their value on the status flag\n * @param {string} uid User identifier\n * @param {number} status Value of the status to load\n */\nexport async function loadStreamsByStatus(uid, status) {\n    return await streamersEventsDataRef.child(uid).orderByChild('status').equalTo(status).once('value');\n}\n\n/**\n * Load all the strams of StreamersEventsData based on the given statues\n * @param {string} uid User identifier\n * @param {number} statusStart Status where the query starts\n * @param {number} statusEnd Status where the query end\n */\n export async function loadStreamsByStatusRange(uid, statusStart, statusEnd) {\n    return await streamersEventsDataRef.child(uid).orderByChild('status').startAt(statusStart).endAt(statusEnd).once('value');\n}\n\n/**\n * Removes a stream request of the database\n * @param {string} uid User identifier\n * @param {string} streamId Identifier of the stream to remove\n */\nexport async function cancelStreamRequest(uid, streamId) {\n    await streamersEventsDataRef.child(uid).child(streamId).remove();\n    await streamsApprovalRef.child(streamId).remove();\n    userStreamersRef.child(uid).child('subscriptionDetails').child('streamsRequested').transaction((numberOfRequests) => {\n        if (numberOfRequests) {\n            return numberOfRequests - 1;\n        }\n    });\n}\n\n/**\n * Update the status in the StreamersEventsData node\n * @param {string} uid User identifier\n * @param {string} streamId Streamer identifier\n * @param {number} status New status value\n */\nexport async function updateStreamStatus(uid, streamId, status) {\n    return await streamersEventsDataRef.child(uid).child(streamId).update({ status });\n}\n\n/**\n * Save a copy of the event in the StreamersHistoryEventsData and remove the event from eventosEspeciales/eventsData\n * @param {string} uid User identifier\n * @param {string} streamId Stream identifier\n */\nexport async function removeStreamFromEventsData(uid, streamId) {\n    const streamData = await streamsRef.child(streamId).once('value');\n\n    if (streamData.exists()) {\n        // Save a copy in the streamer event history\n        await streamersHistoryEventsDataRef.child(uid).child(streamId).update(streamData.val());\n        // Admin copy while we test if everything is working\n        database.ref('EventsDataAdmin').child(streamId).update(streamData.val());\n    }\n\n    return await streamsRef.child(streamId).remove();\n}\n\n/**\n * Returns the value of the participantsNumber node of the given stream\n * @param {string} streamId Stream unique identifier\n */\nexport async function getStreamParticipantsNumber(streamId) {\n    return await streamsRef.child(streamId).child('participantsNumber').once('value');\n}\n\n/**\n * Returns the value of the title node of the given stream\n * @param {string} streamId Stream unique identifier\n */\nexport async function getStreamTitle(streamId) {\n    return await streamsRef.child(streamId).child('title').once('value');\n}\n\n/**\n * Returns the value of the timestamp node of the given stream\n * @param {string} streamId Stream unique identifier\n */\nexport async function getStreamTimestamp(streamId) {\n    return await streamsRef.child(streamId).child('timestamp').once('value');\n}\n\n/**\n * Returns all the data of the given stream\n * @param {string} streamId Stream unique identifier\n */\nexport async function loadApprovedStreamTimeStamp(streamId) {\n    return await streamsRef.child(streamId).child('timestamp').once('value');\n}\n\n/**\n * Update the date, hour and timestamps of the given stream\n * @param {string} uid User identifier\n * @param {string} streamId Streamer identifier\n * @param {string} dateUTC Date UTC in format DD-MM-YYYY\n * @param {string} hourUTC Hour UTC in format HH:MM\n * @param {string} date Local Date in format DD-MM-YYYY\n * @param {string} hour Local hour in format HH:MM\n * @param {number} timestamp Timestamp of the dates\n */\nexport async function updateStreamDate(uid, streamId, dateUTC, hourUTC, date, hour, timestamp) {\n    await streamsRef.child(streamId).update({\n        dateUTC,\n        hourUTC,\n        tiempoLimite: date,\n        hour,\n        timestamp\n    });\n\n    const lastTimestamp = await userStreamersRef.child(uid).child('lastStreamTs').once('value');\n    if (!lastTimestamp.exists() || (lastTimestamp.exists() && lastTimestamp.val() < timestamp)) {\n        userStreamersRef.child(uid).update({ lastStreamTs: timestamp });\n    }\n\n    return await streamersEventsDataRef.child(uid).child(streamId).update({\n        date: dateUTC,\n        hour: hourUTC,\n        timestamp\n    });\n}\n\n/**\n * Returns the customRewardsMultipliers object of the given stream\n * @param {string} streamId Stream identifier\n */\nexport async function getStreamCustomRewardsMultipliers(streamId) {\n    return await streamsRef.child(streamId).child('customRewardsMultipliers').once('value');\n}\n\n/**\n * Stream Participants\n */\n\n/**\n * Returns the value of the participantsNumber node of the given past stream\n * @param {string} uid User identifier\n * @param {string} streamId Stream unique identifier\n */\nexport async function getPastStreamParticipantsNumber(uid, streamId) {\n    return await streamersHistoryEventsDataRef.child(uid).child(streamId).child('participantsNumber').once('value');\n}\n\n/**\n * Returns the list of participants of the given stream\n * @param {string} streamId Stream unique identifier\n */\nexport async function getStreamParticipantsList(streamId) {\n    return await streamParticipantsRef.child(streamId).once('value');\n}\n\n/**\n * Returns the value of the participantsNumber node of the given past stream\n * @param {string} uid User identifier\n * @param {string} streamId Stream unique identifier\n */\nexport async function getPastStreamTitle(uid, streamId) {\n    return await streamersHistoryEventsDataRef.child(uid).child(streamId).child('title').once('value');\n}\n\n/**\n * @deprecated\n * @param {string} streamerId Id of the streamer\n * @param {string} streamId Stream identifier in our database\n */\nexport async function getCustomRewardId(streamerId ,streamId) {\n    return await (await userStreamersRef.child(streamerId).child('customRewards').child(streamId).child('rewardId').once('value')).val();\n}\n\n/**\n * Returns the snapshor of the custom reward for the given event\n * @param {string} streamerId Id of the streamer\n * @param {string} streamId Stream identifier in our database\n */\nexport async function getStreamCustomReward(streamerId ,streamId) {\n    return await userStreamersRef.child(streamerId).child('customRewards').child(streamId).once('value');\n}\n\n/**\n * Update the status of the given custom redemption\n * @param {string} streamId Stream identifier in our database\n * @param {string} redemptionId Id of the twitch redemption\n * @param {string} status Status of the redemption\n */\nexport async function updateCustomRewardRedemptionStatus(streamId, redemptionId, status) {\n    await redeemedCustomRewardsRef.child(streamId).child(redemptionId).update({ status });\n}\n\n/**\n * Set a listener for the redeemedCustomRewardsRef/streamId node\n * @param {string} streamId Stream identifier in our database\n * @param {function} callback Handler of the returned data\n */\nexport async function listenCustomRewardRedemptions(streamId, callback) {\n    redeemedCustomRewardsRef.child(streamId).on('value', callback);\n}\n\n/**\n * App users\n */\n\n/**\n * Return a user profile object (node Users in our database) based on their twitchId or null\n * if it does not exist\n * @param {string} twitchId Twitch id\n */\nexport async function getUserByTwitchId(twitchId) {\n    const users = await userRef.orderByChild('twitchId').equalTo(twitchId).once('value');\n    let user = null;\n    users.forEach((qaplaUser) => {\n        user = { ...qaplaUser.val(), id: qaplaUser.key };\n    });\n\n    return user;\n}\n\n/**\n * Remove a stream from te ActiveCustomRewards node\n * @param {string} streamId Stream identifier\n */\nexport async function removeActiveCustomRewardFromList(streamId) {\n    return await activeCustomRewardsRef.child(streamId).remove();\n}\n\nexport async function setStreamInRedemptionsLists(streamId) {\n    const date = new Date();\n    await redemptionsListsRef.child(streamId).set({ timestamp: date.getTime() });\n}\n\nexport async function addListToStreamRedemptionList(streamId, type, list) {\n    await redemptionsListsRef.child(streamId).update({ [type]: list });\n}\n\n/**\n * Listener to check if the streamer is online\n * @param {string} streamerUid Uid of the streamer\n * @param {function} callback Handler of the results\n */\nexport function listenToUserStreamingStatus(streamerUid, callback) {\n    userStreamersRef.child(streamerUid).child('isStreaming').on('value', callback);\n}\n\n/**\n * Streamers Donations and Streamers Donations Tests\n */\n\n/**\n * Listener to get the last x cheers added to the StreamersDonations\n * @param {string} streamerUid Uid of the streamer\n * @param {function} callback Handler of the results\n */\nexport function listenForLastStreamerCheers(streamerUid, limit = 10, callback) {\n    streamersDonationsRef.child(streamerUid).limitToLast(limit).on('value', callback);\n}\n\n/**\n * Listener to get every unread streamer cheer added to the StreamersDonations\n * @param {string} streamerUid Uid of the streamer\n * @param {function} callback Handler of the results\n */\nexport function listenForUnreadStreamerCheers(streamerUid, callback) {\n    streamersDonationsRef.child(streamerUid).orderByChild('read').equalTo(false).on('child_added', callback);\n}\n\n/**\n * Remove listener from the Streamers Donation node\n * @param {string} streamerUid Uid of the streamer\n */\n export function removeListenerForLastStreamerCheers(streamerUid) {\n    streamersDonationsRef.child(streamerUid).off('value');\n}\n\n/**\n * Remove listener from the Streamers Donation node\n * @param {string} streamerUid Uid of the streamer\n */\nexport function removeListenerForUnreadStreamerCheers(streamerUid) {\n    streamersDonationsRef.child(streamerUid).orderByChild('read').equalTo(false).off('child_added');\n}\n\n/**\n * Write a fake cheer on the test cheers node\n * @param {string} streamerUid Streamer unique identifier\n * @param {string} completeMessage Message to show if the operation is succesfuly completed\n * @param {string} errorMessage Message to show if the write operation fails\n */\nexport async function writeTestCheer(streamerUid, completeMessage, errorMessage) {\n    const testMediaArrayLength = await streamerReactionTestMediaRef.child('length').once('value');\n    const index = Math.floor(Math.random() * testMediaArrayLength.val());\n    const media = (await streamerReactionTestMediaRef.child('media').child(index).once('value')).val();\n\n    streamersDonationsTestRef.child(streamerUid).push({\n        media,\n        amountQoins: 0,\n        message: 'Test',\n        timestamp: (new Date()).getTime(),\n        uid: '',\n        read: false,\n        twitchUserName: 'QAPLA',\n        emojiRain: {\n            emojis: ['👋']\n        },\n        media: {\n            id: 'Iz0eDDbIrrItMCp2lO',\n            type: 'gif',\n            url: 'https://media2.giphy.com/media/bGCwmLDnwL25kCg3FV/giphy.gif?cid=4a0959dab7zzbi4dj9xiwv1dvfbut8y76yk7b08sglwcdltp&rid=giphy.gif&ct=g',\n            height: 480,\n            width: 480\n        },\n        messageExtraData: {\n            voiceAPIName: 'pt-BR-Standard-B',\n            giphyText: {\n                url: 'https://text.media.giphy.com/v1/media/giphy.gif?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJrZXkiOiJwcm9kLTIwMjAtMDQtMjIiLCJzdHlsZSI6Im1lbWUiLCJ0ZXh0IjoiQnVlbmFzIGJ1ZW5hcyEiLCJpYXQiOjE2NjE0NDk1NTR9.iDZZaFNXfW7TISZM-eS3ZF76X2RFrp6k5H_BL5BIzU0&cid=025a3d845a80faa3d6f2c679f74e7958b157c9e17aac766e&dynamic_style=meme&rid=giphy.gif&ct=t',\n                height: 300,\n                width: 600\n            }\n        },\n        userName: 'QAPLA',\n        photoURL: ''\n    }, (error) => {\n        if (error) {\n            if (errorMessage) {\n                alert(errorMessage);\n            }\n        } else {\n            if (completeMessage) {\n                alert(completeMessage);\n            }\n        }\n    });\n}\n\n/**\n * Listener for the unread test cheers\n * @param {string} streamerUid Stremer identifier\n * @param {function} callback Function called for every cheer\n */\nexport function listenForTestCheers(streamerUid, callback) {\n    streamersDonationsTestRef.child(streamerUid).orderByChild('read').equalTo(false).on('child_added', callback)\n}\n\n/**\n * Removes the given test donation\n * @param {string} streamerUid Streamer identifier\n * @param {string} donationId Donation identifier\n */\nexport function removeTestDonation(streamerUid, donationId) {\n    streamersDonationsTestRef.child(streamerUid).child(donationId).remove();\n}\n\n/**\n * Mark as read the given donation\n * @param {string} streamerUid Uid of the streamer who receive the donation\n * @param {string} donationId Id of the donation\n */\nexport async function markDonationAsRead(streamerUid, donationId) {\n    return await streamersDonationsRef.child(streamerUid).child(donationId).update({ read: true });\n}\n\n/**\n * Mark as unread and repeating the given donation\n * @param {string} streamerUid Uid of the streamer who receive the donation\n * @param {string} donationId Id of the donation\n */\nexport async function markDonationAsUnreadToRepeat(streamerUid, donationId) {\n    return await streamersDonationsRef.child(streamerUid).child(donationId).update({ read: false, repeating: true });\n}\n\n/**\n * Set to true the isOverlayActive flag of the streamer\n * @param {string} streamerUid Streamer identifier\n */\nexport async function markOverlayAsActive(streamerUid) {\n    return await userStreamerPublicDataRef.child(streamerUid).child('isOverlayActive').set(true);\n}\n\n/**\n * Set to onDisconnect listener for the isOverlayActive flag\n * @param {string} streamerUid Streamer identifier\n */\nexport function onLiveDonationsDisconnect(streamerUid) {\n    userStreamerPublicDataRef.child(streamerUid).child('isOverlayActive').onDisconnect().set(false);\n}\n\n/**\n * Streamers Subscriptions\n */\n\n/**\n * Save the subscription information of the given user\n * @param {string} uid User identifier\n * @param {string} stripeCustomerId Customer Id given by stripe\n * @param {number} periodStart Timestamp of period start (in milliseconds)\n * @param {number} periodEnd Timestamp of period end (in milliseconds)\n */\nexport async function saveSubscriptionInformation(uid, stripeCustomerId, periodStart, periodEnd) {\n    userStreamersRef.child(uid).update({\n        freeTrial: null,\n        premium: true,\n        currentPeriod: {\n            startDate: periodStart,\n            endDate: periodEnd\n        },\n        stripeCustomerId\n    });\n}\n\n/**\n * Add/overwrite the subscriptionDetails information on the given user\n * @param {string} uid User identifier\n * @param {object} subscriptionDetails Subscription details\n */\nexport async function updateSubscriptionDetails(uid, subscriptionDetails) {\n    await userStreamersRef.child(uid).update({ subscriptionDetails });\n}\n/**\n * Get the payments received by the streamer in the giving period\n * @param {string} streamerUid Uid of the streamer\n * @param {number} startTimestamp Lower limit for the time query\n * @param {number} endTimestamp Superior limit for the time query\n */\nexport async function getPeriodStreamerPayments(streamerUid, startTimestamp, endTimestamp) {\n    return await paymentsToStreamersHistory.child(streamerUid).orderByChild('timestamp').startAt(startTimestamp).endAt(endTimestamp).once('value');\n}\n\n/**\n* Streamers Links\n */\n\n/**\n * Saves a link information for the streamer public profile\n * @param {string} streamerUid Uid of the streamer\n * @param {Array} link Array of URLs and titles to save [ { title: 'Twitch', url: 'https://twitch.tv/mr_yuboto' } ]\n */\n export async function saveStreamerLinks(streamerUid, links) {\n    await streamerLinksRef.child(streamerUid).update(links);\n}\n\n/**\n * Get all the links of the given streamer\n * @param {string} streamerUid Uid of the streamer\n */\nexport async function getStreamerLinks(streamerUid) {\n    return await streamerLinksRef.child(streamerUid).once('value');\n}\n\n/**\n * Qoin Reward Redemption counter\n */\n\n/**\n * Returns the value of the qoinsRedemptionsCounter of the given stream\n * @param {string} streamId Streamer identifier\n */\nexport async function getStreamRedemptionCounter(streamId) {\n    return await streamsRef.child(streamId).child('qoinsRedemptionsCounter').once('value');\n}\n\n/**\n * Gets all the packages on the Streams Packages node\n */\nexport async function getStreamsPackages() {\n    return await streamsPackagesRef.once('value');\n}\n\n/**\n * Gets all the subscriptions informations in the Streamers Subscriptions Details node\n */\nexport async function getSubscriptionsDetails() {\n    return await streamersSubscriptionsDetailsRef.once('value');\n}\n\n/**\n * Add a child on the boughtStreams node in the user profile so the user can have more streams independently\n * of the streams that their subscription already included\n * @param {string} streamerUid User identifier\n * @param {number} boughtStreams Number of streams bought by the streamer\n * @param {timestamp} expirationTimestamp Timestamp of the maxim date to use the streams\n */\nexport async function addBoughtStreamsToStreamer(streamerUid, boughtStreams, expirationTimestamp) {\n    await userStreamersRef.child(streamerUid).child('boughtStreams').push({\n        boughtStreams,\n        expirationTimestamp\n    });\n}\n\n/**\n * Add one to the streamsRequested node of the given streamer in their subscriptionDetails\n * (streamsRequested in this node is the counter of events for their included on their subscription streams)\n * @param {string} streamerUid Streamer user identifier\n */\nexport async function addToStreamsRequestedOnSubscriptionDetails(streamerUid) {\n    userStreamersRef.child(streamerUid).child('subscriptionDetails').child('streamsRequested').transaction((numberOfRequests) => {\n        if (!numberOfRequests) {\n            return 1;\n        }\n\n        return numberOfRequests + 1;\n    });\n}\n\n/**\n * Add one to the streamsRequested node of the given streamer in their boughtStreams/{package}\n * (streamsRequested in this node is the counter of events for their package that the user bought)\n * @param {string} streamerUid Streamer user identifier\n */\nexport async function addToStreamsRequestedOnStreamsPackage(streamerUid, packageId) {\n    userStreamersRef.child(streamerUid).child('boughtStreams').child(packageId).child('streamsRequested').transaction((numberOfRequests) => {\n        if (!numberOfRequests) {\n            return 1;\n        }\n\n        return numberOfRequests + 1;\n    });\n}\n\n/**\n * Remove a package of the boughtStreams node in the user profile\n * @param {string} streamerUid Streamer user identifier\n * @param {string} packageId Package identifier\n */\nexport async function removeStreamPackageOfStreamer(streamerUid, packageId) {\n    userStreamersRef.child(streamerUid).child('boughtStreams').child(packageId).remove();\n}\n\n/**\n * Streamers Public Profiles\n */\n\n/**\n * Listen to the specified streamer profile\n * @param {string} uid User identifier\n * @param {function} callback Handler for firebase snapshot\n */\nexport function listenStreamerPublicProfile(uid, callback) {\n    return streamersPublicProfilesRef.child(uid).on('value', callback);\n}\n\n/**\n * Updates the specified streamer profile with the given data\n * @param {string} uid User identifier\n * @param {object} dataToUpdate Data to update on profile\n */\nexport async function updateStreamerPublicProfile(uid, dataToUpdate) {\n    return await streamersPublicProfilesRef.child(uid).update(dataToUpdate);\n}\n\n/**\n * Returns true if the user has a public profile created\n * @param {string} uid User identifier\n */\nexport async function userHasPublicProfile(uid) {\n    return (await streamersPublicProfilesRef.child(uid).once('value')).exists();\n}\n\n/**\n * Subscription Purchase Details\n */\n\n/**\n * Get the details of the given subscription of the specified user\n * @param {string} uid User identifier\n * @param {string} subscriptionId Subscription stripe identifier\n */\nexport async function getSubscriptionPurchaseDetails(uid, subscriptionId) {\n    return await subscriptionPurchaseDetailsRef.child(uid).child(subscriptionId).once('value');\n}\n\n/**\n * Save all the tags on te Tags node\n * @param {object} tags Object of tags in format { tag1: true, tag2: true }\n */\nexport async function saveTags(tags) {\n    await tagsRef.update(tags);\n}\n\n/**\n * Streamer Alerts Settings\n */\n\n/**\n * Set a setting on the Streamer Alert Settings\n * @param {string} uid User identifier\n * @param {string} settingKey Setting to set\n * @param {*} value Value to set\n */\nexport async function setAlertSetting(uid, settingKey, value) {\n    await streamerAlertsSettingsRef.child(uid).child(settingKey).set(value);\n}\n\n/**\n * Get the alerts settings of the given streamer\n * @param {string} uid User identifier\n */\n export async function getStreamerAlertsSettings(uid) {\n    return await streamerAlertsSettingsRef.child(uid).once('value');\n}\n\n/**\n * Listen the alerts settings of the given streamer (useful in the LiveDonations component)\n * @param {string} uid User identifier\n * @param {function} callback Function to handle the response of the listener\n */\nexport function listenToStreamerAlertsSettings(uid, callback) {\n    return streamerAlertsSettingsRef.child(uid).on('value', callback);\n}\n\n/**\n * QoinsToBitForStreamers\n */\n\n/**\n * Get the value of Qoins in bit for the given type of user\n * @param {string} type Type of user (one of premium or freeUser)\n */\nexport async function getStreamerValueOfQoins(type) {\n    return qoinsToBitForStreamersRef.child(type).once('value');\n}\n\n/**\n * Qlanes\n */\n\n/**\n * Returns true if the user has a Qlan\n * @param {string} uid User identifier\n */\nexport async function streamerHasQlan(uid) {\n    return (await qlanesRef.child(uid).once('value')).exists();\n}\n\n/**\n * Creates a Qlan for the given user\n * @param {string} uid User identifier\n * @param {string} code Qreator code\n * @param {string} name Name of the Qlan\n * @param {string} image Image url\n */\nexport async function createQlan(uid, code, name, image) {\n    await qreatorsCodesRef.child(uid).update({ code, codeLowerCase: code.toLowerCase() });\n    return await qlanesRef.child(uid).update({ name, image });\n}\n\n/**\n * Gets the Qreator code of the given user\n * @param {string} uid User identifier\n */\nexport async function getQreatorCode(uid) {\n    return await qreatorsCodesRef.child(uid).child('code').once('value');\n}\n\n/**\n * Returns the id of the Qlan based on the Qreator code\n * @param {string} qreatorCode Unique code to join a Qlan\n */\nexport async function getQlanIdWithQreatorCode(qreatorCode) {\n    let id = '';\n\n    const codes = await qreatorsCodesRef.orderByChild('code').equalTo(qreatorCode).once('value');\n\n    /**\n     * We know this query will return a maximum of one code, however firebase returns an object of objects\n     * so we need to go through it to get the code\n     */\n    codes.forEach((code) => id = code.key);\n\n    return id;\n}\n\n/**\n * Gets the category of the Qapla Challenge in which the user is participating\n * @param {string} streamerUid Streamer identifier\n */\nexport async function getStreamerChallengeCategory(streamerUid) {\n    return await qaplaChallengeRef.child(streamerUid).child('category').once('value');\n}\n\n////////////////////////\n// Q Store\n////////////////////////\n\n/**\n * Gets all the items in the Q-Store\n */\nexport async function getQStoreItems() {\n    return await qStoreRef.once('value');\n}\n\n////////////////////////\n// Referral codes\n////////////////////////\n\n/**\n * Add two events to a streamer who referred other streamer\n * @param {string} uid User identifier of the user to receive the rewards\n * @param {string} referredDisplayName Display name from the user who used the referral code\n * @param {number} endDate Timestamp in ms for the end date of the events added\n */\nexport async function giveReferrerRewardsToStreamer(uid, referredDisplayName, endDate) {\n    await userStreamersRef.child(uid).child('subscriptionDetails').child('streamsIncluded').set(databaseServerValue.increment(2));\n    await userStreamersRef.child(uid).child('subscriptionDetails').child('redemptionsPerStream').set(40);\n\n    await userStreamersRef.child(uid).update({\n        premium: true\n    });\n    await updateUserStreamerPublicData(uid, {\n        premium: true\n    });\n\n    const referrerCurrentPeriod = await userStreamersRef.child(uid).child('currentPeriod').once('value');\n    const today = new Date();\n\n    if (!referrerCurrentPeriod.exists() || (today.getTime() >= referrerCurrentPeriod.val().endDate)) {\n        await userStreamersRef.child(uid).child('currentPeriod').child('endDate').set(endDate);\n        if (!referrerCurrentPeriod.exists() || !referrerCurrentPeriod.val().startDate) {\n            await userStreamersRef.child(uid).child('currentPeriod').child('startDate').set(today.getTime());\n        }\n    }\n}\n\n////////////////////////\n// Channel Point Interactions\n////////////////////////\n\nexport async function saveInteractionsRewardData(uid, rewardId, webhookId) {\n    await streamersInteractionsRewardsRef.child(uid).update({ rewardId, webhookId })\n}\n\n/**\n * Get the interactions reward data of the given user\n * @param {string} uid User identifier\n */\nexport async function getInteractionsRewardData(uid) {\n    return await streamersInteractionsRewardsRef.child(uid).once('value');\n}\n\n////////////////////////\n// Giphy Text\n////////////////////////\n\n/**\n * Saves on database the given array of Giphy Texts\n * @param {string} uid User identifier\n * @param {array} data Array of Giphy Text gifs\n */\n export async function saveGiphyText(uid, data) {\n    return giphyTextRequestsRef.child(uid).set(data);\n}\n\n////////////////////////\n// Streamer Cash Out\n////////////////////////\n\n/**\n * Saves the request of cash out for the given streamer\n * @param {string} uid User identifier\n * @param {number} amountQoins Amount of Qoins to remove from the streamer balance\n * @param {number} amountBits Amount of bits to deliver to the streamer\n */\nexport async function saveStreamerCashOutRequest(uid, amountQoins, amountBits) {\n    const date = new Date();\n\n    const qoinsRemoved = await userStreamersRef.child(uid).child('qoinsBalance').transaction((qoinsBalance) => {\n        return qoinsBalance - amountQoins;\n    });\n\n    if (qoinsRemoved.committed) {\n        return await streamerCashOutRef.child(uid).push({\n            amountQoins,\n            amountBits,\n            delivered: false,\n            timestamp: date.getTime()\n        });\n    }\n}",["165","166"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx",["167","168","169","170"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["171","172"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],["173","174"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],["175","176"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["177","178","179","180","181","182","183","184","185"],"import React, { useEffect, useState } from 'react';\nimport { withStyles, makeStyles, Button, Chip, Switch, Tabs, Tab, Tooltip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport StreamerProfileEditorOnBoarding from '../StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding';\n\nimport styles from './StreamerProfileEditor.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getStreamerLinks, listenStreamerPublicProfile, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { ReactComponent as EditIcon } from './../../assets/Edit.svg';\nimport { ReactComponent as CameraIcon } from './../../assets/Camera.svg';\nimport { ReactComponent as XIcon } from './../../assets/xIcon.svg';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport { uploadImage } from '../../services/storage';\nimport { MIN_TAGS, PROFILE_BACKGROUND_GRADIENTS } from '../../utilities/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    linkPlaceholder: {\n        '&::placeholder': {\n            color: 'rgba(108, 93, 211, 0.4)'\n        }\n    },\n    linkInput: {\n        backgroundColor: '#202750',\n        color: '#FFF',\n        '&.Mui-disabled': {\n            color: '#AAA'\n        }\n    }\n}));\n\nconst EditBioButton = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        justifyItems: 'center',\n        padding: '0.8rem 1rem',\n        borderRadius: '0.8rem',\n        maxHeight: '46px',\n        textTransform: 'capitalize',\n        fontSize: '14px',\n        fontWeight: 600,\n        '&:hover': {\n            backgroundColor: '#24456680'\n        },\n        '&:disabled': {\n            backgroundColor: '#272D5780',\n            color: '#FFFFFF99',\n        },\n        '&#cover': {\n            backgroundColor: '#272D5780'\n        }\n    },\n\n}))(Button);\n\nconst QaplaChip = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFFA6',\n        minHeight: '41px',\n        borderRadius: '100rem',\n        padding: '1.2rem 0.4rem',\n        fontWeight: 600,\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n            backgroundColor: '#4040FF4F',\n            opacity: 0.8\n        }\n    },\n    deletable: {\n        backgroundColor: '#4040FF4F',\n        color: '#FFFFFFA6',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n\n        }\n    },\n    deleteIcon: {\n        display: 'flex',\n        backgroundColor: '#FFFD',\n        borderRadius: '100px',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '&:hover': {\n            backgroundColor: '#F00D'\n        },\n        '&:active': {\n            backgroundColor: '#A00D'\n        }\n    }\n}))(Chip)\n\nconst QaplaSwitch = withStyles(() => ({\n    root: {\n\n    },\n    track: {\n        backgroundColor: '#202750'\n    },\n    checked: {\n        color: '#2CE9D2 !important',\n        '& + .MuiSwitch-track': {\n            backgroundColor: '#202750 !important'\n        }\n    },\n    thumb: {\n\n    }\n}))(Switch);\n\nconst QaplaTabs = withStyles({\n    root: {\n        minHeight: 0,\n        marginTop: '3rem'\n    },\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            // maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#0AFFD2',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        padding: '0 0.6rem',\n        minWidth: 0,\n        minHeight: 0,\n        textTransform: 'none',\n        color: '#fff',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n\nfunction TabPanel(props) {\n    const { children, value, index, className, ...other } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`profile-editor-tabpanel-${index}`}\n            aria-labelledby={`profile-editor-tab-${index}`}\n            {...other}\n            className={className}\n        >\n            {value === index && (\n                <>\n                    {children}\n                </>\n            )}\n        </div>\n    )\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst StreamerProfileEditor = ({ user }) => {\n    const socialLinksInitialValue = [\n        {\n            socialPage: 'Twitch',\n            value: ''\n        },\n        {\n            socialPage: 'Twitter',\n            value: ''\n        },\n        {\n            socialPage: 'Instagram',\n            value: ''\n        },\n        {\n            socialPage: 'Discord',\n            value: ''\n        },\n        {\n            socialPage: 'Youtube',\n            value: ''\n        },\n        /* {\n            socialPage: 'TikTok',\n            value: ''\n        } */\n    ];\n\n    const socialLinksPlaceholders = {\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\n        Discord: `https://discord.gg/inviteCode`,\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`,\n        tiktok: `https://www.tiktok.com/@${user ? user.displayName : ''}`\n    };\n\n    const classes = useStyles();\n    const [dataIsFetched, setDataIsFetched] = useState(false);\n    const [selectedTab, setSelectedTab] = useState(0);\n    const [editingBio, setEditingBio] = useState(false);\n    const [addingTag, setAddingTag] = useState(false);\n    const [streamerBio, setStreamerBio] = useState('');\n    const [backgroundUrl, setBackgroundUrl] = useState('');\n    const [backgroundGradient, setBackgroundGradient] = useState(null);\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\n    const [streamerTags, setStreamerTags] = useState([]);\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const [onBoardingDone, setOnBoardingDone] = useState(true);\n    const [onBoardingStep, setOnBoardingStep] = useState(0);\n    const [badge, setBadge] = useState(false);\n    const [chipHover, setChipHover] = useState({});\n    const { t } = useTranslation();\n    const twitchURL = `https://www.twitch.tv/${user && user.login ? user.login : ''}`;\n\n    useEffect(() => {\n        async function getStreamerInfo() {\n            listenStreamerPublicProfile(user.uid, async (info) => {\n                if (info.exists()) {\n                    const { bio, tags, backgroundUrl, backgroundGradient, badge } = info.val();\n                    if (!tags || tags.length < MIN_TAGS) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(4);\n                    }\n\n                    if (!bio) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(3);\n                    }\n                    setStreamerBio(bio || '');\n                    setBackgroundGradient(backgroundGradient);\n                    setBackgroundUrl(backgroundUrl);\n                    setStreamerTags(tags || []);\n                    setBadge(badge);\n                } else {\n                    setOnBoardingDone(false);\n                }\n\n                const links = await getStreamerLinks(user.uid);\n                if (links.exists()) {\n                    setSocialLinks(links.val());\n                } else {\n                    /**\n                     * Set Twitch Link by default (we already know this link)\n                     */\n                    const socialLinksWithTwitchAdded = socialLinksInitialValue;\n                    socialLinksWithTwitchAdded[0].value = twitchURL;\n\n                    setSocialLinks(socialLinksInitialValue);\n                }\n\n                setDataIsFetched(true);\n            });\n        }\n\n        if (user && user.uid) {\n            getStreamerInfo();\n        }\n    }, [user]);\n\n    const onBoardingDoneByStreamer = async () => {\n        const min = 0;\n        const max = 4;\n        const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\n\n        const backgroundSelected = PROFILE_BACKGROUND_GRADIENTS[randomIndex];\n        setBackgroundGradient(backgroundSelected);\n\n        await updateStreamerPublicProfile(user.uid, {\n            backgroundGradient: backgroundSelected,\n            displayName: user.displayName,\n            photoUrl: user.photoUrl\n        });\n\n        window.analytics.track('Public profile onboarding done', {\n            uid: user.uid,\n            timestamp: (new Date()).getTime()\n        });\n        setOnBoardingDone(true);\n    }\n\n    const handleTabChange = (event, newValue) => {\n        setSelectedTab(newValue)\n    }\n\n    const handleTagDelete = async (indexToDelete) => {\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\n\n        try {\n            await updateStreamerPublicProfile(user.uid, { tags });\n            setStreamerTags(tags);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.deleteTag'));\n        }\n    }\n\n    const updateSocialLinks = (value, index) => {\n        setSocialLinksChanged(true);\n        let newArray = [...socialLinks];\n        newArray[index] = {\n            ...newArray[index],\n            value\n        };\n\n        setSocialLinks(newArray);\n    }\n\n    const saveLinks = async () => {\n        // Creates an array without the placeholder value\n        const objectToSave = {};\n        socialLinks.forEach((link, index) => {\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\n        });\n\n        try {\n            await saveStreamerLinks(user.uid, objectToSave);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.updateLinks'));\n        }\n        setSocialLinksChanged(false);\n    }\n\n    const addTag = async () => {\n        setOnBoardingStep(4);\n        setAddingTag(true);\n    }\n\n    const uploadBackgroundImage = (e) => {\n        if (e.target.files[0]) {\n            const newBackgroundImage = (e.target.files[0]);\n            uploadImage(\n                newBackgroundImage,\n                `/StreamersProfilesBackgroundImages/${user.uid}`,\n                (progressValue) => setUploadImageStatus(progressValue * 100),\n                (error) => { alert('Error al agregar imagen'); console.log(error); },\n                async (url) => {\n                    try {\n                        await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\n                        alert(t('StreamerProfileEditor.confirmations.saveImage'));\n                    } catch (error) {\n                        alert(t('StreamerProfileEditor.errors.saveImage'));\n                        console.log(error);\n                    }\n                }\n            );\n\n            const reader = new FileReader();\n            reader.addEventListener('load', () => {\n                setBackgroundUrl(reader.result);\n            });\n\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    }\n\n    const copyTwitchURL = () => {\n        navigator.clipboard.writeText(twitchURL);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    const createLinearGradientCSS = () => {\n        if (backgroundGradient) {\n            let colorsString = '';\n            backgroundGradient.colors.forEach((color, index) => {\n                if (index !== backgroundGradient.colors.length - 1) {\n                    colorsString += `${color},`;\n                } else {\n                    colorsString += color;\n                }\n            });\n\n            return `linear-gradient(${backgroundGradient.angle}deg, ${colorsString})`;\n        }\n\n        return '';\n    }\n\n    const editBio = () => {\n        setOnBoardingStep(3);\n        setEditingBio(true);\n    }\n\n    const cancelEditing = () => {\n        setEditingBio(false);\n        setAddingTag(false);\n    }\n\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return\n        }\n        let source = result.source.index\n        let destination = result.destination.index\n\n        if (source === destination) {\n            return\n        }\n\n        const socialLinksCopy = [...socialLinks];\n        socialLinksCopy.splice(destination, 0, socialLinksCopy.splice(source, 1)[0]);\n\n        setSocialLinks(socialLinksCopy);\n        setSocialLinksChanged(true);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\n            {dataIsFetched &&\n                <>\n                    {onBoardingDone && !editingBio && !addingTag ?\n                        <>\n                            <div className={styles.coverContainer}>\n                                {backgroundUrl ?\n                                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\n                                    :\n                                    <div className={styles.cover} style={{ background: createLinearGradientCSS() }} />\n                                }\n                            </div>\n                            <div className={styles.editCoverButtonContainer}>\n                                <input\n                                    accept='image/*'\n                                    style={{ display: 'none' }}\n                                    type='file'\n                                    id='image-input'\n                                    onChange={uploadBackgroundImage} />\n                                <label htmlFor='image-input'>\n                                    <EditBioButton id='cover' component='span'>\n                                        <CameraIcon />\n                                        <div style={{ width: '0.4rem' }} />\n                                        {t('StreamerProfileEditor.editCover')}\n                                    </EditBioButton>\n                                </label>\n                            </div>\n                            <div className={styles.profileContainer}>\n                                <div className={styles.profilePicContainer}>\n                                    <img src={user.photoUrl} alt='User pfp' className={styles.profilePic} />\n                                </div>\n                                <div className={styles.streamerNameAndEditBioButtonContainer}>\n                                    <div className={styles.streamerNameContainer}>\n                                        <p className={styles.streamerName}>\n                                            {user.displayName}\n                                        </p>\n                                        <div className={styles.founderBadgeContainer}>\n                                            {badge &&\n                                                <FounderBadge className={styles.founderBadge} />\n                                            }\n                                        </div>\n                                    </div>\n                                    <div className={styles.editBioButtonContainer}>\n                                        <EditBioButton variant='contained'\n                                            onClick={editBio}>\n                                            {!editingBio ?\n                                                <>\n                                                    <EditIcon />\n                                                    <div style={{ width: '0.4rem' }} />\n                                                    {t('StreamerProfileEditor.editBio')}\n                                                </>\n                                                :\n                                                t('StreamerProfileEditor.saveChanges')\n                                            }\n                                        </EditBioButton>\n                                    </div>\n                                </div>\n                                {/* <div className={styles.twitchURLContainer}>\n                                    <a href={twitchURL} target='_blank' rel='noreferrer' className={styles.twitchURL} >{twitchURL}</a>\n                                    <Tooltip placement='top' open={openTooltip} title='Copiado'>\n                                        <CopyIcon onClick={copyTwitchURL} />\n                                    </Tooltip>\n                                </div> */}\n                                <div className={styles.bioContainer}>\n                                    <p className={styles.bioText} onClick={editBio}>\n                                        {streamerBio}\n                                    </p>\n                                </div>\n                                <ul className={styles.tagsList}>\n                                    {streamerTags.map((data, index) => {\n                                        return (\n                                            <li key={`chip-${data}-${index}`} className={styles.tag}>\n                                                <QaplaChip\n                                                    label={data}\n                                                    onDelete={() => handleTagDelete(index)}\n                                                />\n                                            </li>\n                                        )\n                                    })}\n                                    <li key='new' className={styles.tag}>\n                                        <QaplaChip onClick={addTag}\n                                            label={t('StreamerProfileEditor.addTag')}\n                                        />\n                                    </li>\n                                </ul>\n                                <div className={styles.showNextStreamsContainer}>\n                                    <p className={styles.showNextStreamsText}>\n                                        {t('StreamerProfileEditor.showUpcomingStreams')}\n                                    </p>\n                                    <QaplaSwitch\n                                        name='showNextStreams'\n                                    /** ToDo: Show streams in profile. Also show twitch status (online or offline) <= more of this on cloud function */\n                                    />\n                                </div>\n                                <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\n                                    <QaplaTab wid label={t('StreamerProfileEditor.social')} {...a11yProps(0)} />\n                                    {/* <QaplaTab label='Códigos de creador' {...a11yProps(1)} /> */}\n                                </QaplaTabs>\n                                <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\n                                    <DragDropContext onDragEnd={onDragEnd}>\n                                        <Droppable droppableId='links-droppable'>\n                                            {(provided, snapshot) => (\n                                                <div style={{ width: '100%' }}\n                                                    {...provided.droppableProps}\n                                                    ref={provided.innerRef}\n                                                >\n                                                    {socialLinks.map((data, index) => (\n                                                        <Draggable key={`draggable-link-${index}`} draggableId={`draggable-link-${index}`} index={index}>\n                                                            {(provided, snapshot) => (\n                                                                <div\n                                                                    ref={provided.innerRef}\n                                                                    {...provided.draggableProps}\n                                                                    {...provided.dragHandleProps}\n                                                                >\n                                                                    <div\n                                                                        style={{\n                                                                            display: 'flex',\n                                                                            flexDirection: 'row',\n                                                                            alignItems: 'center',\n                                                                            width: '100%'\n                                                                        }}>\n                                                                        <div style={{ display: 'flex', width: '100%' }}>\n                                                                            <StreamerTextInput\n                                                                                label={data.socialPage}\n                                                                                containerClassName={styles.socialLinkContainer}\n                                                                                labelClassName={styles.socialLinkLabel}\n                                                                                value={data.value}\n                                                                                disabled={data.socialPage.toLowerCase() === 'twitch'}\n                                                                                placeholder={socialLinksPlaceholders[data.socialPage]}\n                                                                                classes={{ input: classes.linkPlaceholder }}\n                                                                                textInputClassName={classes.linkInput}\n                                                                                fullWidth\n                                                                                onChange={(e) => updateSocialLinks(e.target.value, index)}\n                                                                            />\n                                                                        </div>\n                                                                        <div style={{\n                                                                            display: 'flex',\n                                                                            backgroundColor: '#141833',\n                                                                            width: '30px',\n                                                                            minWidth: '30px',\n                                                                            height: '45px',\n                                                                            marginBottom: '12px',\n                                                                            alignSelf: 'flex-end',\n                                                                            borderRadius: '8px'\n\n                                                                        }} >\n                                                                            <div style={{\n                                                                                display: 'flex',\n                                                                                flex: 1,\n                                                                                padding: '14px 10px',\n                                                                            }}>\n                                                                                <div style={{\n                                                                                    display: 'flex',\n                                                                                    flex: 1,\n                                                                                    flexDirection: 'column',\n                                                                                    justifyContent: 'space-between',\n                                                                                }}>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                </div>\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            )}\n                                                        </Draggable>\n                                                    ))}\n                                                    {provided.placeholder}\n                                                </div>\n                                            )}\n                                        </Droppable>\n                                    </DragDropContext>\n                                    <br />\n                                    {socialLinksChanged &&\n                                        <ContainedButton onClick={saveLinks}>\n                                            {t('StreamerProfileEditor.saveChanges')}\n                                        </ContainedButton>\n                                    }\n                                </TabPanel>\n                                <TabPanel value={selectedTab} index={1}>\n                                    <p>b</p>\n                                </TabPanel>\n                            </div>\n                        </>\n                        :\n                        <StreamerProfileEditorOnBoarding step={onBoardingStep}\n                            user={user}\n                            onBoardingDone={onBoardingDoneByStreamer}\n                            showOnlySpecificStep={editingBio || addingTag}\n                            streamerBio={streamerBio}\n                            streamerTags={streamerTags}\n                            closeOnBoarding={cancelEditing} />\n                    }\n                </>\n            }\n        </StreamerDashboardContainer>\n    )\n}\n\nexport default StreamerProfileEditor;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",["186"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\nimport { notifyActivationWithReferralCode } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    containerStyle: {\n        padding: 0\n    },\n    background: {\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        minHeight: '100vh',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    card: {\n        backgroundColor: '#141833',\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\n        borderRadius: '35px',\n        [theme.breakpoints.up('md')]: {\n            width: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        paddingTop: 24,\n        paddingBottom: 0\n    },\n    title: {\n        fontWeight: '600',\n        fontSize: '18px',\n        lineHeight: '32px',\n        textAlign: 'center',\n        color: '#FFFFFF',\n        whiteSpace: 'pre-line'\n    },\n    instructions: {\n        marginTop: 15,\n        fontWeight: '400',\n        fontSize: '14px',\n        lineHeight: '22px',\n        textAlign: 'center',\n        color: '#8F9BBA',\n        whiteSpace: 'pre-line'\n    },\n    textInput: {\n        textAlign: 'center',\n        paddingTop: 12,\n        paddingBottom: 12\n    },\n    activeFreeTrialButton: {\n        marginTop: 32,\n        backgroundColor: '#3B4BF9',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        },\n        marginBottom: 60\n    },\n    noCode: {\n        textAlign: 'center',\n        width: '100%',\n        marginTop: 32,\n        fontWeight: '600',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    referralProgram: {\n        textAlign: 'center',\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        marginTop: 32,\n        fontWeight: '400',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    subscribeButton: {\n        marginTop: 40,\n        backgroundColor: '#00FFDD',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    subscribeButtonCointainer: {\n        marginBottom: 24,\n        marginTop: 180\n    }\n}));\n\nconst RequestActivation = ({ user, onSuccessActivation }) => {\n    const [referralCode, setReferralCode] = useState('');\n    const [validatingCode, setValidatingCode] = useState(false);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    const validateCode = async () => {\n        if (user.broadcasterType === '') {\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        setValidatingCode(true);\n        if (referralCode) {\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\n            if (referrerUid) {\n                if (referrerUid !== user.uid) {\n                    if (!user.referredBy) {\n                        activateFreeTrialWithReferralCode(referrerUid, {\n                            redemptionsPerStream: 40,\n                            streamsIncluded: 2\n                        });\n                    } else {\n                        setValidatingCode(false);\n                        alert('Ya usaste un código de referido antes');\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('No puedes usar tu propio código');\n                }\n            } else {\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\n                if (invitationCodeSnap.exists()) {\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('Código invalido');\n                }\n            }\n        } else {\n            setValidatingCode(false);\n        }\n    }\n\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n        await updateStreamerProfile(user.uid, {\n            referredBy: referrerUid,\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\n\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\n\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\n\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n         await updateStreamerProfile(user.uid, {\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await removeInvitationCode(code);\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\n            <div className={classes.background}>\n                <div>\n                <Card className={classes.card}>\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\n                    </div>\n                    <CardContent>\n                        <p className={classes.title}>\n                            {t('RequestActivation.title')} 🚀\n                        </p>\n                        <p className={classes.instructions}>\n                            {validatingCode || !user.referredBy ?\n                                <>\n                                    {t('RequestActivation.descriptionP1')}\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\n                                    {t('RequestActivation.descriptionP2')}\n                                </>\n                                :\n                                t('RequestActivation.buyAMembership')\n                            }\n                        </p>\n                        {validatingCode || !user.referredBy ?\n                            <>\n                                <StreamerTextInput\n                                    placeholder={t('RequestActivation.referralCode')}\n                                    fullWidth\n                                    containerStyle={{ marginTop: 24 }}\n                                    classes={{ input: classes.textInput }}\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\n                                    value={referralCode}\n                                    onChange={(e) => setReferralCode(e.target.value)} />\n                                {validatingCode ?\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\n                                    </div>\n                                    :\n                                    <Button\n                                        onClick={validateCode}\n                                        fullWidth\n                                        classes={{\n                                            root: classes.activeFreeTrialButton\n                                        }}>\n                                        {t('RequestActivation.startFreeTrial')}\n                                    </Button>\n                                }\n                            </>\n                            :\n                            <div className={classes.subscribeButtonCointainer}>\n                                <Button\n                                    fullWidth\n                                    onClick={() => history.push('/membership')}\n                                    classes={{ root: classes.subscribeButton }}>\n                                    {t('RequestActivation.subscribe')}\n                                </Button>\n                            </div>\n                        }\n                    </CardContent>\n                </Card>\n                {validatingCode || !user.referredBy ?\n                    <>\n                        <p className={classes.noCode}>\n                            {t('RequestActivation.dontHaveACode')}\n                        </p>\n                        <Button\n                            fullWidth\n                            onClick={() => history.push('/membership')}\n                            classes={{ root: classes.subscribeButton }}>\n                            {t('RequestActivation.subscribe')}\n                        </Button>\n                    </>\n                    :\n                    <p className={classes.referralProgram}>\n                        {t('RequestActivation.referralProgramP1')}\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\n                        {t('RequestActivation.referralProgramP2')}\n                    </p>\n                }\n                </div>\n            </div>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default RequestActivation;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["187","188","189"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, CircularProgress } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\n\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer, updateStreamerProfile } from './../../services/database';\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\nimport RequestActivation from '../RequestActivation/RequestActivation';\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    titleLabel: {\n        marginBottom: 8\n    },\n    datePickerLabel: {\n        marginBottom: theme.spacing(1),\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        height: '56px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    const userLang = navigator.language || navigator.userLanguage;\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [gamesData, setGamesData] = useState([]);\n    const [showAccountActviation, setShowAccountActviation] = useState(false);\n    const [lockSendButton, setLockSendButton] = useState(false);\n\n    useEffect(() => {\n        let gameList = [];\n\n        if (games.allGames) {\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\n\n            let tempGamesData = [];\n            gameList.forEach((game) => {\n                tempGamesData.push({\n                    id: game.gameKey,\n                    name: game.gameName\n                })\n            });\n\n            setGamesData(tempGamesData);\n        }\n    }, [games.allGames, user]);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    const openSuccessWindow = () => {\n        submitEvent();\n    };\n\n    const submitEvent = async () => {\n        setLockSendButton(true);\n        if (user.broadcasterType === '') {\n            setLockSendButton(false);\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        if (!user.premium && !user.freeTrial) {\n            setLockSendButton(false);\n            return setShowAccountActviation(true);\n        }\n\n        if (selectedDate < minDate) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.before24h'));\n            return;\n        }\n        if (!selectedGame) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        if (user.currentPeriod) {\n            const { endDate } = user.currentPeriod;\n\n            /**\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\n             */\n            if (selectedDate.getTime() <= endDate) {\n\n                const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\n\n                let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\n\n                if (!userCanCreateStream) {\n                    if (user.boughtStreams) {\n                        /**\n                         * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\n                         * the user can create the stream, this function will also remove expired packages or packages that has been already used\n                         */\n                        userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\n                            if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\n                                addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\n                                return true;\n                            } else {\n                                removeStreamPackageOfStreamer(user.uid, streamsPackageId);\n                            }\n                        });\n                    }\n                } else {\n                    addToStreamsRequestedOnSubscriptionDetails(user.uid);\n                }\n\n                /**\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n                 * is lower or equal to the user limit per month then we create the event\n                 */\n                if (userCanCreateStream) {\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                    let streamerData = {\n                        displayName: user.displayName,\n                        login: user.login,\n                        photoUrl: user.photoUrl\n                    };\n\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\n                    if (userData && userData.data) {\n                        streamerData = {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url\n                        };\n\n                        await updateStreamerProfile(user.uid, {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url,\n                            broadcasterType: userData.data.broadcaster_type\n                        });\n                    }\n\n                    await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n\n                    window.analytics.track('Stream requested', {\n                        selectedGame,\n                        selectedDate: selectedDate.getTime(),\n                        uid: user.uid\n                    });\n                    setOpenSuccessDialog(true);\n                } else {\n                    setShowAccountActviation(true);\n                }\n            } else {\n                alert(t('NewStream.alerts.beforePlanExpiration'));\n            }\n        } else {\n            setShowAccountActviation(true);\n        }\n    }\n\n    const successActivation = async () => {\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n        let streamerData = {\n            displayName: user.displayName,\n            login: user.login,\n            photoUrl: user.photoUrl\n        };\n\n        const userData = await getTwitchUserDataCloudFunction(user.id);\n        if (userData && userData.data) {\n            streamerData = {\n                displayName: userData.data.display_name,\n                login: userData.data.login,\n                photoUrl: userData.data.profile_image_url\n            };\n\n            await updateStreamerProfile(user.uid, {\n                displayName: userData.data.display_name,\n                login: userData.data.login,\n                photoUrl: userData.data.profile_image_url,\n                broadcasterType: userData.data.broadcaster_type\n            });\n        }\n\n        await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n        await addToStreamsRequestedOnSubscriptionDetails(user.uid);\n\n        updateStreamerProfile(user.uid, streamerData);\n\n        window.analytics.track('Free trial started', {\n            uid: user.uid\n        });\n        setOpenSuccessDialog(true);\n    }\n\n    if (!showAccountActviation) {\n        return (\n            <StreamerDashboardContainer user={user}>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <BackButton onClick={history.goBack} />\n                    </Grid>\n                    <Grid item sm={8}>\n                        <h1 className={styles.title}>\n                            {t('NewStream.whatAreYouPlaying')}\n                        </h1>\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                            <Grid item sm={5} style={{ width: '274px', maxWidth: '274px', }}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.pickACategory')}\n                                </InputLabel>\n                                <ReactSearchAutocomplete\n                                    items={gamesData}\n                                    autofocus\n                                    placeholder={t('NewStream.categoryPickerPlaceholder')}\n                                    showItemsOnFocus\n                                    maxResults={5}\n                                    onSelect={(game) => setSelectedGame(game.id)}\n                                    onClear={() => setSelectedGame(null)}\n                                    styling={{\n                                        zIndex: 999,\n                                        height: '56px',\n                                        color: '#FFF',\n                                        hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\n                                        fontSize: '1rem',\n                                        fontWeight: 'bold',\n                                        backgroundColor: '#141833',\n                                        border: 'none',\n                                        borderRadius: '8px',\n                                        placeholderColor: 'rgba(255, 255, 255, 0.5)',\n                                        fontFamily: 'Inter',\n                                        lineColor: 'transparent'\n                                    }}\n                                    showIcon={false}\n                                    formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\n                            </Grid>\n                        </Grid>\n                        <h1 className={styles.title}>\n                            {t('NewStream.when')}\n                        </h1>\n                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                            <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                    <InputLabel className={classes.datePickerLabel} >\n                                        {t('NewStream.date')}\n                                    </InputLabel>\n                                    <KeyboardDatePicker\n                                        open={calendarOpen}\n                                        onClick={() => setCalendarOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setCalendarOpen(false)}\n                                        clearable\n                                        disablePast\n                                        disableToolbar\n                                        autoOk\n                                        value={displayDate}\n                                        placeholder='10-10-2021'\n                                        onChange={handleDateChange}\n                                        defaultValue={new Date()}\n                                        minDate={minDate}\n                                        minDateMessage={t('NewStream.alerts.before24h')}\n                                        format='DD-MM-YY ddd'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <CalendarIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                    <InputLabel className={classes.datePickerLabel}>\n                                        {t('NewStream.time')}\n                                    </InputLabel>\n                                    <KeyboardTimePicker\n                                        open={clockOpen}\n                                        onClick={() => setClockOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setClockOpen(false)}\n                                        autoOk\n                                        error={selectedDate <= minDate}\n                                        helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\n                                        value={displayDate}\n                                        placeholder='08:00 AM'\n                                        onChange={handleDateChange}\n                                        // mask='__:__ _M'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <TimeIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </MuiPickersUtilsProvider>\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                            <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                <Grid container>\n                                    <h1 className={styles.title}>\n                                        {t('NewStream.streamTitle')}\n                                    </h1>\n                                    <Grid container spacing={4}>\n                                        <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\n                                            <StreamerTextInput\n                                                labelClassName={classes.titleLabel}\n                                                label={t('NewStream.streamTitle')}\n                                                placeholder={t('NewStream.streamTitlePlaceholder')}\n                                                id='eventTitle'\n                                                fullWidth={true}\n                                                value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Button\n                            disabled={lockSendButton}\n                            className={styles.button}\n                            onClick={openSuccessWindow}>\n                            {lockSendButton ?\n                                <CircularProgress\n                                    style={{\n                                        color: '#fff7',\n                                        alignSelf: 'center'\n                                    }}\n                                    size={25} />\n                                :\n                                t('NewStream.submit')\n                            }\n                        </Button>\n                    </Grid>\n                </Grid>\n                <NewStreamSuccessDialog\n                    open={openSuccessDialog}\n                    onClose={() => history.push('/profile')}\n                    mainPage={() => history.push('/profile')}\n                />\n            </StreamerDashboardContainer>\n        );\n    } else {\n        return (\n            <>\n                <RequestActivation user={user} onSuccessActivation={successActivation} />\n                <NewStreamSuccessDialog\n                    open={openSuccessDialog}\n                    onClose={() => history.push('/profile')}\n                    mainPage={() => history.push('/profile')}\n                />\n            </>\n        )\n    }\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["190","191","192","193","194"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["195"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],{"ruleId":"196","severity":1,"message":"197","line":6,"column":8,"nodeType":"198","messageId":"199","endLine":6,"endColumn":14},{"ruleId":"200","severity":1,"message":"201","line":253,"column":8,"nodeType":"202","endLine":253,"endColumn":102,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"204","line":394,"column":8,"nodeType":"202","endLine":394,"endColumn":42,"suggestions":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"196","severity":1,"message":"210","line":26,"column":7,"nodeType":"198","messageId":"199","endLine":26,"endColumn":35},{"ruleId":"211","severity":1,"message":"212","line":565,"column":9,"nodeType":"213","messageId":"214","endLine":565,"endColumn":14},{"ruleId":"206","replacedBy":"215"},{"ruleId":"208","replacedBy":"216"},{"ruleId":"196","severity":1,"message":"217","line":7,"column":10,"nodeType":"198","messageId":"199","endLine":7,"endColumn":35},{"ruleId":"196","severity":1,"message":"218","line":8,"column":10,"nodeType":"198","messageId":"199","endLine":8,"endColumn":36},{"ruleId":"200","severity":1,"message":"219","line":19,"column":6,"nodeType":"202","endLine":19,"endColumn":18,"suggestions":"220"},{"ruleId":"196","severity":1,"message":"221","line":22,"column":11,"nodeType":"198","messageId":"199","endLine":22,"endColumn":23},{"ruleId":"196","severity":1,"message":"222","line":273,"column":21,"nodeType":"198","messageId":"199","endLine":273,"endColumn":31},{"ruleId":"200","severity":1,"message":"223","line":453,"column":8,"nodeType":"202","endLine":453,"endColumn":14,"suggestions":"224"},{"ruleId":"206","replacedBy":"225"},{"ruleId":"208","replacedBy":"226"},{"ruleId":"206","replacedBy":"227"},{"ruleId":"208","replacedBy":"228"},{"ruleId":"196","severity":1,"message":"229","line":2,"column":67,"nodeType":"198","messageId":"199","endLine":2,"endColumn":74},{"ruleId":"196","severity":1,"message":"230","line":13,"column":28,"nodeType":"198","messageId":"199","endLine":13,"endColumn":36},{"ruleId":"196","severity":1,"message":"231","line":16,"column":28,"nodeType":"198","messageId":"199","endLine":16,"endColumn":33},{"ruleId":"196","severity":1,"message":"232","line":233,"column":12,"nodeType":"198","messageId":"199","endLine":233,"endColumn":29},{"ruleId":"196","severity":1,"message":"233","line":237,"column":12,"nodeType":"198","messageId":"199","endLine":237,"endColumn":23},{"ruleId":"196","severity":1,"message":"234","line":241,"column":12,"nodeType":"198","messageId":"199","endLine":241,"endColumn":21},{"ruleId":"196","severity":1,"message":"235","line":241,"column":23,"nodeType":"198","messageId":"199","endLine":241,"endColumn":35},{"ruleId":"200","severity":1,"message":"236","line":288,"column":8,"nodeType":"202","endLine":288,"endColumn":14,"suggestions":"237"},{"ruleId":"196","severity":1,"message":"238","line":387,"column":11,"nodeType":"198","messageId":"199","endLine":387,"endColumn":24},{"ruleId":"196","severity":1,"message":"239","line":1,"column":17,"nodeType":"198","messageId":"199","endLine":1,"endColumn":26},{"ruleId":"196","severity":1,"message":"240","line":125,"column":27,"nodeType":"198","messageId":"199","endLine":125,"endColumn":43},{"ruleId":"196","severity":1,"message":"241","line":126,"column":24,"nodeType":"198","messageId":"199","endLine":126,"endColumn":37},{"ruleId":"242","severity":1,"message":"243","line":269,"column":103,"nodeType":"244","messageId":"245","endLine":269,"endColumn":105},{"ruleId":"196","severity":1,"message":"246","line":4,"column":5,"nodeType":"198","messageId":"199","endLine":4,"endColumn":11},{"ruleId":"196","severity":1,"message":"247","line":5,"column":5,"nodeType":"198","messageId":"199","endLine":5,"endColumn":12},{"ruleId":"196","severity":1,"message":"248","line":6,"column":5,"nodeType":"198","messageId":"199","endLine":6,"endColumn":9},{"ruleId":"196","severity":1,"message":"249","line":7,"column":5,"nodeType":"198","messageId":"199","endLine":7,"endColumn":11},{"ruleId":"196","severity":1,"message":"250","line":14,"column":8,"nodeType":"198","messageId":"199","endLine":14,"endColumn":23},{"ruleId":"251","severity":1,"message":"252","line":16,"column":1,"nodeType":"253","endLine":16,"endColumn":52},"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alertSideRight', 'finishReaction', and 'queueAnimation'. Either include them or remove the dependency array.","ArrayExpression",["254"],"React Hook useEffect has missing dependencies: 'displayDonation', 'donation.media', 'donation.message', and 'donation.messageExtraData'. Either include them or remove the dependency array.",["255"],"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"'streamerCustomMediaForCheers' is assigned a value but never used.","no-dupe-keys","Duplicate key 'media'.","ObjectExpression","unexpected",["256"],["257"],"'notifyCashOutToQaplaAdmin' is defined but never used.","'saveStreamerCashOutRequest' is defined but never used.","React Hook useEffect has a missing dependency: 'bits'. Either include it or remove the dependency array.",["258"],"'qoinsCashOut' is assigned a value but never used.","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["259"],["256"],["257"],["256"],["257"],"'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["260"],"'copyTwitchURL' is assigned a value but never used.","'useEffect' is defined but never used.","'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},"no-global-assign","no-unsafe-negation",{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",{"range":"271","text":"272"},"Update the dependencies array to be: [clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",{"range":"273","text":"274"},"Update the dependencies array to be: [amountBits, bits]",{"range":"275","text":"276"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"277","text":"278"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"279","text":"280"},[11629,11723],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",[17094,17128],"[clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",[687,699],"[amountBits, bits]",[17494,17500],"[setPendingMessages, user]",[8892,8898],"[socialLinksInitialValue, twitchURL, user]"]
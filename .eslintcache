[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GiphyTextGenerator\\GiphyTextGenerator.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js":"20","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js":"21","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx":"22","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx":"23","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CardsPayments\\CardsPayments.jsx":"24","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx":"25","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx":"26","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx":"27","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx":"28","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"29","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutConfirmDialog\\CasthQutConfirmDialog.jsx":"30","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx":"31","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx":"32","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx":"33","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"34","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BarProgressBit\\BarProgressBit.jsx":"35","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx":"36","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx":"37","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\DialogOnlyQoins\\DiealogOnlyQoins.jsx":"38","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx":"39","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx":"40","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx":"41","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx":"42","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx":"43","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx":"44","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx":"45","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx":"46","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\branch.js":"47","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"48","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx":"49","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx":"50","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutDialog\\CasthQutDialog.jsx":"51","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"52","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx":"53","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx":"54","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js":"55","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\interactionsQapla.js":"56"},{"size":23462,"mtime":1664390198218,"results":"57","hashOfConfig":"58"},{"size":8721,"mtime":1664390198240,"results":"59","hashOfConfig":"58"},{"size":44671,"mtime":1664390198227,"results":"60","hashOfConfig":"58"},{"size":16480,"mtime":1664390272128,"results":"61","hashOfConfig":"58"},{"size":517,"mtime":1662754843718,"results":"62","hashOfConfig":"58"},{"size":545,"mtime":1660938322012,"results":"63","hashOfConfig":"58"},{"size":899,"mtime":1660938322023,"results":"64","hashOfConfig":"58"},{"size":5636,"mtime":1663947653708,"results":"65","hashOfConfig":"58"},{"size":4120,"mtime":1660938322014,"results":"66","hashOfConfig":"58"},{"size":7646,"mtime":1664390198225,"results":"67","hashOfConfig":"58"},{"size":3682,"mtime":1660938321972,"results":"68","hashOfConfig":"58"},{"size":23723,"mtime":1664390198222,"results":"69","hashOfConfig":"58"},{"size":860,"mtime":1660938321993,"results":"70","hashOfConfig":"58"},{"size":3046,"mtime":1660938321997,"results":"71","hashOfConfig":"58"},{"size":29060,"mtime":1664390198220,"results":"72","hashOfConfig":"58"},{"size":24954,"mtime":1664559307512,"results":"73","hashOfConfig":"58"},{"size":5866,"mtime":1663947653728,"results":"74","hashOfConfig":"58"},{"size":1338,"mtime":1664390198219,"results":"75","hashOfConfig":"58"},{"size":22089,"mtime":1664390198223,"results":"76","hashOfConfig":"58"},{"size":7492,"mtime":1663947653744,"results":"77","hashOfConfig":"58"},{"size":3495,"mtime":1663944829803,"results":"78","hashOfConfig":"58"},{"size":9933,"mtime":1663181868863,"results":"79","hashOfConfig":"58"},{"size":2158,"mtime":1663947653738,"results":"80","hashOfConfig":"58"},{"size":3972,"mtime":1663947653720,"results":"81","hashOfConfig":"58"},{"size":3265,"mtime":1660938322004,"results":"82","hashOfConfig":"58"},{"size":14923,"mtime":1662754843722,"results":"83","hashOfConfig":"58"},{"size":1940,"mtime":1663947653741,"results":"84","hashOfConfig":"58"},{"size":1568,"mtime":1660938322011,"results":"85","hashOfConfig":"58"},{"size":7789,"mtime":1663944829757,"results":"86","hashOfConfig":"58"},{"size":1688,"mtime":1663944829766,"results":"87","hashOfConfig":"58"},{"size":3513,"mtime":1660938321984,"results":"88","hashOfConfig":"58"},{"size":3435,"mtime":1660938321986,"results":"89","hashOfConfig":"58"},{"size":6780,"mtime":1662754843674,"results":"90","hashOfConfig":"58"},{"size":42110,"mtime":1664469792291,"results":"91","hashOfConfig":"58"},{"size":4117,"mtime":1663944829754,"results":"92","hashOfConfig":"58"},{"size":3954,"mtime":1660938321987,"results":"93","hashOfConfig":"58"},{"size":10204,"mtime":1662754843701,"results":"94","hashOfConfig":"58"},{"size":2961,"mtime":1664212607977,"results":"95","hashOfConfig":"58"},{"size":7349,"mtime":1663947653725,"results":"96","hashOfConfig":"58"},{"size":1327,"mtime":1660938322010,"results":"97","hashOfConfig":"58"},{"size":9346,"mtime":1663944829776,"results":"98","hashOfConfig":"58"},{"size":1679,"mtime":1663947653732,"results":"99","hashOfConfig":"58"},{"size":1985,"mtime":1660938321970,"results":"100","hashOfConfig":"58"},{"size":720,"mtime":1660938321988,"results":"101","hashOfConfig":"58"},{"size":398,"mtime":1660938321988,"results":"102","hashOfConfig":"58"},{"size":1128,"mtime":1663947653716,"results":"103","hashOfConfig":"58"},{"size":820,"mtime":1663944829800,"results":"104","hashOfConfig":"58"},{"size":3510,"mtime":1662754843683,"results":"105","hashOfConfig":"58"},{"size":21387,"mtime":1663944829779,"results":"106","hashOfConfig":"58"},{"size":5837,"mtime":1660938321985,"results":"107","hashOfConfig":"58"},{"size":2747,"mtime":1663944829772,"results":"108","hashOfConfig":"58"},{"size":1425,"mtime":1660938322018,"results":"109","hashOfConfig":"58"},{"size":657,"mtime":1660938321974,"results":"110","hashOfConfig":"58"},{"size":35828,"mtime":1663944829791,"results":"111","hashOfConfig":"58"},{"size":9312,"mtime":1662754843735,"results":"112","hashOfConfig":"58"},{"size":2520,"mtime":1662754843733,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},"1i113oo",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"122"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"122"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"117"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"122"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"117"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"122"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx",["241"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    makeStyles,\r\n    Grid,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    withStyles,\r\n    Avatar,\r\n    Hidden,\r\n    InputLabel,\r\n    InputAdornment\r\n} from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\r\nimport DayJsUtils from '@date-io/dayjs';\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\r\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\r\nimport { ReactComponent as EyeIcon } from './../../assets/EyeIcon.svg';\r\nimport { ReactComponent as DownloadIcon } from './../../assets/DownloadIcon.svg';\r\n\r\nimport ContainedButton from '../ContainedButton/ContainedButton';\r\nimport BackButton from '../BackButton/BackButton';\r\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\r\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate } from '../../services/database';\r\nimport { sednPushNotificationToTopic } from '../../services/functions';\r\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontSize: '24px',\r\n        color: '#FFF'\r\n    },\r\n    description: {\r\n        fontSize: '12px',\r\n        color: 'rgba(255,255,255,0.60)',\r\n        lineHeight: '18px',\r\n        paddingRight: '16px',\r\n        marginTop: '16px'\r\n    },\r\n    datePickerLabel: {\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    button: {\r\n        marginTop: '32px'\r\n    },\r\n    containerTextArea: {\r\n        marginRight: '2.5rem'\r\n    },\r\n    textArea: {\r\n        paddingTop: '1rem'\r\n    },\r\n    tableHead: {\r\n        fontSize: '16px !important',\r\n        color: '#808191 !important',\r\n        fontWeight: 'bold'\r\n    },\r\n    participantsColumn: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center'\r\n    },\r\n    tableRow: {\r\n        backgroundColor: 'rgba(20, 24, 51, .5)'\r\n    },\r\n    tableRowOdd: {\r\n        backgroundColor: 'transparent'\r\n    },\r\n    firstCell: {\r\n        borderRadius: '1rem 0 0 1rem',\r\n    },\r\n    lastCell: {\r\n        borderRadius: '0 1rem 1rem 0',\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        marginLeft: '.25rem'\r\n    },\r\n    tableContainer: {\r\n        marginBottom: 16\r\n    },\r\n    dateInput: {\r\n        color: '#FFF',\r\n        marginTop: theme.spacing(1),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '.5rem',\r\n        fontSize: '14px',\r\n        '& .MuiInputAdornment-root': {\r\n            width: '20px',\r\n            marginLeft: '-6px',\r\n            marginRight: '18px',\r\n            zIndex: '10'\r\n        }\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n        '& .MuiPickersToolbar-toolbar': {\r\n            borderRadius: '20px'\r\n        },\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n}));\r\n\r\nconst TableCellStyled = withStyles(() => ({\r\n    root: {\r\n        borderColor: 'transparent',\r\n        paddingTop: '1rem',\r\n        paddingBottom: '1rem',\r\n        fontSize: '14px',\r\n        color: '#FFFFFF'\r\n    }\r\n}))(TableCell);\r\n\r\nconst SectionHeader = ({ title, description }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div style={{ marginTop: '48px' }}>\r\n            <p className={classes.title}>\r\n                {title}\r\n            </p>\r\n            <p className={classes.description}>\r\n                {description}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EditStreamerEvent = ({ user }) => {\r\n    const { streamType } = useLocation().state;\r\n    const { streamId } = useParams();\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\r\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\r\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\r\n    const [notificationBody, setNotificationBody] = useState('');\r\n    const [participantsList, setParticipantsList] = useState({});\r\n    const [clockOpen, setClockOpen] = useState(false);\r\n    const [calendarOpen, setCalendarOpen] = useState(false);\r\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        async function setStreamData() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\r\n                if (timeStamp.exists()) {\r\n                    setSelectedDate(new Date(timeStamp.val()));\r\n                    setDisplayDate(new Date(timeStamp.val()));\r\n                    setFirstTimestamp(new Date(timeStamp.val()));\r\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\r\n                }\r\n            }\r\n        }\r\n\r\n        async function setStreamParticipantsList() {\r\n            const participantsList = await getStreamParticipantsList(streamId);\r\n            if (participantsList.exists()) {\r\n                setParticipantsList(participantsList.val());\r\n            }\r\n        }\r\n\r\n        async function setStreamTitle() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                const title = await getStreamTitle(streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                if (user.uid) {\r\n                    const title = await getPastStreamTitle(user.uid, streamId);\r\n                    setTitle(title.val());\r\n                }\r\n            }\r\n        }\r\n\r\n        setStreamData();\r\n        setStreamParticipantsList();\r\n        setStreamTitle();\r\n    }, [streamId, streamType, user]);\r\n\r\n    const sendNotification = async () => {\r\n        const bodys = {\r\n            es: notificationBody,\r\n            en: notificationBody\r\n        };\r\n\r\n        const titles = {\r\n            es: title['en'],\r\n            en: title['en']\r\n        };\r\n\r\n        try {\r\n            sednPushNotificationToTopic(streamId, titles, bodys);\r\n            alert(t('EditStream.alerts.sent'));\r\n            setNotificationBody('');\r\n        } catch (error) {\r\n            alert(t('EditStream.alerts.errorSent'));\r\n        }\r\n    }\r\n\r\n    const onChangeNotificationBody = (e) => {\r\n        const body = e.target.value;\r\n        if (body.length <= 140) {\r\n            setNotificationBody(body);\r\n        }\r\n    }\r\n\r\n    const saveDate = async () => {\r\n        if (selectedDate) {\r\n            const minValidDate = new Date().getTime() + 300000;\r\n            if (selectedDate.getTime() >= minValidDate) {\r\n                const dateRef = new Date(selectedDate);\r\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\r\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\r\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\r\n\r\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\r\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\r\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\r\n\r\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\r\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\r\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\r\n\r\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\r\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\r\n                let localHour = `${localHours}:${localMinutes}`;\r\n\r\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\r\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\r\n                alert(t('EditStream.alerts.updated'));\r\n            } else {\r\n                alert(t('EditStream.alerts.errorDate'))\r\n            }\r\n        } else {\r\n            alert(t('EditStream.alerts.errorDate'));\r\n        }\r\n    }\r\n\r\n    const handleDateChange = (date) => {\r\n        try {\r\n            setSelectedDate(date.$d);\r\n\r\n        } catch (e) { console.log(e) }\r\n\r\n        setDisplayDate(date)\r\n    };\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user}>\r\n            <Grid container>\r\n                <Grid xs={12}>\r\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\r\n                        onClick={history.goBack} />\r\n                </Grid>\r\n                {streamType === SCHEDULED_EVENT_TYPE &&\r\n                    <>\r\n                        <Grid xs={6}>\r\n                            <SectionHeader\r\n                                title={t('EditStream.change')}\r\n                                description={t('EditStream.changeDesc')} />\r\n                            <Grid item sm={12}>\r\n                                <Grid container>\r\n                                    {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\r\n                                        <></>\r\n                                        :\r\n                                        <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                                            <Grid container style={{\r\n                                                marginTop: '24px'\r\n                                            }}>\r\n                                                <Grid item sm={7} md={4} spacing={4}>\r\n                                                    <InputLabel className={classes.datePickerLabel}>\r\n                                                        {t('NewStream.date')}\r\n                                                    </InputLabel>\r\n                                                    <KeyboardDatePicker\r\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\r\n                                                        open={calendarOpen}\r\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\r\n                                                        onClose={() => setCalendarOpen(false)}\r\n                                                        clearable\r\n                                                        disablePast\r\n                                                        disableToolbar\r\n                                                        autoOk\r\n                                                        value={displayDate}\r\n                                                        placeholder='10-10-2021'\r\n                                                        onChange={handleDateChange}\r\n                                                        minDate={new Date()}\r\n                                                        format='DD-MM-YY ddd'\r\n                                                        keyboardIcon={\r\n                                                            <InputAdornment position='end' >\r\n                                                                <CalendarIcon />\r\n                                                            </InputAdornment>\r\n                                                        }\r\n                                                        InputProps={{\r\n                                                            disableUnderline: true,\r\n                                                            className: classes.dateInput\r\n                                                        }}\r\n                                                        variant={'inline'}\r\n                                                        PopoverProps={{\r\n                                                            PaperProps: {\r\n                                                                className: classes.popover,\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <div style={{ minWidth: '16px' }} />\r\n                                                <Grid item sm={7} md={4}>\r\n                                                    <InputLabel className={classes.datePickerLabel}>\r\n                                                        {t('NewStream.time')}\r\n                                                    </InputLabel>\r\n                                                    <KeyboardTimePicker\r\n                                                        open={clockOpen}\r\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\r\n                                                        onOpen={() => { }}\r\n                                                        onClose={() => setClockOpen(false)}\r\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\r\n                                                        autoOk\r\n                                                        error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\r\n                                                        helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\r\n                                                        value={displayDate}\r\n                                                        placeholder='08:00 AM'\r\n                                                        onChange={handleDateChange}\r\n                                                        // mask='__:__ _M'\r\n                                                        keyboardIcon={\r\n                                                            <InputAdornment position='end' >\r\n                                                                <TimeIcon />\r\n                                                            </InputAdornment>\r\n                                                        }\r\n                                                        InputProps={{\r\n                                                            disableUnderline: true,\r\n                                                            className: classes.dateInput\r\n                                                        }}\r\n                                                        variant={'inline'}\r\n                                                        PopoverProps={{\r\n                                                            PaperProps: {\r\n                                                                className: classes.popover,\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </MuiPickersUtilsProvider>\r\n                                    }\r\n                                    <ContainedButton className={classes.button}\r\n                                        onClick={saveDate}\r\n                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime()}>\r\n                                        {t('EditStream.save')}\r\n                                    </ContainedButton>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <SectionHeader title={t('EditStream.sendMessage')}\r\n                                description={t('EditStream.sendMessageDesc')} />\r\n                            <Grid item md={12} style={{\r\n                                marginTop: '24px'\r\n                            }}>\r\n                                <StreamerTextInput placeholder={t('EditStream.limit')}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    fullWidth\r\n                                    textInputClassName={classes.textArea}\r\n                                    containerClassName={classes.containerTextArea}\r\n                                    value={notificationBody}\r\n                                    onChange={onChangeNotificationBody} />\r\n                                <ContainedButton className={classes.button}\r\n                                    onClick={sendNotification}>\r\n                                    {t('QaplaStreamDialogs.EventManagementDialog.send')}\r\n                                </ContainedButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/** To define how this section is going to work\r\n                            <Grid xs={6}>\r\n                                <SectionHeader title='Private Rooms'\r\n                                    description='If you are hosting a private room and want to give access to the participants of the event, you can share the ID with them directly in the Qapla app. Participants will get a notification to see the ID.' />\r\n                                <StreamerTextInput label='ID'\r\n                                    placeholder='ID' />\r\n                                <br/>\r\n                                <ContainedButton className={classes.button}>\r\n                                    Send\r\n                                </ContainedButton>\r\n                            </Grid>\r\n                        */}\r\n                    </>\r\n                }\r\n                <Grid xs={12}>\r\n                    <SectionHeader title={t('EditStream.participants')} />\r\n                    <TableContainer className={classes.tableContainer}>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCellStyled align='center' padding='checkbox'>\r\n                                        <ProfileIcon />\r\n                                    </TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.twitch')}</TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.game')}</TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.qapla')}</TableCellStyled>\r\n                                    <TableCellStyled className={classes.participantsColumn}>\r\n                                        <EyeIcon /> <p>{Object.keys(participantsList).length}</p>\r\n                                    </TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>\r\n                                        <ContainedButton\r\n                                            startIcon={<DownloadIcon />}>\r\n                                            {t('EditStream.table.download')}\r\n                                        </ContainedButton>\r\n                                    </TableCellStyled>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {Object.keys(participantsList).map((participantUid, index) => (\r\n                                    <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\r\n                                        key={`Participant-${participantUid}`}>\r\n                                        <TableCellStyled align='center' className={classes.firstCell}>\r\n                                            <Avatar className={classes.avatar} />\r\n                                        </TableCellStyled>\r\n                                        <TableCellStyled>\r\n                                            {participantsList[participantUid].userName}\r\n                                        </TableCellStyled>\r\n                                        <TableCellStyled>\r\n                                            {participantsList[participantUid].userName}\r\n                                        </TableCellStyled>\r\n                                        <TableCellStyled className={classes.lastCell}>\r\n                                            {participantsList[participantUid].userName}\r\n                                        </TableCellStyled>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default EditStreamerEvent;",["242","243"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js",[],["244","245"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx",["246","247","248","249","250"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx",["251","252","253"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Hidden\r\n} from '@material-ui/core';\r\nimport dayjs from 'dayjs';\r\n\r\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\r\nimport { ReactComponent as QaplaGaming } from './../../assets/QaplaGamingLandingPage.svg';\r\nimport styles from './StreamersSignin.module.css';\r\nimport SignInImage from './../../assets/SignIn.png';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\r\nimport { getUserToken, subscribeStreamerToTwitchWebhook, subscribeStreamerToMailerLiteGroup } from '../../services/functions';\r\nimport { createStreamerProfile, getInteractionsRewardData, getNumberOfVisits, getStreamerDeepLink, setVisitsCounter, updateStreamerProfile, userHasPublicProfile } from '../../services/database';\r\nimport { webhookStreamOffline, webhookStreamOnline } from '../../utilities/Constants';\r\nimport { getTwitchUserData } from '../../services/twitch';\r\n\r\nvar utc = require('dayjs/plugin/utc');\r\ndayjs.extend(utc);\r\n\r\nfunction useQuery() {\r\n    const { search } = useLocation();\r\n\r\n    return useMemo(() => new URLSearchParams(search), [search]);\r\n}\r\n\r\nconst StreamersSignin = ({ user, title }) => {\r\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\r\n    const [openTermsAndConditionsDialog, setOpenTermsAndConditionsDialog] = useState(false);\r\n    const history = useHistory();\r\n    const query = useQuery();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function checkIfUsersIsSigningIn() {\r\n            const twitchClientCode = query.get('code');\r\n\r\n            if (!isLoadingAuth && !user && twitchClientCode) {\r\n                setIsLoadingAuth(true);\r\n                const tokenData = await getUserToken(twitchClientCode);\r\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\r\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\r\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\r\n\r\n                    if (user.userData.isNewUser) {\r\n                        try {\r\n                            await subscribeStreamerToMailerLiteGroup(user.userData.email, user.userData.displayName);\r\n                        } catch (error) {\r\n                            console.error(error);\r\n                        }\r\n\r\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOnline.type, webhookStreamOnline.callback);\r\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOffline.type, webhookStreamOffline.callback);\r\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\r\n                    }\r\n\r\n                    try {\r\n                        await updateStreamerProfile(user.firebaseAuthUser.user.uid, {\r\n                            twitchAccessToken: tokenData.data.access_token,\r\n                            refreshToken: tokenData.data.refresh_token,\r\n                            displayName: user.userData.displayName,\r\n                            photoUrl: user.userData.photoUrl,\r\n                            broadcasterType: user.userData.broadcasterType\r\n                        });\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                } else {\r\n                    alert(t('StreamersSignin.alerts.errorSignIn'));\r\n                }\r\n            }\r\n        }\r\n        async function redirectUser(uid) {\r\n            const interactionsRewardData = await getInteractionsRewardData(uid);\r\n            if (interactionsRewardData.exists()) {\r\n                const userHasProfile = await userHasPublicProfile(uid);\r\n                const userHasLink = await getStreamerDeepLink(uid);\r\n\r\n                /**\r\n                 * This flag ensures that the next time the user enters after creating their interactions reward they will be redirected\r\n                 * to create their profile\r\n                 */\r\n                const userHasBeenRedirectedToCreateProfile = localStorage.getItem('userHasBeenRedirectedToCreateProfile');\r\n\r\n                // We use this to know if the user must be redirected again to create a profile\r\n                const numberOfTimesUserEnterDashboard = await getNumberOfVisits(uid);\r\n                await setVisitsCounter(uid, numberOfTimesUserEnterDashboard.val() < 2 ? numberOfTimesUserEnterDashboard.val() + 1 : 0);\r\n\r\n                if (userHasBeenRedirectedToCreateProfile && numberOfTimesUserEnterDashboard.val() < 2) {\r\n                    history.push('/profile');\r\n                } else {\r\n                    if ((userHasProfile && userHasLink.exists()) || numberOfTimesUserEnterDashboard.val() < 2) {\r\n                        history.push('/profile');\r\n                    } else {\r\n                        history.push('/editProfile');\r\n                        localStorage.setItem('userHasBeenRedirectedToCreateProfile', 'true');\r\n                    }\r\n                }\r\n            } else {\r\n                history.push('/profile');\r\n            }\r\n        }\r\n\r\n        checkIfUsersIsSigningIn();\r\n\r\n        if (user) {\r\n            redirectUser(user.uid);\r\n        }\r\n    }, [user, history, isLoadingAuth]);\r\n\r\n    const signIn = () => {\r\n        setIsLoadingAuth(true);\r\n        signInWithTwitch();\r\n        setIsLoadingAuth(false);\r\n    }\r\n\r\n    if (user === undefined) {\r\n        return (\r\n            <StreamerDashboardContainer>\r\n                <Grid item md='1' />\r\n                <Grid item md='6' className={styles.mainContainer}>\r\n                    <QaplaGaming style={{ marginTop: '100px', marginBottom: '80px', transform: 'scale(0.9)' }} />\r\n                    <p className={styles.getStarted}>\r\n                        {title}\r\n                    </p>\r\n                    <div className={styles.formContainer}>\r\n                        <Button variant='contained'\r\n                            className={styles.continueButton}\r\n                            disabled={isLoadingAuth}\r\n                            startIcon={<TwitchIcon />}\r\n                            onClick={signIn}>\r\n                            {!isLoadingAuth ?\r\n                                t('StreamersSignin.signIn')\r\n                                :\r\n                                t('StreamersSignin.loading')\r\n                            }\r\n                        </Button>\r\n                        <p style={{ marginTop: '38px', color: '#FFF', fontSize: '.8rem' }}>\r\n                            {t('StreamersSignin.termsAndConditionsP1')}\r\n                            <a style={{ cursor: 'pointer', color: '#3B4BF9' }} href={t('Onboarding.termsOfUseUrl')} target='_blank' rel=\"noreferrer\">\r\n                                {t('StreamersSignin.termsAndConditionsP2')}\r\n                            </a>\r\n                        </p>\r\n                    </div>\r\n                    <Hidden smDown>\r\n                        <div className={styles.bottomImage} >\r\n                            <img src={SignInImage} alt='Sign In' />\r\n                        </div>\r\n                    </Hidden>\r\n                </Grid>\r\n                <Grid item md='1' />\r\n            </StreamerDashboardContainer>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamersSignin;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx",["254","255"],"import React, { useState, useReducer, useEffect } from 'react';\r\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, CircularProgress } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport DayJsUtils from '@date-io/dayjs';\r\n\r\nimport { createNewStreamRequest, updateStreamerProfile } from './../../services/database';\r\nimport styles from './NewStream.module.css';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\r\nimport BackButton from '../BackButton/BackButton';\r\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\r\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    label: {\r\n        color: '#FFF',\r\n        fontSize: '14px'\r\n    },\r\n    titleLabel: {\r\n        marginBottom: 8\r\n    },\r\n    datePickerLabel: {\r\n        marginBottom: theme.spacing(1),\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px',\r\n        width:'274px'\r\n    },\r\n    button: {\r\n        color: '#FFF',\r\n        backgroundColor: '#6C5DD3',\r\n        borderRadius: '1rem',\r\n        padding: '1rem 3rem 1rem 3rem'\r\n    },\r\n    dateInput: {\r\n        color: '#FFF',\r\n        paddingLeft: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '.5rem',\r\n        fontSize: '14px',\r\n        height: '56px',\r\n        '& .MuiInputAdornment-root': {\r\n            width: '20px',\r\n            marginLeft: '-6px',\r\n            marginRight: '18px',\r\n            zIndex: '10',\r\n            height: '56px',\r\n        }\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n        '& .MuiPickersToolbar-toolbar': {\r\n            borderRadius: '20px'\r\n        },\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n    accordionContainer: {\r\n        marginTop: '3%',\r\n    },\r\n    accordion: {\r\n        backgroundColor: '#0D1021',\r\n        width: '66%',\r\n    },\r\n    accordionGridRoot: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n    accordionGridItem: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n}));\r\n\r\nconst NewStream = ({ user, games, qoinsDrops }) => {\r\n    const userLang = navigator.language || navigator.userLanguage;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\r\n    const [selectedGame, setSelectedGame] = useState();\r\n    const [selectedEvent, setSelectedEvent] = useState('exp');\r\n    const [stringDate, setStringDate] = useState('');\r\n    const [clockOpen, setClockOpen] = useState(false);\r\n    const [calendarOpen, setCalendarOpen] = useState(false);\r\n    const [gamesData, setGamesData] = useState([]);\r\n    const [dropsForStream, setDropsForStream] = useState(null);\r\n    const [lockSendButton, setLockSendButton] = useState(false);\r\n    const [dropsError, setDropsError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        let gameList = [];\r\n\r\n        if (games.allGames) {\r\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\r\n\r\n            let tempGamesData = [];\r\n            gameList.forEach((game) => {\r\n                tempGamesData.push({\r\n                    id: game.gameKey,\r\n                    name: game.gameName\r\n                })\r\n            });\r\n\r\n            setGamesData(tempGamesData);\r\n        }\r\n\r\n        if (dropsForStream === null && qoinsDrops.original > 0) {\r\n            setDropsForStream(qoinsDrops.original - qoinsDrops.used < 50 ? qoinsDrops.original - qoinsDrops.used : 50);\r\n        }\r\n    }, [games.allGames, user, qoinsDrops, dropsForStream]);\r\n\r\n    const optionalDataReducer = (state, action) => {\r\n        // We don´t need this to be a reducer anymore, we should change it later\r\n        switch (action.target.id) {\r\n            case 'eventTitle':\r\n                return ({\r\n                    ...state,\r\n                    title: action.target.value\r\n                });\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\r\n\r\n    // Minimum valid date is 5 minutes from the current date\r\n    const minDate = new Date((new Date()).getTime() + 300000);\r\n\r\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\r\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\r\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\r\n\r\n    const handleDateChange = (date) => {\r\n        try {\r\n            setSelectedDate(date.$d);\r\n\r\n        } catch (e) { console.log(e) }\r\n\r\n        setDisplayDate(date)\r\n    };\r\n\r\n    const setDrops = (drops) => {\r\n        if (drops >= 0) {\r\n            if (drops > qoinsDrops.original - qoinsDrops.used) {\r\n                setDropsError(\r\n                    <p style={{ fontSize: 12, fontWeight: '400', color: '#FF0000', marginTop: 8 }}>\r\n                        {t('NewStream.dropsAboveLimitErrorP1')}\r\n                        <span style={{ color: '#00FFDD', fontSize: 12 }}>\r\n                            {t('NewStream.dropsAboveLimitErrorP2', { drops: qoinsDrops.original - qoinsDrops.used })}\r\n                        </span>\r\n                        {t('NewStream.dropsAboveLimitErrorP3')}\r\n                    </p>\r\n                );\r\n            } else if (drops === 0) {\r\n                setDropsError(\r\n                    <p style={{ fontSize: 12, fontWeight: '400', color: '#FF0000', marginTop: 8 }}>\r\n                        {t('NewStream.setValidAmountOfDropsP1')}\r\n                        <span style={{ color: '#00FFDD', fontSize: 12 }}>\r\n                            {t('NewStream.setValidAmountOfDropsP2', { drops: qoinsDrops.original - qoinsDrops.used })}\r\n                        </span>\r\n                    </p>\r\n                );\r\n            } else {\r\n                setDropsError(null);\r\n            }\r\n\r\n            setDropsForStream(drops);\r\n        }\r\n    }\r\n\r\n    const submitEvent = async () => {\r\n        setLockSendButton(true);\r\n        if (user.broadcasterType === '') {\r\n            setLockSendButton(false);\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        // User is not premium and don´t have a Free Trial\r\n        if (user.premium === undefined && user.freeTrial === undefined) {\r\n            return setLockSendButton(false);\r\n        }\r\n\r\n        if (selectedDate < minDate) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.beforeXminutes'));\r\n            return;\r\n        }\r\n        if (!selectedGame) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.missingData'));\r\n            return;\r\n        }\r\n\r\n        if (user.currentPeriod) {\r\n            const { endDate } = user.currentPeriod;\r\n\r\n            /**\r\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\r\n             */\r\n            if (selectedDate.getTime() <= endDate) {\r\n\r\n                const userCanCreateStream = qoinsDrops.original;\r\n\r\n                /**\r\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\r\n                 * is lower or equal to the user limit per month then we create the event\r\n                 */\r\n                if (userCanCreateStream) {\r\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\r\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\r\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\r\n\r\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\r\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\r\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\r\n\r\n                    let streamerData = {\r\n                        displayName: user.displayName,\r\n                        login: user.login,\r\n                        photoUrl: user.photoUrl\r\n                    };\r\n\r\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\r\n                    if (userData && userData.data) {\r\n                        streamerData = {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url\r\n                        };\r\n\r\n                        await updateStreamerProfile(user.uid, {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url,\r\n                            broadcasterType: userData.data.broadcaster_type\r\n                        });\r\n                    }\r\n\r\n                    let titles = {\r\n                        es: '🪂 Únete y obtén Drops de Qoins',\r\n                        en: '🪂 Join to get Qoins Drops'\r\n                    };\r\n\r\n                    if (optionalData.title) {\r\n                        titles = {\r\n                            es: optionalData.title,\r\n                            en: optionalData.title\r\n                        };\r\n                    }\r\n\r\n                    await createNewStreamRequest(\r\n                        user.uid,\r\n                        streamerData,\r\n                        selectedGame,\r\n                        UTCDate,\r\n                        UTCTime,\r\n                        selectedEvent,\r\n                        selectedDate.getTime(),\r\n                        titles,\r\n                        (new Date()).getTime(),\r\n                        stringDate,\r\n                        dropsForStream,\r\n                        () => {\r\n                            window.analytics.track('Stream requested', {\r\n                                selectedGame,\r\n                                selectedDate: selectedDate.getTime(),\r\n                                uid: user.uid\r\n                            });\r\n                            setOpenSuccessDialog(true);\r\n                        }\r\n                    );\r\n                }\r\n            } else {\r\n                alert(t('NewStream.alerts.beforePlanExpiration'));\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user}>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <BackButton onClick={history.goBack} />\r\n                </Grid>\r\n                <Grid item sm={8}>\r\n                    <h1 className={styles.title}>\r\n                        {t('NewStream.whatAreYouPlaying')}\r\n                    </h1>\r\n                    <Grid container spacing={4} style={{width: '800px',marginTop: '2px' }}>\r\n                        <Grid item sm={5} style={{ width: '274px', maxWidth: '308px', }}>\r\n                            <InputLabel className={classes.datePickerLabel}>\r\n                                {t('NewStream.pickACategory')}\r\n                            </InputLabel>\r\n                            <ReactSearchAutocomplete\r\n                                items={gamesData}\r\n                                autofocus\r\n                                placeholder={t('NewStream.categoryPickerPlaceholder')}\r\n                                showItemsOnFocus\r\n                                maxResults={gamesData.length}\r\n                                onSelect={(game) => setSelectedGame(game.id)}\r\n                                onClear={() => setSelectedGame(null)}\r\n                                styling={{\r\n                                    zIndex: 999,\r\n                                    height: '56px',\r\n                                    width: '274px',\r\n                                    color: '#FFF',\r\n                                    hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\r\n                                    fontSize: '1rem',\r\n                                    fontWeight: 'bold',\r\n                                    backgroundColor: '#141833',\r\n                                    border: 'none',\r\n                                    borderRadius: '8px',\r\n                                    placeholderColor: 'rgba(255, 255, 255, 0.5)',\r\n                                    fontFamily: 'Inter',\r\n                                    lineColor: 'transparent',\r\n                                }}\r\n                                showIcon={false}\r\n                                formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <h1 className={styles.title}>\r\n                        {t('NewStream.when')}\r\n                    </h1>\r\n                    <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                            <Grid item sm={5} style={{ maxWidth: '304px', }}>\r\n                                <InputLabel className={classes.datePickerLabel} >\r\n                                    {t('NewStream.date')}\r\n                                </InputLabel>\r\n                                <KeyboardDatePicker\r\n                                    open={calendarOpen}\r\n                                    onClick={() => setCalendarOpen(true)}\r\n                                    onOpen={() => { }}\r\n                                    onClose={() => setCalendarOpen(false)}\r\n                                    clearable\r\n                                    disablePast\r\n                                    disableToolbar\r\n                                    autoOk\r\n                                    value={displayDate}\r\n                                    placeholder='10-10-2021'\r\n                                    onChange={handleDateChange}\r\n                                    defaultValue={new Date()}\r\n                                    minDate={minDate}\r\n                                    minDateMessage={t('NewStream.alerts.beforeXminutes')}\r\n                                    format='DD-MM-YY ddd'\r\n                                    style={{width:'274px', height:'56px'}}\r\n                                    keyboardIcon={\r\n                                        <InputAdornment position='end' >\r\n                                            <CalendarIcon />\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    InputProps={{\r\n                                        disableUnderline: true,\r\n                                        className: classes.dateInput\r\n                                    }}\r\n                                    variant={'inline'}\r\n                                    PopoverProps={{\r\n                                        PaperProps: {\r\n                                            className: classes.popover,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                <InputLabel className={classes.datePickerLabel}>\r\n                                    {t('NewStream.time')}\r\n                                </InputLabel>\r\n                                <KeyboardTimePicker\r\n                                    open={clockOpen}\r\n                                    onClick={() => setClockOpen(true)}\r\n                                    onOpen={() => { }}\r\n                                    onClose={() => setClockOpen(false)}\r\n                                    autoOk\r\n                                    error={selectedDate <= minDate}\r\n                                    helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.beforeXminutes')}\r\n                                    value={displayDate}\r\n                                    placeholder='08:00 AM'\r\n                                    onChange={handleDateChange}\r\n                                    style={{width:'274px',height:'56px'}}\r\n                                    // mask='__:__ _M'\r\n                                    keyboardIcon={\r\n                                        <InputAdornment position='end' >\r\n                                            <TimeIcon />\r\n                                        </InputAdornment>\r\n                                    }\r\n                                    InputProps={{\r\n                                        disableUnderline: true,\r\n                                        className: classes.dateInput\r\n                                    }}\r\n                                    variant={'inline'}\r\n                                    PopoverProps={{\r\n                                        PaperProps: {\r\n                                            className: classes.popover,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </MuiPickersUtilsProvider>\r\n                    <Grid  spacing={4} style={{ marginTop: '2px' }}>\r\n                        <Grid item sm={5}  style={{display: 'flex'}}>\r\n                            <Grid >\r\n                                <h1 className={styles.title}>\r\n                                    {t('NewStream.streamTitle')}\r\n                                    <span style={{ fontSize: 16 }}>\r\n                                        {t('NewStream.optional')}\r\n                                    </span>\r\n                                </h1>\r\n                                <p className={styles.subTitle}>\r\n                                    {t('NewStream.streamTitleDescription')}\r\n                                </p>\r\n                                <Grid container spacing={4} style={{ marginTop:'10px'}}>\r\n                                    <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px'}}>\r\n                                        <StreamerTextInput\r\n                                            labelClassName={classes.titleLabel}\r\n                                            label={t('NewStream.streamTitle')}\r\n                                            placeholder={t('NewStream.streamTitlePlaceholder')}\r\n                                            id='eventTitle'\r\n                                            fullWidth={true}\r\n                                            value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\r\n                                            onChange={(e) => optionalDataDispatcher({ target: e.target })}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid  style={{marginLeft:'30px'}}>\r\n                                <h1 className={styles.title}>\r\n                                    {t('NewStream.dropsTitle')}\r\n                                </h1>\r\n                                <p className={styles.subTitle}>\r\n                                    {t('NewStream.dropsDescription')}\r\n                                </p>\r\n                                <Grid container spacing={4} style={{ marginTop:'10px'}}>\r\n                                    <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px'}}>\r\n                                        <StreamerTextInput\r\n                                            labelClassName={classes.titleLabel}\r\n                                            label={t('NewStream.maxLimit')}\r\n                                            id='eventTitle'\r\n                                            fullWidth={true}\r\n                                            value={dropsForStream}\r\n                                            onChange={(e) => setDrops(Number(e.target.value))}\r\n                                            type='Number'\r\n                                        />\r\n                                        {dropsError}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        disabled={lockSendButton || dropsError || !dropsForStream}\r\n                        className={styles.button}\r\n                        onClick={submitEvent}>\r\n                        {lockSendButton ?\r\n                            <CircularProgress\r\n                                style={{\r\n                                    color: '#fff7',\r\n                                    alignSelf: 'center'\r\n                                }}\r\n                                size={25} />\r\n                            :\r\n                            t('NewStream.submit')\r\n                        }\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <NewStreamSuccessDialog\r\n                open={openSuccessDialog}\r\n                onClose={() => history.push('/profile')}\r\n                mainPage={() => history.push('/profile')}\r\n            />\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default NewStream;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx",["256","257","258"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { GiphyFetch } from '@giphy/js-fetch-api';\r\nimport { Video } from '@giphy/react-components';\r\n\r\nimport styles from './LiveDonations.module.css';\r\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\r\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation, listenToStreamerAlertsSettings, markOverlayAsActive, onLiveDonationsDisconnect, listenForUberduckAudio, removeListenerForUberduckAudio } from '../../services/database';\r\nimport channelPointReactionAudio from '../../assets/channelPointReactionAudio.mp3';\r\nimport qoinsReactionAudio from '../../assets/qoinsReactionAudio.mp3';\r\nimport { speakCheerMessage, speakCheerMessageUberDuck } from '../../services/functions';\r\nimport { EMOTE, GIPHY_CLIP, GIPHY_CLIPS, GIPHY_GIF, GIPHY_GIFS, GIPHY_STICKER, GIPHY_STICKERS, MEME, MEMES, TEST_MESSAGE_SPEECH_URL } from '../../utilities/Constants';\r\nimport QaplaOnLeft from '../../assets/Qapla-On-Overlay-Left.png';\r\nimport QaplaOnRight from '../../assets/Qapla-On-Overlay-Right.png';\r\nimport { getCheerVoiceMessage } from '../../services/storage';\r\n\r\nconst gf = new GiphyFetch('1WgsSOSfrTXTN4IGMMuhajM7WsfxoSdq');\r\n\r\nlet audioAlert = new Audio(channelPointReactionAudio);\r\nlet voiceBotMessage = new Audio(channelPointReactionAudio);\r\n\r\nconst LiveDonations = () => {\r\n    const [streamerUid, setStreamerUid] = useState('');\r\n    const [donationQueue, setDonationQueue] = useState([]);\r\n    const [donationToShow, setDonationToShow] = useState(null);\r\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\r\n    const [alertSideRight, setAlertSideRight] = useState(false);\r\n    const [isPlayingAudio, setIsPlayingAudio] = useState(false);\r\n    const [qaplaOnOpacity, setQaplaOnOpacity] = useState(1);\r\n    const [playQaplaOnAnimation, setPlayQaplaOnAnimation] = useState(\"false\");\r\n    const [showEmojiRain, setShowEmojiRain] = useState(false);\r\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\r\n    const { streamerId } = useParams();\r\n\r\n    useEffect(() => {\r\n        queueAnimation();\r\n        const pushDonation = (donation) => {\r\n            setDonationQueue((array) => [donation, ...array]);\r\n        }\r\n\r\n        const popDonation = () => {\r\n            const indexToPop = donationQueue.length - 1;\r\n            const donationToPop = donationQueue[indexToPop];\r\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\r\n\r\n            return donationToPop;\r\n        }\r\n\r\n        async function getStreamerUid() {\r\n            if (streamerId) {\r\n                const uid = await getStreamerUidWithTwitchId(streamerId);\r\n                setStreamerUid(uid);\r\n\r\n                listenToStreamerAlertsSettings(uid, (streamerSettings) => {\r\n                    if (streamerSettings.exists()) {\r\n                        setReactionsEnabled(streamerSettings.val().reactionsEnabled !== false);\r\n                        setAlertSideRight(streamerSettings.val().alertSideRight);\r\n                    }\r\n                });\r\n\r\n                listenForTestCheers(uid, (donation) => {\r\n                    pushDonation({ ...donation.val(), id: donation.key });\r\n                });\r\n            }\r\n        }\r\n\r\n        async function loadDonations() {\r\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\r\n                pushDonation({ ...donation.val(), id: donation.key });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Emoji rain functions\r\n         */\r\n         let circles = [];\r\n\r\n         function addCircle(delay, range, color) {\r\n             setTimeout(function () {\r\n                let c = new Circle(range[0] + Math.random() * range[1], 80 + Math.random() * 4, color, {\r\n                    x: -0.15 + Math.random() * 0.3,\r\n                    y: 1 + Math.random() * 10\r\n                }, range);\r\n\r\n                circles.push(c);\r\n            }, delay);\r\n         }\r\n\r\n         function addEmoteCircle(delay, range, color) {\r\n            setTimeout(function () {\r\n               let c = new EmoteCircle(range[0] + Math.random() * range[1], 80 + Math.random() * 4, color, {\r\n                   x: -0.15 + Math.random() * 0.3,\r\n                   y: 1 + Math.random() * 10\r\n               }, range);\r\n\r\n               circles.push(c);\r\n           }, delay);\r\n        }\r\n\r\n         class Circle {\r\n            constructor(x, y, color, velocity, range) {\r\n                let _this = this;\r\n                this.x = x;\r\n                this.y = y;\r\n                this.color = color;\r\n                this.velocity = velocity;\r\n                this.range = range;\r\n                this.element = document.createElement('span');\r\n                /*this.element.style.display = 'block';*/\r\n                this.element.style.opacity = 0;\r\n                this.element.style.position = 'absolute';\r\n                this.element.style.fontSize = '26px';\r\n                this.element.style.color = 'hsl(' + (Math.random() * 360 | 0) + ',80%,50%)';\r\n                this.element.innerHTML = color;\r\n                const container = document.getElementById('animate');\r\n                if (container) {\r\n                    container.appendChild(this.element);\r\n                }\r\n\r\n                this.update = function () {\r\n                    if (_this.y > 800) {\r\n                        _this.y = 80 + Math.random() * 4;\r\n                        _this.x = _this.range[0] + Math.random() * _this.range[1];\r\n                    }\r\n                    _this.y += _this.velocity.y;\r\n                    _this.x += _this.velocity.x;\r\n                    this.element.style.opacity = 1;\r\n                    this.element.style.transform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                    this.element.style.webkitTransform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                    this.element.style.mozTransform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                };\r\n            }\r\n        }\r\n\r\n        class EmoteCircle {\r\n            constructor(x, y, color, velocity, range) {\r\n                let _this = this;\r\n                this.x = x;\r\n                this.y = y;\r\n                this.color = color;\r\n                this.velocity = velocity;\r\n                this.range = range;\r\n                this.element = document.createElement('img');\r\n                /*this.element.style.display = 'block';*/\r\n                this.element.style.opacity = 0;\r\n                this.element.style.position = 'absolute';\r\n                this.element.style.color = 'hsl(' + (Math.random() * 360 | 0) + ',80%,50%)';\r\n                this.element.style.width = '30px'\r\n                this.element.style.height = '30px'\r\n                this.element.src = color;\r\n                const container = document.getElementById('animate');\r\n                if (container) {\r\n                    container.appendChild(this.element);\r\n                }\r\n\r\n                this.update = function () {\r\n                    if (_this.y > 800) {\r\n                        _this.y = 80 + Math.random() * 4;\r\n                        _this.x = _this.range[0] + Math.random() * _this.range[1];\r\n                    }\r\n                    _this.y += _this.velocity.y;\r\n                    _this.x += _this.velocity.x;\r\n                    this.element.style.opacity = 1;\r\n                    this.element.style.transform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                    this.element.style.webkitTransform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                    this.element.style.mozTransform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                };\r\n            }\r\n        }\r\n\r\n         function animate() {\r\n            for (let i in circles) {\r\n                circles[i].update();\r\n            }\r\n\r\n            return requestAnimationFrame(animate);\r\n         }\r\n\r\n        function executeEmojiRain(emoji) {\r\n            setShowEmojiRain(true);\r\n            for (let i = 0; i < 10; i++) {\r\n                addCircle(i * 350, [10 + 0, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 0, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 - 200, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 200, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 - 400, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 400, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 - 600, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 600, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 600, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 600, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n            }\r\n\r\n            animate();\r\n        }\r\n\r\n        function executeEmoteRain(emote) {\r\n            setShowEmojiRain(true);\r\n            for (let i = 0; i < 10; i++) {\r\n                addEmoteCircle(i * 350, [10 + 0, 300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 + 0, -300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 - 200, -300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 + 200, 300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 - 400, -300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 + 400, 300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 - 600, -300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 + 600, 300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 + 600, 300], emote[Math.floor(Math.random() * emote.length)]);\r\n                addEmoteCircle(i * 350, [10 + 600, 300], emote[Math.floor(Math.random() * emote.length)]);\r\n            }\r\n\r\n            animate();\r\n        }\r\n\r\n        if (streamerUid && !listenersAreSetted) {\r\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\r\n                setListenersAreSetted(true);\r\n                if (isStreaming.exists() && isStreaming.val()) {\r\n                    setTimeout(() => {\r\n                        loadDonations();\r\n                    }, 150);\r\n                } else {\r\n                    removeListenerForUnreadStreamerCheers(streamerUid);\r\n                    setDonationQueue([]);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (donationQueue.length > 0 && !isPlayingAudio && reactionsEnabled) {\r\n            setIsPlayingAudio(true);\r\n            const donation = popDonation();\r\n\r\n            async function showCheer(audioUrl) {\r\n                const qoinsDonation = donation.amountQoins && donation.amountQoins >= 100;\r\n                const bigQoinsDonation = Boolean(qoinsDonation && donation.amountQoins >= 1000).valueOf();\r\n                audioAlert = new Audio(qoinsDonation ? qoinsReactionAudio : channelPointReactionAudio);\r\n                if (audioUrl || !donation.repeating) {\r\n                    const voiceToUse = donation.messageExtraData && donation.messageExtraData.voiceAPIName ? donation.messageExtraData.voiceAPIName : 'es-US-Standard-A';\r\n\r\n                    if (donation.message) {\r\n                        if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\r\n                            voiceBotMessage = new Audio(TEST_MESSAGE_SPEECH_URL);\r\n                        } else {\r\n                            const messageToRead = bigQoinsDonation ? `${donation.twitchUserName} has sent you ${donation.amountQoins} coins and says: ${donation.message}` : `${donation.twitchUserName} say: ${donation.message}`;\r\n\r\n                            window.analytics.track('Cheer received', {\r\n                                user: donation.twitchUserName,\r\n                                containsMessage: true,\r\n                                message: messageToRead\r\n                            });\r\n                            const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, voiceToUse, 'en-US');\r\n                            voiceBotMessage = new Audio(audioUrl ? audioUrl : cheerMessageUrl.data);\r\n                        }\r\n                    } else if (bigQoinsDonation) {\r\n                        const messageToRead = `${donation.twitchUserName} has sent you ${donation.amountQoins} Coins`;\r\n\r\n                        window.analytics.track('Cheer received', {\r\n                            user: donation.twitchUserName,\r\n                            containsMessage: false\r\n                        });\r\n                        const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, voiceToUse, 'en-US');\r\n                        voiceBotMessage = new Audio(audioUrl ? audioUrl : cheerMessageUrl.data);\r\n                    }\r\n                } else {\r\n                    try {\r\n                        const cheerMessageUrl = await getCheerVoiceMessage(streamerUid, donation.id);\r\n\r\n                        if (cheerMessageUrl) {\r\n                            voiceBotMessage = new Audio(cheerMessageUrl);\r\n                        }\r\n                    } catch (error) {\r\n                        console.log('Message not found, what must be do here?');\r\n                    }\r\n                }\r\n\r\n                donation.isRightSide = alertSideRight;\r\n\r\n                setDonationToShow(donation);\r\n\r\n                if (donation.emojiRain && donation.emojiRain.emojis) {\r\n                    if (donation.emojiRain.type === EMOTE) {\r\n                        executeEmoteRain(donation.emojiRain.emojis);\r\n                    } else {\r\n                        executeEmojiRain(donation.emojiRain.emojis);\r\n                    }\r\n                }\r\n\r\n                if (!donation.message && !bigQoinsDonation) {\r\n                    audioAlert.onended = () => {\r\n                        setTimeout(() => {\r\n                            finishReaction(donation);\r\n                        }, 5000);\r\n                    }\r\n                } else {\r\n                    voiceBotMessage.onended = () => {\r\n                        setTimeout(() => {\r\n                            finishReaction(donation);\r\n                        }, 5000);\r\n                    }\r\n                }\r\n            }\r\n\r\n            async function initCheer() {\r\n                if (donation.messageExtraData && donation.messageExtraData.voiceAPIName && donation.messageExtraData && donation.messageExtraData.voiceAPIName.includes('Uberduck:')) {\r\n                    // 9 Because the string \"Uberduck:\" length is 9\r\n                    const voiceUuid = donation.messageExtraData.voiceAPIName.substring(9);\r\n                    await speakCheerMessageUberDuck(donation.id, donation.message, voiceUuid);\r\n                    listenForUberduckAudio(donation.id, (url) => {\r\n                        if (url.exists()) {\r\n                            if (url.val() !== 'error') {\r\n                                showCheer(url.val());\r\n                            } else {\r\n                                showCheer();\r\n                            }\r\n\r\n                            removeListenerForUberduckAudio(donation.id);\r\n                        }\r\n                    });\r\n                } else {\r\n                    showCheer();\r\n                }\r\n            }\r\n\r\n            initCheer();\r\n        }\r\n\r\n        if (!streamerUid) {\r\n            getStreamerUid();\r\n        }\r\n\r\n        if (streamerUid) {\r\n            async function listenToOverlayStatus() {\r\n                try {\r\n                    await markOverlayAsActive(streamerUid);\r\n                    onLiveDonationsDisconnect(streamerUid);\r\n                } catch (error) {\r\n                    console.log('Error mounting overlay listeners');\r\n                }\r\n            }\r\n\r\n            listenToOverlayStatus();\r\n        }\r\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled]);\r\n\r\n    function finishReaction(donation) {\r\n        setDonationToShow(null);\r\n        setShowEmojiRain(false);\r\n        if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\r\n            removeTestDonation(streamerUid, donation.id);\r\n        } else {\r\n            markDonationAsRead(streamerUid, donation.id);\r\n        }\r\n        setTimeout(() => {\r\n            setIsPlayingAudio(false);\r\n        }, 750);\r\n    }\r\n\r\n    const queueAnimation = () => {\r\n        if (qaplaOnOpacity !== 1) {\r\n            setTimeout(() => {\r\n                setPlayQaplaOnAnimation(\"true\");\r\n            }, 10 * 1000)\r\n        } else {\r\n            setTimeout(() => {\r\n                setPlayQaplaOnAnimation(\"true\");\r\n            }, 60 * 1000)\r\n        }\r\n    }\r\n\r\n    const startDonation = () => {\r\n        const qoinsDonation = donationToShow.amountQoins && donationToShow.amountQoins >= 100;\r\n        const bigQoinsDonation = Boolean(qoinsDonation && donationToShow.amountQoins >= 1000).valueOf();\r\n        if (bigQoinsDonation) {\r\n            voiceBotMessage.play();\r\n        } else if ((!donationToShow.media || donationToShow.media.type !== GIPHY_CLIP || donationToShow.media.type !== GIPHY_CLIPS)) {\r\n            audioAlert.play();\r\n            if (donationToShow.message) {\r\n                audioAlert.onended = () => {\r\n                    setTimeout(() => {\r\n                        voiceBotMessage.play();\r\n                    }, 750);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    document.body.style.backgroundColor = 'transparent';\r\n    return (\r\n        <div style={{ display: 'flex', backgroundColor: 'transparent', maxHeight: '100vh', width: '100%', placeItems: 'flex-end' }}>\r\n            {reactionsEnabled &&\r\n                <div\r\n                    onAnimationEnd={() => {\r\n                        setPlayQaplaOnAnimation(\"false\");\r\n                        if (qaplaOnOpacity === 1)\r\n                            setQaplaOnOpacity(0)\r\n                        if (qaplaOnOpacity === 0)\r\n                            setQaplaOnOpacity(1)\r\n                        queueAnimation();\r\n                    }}\r\n                    style={{\r\n                        position: 'fixed',\r\n                        bottom: '-15px',\r\n                        left: alertSideRight ? 'auto' : '-12px',\r\n                        right: alertSideRight ? '-12px' : 'auto',\r\n                        width: '150px',\r\n                    }}\r\n                    className=\"qapla-logo-container\"\r\n                    playAnimation={playQaplaOnAnimation}\r\n                >\r\n                    <style>{`\r\n                    @keyframes dissapear {\r\n                        from {\r\n                            opacity: ${qaplaOnOpacity === 1 ? 1 : 0};\r\n                        }\r\n                        to {\r\n                            opacity: ${qaplaOnOpacity === 1 ? 0 : 1};\r\n                        }\r\n                    }\r\n                    .qapla-logo-container{\r\n                        opacity: ${qaplaOnOpacity};\r\n                    }\r\n                    .qapla-logo-container[playAnimation=\"true\"] {\r\n                        animation-name: dissapear;\r\n                        animation-duration: 5s;\r\n                        animation-iteration-count: 1;\r\n                        animation-timing-function: ease-in-out;\r\n                    }\r\n                    `}</style>\r\n                    <img src={alertSideRight ? QaplaOnRight : QaplaOnLeft} alt=\"qapla logo\" />\r\n                </div>\r\n            }\r\n            {showEmojiRain &&\r\n                <div id=\"animate\" style={{\r\n                    position: 'fixed',\r\n                    top: 100,\r\n                    bottom: 0,\r\n                    left: '800px',\r\n                    right: 0,\r\n                    transform: 'scale(1.5)',\r\n                }}></div>\r\n            }\r\n            {donationToShow &&\r\n                <>\r\n                    <DonationHandler donationToShow={donationToShow} finishReaction={finishReaction} startDonation={startDonation} />\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DonationHandler = ({ donationToShow, finishReaction, startDonation }) => {\r\n    const [clip, setClip] = useState(null);\r\n    const [mediaReady, setMediaReady] = useState(false);\r\n    const [giphyTextReady, setGiphyTextReady] = useState(false);\r\n    const [showDonation, setShowDonation] = useState(false);\r\n    const [muteClip, setMuteClip] = useState(false);\r\n    const donation = donationToShow;\r\n\r\n    useEffect(() => {\r\n        const getClip = async () => {\r\n            const { data } = await gf.gif(donation.media.id);\r\n            setClip(data);\r\n            setShowDonation(true);\r\n        }\r\n\r\n        if ((donation.media && (donation.media.type === GIPHY_CLIP || donation.media.type === GIPHY_CLIPS) && donation.media.id) && !clip) {\r\n            getClip();\r\n        } else {\r\n            if (donation.media && donation.messageExtraData && donation.messageExtraData.giphyText && mediaReady && giphyTextReady) {\r\n                displayDonation();\r\n            }\r\n\r\n            if (!(donation.messageExtraData && donation.messageExtraData.giphyText) && donation.media && mediaReady) {\r\n                displayDonation();\r\n            }\r\n\r\n            if ((!donation.media) && donation.messageExtraData && donation.messageExtraData.giphyText && giphyTextReady) {\r\n                displayDonation();\r\n            }\r\n\r\n            if (donation.message && !donation.media && !(donation.messageExtraData && donation.messageExtraData.giphyText)) {\r\n                displayDonation();\r\n            }\r\n        }\r\n    }, [clip, mediaReady, giphyTextReady]);\r\n\r\n    const displayDonation = () => {\r\n        setShowDonation(true);\r\n        startDonation();\r\n    }\r\n\r\n    const onClipEnded = (count) => {\r\n        if (count === 1) {\r\n            setMuteClip(true);\r\n            const qoinsDonation = donation.amountQoins && donation.amountQoins >= 100;\r\n            const bigQoinsDonation = Boolean(qoinsDonation && donation.amountQoins >= 1000).valueOf();\r\n\r\n            if (bigQoinsDonation) {\r\n                setTimeout(() => {\r\n                    startDonation(donation);\r\n                }, 100);\r\n            } else {\r\n                setTimeout(() => {\r\n                    finishReaction(donation);\r\n                }, 5000);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            opacity: showDonation ? 1 : 0,\r\n            display: 'flex',\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n            backgroundColor: '#f0f0',\r\n            padding: '0px 40px',\r\n            marginBottom: '30px',\r\n            marginLeft: donation.isRightSide ? '0px' : '20px',\r\n            marginRight: donation.isRightSide ? '20px' : '0px'\r\n        }}>\r\n            {donation.media &&\r\n                <>\r\n                {donation.media && (donation.media.type === MEME || donation.media.type === GIPHY_GIF || donation.media.type === GIPHY_STICKER || donation.media.type === MEMES || donation.media.type === GIPHY_GIFS || donation.media.type === GIPHY_STICKERS) ?\r\n                    <img src={donation.media.url} alt='' style={{\r\n                        aspectRatio: donation.media.width / donation.media.height,\r\n                        display: 'flex',\r\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                        maxHeight: '250px',\r\n                        objectFit: 'scale-down'\r\n                    }}\r\n                    onLoad={() => setMediaReady(true)} />\r\n                    :\r\n                    donation.media && (donation.media.type === GIPHY_CLIP || donation.media.type === GIPHY_CLIPS) && clip ?\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            aspectRatio: donation.media.width / donation.media.height,\r\n                            alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                            maxHeight: '250px',\r\n                            objectFit: 'scale-down'\r\n                        }}>\r\n                            <Video hideAttribution gif={clip} height={250} muted={muteClip} loop onLoop={onClipEnded} />\r\n                        </div>\r\n                    :\r\n                    null\r\n                }\r\n                </>\r\n            }\r\n            {donation.messageExtraData && donation.messageExtraData.giphyText &&\r\n                <img src={donation.messageExtraData.giphyText.url} alt='' style={{\r\n                    aspectRatio: donation.messageExtraData.giphyText.width / donation.messageExtraData.giphyText.height,\r\n                    display: 'flex',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                    maxHeight: '250px',\r\n                    objectFit: 'scale-down'\r\n                }}\r\n                onLoad={() => setGiphyTextReady(true)} />\r\n            }\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-around',\r\n                    marginTop: '20px',\r\n                    width: 'fit-content',\r\n                    backgroundColor: '#4D00FB',\r\n                    marginLeft: donation.isRightSide ? '0px' : '-30px',\r\n                    marginRight: donation.isRightSide ? '-30px' : '0px',\r\n                    borderRadius: '30px',\r\n                    padding: '24px 24px',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                    zIndex: 10\r\n                }}\r\n            >\r\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\r\n                    <p style={{\r\n                        display: 'flex',\r\n                        color: 'white',\r\n                        fontSize: '26px',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <b style={{ color: '#0AFFD2' }}>{`${donation.twitchUserName} `}</b>\r\n                        {donation.amountQoins ?\r\n                            <>\r\n                            <div style={{ margin: '0 6px' }}>has sent you</div>\r\n                            <b style={{ color: '#0AFFD2', fontWeight: '700', }}>\r\n                                {`${donation.amountQoins.toLocaleString()} Qoins`}\r\n                            </b>\r\n                            </>\r\n                            :\r\n                            <b style={{ color: '#FFF', fontWeight: '700', margin: '0 6px' }}>\r\n                                reacted\r\n                            </b>\r\n                        }\r\n                    </p>\r\n                </div>\r\n                {donation.amountQoins ?\r\n                    <>\r\n                    <div style={{ width: '10px' }}></div>\r\n                    <div style={{ display: 'flex', alignSelf: 'center' }}>\r\n                        <DonatedQoin style={{ display: 'flex', width: '38px', height: '38px' }} />\r\n                    </div>\r\n                    </>\r\n                    :\r\n                    null\r\n                }\r\n            </div>\r\n            {(donation.message && !(donation.messageExtraData && donation.messageExtraData.giphyText)) &&\r\n                <div style={{\r\n                    display: 'flex',\r\n                    width: 'fit-content',\r\n                    backgroundColor: '#FFFFFF',\r\n                    marginTop: '-20px',\r\n                    borderRadius: '30px',\r\n                    borderTopLeftRadius: donation.isRightSide ? '30px' : '0px',\r\n                    borderTopRightRadius: donation.isRightSide ? '0px' : '30px',\r\n                    padding: '30px',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                }}>\r\n                    <p style={{\r\n                        display: 'flex',\r\n                        color: '#0D1021',\r\n                        fontSize: '24px',\r\n                        fontWeight: '600',\r\n                        lineHeight: '36px',\r\n                        letterSpacing: '0.6px'\r\n                    }}>{donation.message}</p>\r\n                </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default LiveDonations;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GiphyTextGenerator\\GiphyTextGenerator.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CardsPayments\\CardsPayments.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx",["259","260","261"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    makeStyles,\r\n    InputBase,\r\n    NativeSelect,\r\n    InputLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemText\r\n} from '@material-ui/core';\r\n\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\n\r\nconst useStyles = makeStyles({\r\n    label: {\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    input: {\r\n        display: 'flex',\r\n        position: 'absolute',\r\n        zIndex: 90,\r\n        overflow: 'hidden',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '16px',\r\n        color: '#FFF',\r\n        fontSize: '14px',\r\n    },\r\n    icon: {\r\n        color: 'transparent',\r\n        marginTop: 8,\r\n        marginRight: 8,\r\n        marginLeft: 8\r\n    }\r\n});\r\n\r\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false)\r\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            data.forEach(e => {\r\n                if (e.value === value) setSelectedLabel(e.label)\r\n            });\r\n        }\r\n        if (initialLabel && value === undefined) {\r\n            setSelectedLabel(initialLabel);\r\n        }\r\n    }, [data, initialLabel, value])\r\n\r\n    return (\r\n        <div className={classes.input} style={style}>\r\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\r\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\r\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\r\n                        style: {\r\n                            fontFamily: 'Inter'\r\n                        }\r\n                    }} />\r\n                    <div style={{ width: '10px' }} />\r\n                    <ArrowIcon style={{\r\n                        transform: open ? 'rotate(180deg)' : ''\r\n                    }} />\r\n                </ListItem>\r\n                <div style={{\r\n                    height: open ? maxHeightOpen || '' : '0px',\r\n                    overflowX: overflowX || 'scroll',\r\n                    overflowY: overflowY || 'scroll',\r\n                    marginTop: '-10px'\r\n                }}>\r\n                    <List style={{\r\n                        padding: '0px',\r\n                    }}>\r\n                        {data && data.map((dat) => {\r\n                            return (\r\n                                <>\r\n                                    {value !== dat.value &&\r\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\r\n                                            <ListItemText primary={dat.label} />\r\n                                        </ListItem>\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            </List>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default StreamerSelect;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx",[],["262","263"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutConfirmDialog\\CasthQutConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",[],["264","265"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BarProgressBit\\BarProgressBit.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx",[],["266","267"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx",["268","269","270"],"import React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\r\n\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\r\nimport ModalQoinsDrops from '../ModalQoinsDrops/ModalQoinsDrops';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dialogContainer: {\r\n        backdropFilter: 'blur(50px)',\r\n        [theme.breakpoints.down('md')]: {\r\n            backgroundColor: '#141833',\r\n        }\r\n    },\r\n    dialogRoot: {\r\n    },\r\n    paper: {\r\n        backgroundColor: '#141833',\r\n        color: '#FFF',\r\n        overflow: 'visible',\r\n        borderRadius: '35px',\r\n        padding: '64px',\r\n        minWidth: 'min-content',\r\n        [theme.breakpoints.down('md')]: {\r\n            minWidth: '100%',\r\n            minHeight: '100%',\r\n        }\r\n    },\r\n    itemsContainer: {\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            padding: '184px 66px 20px 66px',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexWrap: 'wrap',\r\n            gap: '50px 0px'\r\n        }\r\n    },\r\n    closeButtonContainer: {\r\n        position: 'absolute',\r\n        top: '24px',\r\n        right: '24px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '118px',\r\n            right: '128px',\r\n        }\r\n    },\r\n    closeButton: {\r\n        '&:hover': {\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    title: {\r\n        fontSize: '18px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '32px',\r\n        letterSpacing: '0px'\r\n    },\r\n    subtitle: {\r\n        color: '#FFFFFF9A',\r\n        fontSize: '12px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '18px',\r\n        letterSpacing: '0px',\r\n    },\r\n    startButtonRoot: {\r\n        backgroundColor: '#00FFDD',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    startText: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        color: '#FFFFFF'\r\n    },\r\n    enabledRewardText: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        color: '#00FFDD'\r\n    },\r\n    qoinsButtonRoot: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    qoinsButtonRootDisabled: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF !important',\r\n        textTransform: 'none',\r\n        opacity: '0.2'\r\n    },\r\n    textInputContainer: {\r\n        backgroundColor: '#202750',\r\n        borderRadius: '16px',\r\n        paddingRight: '4px',\r\n        overflow: 'hidden'\r\n    },\r\n    sendContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        [theme.breakpoints.up('md')]: {\r\n            minWidth: '400px',\r\n        },\r\n    },\r\n    sendButtonRoot: {\r\n        backgroundColor: '#6C5DD3',\r\n        width: '165px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        alignSelf: 'flex-end',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.9'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.8'\r\n        }\r\n    },\r\n    eventNameContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        position: 'absolute',\r\n        right: '30px',\r\n        bottom: '-40px',\r\n        gap: '0px 5px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '98px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            width: '60%',\r\n            // right: 'auto',\r\n            paddingTop: '30px',\r\n            backgroundColor: '#141833'\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            top: '148px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            right: 'auto',\r\n            paddingTop: '30px',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'column',\r\n        },\r\n\r\n        fontSize: '16px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '24px',\r\n        letterSpacing: '0px',\r\n    },\r\n    eventName: {\r\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\r\n        backgroundClip: 'text',\r\n        WebkitBackgroundClip: 'text',\r\n        WebkitTextFillColor: 'transparent'\r\n    },\r\n}));\r\n\r\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n    const [dots, setDots] = useState('')\r\n    const [enablingQoins, setEnablingQoins] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\r\n            setTimeout(() => {\r\n                if (dots.length > 2) {\r\n                    setDots('');\r\n                } else {\r\n                    setDots(dots + '.');\r\n                }\r\n            }, 500);\r\n        }\r\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\r\n            setDots('');\r\n        }\r\n    }, [streamStarted, dots, enablingQoins]);\r\n\r\n    const sendNotificationHandler = async () => {\r\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\r\n        await sendMessage(message);\r\n        setMessage('');\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open} classes={{\r\n            container: classes.dialogContainer,\r\n            root: classes.dialogRoot,\r\n            paper: classes.paper\r\n        }}\r\n            maxWidth='sm'\r\n            fullWidth>\r\n            <DialogContent style={{ padding: '0px' }}>\r\n                <div className={classes.closeButtonContainer}>\r\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\r\n                </div>\r\n                <div className={classes.itemsContainer}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\r\n                        <ModalQoinsDrops\r\n                            stream={stream}\r\n                            streamStarted={streamStarted}\r\n                            closingStream={closingStream}\r\n                            startStream={startStream}\r\n                            enableQoins={enableQoins} />\r\n                    </div>\r\n                    <div className={classes.sendContainer}>\r\n                        <p className={classes.title}>\r\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\r\n                        </p>\r\n                        <p className={classes.subtitle}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\r\n                        </p>\r\n                        <div style={{ height: '20px' }} />\r\n                        <StreamerTextInput\r\n                            value={message}\r\n                            onChange={(e) => setMessage(e.target.value)}\r\n                            textInputStyle={{ marginTop: '0px' }}\r\n                            textInputClassName={classes.textInputContainer}\r\n                            fullWidth\r\n                            multiline\r\n                            rows={6}\r\n                            maxRows={6}\r\n                            rowsMax={6}\r\n                        />\r\n                        <div style={{ height: '12px' }} />\r\n                        <Button\r\n                            onClick={sendNotificationHandler}\r\n                            classes={{\r\n                                root: classes.sendButtonRoot\r\n                            }}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <div className={classes.eventNameContainer}>\r\n                <p className={classes.eventName}>\r\n                    {`${streamTitle} `}\r\n                </p>\r\n                <p>\r\n                    {`/ ${date} / ${hour}`}\r\n                </p>\r\n            </div>\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default EventManagementDialog;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\DialogOnlyQoins\\DiealogOnlyQoins.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx",["271"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, Button, Box, Grid } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport styles from './PlanPicker.module.css';\r\nimport { getSubscriptionsDetails } from '../../services/database';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { MONTHLY, QUARTERLY, YEARLY } from '../../utilities/Constants';\r\n\r\nimport CardsPayments from '../CardsPayments/CardsPayments'\r\nimport { getCurrentLanguage } from '../../utilities/i18n';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    toggleButton: {\r\n        borderRadius: '6px',\r\n        margin: '0px 2px',\r\n        textAlign: 'center',\r\n        fontWeight: '600',\r\n        fontSize: '14px',\r\n        padding: '12px 24px',\r\n        lineHeight: 'normal',\r\n        textTransform: 'none',\r\n        minWidth: '114px',\r\n        letterSpacing: '-0.34px'\r\n    },\r\n    cardGridItem: {\r\n        margin: '0px 27px',\r\n        maxWidth: '430px',\r\n    },\r\n    essentialPlanContainer: {\r\n        background: '#141833',\r\n        borderRadius: 20\r\n    },\r\n    growthPlanContainer: {\r\n        background: '#3B4BF9',\r\n        borderRadius: 20\r\n    },\r\n    planBody: {\r\n        padding: '40px',\r\n        paddingBottom: '0px'\r\n    },\r\n    subscribeButton: {\r\n        height: '52px',\r\n        width: '260px',\r\n        lineHeight: '17px',\r\n        fontSize: '14px',\r\n        fontWeight: 700,\r\n        padding: '0px',\r\n        borderRadius: '10px',\r\n        letterSpacing: '-0.23px'\r\n    }\r\n}));\r\n\r\nconst ToggleButton = ({ currentValue, value, label, onChange }) => {\r\n    const classes = useStyles();\r\n    const active = currentValue === value;\r\n\r\n    const capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n    return (\r\n        <Button\r\n            className={classes.toggleButton}\r\n            style={{ background: active ? '#141833' : 'transparent', color: active ? '#FFF' : 'rgba(255, 255, 255, .6)' }}\r\n            onClick={() => onChange(value)}>\r\n            {capitalizeFirstLetter(label)}\r\n        </Button>\r\n    );\r\n};\r\n\r\nconst PlanPicker = ({ user }) => {\r\n    const [subscriptions, setSubscriptions] = useState({});\r\n    const [period, setPeriod] = useState(QUARTERLY);\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        async function loadSubscriptions() {\r\n            const subscriptions = await getSubscriptionsDetails();\r\n\r\n            if (subscriptions.exists()) {\r\n                setSubscriptions(subscriptions.val());\r\n            }\r\n        }\r\n\r\n        if (user) {\r\n            loadSubscriptions();\r\n        }\r\n    }, [user]);\r\n\r\n    const renderTotalPayment = (period, monthlyAmount) => {\r\n        let totalPayment = 0;\r\n        if (period === QUARTERLY) {\r\n            totalPayment = monthlyAmount * 3;\r\n        } else if (period === YEARLY) {\r\n            totalPayment = monthlyAmount * 12;\r\n        }\r\n\r\n        return (\r\n            `${t('PlanPicker.totalPeriodPayment', { totalPayment: Number.isInteger(totalPayment) ? totalPayment : totalPayment.toFixed(2) })} ${t(`PlanPicker.plansPeriods.${period}`)}.`\r\n        );\r\n    }\r\n\r\n    const userLanguage = getCurrentLanguage();\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={styles.backgroundContainer}>\r\n            <div className={styles.backgroundFilter}/>\r\n            <Box display='flex' alignItems='center' justifyContent='center'>\r\n                {user &&\r\n                    <h1 className={styles.title}>\r\n                        {!user.freeTrial ?\r\n                            t('PlanPicker.titlePart1')\r\n                            :\r\n                            t('PlanPicker.titlePart1FreeTrial')\r\n                        }\r\n                        {' '}\r\n                        {t('PlanPicker.titlePart2')}\r\n                    </h1>\r\n                }\r\n            </Box>\r\n            <Box display='flex' alignItems='center' justifyContent='center'>\r\n                {Object.keys(subscriptions).map((subscriptionType) => (\r\n                    <ToggleButton key={subscriptionType}\r\n                        currentValue={period}\r\n                        value={subscriptions[subscriptionType].title['en'].toLowerCase()}\r\n                        label={t(`PlanPicker.plansPeriods.${subscriptions[subscriptionType].title['en'].toLowerCase()}`)}\r\n                        onChange={setPeriod} />\r\n                ))}\r\n            </Box>\r\n            <Grid container spacing={0}  className={styles.plansContainer} justify='center'>\r\n                <CardsPayments\r\n                    title={'Basic'}\r\n                    textButon={'Current'}\r\n                    subtitle={'Free forever'}\r\n                    backgroundButon={'#141833'}\r\n                    colorTextButon={'#FFFFFF'}\r\n                    price={0}\r\n                    disableButton\r\n                    period={period}\r\n                    items={[{ text: 'Qapla Reactions' }, { text: 'Qoins cash out' }]} />\r\n                {subscriptions[period] && Object.keys(subscriptions[period].packages).map((plan) => (\r\n                    <form action='https://us-central1-qapplaapp.cloudfunctions.net/streamerSubscriptionCheckoutIntent' method='post'>\r\n                        <CardsPayments backgroundCards={plan === 'growth' ? '#3B4BF9' : '#141833'}\r\n                            title={subscriptions[period].packages[plan].title[userLanguage]}\r\n                            textButon={plan === 'growth' ? t('PlanPicker.rewardYourCommunity') : t('PlanPicker.getVisibility')}\r\n                            subtitle={period === MONTHLY ? `${t('PlanPicker.payment')} ${t(`PlanPicker.plansPeriods.${period}`)}` : renderTotalPayment(period, subscriptions[period].packages[plan].cost)}\r\n                            paymentPerMonth={period === MONTHLY ? '' : t('PlanPicker.saving', { saving: subscriptions[period].packages[plan].saving })}\r\n                            backgroundButon={plan === 'growth' ? '#0AFFD2' : '#6C5DD3'}\r\n                            colorTextButon={plan === 'growth' ? '#4E2D92' : '#FFF'}\r\n                            price={subscriptions[period].packages[plan].cost}\r\n                            items={[\r\n                                { text: t('PlanPicker.drops', { numberOfDrops: plan === 'growth' ? 400 : 200 }), color:'#0AFFD2' },\r\n                                { text: t('PlanPicker.postAlways') },\r\n                                { text: t('PlanPicker.qaplaReactions') },\r\n                                { text: t('PlanPicker.cashOut') }\r\n                            ]} />\r\n                        <input type='hidden' name='uid' value={user.uid} />\r\n                        <input type='hidden' name='stripeCustomerId' value={user.stripeCustomerId || ''} />\r\n                        <input type='hidden' name='email' value={user.email} />\r\n                        <input type='hidden' name='lookupKey' value={subscriptions[period].packages[plan].lookupKey} />\r\n                        <input type='hidden' name='plan' value={plan} />\r\n                        <input type='hidden' name='interval' value={period} />\r\n                    </form>\r\n                ))}\r\n            </Grid>\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default PlanPicker;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx",["272","273"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as ESvg } from './../../assets/g.svg';\r\nimport {ReactComponent as Closeicon} from './../../assets/Closeicono.svg'\r\nimport HeartHands from './../../assets/HeartHands.png';\r\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        height: '100vh'\r\n    },\r\n    paymentInfoContainer: {\r\n        paddingLeft: 50,\r\n        paddingRight: 64,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    },\r\n    eImageContainer: {\r\n        display: 'flex',\r\n        width: 80,\r\n        height: 80,\r\n        borderRadius: 20,\r\n        backgroundColor: '#141833',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    subscriptionBought: {\r\n        marginTop: 48,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    subTerms: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    },\r\n    totalPaid: {\r\n        fontSize: 48,\r\n        fontWeight: '600',\r\n        color: 'rgba(255, 255, 255, .9)',\r\n        lineHeight:'58.09px'\r\n    },\r\n    interval: {\r\n        marginLeft: 6,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    paymentDetails: {\r\n        marginTop: 48,\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        maxWidth:'750px'\r\n    },\r\n    subscriptionType: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentInterval: {\r\n        marginTop: 8,\r\n        fontSize: 14,\r\n        fontWeight: '400',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    itemCost: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentUntilTodayContainer: {\r\n        marginTop: 56,\r\n        color: '#FFF',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        maxWidth:'750px'\r\n    },\r\n    paymentUntilToday: {\r\n        fontSize: 24,\r\n        fontWeight: '500'\r\n    },\r\n    thanksCardContainer: {\r\n        width: '450px',\r\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    thanksCard: {\r\n        backgroundColor: '#141833',\r\n        display: 'inline-block',\r\n        color: '#FFF',\r\n        maxWidth: '80%',\r\n        borderRadius: 35\r\n    },\r\n    cardContentContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        maxWidth:'450px'\r\n    },\r\n    thanksTitle: {\r\n        marginTop: 8,\r\n        fontSize: 18,\r\n        fontWeight: '700',\r\n        textAlign: 'center'\r\n    },\r\n    thanksDescription: {\r\n        marginTop: 24,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        marginRight: 48,\r\n        marginLeft: 48\r\n    },\r\n    publishButton: {\r\n        marginTop: 64,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        backgroundColor: '#0AFFD2',\r\n        borderRadius: 10,\r\n        color: '#4E2D92',\r\n        fontSize: 16,\r\n        fontWeight: '700',\r\n        paddingTop: 19,\r\n        paddingBottom: 19,\r\n        '&:hover': {\r\n            backgroundColor: '#0AFFD2',\r\n            opacity: '.95'\r\n        }\r\n    },\r\n    backToDashboardButton: {\r\n        marginTop: 16,\r\n        marginBottom: 16,\r\n        fontSize: 16,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    buttonClose:{\r\n       position: 'absolute',\r\n       top:'0px',\r\n       left:'-10px',\r\n    },\r\n\r\n    paymentPolicy:{\r\n          marginTop:'80px'\r\n    },\r\n    textPaymentPolicy:{\r\n       color: '#FFFFFF',\r\n       opacity: '0.6',\r\n       fontWeight:'500',\r\n       fontSize: '12px',\r\n       lineHeight: '15px',\r\n       letterSpacing:'0.5px'\r\n    }\r\n}));\r\n\r\nfunction useQuery() {\r\n    const { search } = useLocation();\r\n\r\n    return useMemo(() => new URLSearchParams(search), [search]);\r\n}\r\n\r\nconst ChargeConfirmationPage = ({ user }) => {\r\n    const [totalPaid, setTotalPaid] = useState(0);\r\n    const [interval, setInterval] = useState('');\r\n    const [intervalText, setIntervalText] = useState('monthly');\r\n    const [plan, setPlan] = useState('');\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const query = useQuery();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getDetails() {\r\n            const id = query.get('subscriptionId');\r\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\r\n            setTotalPaid(details.val().totalPaid);\r\n\r\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\r\n\r\n            setIntervalText(details.val().interval);\r\n\r\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            getDetails();\r\n        }\r\n    }, [user]);\r\n\r\n    const onPublishStreamClick = () => {\r\n        history.push('/create');\r\n    }\r\n\r\n    const onBackToDashboardClick = () => {\r\n        history.push('/profile');\r\n    }\r\n\r\n    return (\r\n        <Grid container alignContent='center' className={classes.container}>\r\n            <Grid item md={6} className={classes.paymentInfoContainer}>\r\n                <Button className={classes.buttonClose}>\r\n                    <Closeicon />\r\n                    </Button>\r\n                <div className={classes.eImageContainer}>\r\n                    <ESvg />\r\n                </div>\r\n                <p className={classes.subscriptionBought}>\r\n                    {plan && intervalText &&\r\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                    }\r\n                </p>\r\n                <div className={classes.subTerms}>\r\n                    <p className={classes.totalPaid}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                    <p className={classes.interval}>\r\n                        {interval}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentDetails}>\r\n                    <div>\r\n                        <p className={classes.subscriptionType}>\r\n                            {plan}\r\n                        </p>\r\n                        <p className={classes.paymentInterval}>\r\n                            {intervalText &&\r\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <p className={classes.itemCost}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentUntilTodayContainer}>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\r\n                    </p>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentPolicy}>\r\n                    <p className={classes.textPaymentPolicy}>Powered by Stripe | Terms Privacy</p>\r\n                </div>\r\n            </Grid>\r\n            <Grid item md={6} className={classes.thanksCardContainer}>\r\n                <Card className={classes.thanksCard}>\r\n                    <div className={classes.cardContentContainer}>\r\n                        <img src={HeartHands} />\r\n                        <CardContent>\r\n                            <p className={classes.thanksTitle}>\r\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\r\n                            </p>\r\n                            <p className={classes.thanksDescription}>\r\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\r\n                            </p>\r\n                        </CardContent>\r\n                        <Button fullWidth variant='contained'\r\n                            className={classes.publishButton}\r\n                            onClick={onPublishStreamClick}>\r\n                            {t('ChargeConfirmationPage.publishStream')}\r\n                        </Button>\r\n                        <Button className={classes.backToDashboardButton}\r\n                            onClick={onBackToDashboardClick}>\r\n                            {t('ChargeConfirmationPage.backToDashboard')}\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ChargeConfirmationPage;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx",["274","275","276","277","278"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx",["279"],"import React from 'react';\r\nimport { withStyles, Tab } from '@material-ui/core';\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(4),\r\n        fontSize: 18,\r\n        '&:hover': {\r\n            color: '#FFF',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#FFF',\r\n            fontWeight: '500',\r\n        },\r\n        '&:focus': {\r\n            color: '#FFF',\r\n        },\r\n    },\r\n    selected: {},\r\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nexport default (props) => <QaplaTab {...props} />;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx",["280"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\branch.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx",["281","282"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutDialog\\CasthQutDialog.jsx",["283"],"import React, { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Dialog, makeStyles } from \"@material-ui/core\";\r\n\r\nimport style from \"./CasthQutDialog.module.css\";\r\nimport { ReactComponent as BitsIcon } from \"./../../assets/BitsIcon.svg\";\r\nimport { notifyCashOutToQaplaAdmin } from \"../../services/discord\";\r\nimport { saveStreamerCashOutRequest } from \"../../services/database\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dialogContainer: {\r\n    backdropFilter: \"blur(20px)\",\r\n    },\r\n    dialogRoot: {},\r\n    paper: {\r\n    backgroundColor: \"#141833\",\r\n    color: \"#FFF\",\r\n    overflow: \"visible\",\r\n    borderRadius: \"35px\",\r\n    },\r\n}));\r\n\r\nconst CasthQutDialog = ({ user, setOpen, setOpenConfirm, setConfirmCashOut, amountBits, open, onClose }) => {\r\n    const [bits, setBits] = useState(0);\r\n    const [disableButton, setDisableButton] = useState(false);\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (amountBits > 0 && !bits) {\r\n        setBits(amountBits);\r\n        }\r\n    }, [amountBits]);\r\n\r\n  const confirmCashOut = async () => {\r\n        const qoinsCashOut = amountBits / 10 * 200;\r\n\r\n        setDisableButton(true);\r\n        await saveStreamerCashOutRequest(user.uid, qoinsCashOut, amountBits);\r\n        await notifyCashOutToQaplaAdmin(user.uid, user.displayName, qoinsCashOut, amountBits);\r\n        setOpenConfirm(true);\r\n        setConfirmCashOut(true);\r\n        setDisableButton(false);\r\n  }\r\n\r\n  return (\r\n    <Dialog\r\n          onClose={onClose}\r\n          open={open}\r\n          classes={{\r\n          container: classes.dialogContainer,\r\n          root: classes.dialogRoot,\r\n          paper: classes.paper,\r\n    }}>\r\n        <div className={style.container_Dialog}>\r\n            <div className={style.container}>\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <BitsIcon style={{ width: \"35px\", height: \"35px\" }} />\r\n                <h1>\r\n                {bits.toLocaleString()}\r\n                </h1>\r\n            </div>\r\n            <p className={style.calculated_Bit}>200 Qoins = 10 Bits</p>\r\n            <p className={style.text}>\r\n                {t('StreamerProfile.BarProgressBit.confirmCashOut')}\r\n            </p>\r\n            <button disabled={disableButton} onClick={confirmCashOut} className={style.button_cash}>\r\n                {t('StreamerProfile.BarProgressBit.cashOut')}\r\n            </button>\r\n            <button onClick={() => setOpen(false)} className={style.button_cancel}>\r\n                {t('StreamerProfile.BarProgressBit.cancel')}\r\n            </button>\r\n            </div>\r\n        </div>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CasthQutDialog;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx",["284","285","286","287"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\interactionsQapla.js",[],{"ruleId":"288","severity":1,"message":"289","line":13,"column":5,"nodeType":"290","messageId":"291","endLine":13,"endColumn":11},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","replacedBy":"295"},{"ruleId":"292","replacedBy":"296"},{"ruleId":"294","replacedBy":"297"},{"ruleId":"288","severity":1,"message":"298","line":2,"column":36,"nodeType":"290","messageId":"291","endLine":2,"endColumn":52},{"ruleId":"288","severity":1,"message":"299","line":91,"column":12,"nodeType":"290","messageId":"291","endLine":91,"endColumn":25},{"ruleId":"300","severity":1,"message":"301","line":130,"column":8,"nodeType":"302","endLine":130,"endColumn":46,"suggestions":"303"},{"ruleId":"288","severity":1,"message":"304","line":209,"column":11,"nodeType":"290","messageId":"291","endLine":209,"endColumn":31},{"ruleId":"305","severity":1,"message":"306","line":273,"column":23,"nodeType":"307","messageId":"308","endLine":273,"endColumn":25},{"ruleId":"288","severity":1,"message":"309","line":33,"column":12,"nodeType":"290","messageId":"291","endLine":33,"endColumn":40},{"ruleId":"288","severity":1,"message":"310","line":33,"column":42,"nodeType":"290","messageId":"291","endLine":33,"endColumn":73},{"ruleId":"300","severity":1,"message":"311","line":113,"column":8,"nodeType":"302","endLine":113,"endColumn":38,"suggestions":"312"},{"ruleId":"288","severity":1,"message":"313","line":126,"column":27,"nodeType":"290","messageId":"291","endLine":126,"endColumn":43},{"ruleId":"288","severity":1,"message":"314","line":127,"column":24,"nodeType":"290","messageId":"291","endLine":127,"endColumn":37},{"ruleId":"288","severity":1,"message":"315","line":6,"column":8,"nodeType":"290","messageId":"291","endLine":6,"endColumn":14},{"ruleId":"300","severity":1,"message":"316","line":343,"column":8,"nodeType":"302","endLine":343,"endColumn":102,"suggestions":"317"},{"ruleId":"300","severity":1,"message":"318","line":485,"column":8,"nodeType":"302","endLine":485,"endColumn":42,"suggestions":"319"},{"ruleId":"288","severity":1,"message":"320","line":4,"column":5,"nodeType":"290","messageId":"291","endLine":4,"endColumn":14},{"ruleId":"288","severity":1,"message":"321","line":5,"column":5,"nodeType":"290","messageId":"291","endLine":5,"endColumn":17},{"ruleId":"288","severity":1,"message":"322","line":6,"column":5,"nodeType":"290","messageId":"291","endLine":6,"endColumn":15},{"ruleId":"292","replacedBy":"323"},{"ruleId":"294","replacedBy":"324"},{"ruleId":"292","replacedBy":"325"},{"ruleId":"294","replacedBy":"326"},{"ruleId":"292","replacedBy":"327"},{"ruleId":"294","replacedBy":"328"},{"ruleId":"288","severity":1,"message":"329","line":7,"column":28,"nodeType":"290","messageId":"291","endLine":7,"endColumn":38},{"ruleId":"288","severity":1,"message":"330","line":228,"column":27,"nodeType":"290","messageId":"291","endLine":228,"endColumn":43},{"ruleId":"300","severity":1,"message":"331","line":244,"column":8,"nodeType":"302","endLine":244,"endColumn":44,"suggestions":"332"},{"ruleId":"288","severity":1,"message":"333","line":74,"column":11,"nodeType":"290","messageId":"291","endLine":74,"endColumn":18},{"ruleId":"300","severity":1,"message":"311","line":201,"column":8,"nodeType":"302","endLine":201,"endColumn":14,"suggestions":"334"},{"ruleId":"335","severity":1,"message":"336","line":263,"column":25,"nodeType":"337","endLine":263,"endColumn":49},{"ruleId":"288","severity":1,"message":"338","line":4,"column":5,"nodeType":"290","messageId":"291","endLine":4,"endColumn":11},{"ruleId":"288","severity":1,"message":"339","line":5,"column":5,"nodeType":"290","messageId":"291","endLine":5,"endColumn":12},{"ruleId":"288","severity":1,"message":"340","line":6,"column":5,"nodeType":"290","messageId":"291","endLine":6,"endColumn":9},{"ruleId":"288","severity":1,"message":"341","line":7,"column":5,"nodeType":"290","messageId":"291","endLine":7,"endColumn":11},{"ruleId":"288","severity":1,"message":"342","line":14,"column":8,"nodeType":"290","messageId":"291","endLine":14,"endColumn":23},{"ruleId":"343","severity":1,"message":"344","line":26,"column":1,"nodeType":"345","endLine":26,"endColumn":51},{"ruleId":"343","severity":1,"message":"344","line":16,"column":1,"nodeType":"345","endLine":16,"endColumn":52},{"ruleId":"288","severity":1,"message":"346","line":273,"column":21,"nodeType":"290","messageId":"291","endLine":273,"endColumn":31},{"ruleId":"300","severity":1,"message":"347","line":453,"column":8,"nodeType":"302","endLine":453,"endColumn":14,"suggestions":"348"},{"ruleId":"300","severity":1,"message":"349","line":33,"column":8,"nodeType":"302","endLine":33,"endColumn":20,"suggestions":"350"},{"ruleId":"288","severity":1,"message":"351","line":232,"column":12,"nodeType":"290","messageId":"291","endLine":232,"endColumn":29},{"ruleId":"288","severity":1,"message":"352","line":241,"column":12,"nodeType":"290","messageId":"291","endLine":241,"endColumn":21},{"ruleId":"288","severity":1,"message":"353","line":241,"column":23,"nodeType":"290","messageId":"291","endLine":241,"endColumn":35},{"ruleId":"300","severity":1,"message":"354","line":299,"column":8,"nodeType":"302","endLine":299,"endColumn":14,"suggestions":"355"},"no-unused-vars","'Hidden' is defined but never used.","Identifier","unusedVar","no-native-reassign",["356"],"no-negated-in-lhs",["357"],["356"],["357"],"'FormControlLabel' is defined but never used.","'qoinsReaction' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.","ArrayExpression",["358"],"'handleQoinsReactions' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'openTermsAndConditionsDialog' is assigned a value but never used.","'setOpenTermsAndConditionsDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["359"],"'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","'styles' is defined but never used.","React Hook useEffect has missing dependencies: 'alertSideRight', 'finishReaction', and 'queueAnimation'. Either include them or remove the dependency array.",["360"],"React Hook useEffect has missing dependencies: 'displayDonation', 'donation.media', 'donation.message', and 'donation.messageExtraData'. Either include them or remove the dependency array.",["361"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.",["356"],["357"],["356"],["357"],["356"],["357"],"'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["362"],"'classes' is assigned a value but never used.",["363"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["364"],"React Hook useEffect has a missing dependency: 'bits'. Either include it or remove the dependency array.",["365"],"'uploadImageStatus' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["366"],"no-global-assign","no-unsafe-negation",{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"385","text":"386"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"387","text":"388"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",{"range":"389","text":"390"},"Update the dependencies array to be: [clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",{"range":"391","text":"392"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"393","text":"394"},"Update the dependencies array to be: [query, t, user]",{"range":"395","text":"396"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"397","text":"398"},"Update the dependencies array to be: [amountBits, bits]",{"range":"399","text":"400"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"401","text":"402"},[5226,5264],"[user.uid, user.id, user.refreshToken, t, history]",[5547,5577],"[user, history, isLoadingAuth, query, t]",[16693,16787],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",[22438,22472],"[clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",[7048,7084],"[streamStarted, dots, enablingQoins, stream]",[5489,5495],"[query, t, user]",[17946,17952],"[setPendingMessages, user]",[1097,1109],"[amountBits, bits]",[9609,9615],"[socialLinksInitialValue, twitchURL, user]"]
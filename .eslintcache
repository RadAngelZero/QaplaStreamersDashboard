[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"23"},{"size":7042,"mtime":1620942225380,"results":"24","hashOfConfig":"25"},{"size":13725,"mtime":1621275571832,"results":"26","hashOfConfig":"25"},{"size":159,"mtime":1614731664613,"results":"27","hashOfConfig":"25"},{"size":5688,"mtime":1620942225382,"results":"28","hashOfConfig":"25"},{"size":7835,"mtime":1621372210339,"results":"29","hashOfConfig":"25"},{"size":12731,"mtime":1621273794818,"results":"30","hashOfConfig":"25"},{"size":3283,"mtime":1621360037218,"results":"31","hashOfConfig":"25"},{"size":4141,"mtime":1614731664833,"results":"32","hashOfConfig":"25"},{"size":767,"mtime":1614731664822,"results":"33","hashOfConfig":"25"},{"size":500,"mtime":1614731664837,"results":"34","hashOfConfig":"25"},{"size":7029,"mtime":1620942225381,"results":"35","hashOfConfig":"25"},{"size":4003,"mtime":1620942225383,"results":"36","hashOfConfig":"25"},{"size":1760,"mtime":1614731664834,"results":"37","hashOfConfig":"25"},{"size":1369,"mtime":1620947452088,"results":"38","hashOfConfig":"25"},{"size":20219,"mtime":1620943440694,"results":"39","hashOfConfig":"25"},{"size":3337,"mtime":1620946629721,"results":"40","hashOfConfig":"25"},{"size":2975,"mtime":1614731664830,"results":"41","hashOfConfig":"25"},{"size":3325,"mtime":1614731664825,"results":"42","hashOfConfig":"25"},{"size":1438,"mtime":1614731664842,"results":"43","hashOfConfig":"25"},{"size":20545,"mtime":1620942225378,"results":"44","hashOfConfig":"25"},{"size":362,"mtime":1614731664838,"results":"45","hashOfConfig":"25"},{"size":3579,"mtime":1614731664824,"results":"46","hashOfConfig":"25"},{"size":2300,"mtime":1614731664828,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gt9ikh",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["102","103"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",[],["104","105"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx",["106","107","108","109","110"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],["111","112"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],["113","114"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],["115","116"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",["117"],"import React, { useEffect, useState } from 'react';\nimport { Avatar, Grid, Button, Card, CardContent, Box, IconButton, Hidden } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerProfile.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as AddIcon } from './../../assets/AddIcon.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport { loadStreamsByStatus } from '../../services/database';\nimport StreamCard from '../StreamCard/StreamCard';\nimport {\n    SCEHDULED_EVENT_TYPE,\n    PENDING_APPROVAL_EVENT_TYPE,\n    PAST_STREAMS_EVENT_TYPE\n} from '../../utilities/Constants';\n\nconst StreamerProfile = ({ user, games }) => {\n    const history = useHistory();\n    const [streamType, setStreamType] = useState(SCEHDULED_EVENT_TYPE);\n    const [streams, setStreams] = useState({});\n\n    useEffect(() => {\n        function setStreamLoaded(streams) {\n            if (streams.exists()) {\n                setStreams(streams.val());\n            } else {\n                setStreams({});\n            }\n        }\n\n        async function loadStreams() {\n            if (user) {\n                setStreamLoaded(await loadStreamsByStatus(user.uid, streamType));\n            } else {\n                history.push('/');\n            }\n        }\n\n        loadStreams();\n    }, [streamType, user]);\n\n    const createStream = () => history.push('/create');\n\n    const goToStreamDetails = (streamId) => history.push({ pathname: `/edit/${streamId}`, state: { streamType }});\n\n    const changestreamType = (e) => setStreamType(parseInt(e.target.value));\n\n    /**\n     * Format the date to show in the card\n     * @param {string} date date in format DD-MM-YYYY\n     * @example formatDate(\"12-02-2021\") returns 12 Feb 2021\n     */\n    const formatDate = (timestamp) => {\n        const date = new Date(timestamp);\n        const months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sept', 'Oct', 'Nov', 'Dic'];\n        return `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n    }\n\n    const onRemoveStream = (streamId) => {\n        const streamsCopy = {...streams};\n        delete streamsCopy[streamId];\n        setStreams(streamsCopy);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            {user &&\n                <>\n                    <Box display=\"flex\" flexDirection=\"row\" >\n                        <Hidden smUp>\n                            <div style={{ width: '10%' }}></div>\n                        </Hidden>\n                        <Hidden mdUp xsDown>\n                            <div style={{ width: '5%' }}></div>\n                        </Hidden>\n                        <div className={styles.avatarContainer}>\n                            <Avatar\n                                alt='User image'\n                                src={user.photoUrl} />\n                            <span className={styles.streamerName}>{user.displayName}</span>\n                        </div>\n                    </Box>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <Button variant='contained'\n                                className={styles.twitchButton}\n                                onClick={() => window.open(`https://www.twitch.tv/${user.displayName}`, '_blank')}\n                                startIcon={<TwitchIcon />}>\n                                {user.displayName}\n                            </Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container>\n                                <Grid item xs={3}>\n                                    <h1 className={styles.title}>My Streams</h1>\n                                </Grid>\n                                <Grid item xs={9} style={{ marginTop: '6rem' }}>\n                                    <StreamerSelect\n                                        value={streamType}\n                                        onChange={changestreamType}\n                                        Icon={ArrowIcon}>\n                                        <option value={SCEHDULED_EVENT_TYPE}>Scheduled</option>\n                                        <option value={PENDING_APPROVAL_EVENT_TYPE}>Pending Approval</option>\n                                        <option value={PAST_STREAMS_EVENT_TYPE}>Past Streams</option>\n                                    </StreamerSelect>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container spacing={4}>\n                                <Grid item xl={2} lg={3} md={3} sm={4} xs={10}>\n                                    <Card className={styles.createEventCard} onClick={createStream}>\n                                        <h1 className={styles.newStream}>\n                                            Post a <br /> Stream\n                                        </h1>\n                                        <CardContent>\n                                            <Box display='flex' justifyContent='center'>\n                                                <IconButton className={styles.createButton}>\n                                                    <AddIcon />\n                                                </IconButton>\n                                            </Box>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                                {streams && Object.keys(streams).map((streamId) => (\n                                    <Grid item xl={2} lg={3} md={3} sm={4} xs={10} key={streamId}>\n                                        <StreamCard\n                                            streamType={streamType}\n                                            streamId={streamId}\n                                            user={user}\n                                            game={streams[streamId].game}\n                                            games={games}\n                                            date={formatDate(streams[streamId].timestamp)}\n                                            enableOptionsIcon={streamType !== PAST_STREAMS_EVENT_TYPE}\n                                            onClick={() => goToStreamDetails(streamId)}\n                                            onRemoveStream={onRemoveStream} />\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </>\n            }\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default StreamerProfile;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx",[],["118","119"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",[],["120","121"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":18,"column":10,"nodeType":"130","messageId":"131","endLine":18,"endColumn":17},{"ruleId":"128","severity":1,"message":"132","line":21,"column":84,"nodeType":"130","messageId":"131","endLine":21,"endColumn":104},{"ruleId":"128","severity":1,"message":"133","line":23,"column":10,"nodeType":"130","messageId":"131","endLine":23,"endColumn":12},{"ruleId":"128","severity":1,"message":"134","line":23,"column":14,"nodeType":"130","messageId":"131","endLine":23,"endColumn":19},{"ruleId":"128","severity":1,"message":"135","line":128,"column":11,"nodeType":"130","messageId":"131","endLine":128,"endColumn":23},{"ruleId":"122","replacedBy":"136"},{"ruleId":"124","replacedBy":"137"},{"ruleId":"122","replacedBy":"138"},{"ruleId":"124","replacedBy":"139"},{"ruleId":"122","replacedBy":"140"},{"ruleId":"124","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":42,"column":8,"nodeType":"144","endLine":42,"endColumn":26,"suggestions":"145"},{"ruleId":"122","replacedBy":"146"},{"ruleId":"124","replacedBy":"147"},{"ruleId":"122","replacedBy":"148"},{"ruleId":"124","replacedBy":"149"},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],"no-unused-vars","'connect' is defined but never used.","Identifier","unusedVar","'saveUserStreamReward' is defined but never used.","'XQ' is defined but never used.","'QOINS' is defined but never used.","'deleteReward' is assigned a value but never used.",["150"],["151"],["150"],["151"],["150"],["151"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["152"],["150"],["151"],["150"],["151"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},"Update the dependencies array to be: [history, streamType, user]",{"range":"155","text":"156"},[1565,1583],"[history, streamType, user]"]
[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"42"},{"size":226,"mtime":1659480227124,"results":"43","hashOfConfig":"44"},{"size":3579,"mtime":1614731664824,"results":"45","hashOfConfig":"44"},{"size":16521,"mtime":1663636181163,"results":"46","hashOfConfig":"44"},{"size":8238,"mtime":1663613319596,"results":"47","hashOfConfig":"44"},{"size":21460,"mtime":1663016164628,"results":"48","hashOfConfig":"44"},{"size":8409,"mtime":1663613319616,"results":"49","hashOfConfig":"44"},{"size":1520,"mtime":1654019625276,"results":"50","hashOfConfig":"44"},{"size":1919,"mtime":1661972327646,"results":"51","hashOfConfig":"44"},{"size":5908,"mtime":1663874974303,"results":"52","hashOfConfig":"44"},{"size":5675,"mtime":1661974732629,"results":"53","hashOfConfig":"44"},{"size":6609,"mtime":1663016164627,"results":"54","hashOfConfig":"44"},{"size":20936,"mtime":1663887170809,"results":"55","hashOfConfig":"44"},{"size":5480,"mtime":1663887596036,"results":"56","hashOfConfig":"44"},{"size":362,"mtime":1614731664838,"results":"57","hashOfConfig":"44"},{"size":22970,"mtime":1661972327647,"results":"58","hashOfConfig":"44"},{"size":1288,"mtime":1648248621496,"results":"59","hashOfConfig":"44"},{"size":835,"mtime":1642711713952,"results":"60","hashOfConfig":"44"},{"size":34471,"mtime":1663874831069,"results":"61","hashOfConfig":"44"},{"size":1083,"mtime":1663636181159,"results":"62","hashOfConfig":"44"},{"size":9694,"mtime":1661972327657,"results":"63","hashOfConfig":"44"},{"size":20430,"mtime":1663712735522,"results":"64","hashOfConfig":"44"},{"size":4314,"mtime":1663016164637,"results":"65","hashOfConfig":"44"},{"size":20669,"mtime":1663884036175,"results":"66","hashOfConfig":"44"},{"size":1390,"mtime":1661972327674,"results":"67","hashOfConfig":"44"},{"size":3326,"mtime":1661972327650,"results":"68","hashOfConfig":"44"},{"size":2093,"mtime":1663636181171,"results":"69","hashOfConfig":"44"},{"size":695,"mtime":1635283796969,"results":"70","hashOfConfig":"44"},{"size":14755,"mtime":1663613319609,"results":"71","hashOfConfig":"44"},{"size":2185,"mtime":1661972327672,"results":"72","hashOfConfig":"44"},{"size":2011,"mtime":1650310829999,"results":"73","hashOfConfig":"44"},{"size":39929,"mtime":1663887587082,"results":"74","hashOfConfig":"44"},{"size":2975,"mtime":1614731664830,"results":"75","hashOfConfig":"44"},{"size":1505,"mtime":1662223237485,"results":"76","hashOfConfig":"44"},{"size":12829,"mtime":1663636181169,"results":"77","hashOfConfig":"44"},{"size":503,"mtime":1663016164636,"results":"78","hashOfConfig":"44"},{"size":9889,"mtime":1663016164630,"results":"79","hashOfConfig":"44"},{"size":3170,"mtime":1661972327665,"results":"80","hashOfConfig":"44"},{"size":6708,"mtime":1663885636184,"results":"81","hashOfConfig":"44"},{"size":1897,"mtime":1663873530644,"results":"82","hashOfConfig":"44"},{"size":3844,"mtime":1650310830005,"results":"83","hashOfConfig":"44"},{"size":5706,"mtime":1663887525278,"results":"84","hashOfConfig":"44"},{"size":21222,"mtime":1663613319597,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"rfo3np",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"91"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["175","176"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],["177","178"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["179","180"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx",["181","182"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],["183","184"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["185","186"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["187"],"import React, { useState, useEffect } from 'react';\nimport {\n    makeStyles,\n    Grid,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    withStyles,\n    Avatar,\n    Hidden,\n    InputLabel,\n    InputAdornment\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next'\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\nimport { ReactComponent as EyeIcon } from './../../assets/EyeIcon.svg';\nimport { ReactComponent as DownloadIcon } from './../../assets/DownloadIcon.svg';\n\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport BackButton from '../BackButton/BackButton';\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate } from '../../services/database';\nimport { sednPushNotificationToTopic } from '../../services/functions';\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: '24px',\n        color: '#FFF'\n    },\n    description: {\n        fontSize: '12px',\n        color: 'rgba(255,255,255,0.60)',\n        lineHeight: '18px',\n        paddingRight: '16px',\n        marginTop: '16px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        marginTop: '32px'\n    },\n    containerTextArea: {\n        marginRight: '2.5rem'\n    },\n    textArea: {\n        paddingTop: '1rem'\n    },\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    participantsColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'center'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginBottom: 16\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst SectionHeader = ({ title, description }) => {\n    const classes = useStyles();\n\n    return (\n        <div style={{ marginTop: '48px' }}>\n            <p className={classes.title}>\n                {title}\n            </p>\n            <p className={classes.description}>\n                {description}\n            </p>\n        </div>\n    );\n};\n\nconst EditStreamerEvent = ({ user }) => {\n    const { streamType } = useLocation().state;\n    const { streamId } = useParams();\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\n    const [notificationBody, setNotificationBody] = useState('');\n    const [participantsList, setParticipantsList] = useState({});\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function setStreamData() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\n                if (timeStamp.exists()) {\n                    setSelectedDate(new Date(timeStamp.val()));\n                    setDisplayDate(new Date(timeStamp.val()));\n                    setFirstTimestamp(new Date(timeStamp.val()));\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\n                }\n            }\n        }\n\n        async function setStreamParticipantsList() {\n            const participantsList = await getStreamParticipantsList(streamId);\n            if (participantsList.exists()) {\n                setParticipantsList(participantsList.val());\n            }\n        }\n\n        async function setStreamTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n                setTitle(title.val());\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                if (user.uid) {\n                    const title = await getPastStreamTitle(user.uid, streamId);\n                    setTitle(title.val());\n                }\n            }\n        }\n\n        setStreamData();\n        setStreamParticipantsList();\n        setStreamTitle();\n    }, [streamId, streamType, user]);\n\n    const sendNotification = async () => {\n        const bodys = {\n            es: notificationBody,\n            en: notificationBody\n        };\n\n        const titles = {\n            es: title['en'],\n            en: title['en']\n        };\n\n        try {\n            sednPushNotificationToTopic(streamId, titles, bodys);\n            alert(t('EditStream.alerts.sent'));\n            setNotificationBody('');\n        } catch (error) {\n            alert(t('EditStream.alerts.errorSent'));\n        }\n    }\n\n    const onChangeNotificationBody = (e) => {\n        const body = e.target.value;\n        if (body.length <= 140) {\n            setNotificationBody(body);\n        }\n    }\n\n    const saveDate = async () => {\n        if (selectedDate) {\n            const minValidDate = new Date().getTime() + 300000;\n            if (selectedDate.getTime() >= minValidDate) {\n                const dateRef = new Date(selectedDate);\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\n\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\n\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\n\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\n                let localHour = `${localHours}:${localMinutes}`;\n\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\n                alert(t('EditStream.alerts.updated'));\n            } else {\n                alert(t('EditStream.alerts.errorDate'))\n            }\n        } else {\n            alert(t('EditStream.alerts.errorDate'));\n        }\n    }\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid xs={12}>\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\n                        onClick={history.goBack} />\n                </Grid>\n                {streamType === SCHEDULED_EVENT_TYPE &&\n                    <>\n                        <Grid xs={6}>\n                            <SectionHeader\n                                title={t('EditStream.change')}\n                                description={t('EditStream.changeDesc')} />\n                            <Grid item sm={12}>\n                                <Grid container>\n                                    {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\n                                        <></>\n                                        :\n                                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                                            <Grid container style={{\n                                                marginTop: '24px'\n                                            }}>\n                                                <Grid item sm={7} md={4} spacing={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.date')}\n                                                    </InputLabel>\n                                                    <KeyboardDatePicker\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        open={calendarOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\n                                                        onClose={() => setCalendarOpen(false)}\n                                                        clearable\n                                                        disablePast\n                                                        disableToolbar\n                                                        autoOk\n                                                        value={displayDate}\n                                                        placeholder='10-10-2021'\n                                                        onChange={handleDateChange}\n                                                        minDate={new Date()}\n                                                        format='DD-MM-YY ddd'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <CalendarIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                                <div style={{ minWidth: '16px' }} />\n                                                <Grid item sm={7} md={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.time')}\n                                                    </InputLabel>\n                                                    <KeyboardTimePicker\n                                                        open={clockOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\n                                                        onOpen={() => { }}\n                                                        onClose={() => setClockOpen(false)}\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        autoOk\n                                                        error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\n                                                        value={displayDate}\n                                                        placeholder='08:00 AM'\n                                                        onChange={handleDateChange}\n                                                        // mask='__:__ _M'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <TimeIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </MuiPickersUtilsProvider>\n                                    }\n                                    <ContainedButton className={classes.button}\n                                        onClick={saveDate}\n                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime()}>\n                                        {t('EditStream.save')}\n                                    </ContainedButton>\n                                </Grid>\n                            </Grid>\n                            <SectionHeader title={t('EditStream.sendMessage')}\n                                description={t('EditStream.sendMessageDesc')} />\n                            <Grid item md={12} style={{\n                                marginTop: '24px'\n                            }}>\n                                <StreamerTextInput placeholder={t('EditStream.limit')}\n                                    multiline\n                                    rows={3}\n                                    fullWidth\n                                    textInputClassName={classes.textArea}\n                                    containerClassName={classes.containerTextArea}\n                                    value={notificationBody}\n                                    onChange={onChangeNotificationBody} />\n                                <ContainedButton className={classes.button}\n                                    onClick={sendNotification}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                                </ContainedButton>\n                            </Grid>\n                        </Grid>\n                        {/** To define how this section is going to work\n                            <Grid xs={6}>\n                                <SectionHeader title='Private Rooms'\n                                    description='If you are hosting a private room and want to give access to the participants of the event, you can share the ID with them directly in the Qapla app. Participants will get a notification to see the ID.' />\n                                <StreamerTextInput label='ID'\n                                    placeholder='ID' />\n                                <br/>\n                                <ContainedButton className={classes.button}>\n                                    Send\n                                </ContainedButton>\n                            </Grid>\n                        */}\n                    </>\n                }\n                <Grid xs={12}>\n                    <SectionHeader title={t('EditStream.participants')} />\n                    <TableContainer className={classes.tableContainer}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCellStyled align='center' padding='checkbox'>\n                                        <ProfileIcon />\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.twitch')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.game')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.qapla')}</TableCellStyled>\n                                    <TableCellStyled className={classes.participantsColumn}>\n                                        <EyeIcon /> <p>{Object.keys(participantsList).length}</p>\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>\n                                        <ContainedButton\n                                            startIcon={<DownloadIcon />}>\n                                            {t('EditStream.table.download')}\n                                        </ContainedButton>\n                                    </TableCellStyled>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {Object.keys(participantsList).map((participantUid, index) => (\n                                    <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\n                                        key={`Participant-${participantUid}`}>\n                                        <TableCellStyled align='center' className={classes.firstCell}>\n                                            <Avatar className={classes.avatar} />\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled className={classes.lastCell}>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n            </Grid>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default EditStreamerEvent;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["188","189","190","191","192","193","194","195","196"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",["197"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["198"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["199","200"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\n\nconst useStyles = makeStyles(() => ({\n    languageLabel: {\n        color: '#FFF',\n        fontSize: 16,\n        fontWeight: 600\n    }\n}));\n\nconst LanguageSelect = () => {\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\n    const [langData, setLangData] = useState([])\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        let tempLangArr = []\n        getAvailableLanguages().map((languageCode) => (\n            tempLangArr.push({\n                value: languageCode,\n                label: t(`LanguageHandler.languages.${languageCode}`)\n            })\n        ))\n        setLangData(tempLangArr)\n    }, [t])\n\n    const onLanguageChanged = (languageCode) => {\n        changeLanguage(languageCode);\n        setCurrentLanguageCode(languageCode);\n    }\n\n    return (\n        <div style={{\n            display: 'flex'\n        }}>\n            <TranslateIcon style={{\n                display: 'flex'\n            }} />\n            {/* The style of this select needs to be implemented inline */}\n            <div style={{\n                marginTop: '-10px',\n            }}>\n                <StreamerSelect\n                    style={{ backgroundColor: '#141833' }}\n                    data={langData}\n                    value={currentLanguageCode}\n                    onChange={onLanguageChanged}\n                    overflowY='hidden'\n                    overflowX='hidden'\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LanguageSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",["201"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx",["202"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["203","204","205"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["206","207","208"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["209","210"],{"ruleId":"211","replacedBy":"212"},{"ruleId":"213","replacedBy":"214"},{"ruleId":"211","replacedBy":"215"},{"ruleId":"213","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":179,"column":8,"nodeType":"219","endLine":179,"endColumn":14,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":235,"column":25,"nodeType":"223","endLine":235,"endColumn":49},{"ruleId":"224","severity":1,"message":"225","line":520,"column":65,"nodeType":"226","endLine":520,"endColumn":80},{"ruleId":"224","severity":1,"message":"225","line":526,"column":29,"nodeType":"226","endLine":526,"endColumn":44},{"ruleId":"211","replacedBy":"227"},{"ruleId":"213","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":126,"column":27,"nodeType":"231","messageId":"232","endLine":126,"endColumn":43},{"ruleId":"229","severity":1,"message":"233","line":127,"column":24,"nodeType":"231","messageId":"232","endLine":127,"endColumn":37},{"ruleId":"229","severity":1,"message":"234","line":13,"column":5,"nodeType":"231","messageId":"232","endLine":13,"endColumn":11},{"ruleId":"229","severity":1,"message":"235","line":2,"column":67,"nodeType":"231","messageId":"232","endLine":2,"endColumn":74},{"ruleId":"229","severity":1,"message":"236","line":13,"column":28,"nodeType":"231","messageId":"232","endLine":13,"endColumn":36},{"ruleId":"229","severity":1,"message":"237","line":16,"column":28,"nodeType":"231","messageId":"232","endLine":16,"endColumn":33},{"ruleId":"229","severity":1,"message":"238","line":233,"column":12,"nodeType":"231","messageId":"232","endLine":233,"endColumn":29},{"ruleId":"229","severity":1,"message":"239","line":237,"column":12,"nodeType":"231","messageId":"232","endLine":237,"endColumn":23},{"ruleId":"229","severity":1,"message":"240","line":241,"column":12,"nodeType":"231","messageId":"232","endLine":241,"endColumn":21},{"ruleId":"229","severity":1,"message":"241","line":241,"column":23,"nodeType":"231","messageId":"232","endLine":241,"endColumn":35},{"ruleId":"217","severity":1,"message":"242","line":288,"column":8,"nodeType":"219","endLine":288,"endColumn":14,"suggestions":"243"},{"ruleId":"229","severity":1,"message":"244","line":387,"column":11,"nodeType":"231","messageId":"232","endLine":387,"endColumn":24},{"ruleId":"229","severity":1,"message":"245","line":405,"column":11,"nodeType":"231","messageId":"232","endLine":405,"endColumn":26},{"ruleId":"246","severity":1,"message":"247","line":26,"column":1,"nodeType":"248","endLine":26,"endColumn":51},{"ruleId":"229","severity":1,"message":"249","line":7,"column":28,"nodeType":"231","messageId":"232","endLine":7,"endColumn":37},{"ruleId":"229","severity":1,"message":"250","line":21,"column":11,"nodeType":"231","messageId":"232","endLine":21,"endColumn":18},{"ruleId":"229","severity":1,"message":"251","line":315,"column":15,"nodeType":"231","messageId":"232","endLine":315,"endColumn":20},{"ruleId":"217","severity":1,"message":"252","line":71,"column":8,"nodeType":"219","endLine":71,"endColumn":46,"suggestions":"253"},{"ruleId":"229","severity":1,"message":"254","line":7,"column":28,"nodeType":"231","messageId":"232","endLine":7,"endColumn":38},{"ruleId":"229","severity":1,"message":"255","line":228,"column":27,"nodeType":"231","messageId":"232","endLine":228,"endColumn":43},{"ruleId":"217","severity":1,"message":"256","line":244,"column":8,"nodeType":"219","endLine":244,"endColumn":44,"suggestions":"257"},{"ruleId":"229","severity":1,"message":"258","line":4,"column":5,"nodeType":"231","messageId":"232","endLine":4,"endColumn":14},{"ruleId":"229","severity":1,"message":"259","line":5,"column":5,"nodeType":"231","messageId":"232","endLine":5,"endColumn":17},{"ruleId":"229","severity":1,"message":"260","line":6,"column":5,"nodeType":"231","messageId":"232","endLine":6,"endColumn":15},{"ruleId":"229","severity":1,"message":"261","line":273,"column":21,"nodeType":"231","messageId":"232","endLine":273,"endColumn":31},{"ruleId":"217","severity":1,"message":"262","line":457,"column":8,"nodeType":"219","endLine":457,"endColumn":14,"suggestions":"263"},"no-native-reassign",["264"],"no-negated-in-lhs",["265"],["264"],["265"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.","ArrayExpression",["266"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["264"],["265"],"no-unused-vars","'setSelectedEvent' is assigned a value but never used.","Identifier","unusedVar","'setStringDate' is assigned a value but never used.","'Hidden' is defined but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["267"],"'copyTwitchURL' is assigned a value but never used.","'shareStreamLink' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","'event' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["268"],"'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["269"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["270"],"no-global-assign","no-unsafe-negation",{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},"Update the dependencies array to be: [query, t, user]",{"range":"281","text":"282"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"283","text":"284"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"285","text":"286"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"287","text":"288"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"289","text":"290"},[4767,4773],"[query, t, user]",[8892,8898],"[socialLinksInitialValue, twitchURL, user]",[3566,3604],"[user.uid, user.id, user.refreshToken, t, history]",[6805,6841],"[streamStarted, dots, enablingQoins, stream]",[17811,17817],"[setPendingMessages, user]"]

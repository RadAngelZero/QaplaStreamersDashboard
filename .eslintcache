[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js":"43"},{"size":18226,"mtime":1649264249478,"results":"44","hashOfConfig":"45"},{"size":17349,"mtime":1649283534147,"results":"46","hashOfConfig":"45"},{"size":4390,"mtime":1649280691328,"results":"47","hashOfConfig":"45"},{"size":6837,"mtime":1649265772798,"results":"48","hashOfConfig":"45"},{"size":226,"mtime":1649101763451,"results":"49","hashOfConfig":"45"},{"size":3579,"mtime":1614731664824,"results":"50","hashOfConfig":"45"},{"size":835,"mtime":1642711713952,"results":"51","hashOfConfig":"45"},{"size":16438,"mtime":1648248621484,"results":"52","hashOfConfig":"45"},{"size":5281,"mtime":1649095723150,"results":"53","hashOfConfig":"45"},{"size":1799,"mtime":1648248621497,"results":"54","hashOfConfig":"45"},{"size":1083,"mtime":1648248621474,"results":"55","hashOfConfig":"45"},{"size":7493,"mtime":1648248803983,"results":"56","hashOfConfig":"45"},{"size":1580,"mtime":1649112351403,"results":"57","hashOfConfig":"45"},{"size":7544,"mtime":1648248621475,"results":"58","hashOfConfig":"45"},{"size":6375,"mtime":1648248803989,"results":"59","hashOfConfig":"45"},{"size":362,"mtime":1614731664838,"results":"60","hashOfConfig":"45"},{"size":8238,"mtime":1648248621475,"results":"61","hashOfConfig":"45"},{"size":9908,"mtime":1649112351395,"results":"62","hashOfConfig":"45"},{"size":890,"mtime":1648248621499,"results":"63","hashOfConfig":"45"},{"size":1535,"mtime":1649112351404,"results":"64","hashOfConfig":"45"},{"size":19153,"mtime":1649264741021,"results":"65","hashOfConfig":"45"},{"size":3357,"mtime":1648248803980,"results":"66","hashOfConfig":"45"},{"size":2011,"mtime":1648248621481,"results":"67","hashOfConfig":"45"},{"size":527,"mtime":1636998131402,"results":"68","hashOfConfig":"45"},{"size":1439,"mtime":1648248621498,"results":"69","hashOfConfig":"45"},{"size":3339,"mtime":1648248803982,"results":"70","hashOfConfig":"45"},{"size":383,"mtime":1648248621486,"results":"71","hashOfConfig":"45"},{"size":3036,"mtime":1648248621493,"results":"72","hashOfConfig":"45"},{"size":5675,"mtime":1648248803981,"results":"73","hashOfConfig":"45"},{"size":7668,"mtime":1649112351398,"results":"74","hashOfConfig":"45"},{"size":4218,"mtime":1649267933795,"results":"75","hashOfConfig":"45"},{"size":27424,"mtime":1649280908995,"results":"76","hashOfConfig":"45"},{"size":1288,"mtime":1648248621496,"results":"77","hashOfConfig":"45"},{"size":3844,"mtime":1648248803982,"results":"78","hashOfConfig":"45"},{"size":11599,"mtime":1649112351397,"results":"79","hashOfConfig":"45"},{"size":1592,"mtime":1648248803984,"results":"80","hashOfConfig":"45"},{"size":34276,"mtime":1649112351402,"results":"81","hashOfConfig":"45"},{"size":3415,"mtime":1648248621483,"results":"82","hashOfConfig":"45"},{"size":20379,"mtime":1648248621478,"results":"83","hashOfConfig":"45"},{"size":629,"mtime":1635283796967,"results":"84","hashOfConfig":"45"},{"size":27886,"mtime":1649112351396,"results":"85","hashOfConfig":"45"},{"size":14755,"mtime":1648248621493,"results":"86","hashOfConfig":"45"},{"size":6918,"mtime":1649101763457,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rfo3np",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"110"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"132"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"110"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"132"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"107"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["192"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport {\n    withStyles,\n    Grid,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions\n} from '@material-ui/core';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as QaplaIcon } from './../../assets/QaplaGamingLandingPage.svg';\nimport styles from './StreamersSignin.module.css';\nimport RoomGame from './../../assets/room-game.png';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport { getTwitchUserData, signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\nimport { getUserToken } from '../../services/functions';\nimport { createStreamerProfile, updateStreamerProfile } from '../../services/database';\n\nvar utc = require('dayjs/plugin/utc');\ndayjs.extend(utc);\n\nconst CustomDialog = withStyles((theme) => ({\n    paper: {\n        backgroundColor: '#0D1021',\n        color: '#FFF'\n    }\n}))(Dialog);\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst StreamersSignin = ({ user, title }) => {\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\n    const [openTermsAndConditionsDialog, setOpenTermsAndConditionsDialog] = useState(false);\n    const history = useHistory();\n    const query = useQuery();\n\n    useEffect(() => {\n        async function checkIfUsersIsSigningIn() {\n            const twitchClientCode = query.get('code');\n\n            if (!isLoadingAuth && !user && twitchClientCode) {\n                setIsLoadingAuth(true);\n                const tokenData = await getUserToken(twitchClientCode);\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\n                    if (user.userData.isNewUser) {\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\n                    }\n                    await updateStreamerProfile(user.firebaseAuthUser.user.uid, { termsAndConditions: true, twitchAccessToken: tokenData.data.access_token, refreshToken: tokenData.data.refresh_token });\n                } else {\n                    alert('Hubo un problema al iniciar sesión, intentalo de nuevo o reportalo a soporte técnico');\n                }\n            }\n        }\n\n        checkIfUsersIsSigningIn();\n\n        if (user) {\n            history.push('/profile');\n        }\n    }, [user, history, isLoadingAuth]);\n\n    const signIn = async () => {\n        closeTermsAndConditionsModal();\n        setIsLoadingAuth(true);\n        signInWithTwitch();\n        setIsLoadingAuth(false);\n    }\n\n    const handleSignInClick = () => {\n        const userHasAcceptedTerms = localStorage.getItem('termsAndConditions');\n\n        if (userHasAcceptedTerms) {\n            signIn();\n        } else {\n            setOpenTermsAndConditionsDialog(true);\n        }\n    }\n\n    const closeTermsAndConditionsModal = () => setOpenTermsAndConditionsDialog(false);\n\n    if (user === undefined) {\n        return (\n            <StreamerDashboardContainer>\n                <Grid item md='4' style={{\n                        backgroundImage: `url(${RoomGame})`,\n                        backgroundPosition: 'center',\n                        backgroundRepeat: 'no-repeat',\n                        backgroundSize: 'cover',\n                        height: '100%',\n                    }}>\n                    <div style={{\n                            display: 'flex',\n                            flexGrow: 1,\n                            justifyContent: 'center',\n                            height: '100vh',\n                            alignItems: 'flex-end'\n                        }}>\n                    <QaplaIcon style={{ marginBottom: 32 }} />\n                    </div>\n                </Grid>\n                <Grid item md='1' />\n                <Grid item md='4'>\n                    <p className={styles.getStarted}>\n                        {title}\n                    </p>\n                    <div className={styles.formContainer}>\n                        <Button variant='contained'\n                            className={styles.continueButton}\n                            disabled={isLoadingAuth}\n                            startIcon={<TwitchIcon />}\n                            onClick={handleSignInClick}>\n                            {!isLoadingAuth ?\n                                'Sign in with Twitch'\n                                :\n                                'Loading...'\n                            }\n                        </Button>\n                    </div>\n                </Grid>\n                <Grid item md='3' />\n                <CustomDialog\n                    open={openTermsAndConditionsDialog}\n                    onClose={closeTermsAndConditionsModal}>\n                    <DialogTitle>AVISO PARA MEJORAR LA EXPERIENCIA DENTRO DE QAPLA (BETA)</DialogTitle>\n                    <DialogContent>\n                    <DialogContentText style={{ color: '#FFF' }}>\n                        CAMBIOS Y PERMISOS\n                        <br/>\n                        <br/>\n                        Informamos por este medio a toda nuestra Comunidad Streamer que a partir de hoy y en los próximos días, con la finalidad de ofrecer una mejor experiencia dentro de Qapla, se realizarán algunas pruebas y cambios en las herramientas que se utilizan, lo cual puede conllevar a la adecuación en la configuración de la cuentas de TWITCH de los STREMEARS  por parte de QAPLA.\n                        <br/>\n                        <br/>\n                        <br/>\n                        Lo anterior, únicamente para mejorar el rendimiento del uso de QAPLA por parte de la comunidad STREAMER teniendo como consecuencia beneficios y mejoras.\n                    </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                    <ContainedButton variant='outlined' onClick={closeTermsAndConditionsModal} color=\"primary\">\n                        Cancelar\n                    </ContainedButton>\n                    <ContainedButton variant='outlined' onClick={signIn} color=\"primary\" autoFocus>\n                        Aceptar\n                    </ContainedButton>\n                    </DialogActions>\n                </CustomDialog>\n            </StreamerDashboardContainer>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamersSignin;",["193","194"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["195","196"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],["197","198"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],["199","200"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["201","202"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ESvg } from './../../assets/e.svg';\nimport HeartHands from './../../assets/HeartHands.png';\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        height: '100vh'\n    },\n    paymentInfoContainer: {\n        paddingLeft: 32,\n        paddingRight: 64,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    eImageContainer: {\n        display: 'flex',\n        width: 80,\n        height: 80,\n        borderRadius: 20,\n        backgroundColor: '#141833',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    subscriptionBought: {\n        marginTop: 48,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    subTerms: {\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    totalPaid: {\n        fontSize: 48,\n        fontWeight: '600',\n        color: 'rgba(255, 255, 255, .9)'\n    },\n    interval: {\n        marginLeft: 6,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    paymentDetails: {\n        marginTop: 48,\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    subscriptionType: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentInterval: {\n        marginTop: 8,\n        fontSize: 14,\n        fontWeight: '400',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    itemCost: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentUntilTodayContainer: {\n        marginTop: 56,\n        color: '#FFF',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    paymentUntilToday: {\n        fontSize: 24,\n        fontWeight: '500'\n    },\n    thanksCardContainer: {\n        width: '450px',\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    thanksCard: {\n        backgroundColor: '#141833',\n        display: 'inline-block',\n        color: '#FFF',\n        maxWidth: '80%',\n        borderRadius: 35\n    },\n    cardContentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: 30,\n        paddingRight: 30\n    },\n    thanksTitle: {\n        marginTop: 8,\n        fontSize: 18,\n        fontWeight: '700',\n        textAlign: 'center'\n    },\n    thanksDescription: {\n        marginTop: 24,\n        fontSize: 14,\n        fontWeight: '500',\n        lineHeight: '22px',\n        textAlign: 'center',\n        marginRight: 48,\n        marginLeft: 48\n    },\n    publishButton: {\n        marginTop: 64,\n        marginLeft: 30,\n        marginRight: 30,\n        backgroundColor: '#0AFFD2',\n        borderRadius: 10,\n        color: '#4E2D92',\n        fontSize: 16,\n        fontWeight: '700',\n        paddingTop: 19,\n        paddingBottom: 19,\n        '&:hover': {\n            backgroundColor: '#0AFFD2',\n            opacity: '.95'\n        }\n    },\n    backToDashboardButton: {\n        marginTop: 16,\n        marginBottom: 16,\n        fontSize: 16,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    }\n}));\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst ChargeConfirmationPage = ({ user }) => {\n    const [totalPaid, setTotalPaid] = useState(0);\n    const [interval, setInterval] = useState('');\n    const [intervalText, setIntervalText] = useState('');\n    const [plan, setPlan] = useState('');\n    const classes = useStyles();\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getDetails() {\n            const id = query.get('subscriptionId');\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\n            setTotalPaid(details.val().totalPaid);\n\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\n\n            setIntervalText(details.val().interval);\n\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\n        }\n\n        if (user && user.uid) {\n            getDetails();\n        }\n    }, [user]);\n\n    const onPublishStreamClick = () => {\n        history.push('/create');\n    }\n\n    const onBackToDashboardClick = () => {\n        history.push('/profile');\n    }\n\n    return (\n        <Grid container alignContent='center' className={classes.container}>\n            <Grid item md={6} className={classes.paymentInfoContainer}>\n                <div className={classes.eImageContainer}>\n                    <ESvg />\n                </div>\n                <p className={classes.subscriptionBought}>\n                    {plan && intervalText &&\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                    }\n                </p>\n                <div className={classes.subTerms}>\n                    <p className={classes.totalPaid}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                    <p className={classes.interval}>\n                        {interval}\n                    </p>\n                </div>\n                <div className={classes.paymentDetails}>\n                    <div>\n                        <p className={classes.subscriptionType}>\n                            {plan}\n                        </p>\n                        <p className={classes.paymentInterval}>\n                            {intervalText &&\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                            }\n                        </p>\n                    </div>\n                    <p className={classes.itemCost}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentUntilTodayContainer}>\n                    <p className={classes.paymentUntilToday}>\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\n                    </p>\n                    <p className={classes.paymentUntilToday}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n            </Grid>\n            <Grid item md={6} className={classes.thanksCardContainer}>\n                <Card className={classes.thanksCard}>\n                    <div className={classes.cardContentContainer}>\n                        <img src={HeartHands} />\n                        <CardContent>\n                            <p className={classes.thanksTitle}>\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\n                            </p>\n                            <p className={classes.thanksDescription}>\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\n                            </p>\n                        </CardContent>\n                        <Button fullWidth variant='contained'\n                            className={classes.publishButton}\n                            onClick={onPublishStreamClick}>\n                            {t('ChargeConfirmationPage.publishStream')}\n                        </Button>\n                        <Button className={classes.backToDashboardButton}\n                            onClick={onBackToDashboardClick}>\n                            {t('ChargeConfirmationPage.backToDashboard')}\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ChargeConfirmationPage;",["203","204"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["205","206"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport styles from './LiveDonations.module.css';\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation, getStreamerAlertsSettings, getStreamerMediaContent } from '../../services/database';\nimport donationAudio from '../../assets/notification.wav';\nimport { speakCheerMessage } from '../../services/functions';\nimport { IMAGE, TEST_MESSAGE_SPEECH_URL } from '../../utilities/Constants';\n\nconst LiveDonations = () => {\n    const [streamerUid, setStreamerUid] = useState('');\n    const [donationQueue, setDonationQueue] = useState([]);\n    const [donationToShow, setDonationToShow] = useState(null);\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\n    const [alertSideRight, setAlertSideRight] = useState(false);\n    const [isPlayingAudio, setIsPlayingAudio] = useState(false);\n    const [mediaContent, setMediaContent] = useState({ videos: [], images: [] });\n    const { streamerId } = useParams();\n\n    useEffect(() => {\n        const pushDonation = (donation) => {\n            setDonationQueue((array) => [donation, ...array]);\n        }\n\n        const popDonation = () => {\n            const indexToPop = donationQueue.length - 1;\n            const donationToPop = donationQueue[indexToPop];\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\n\n            return donationToPop;\n        }\n\n        async function getStreamerUid() {\n            if (streamerId) {\n                const uid = await getStreamerUidWithTwitchId(streamerId);\n                setStreamerUid(uid);\n\n                const streamerSettings = await getStreamerAlertsSettings(uid);\n                if (streamerSettings.exists()) {\n                    setAlertSideRight(streamerSettings.val().alertSideRight);\n                }\n\n                listenForTestCheers(uid, (donation) => {\n                    pushDonation({ ...donation.val(), id: donation.key });\n                });\n\n                const streamerMedia = await getStreamerMediaContent(uid);\n                setMediaContent(streamerMedia.val());\n            }\n        }\n\n        async function loadDonations() {\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\n                pushDonation({ ...donation.val(), id: donation.key });\n            });\n        }\n\n        if (streamerUid && !listenersAreSetted) {\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\n                setListenersAreSetted(true);\n                if (isStreaming.exists() && isStreaming.val()) {\n                    setTimeout(() => {\n                        loadDonations();\n                    }, 150000);\n                } else {\n                    removeListenerForUnreadStreamerCheers(streamerUid);\n                    setDonationQueue([]);\n                }\n            });\n        }\n\n        if (donationQueue.length > 0 && !isPlayingAudio) {\n            setIsPlayingAudio(true);\n            const donation = popDonation();\n\n            async function showCheer() {\n                if (mediaContent && mediaContent['images'] && mediaContent['images'].length > 0) {\n                    const maxLength = mediaContent['images'].length - 1;\n                    const mediaToShow = mediaContent['images'][Math.floor(Math.random() * (maxLength - 0 + 1)) + 0];\n                    donation.media = { type: IMAGE, source: mediaToShow };\n                }\n\n                let audio = new Audio(donationAudio);\n                if (donation.message) {\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                        audio = new Audio(TEST_MESSAGE_SPEECH_URL);\n                    } else {\n                        const messageToRead = `${donation.twitchUserName} dice: ${donation.message}`;\n\n                        window.analytics.track('Cheer received', {\n                            user: donation.twitchUserName,\n                            containsMessage: true,\n                            message: messageToRead\n                        });\n                        const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\n                        audio = new Audio(cheerMessageUrl.data);\n                    }\n                } else {\n                    const messageToRead = `${donation.twitchUserName} te ha enviado ${donation.amountQoins} Qoins`;\n\n                    window.analytics.track('Cheer received', {\n                        user: donation.twitchUserName,\n                        containsMessage: false\n                    });\n                    const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\n                    audio = new Audio(cheerMessageUrl.data);\n                }\n\n                donation.isRightSide = alertSideRight;\n\n                setDonationToShow(donation);\n                audio.onended = () => {\n                    setTimeout(() => {\n                        setDonationToShow(null);\n                    }, 3000);\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                        removeTestDonation(streamerUid, donation.id);\n                    } else {\n                        markDonationAsRead(streamerUid, donation.id);\n                    }\n\n                    setTimeout(() => {\n                        setIsPlayingAudio(false);\n                    }, 6000);\n                }\n\n                audio.play();\n            }\n\n            showCheer();\n        }\n\n        if (!streamerUid) {\n            getStreamerUid();\n        }\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio]);\n\n    document.body.style.backgroundColor = 'transparent';\n\n\n    return (\n        <div style={{ display: 'flex', backgroundColor: 'transparent', height: '100vh', width: '100%', placeItems: 'flex-end' }}>\n            {donationToShow &&\n                <>\n                    <DonationHandler donationToShow={donationToShow} />\n                </>\n            }\n        </div>\n    );\n}\n\nconst DonationHandler = (donationToShow) => {\n    const donation = donationToShow.donationToShow;\n    return (\n        <div style={{\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column',\n            backgroundColor: '#f0f0',\n            padding: '0px 40px',\n            marginBottom: '30px',\n            marginLeft: donation.isRightSide ? '0px' : '20px',\n            marginRight: donation.isRightSide ? '20px' : '0px'\n        }}>\n            {donation.media && donation.media.type === IMAGE &&\n                <img src={donation.media.source} alt='' style={{\n                display: 'flex',\n                alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                maxHeight: '250px',\n                objectFit: 'scale-down'\n            }} />}\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-around',\n                    marginTop: '20px',\n                    width: 'fit-content',\n                    backgroundColor: '#4D00FB',\n                    marginLeft: donation.isRightSide ? '0px' : '-30px',\n                    marginRight: donation.isRightSide ? '-30px' : '0px',\n                    borderRadius: '30px',\n                    padding: '24px 24px',\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                    zIndex: 10\n                }}\n            >\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <p style={{\n                        display: 'flex',\n                        color: 'white',\n                        fontSize: '26px',\n                        textAlign: 'center'\n                    }}>\n                        <b style={{ color: '#0AFFD2' }}>{donation.twitchUserName}</b>\n                        <div style={{ margin: '0 6px' }}>ha enviado</div>\n                        <b style={{ color: '#0AFFD2', fontWeight: '700', }}>{donation.amountQoins} Qoins</b>\n                    </p>\n                </div>\n                <div style={{ width: '10px' }}></div>\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <DonatedQoin style={{ display: 'flex', width: '38px', height: '38px' }} />\n                </div>\n            </div>\n            {donation.message !== '' &&\n                <>\n                    <div style={{\n                        display: 'flex',\n                        width: 'fit-content',\n                        backgroundColor: '#FFFFFF',\n                        marginTop: '-20px',\n                        borderRadius: '30px',\n                        borderTopLeftRadius: donation.isRightSide ? '30px' : '0px',\n                        borderTopRightRadius: donation.isRightSide ? '0px' : '30px',\n                        padding: '30px',\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                    }}>\n                        <p style={{\n                            display: 'flex',\n                            color: '#0D1021',\n                            fontSize: '24px',\n                            fontWeight: '600',\n                            lineHeight: '36px',\n                            letterSpacing: '0.6px'\n                        }}>{donation.message}</p>\n                    </div>\n                </>\n            }\n        </div >\n    )\n}\n\nexport default LiveDonations;",["207","208"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",["209"],"import React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport styles from './StreamsSwitch.module.css';\n\nimport { ReactComponent as Clock } from './../../assets/Clock.svg';\nimport { ReactComponent as Calendar } from './../../assets/Calendar.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    mainContainer: {\n        display: 'flex',\n        width: '84px',\n        height: '40px',\n        backgroundColor: '#141735',\n        borderRadius: '100px',\n        flexDirection: 'row',\n        '&:hover': {\n            cursor: 'pointer'\n        }\n    },\n    iconContainer: {\n        display: 'flex',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}));\n\nconst StreamsSwitch = ({ switchPosition, onClick }) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.mainContainer} onClick={onClick}>\n            <div className={classes.iconContainer} style={{paddingLeft: '6px'}}>\n                <Clock style={{\n                    opacity: switchPosition ? 1 : 0.4,\n                }}\n                    className={switchPosition ? styles.iconSelected : styles.icon} />\n            </div>\n            <div className={classes.iconContainer} style={{paddingRight: '6px'}}>\n                <Calendar style={{\n                    opacity: switchPosition ? 0.4 : 1,\n                }}\n                    className={switchPosition ? styles.icon : styles.iconSelected} />\n            </div>\n        </div>\n    )\n}\n\nexport default StreamsSwitch;",["210","211"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["212","213"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, Slide, Button, Dialog, DialogContent, IconButton, List, ListItem, ListItemAvatar, Avatar, ListItemText, Box } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as QoinsIcon } from './../../assets/QoinsIcon.svg';\nimport { ReactComponent as BitsIcon } from './../../assets/BitsIcon.svg';\nimport { ReactComponent as DonatedQoinIcon } from './../../assets/DonatedQoin.svg';\nimport { getPeriodStreamerPayments, listenForLastStreamerCheers, removeListenerForLastStreamerCheers } from '../../services/database';\n\nconst useStyles = makeStyles((theme) => ({\n    toggleButton: {\n        borderRadius: 6,\n        textAlign: 'center',\n        marginRight: 8,\n        fontSize: 17,\n        fontStyle: 'normal',\n        fontWeight: 600,\n        paddingLeft: 16,\n        paddingRight: 16,\n        textTransform: 'none',\n        '&:hover': {\n            opacity: '.80',\n            background: '#29326B44 !important'\n        }\n    },\n    scrollPaper: {\n        alignItems: 'flex-start',\n        justifyContent: 'flex-end'\n    },\n    paper: {\n        height: '100vh',\n        background: 'linear-gradient(0deg, #0D1021, #0D1021), #141735',\n        borderRadius: 20,\n        paddingBottom: '5px',\n        padding: '28px 40px',\n        maxWidth: '100%',\n        width: '100%',\n        margin: '21px 17px 0px 0px',\n        [theme.breakpoints.down(\"xs\")]: {\n            width: '100%',\n            margin: '0px',\n            borderRadius: '0px',\n            maxHeight: '100%'\n        },\n        [theme.breakpoints.up(\"sm\")]: {\n            width: '440px'\n        }\n    },\n    dialogRoot: {\n        zIndex: '100 !important',\n        '& .MuiBackdrop-root': {\n            backgroundColor: '#02071E80',\n            backdropFilter: 'blur(5px)',\n            width: '200wh',\n            height: '200vh'\n\n        }\n    },\n    dialogHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        overflow: ''\n    },\n    balanceCurrencyContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: '23px',\n        minWidth: '200px'\n    },\n    balanceCurrencyValue: {\n        display: 'flex',\n        color: '#FFF',\n        fontSize: '48px',\n        lineHeight: '52px',\n        fontWeight: 600,\n        letterSpacing: '-0.86',\n        marginLeft: '12px',\n    },\n    subDataContainer: {\n        marginTop: '30px',\n        color: '#8692FF',\n        fontWeight: '500',\n        fontSize: '14px',\n        lineHeight: '17px',\n        letterSpacing: '0.35px'\n    },\n    periodText: {\n        color: 'rgba(134, 146, 255, 0.65)',\n        fontSize: 14,\n        fontWeight: 600,\n        letterSpacing: .35,\n        marginBottom: 16,\n        cursor: 'pointer'\n    },\n    qoinsDonationPrimaryText: {\n        fontSize: 18,\n        fontWeight: 600,\n        color: '#FFF'\n    },\n    qoinsCheersecondaryText: {\n        fontSize: 14,\n        fontWeight: 500,\n        color: 'rgba(255, 255, 255, .65)'\n    },\n    qoinDonationValueContainer: {\n        display: 'flex',\n        alignSelf: 'flex-start',\n        alignItems: 'center',\n        marginTop: 6\n    },\n    qoinDonationValueText: {\n        color: '#FFF',\n        fontSize: 18,\n        fontWeight: 600,\n        marginRight: 4\n    },\n    list: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingRight: '20px',\n        marginRight: '-20px',\n        position: 'relative',\n        overflow: 'auto'\n    },\n    periodPicker: {\n        color: '#FFF',\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    }\n}));\n\nconst DialoogTransaction = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction='left' ref={ref} {...props} />;\n});\n\nconst ToggleButton = ({ currentValue, value, onChange, label }) => {\n    const classes = useStyles();\n    const active = currentValue === value;\n\n    return (\n        <Button\n            className={classes.toggleButton}\n            style={{ background: active ? '#29326B' : 'rgba(41, 50, 107, 0)', color: active ? '#FFF' : 'rgba(255, 255, 255, .6)' }}\n            onClick={() => onChange(value)}>\n            {label || value}\n        </Button>\n    );\n};\n\nconst RecordsHeader = ({ value, Icon, showPeriod, onPeriodChange }) => {\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [openMonthPicker, setOpenMonthPicker] = useState(false);\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const monthsArray = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date.$d);\n        setOpenMonthPicker(false);\n        if (onPeriodChange) {\n            onPeriodChange(date.$d);\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'flex', flexDirection: 'column', minWidth: '200px' }}>\n                <div className={classes.balanceCurrencyContainer}>\n                    <Icon />\n                    <p className={classes.balanceCurrencyValue}>\n                        {parseInt(value || 0).toLocaleString()}\n                    </p>\n                </div>\n            </div>\n\n            {showPeriod &&\n                <MuiPickersUtilsProvider utils={DayJsUtils}>\n                    {/**\n                     * Box hides the TextField of the picker but allows the user to open\n                     * the dialog to select the period\n                     */}\n                    <Box component='div' visibility='hidden'>\n                        <DatePicker format='MM'\n                            disableFuture\n                            disableToolbar\n                            variant='inline'\n                            views={['month']}\n                            open={openMonthPicker}\n                            openTo='month'\n                            value={selectedDate}\n                            onChange={handleDateChange}\n                            PopoverProps={{\n                                PaperProps: {\n                                    className: classes.popover\n                                }\n                            }} />\n                    </Box>\n                    <div className={classes.periodText} onClick={() => setOpenMonthPicker(true)}>\n                        {t('CheersBitsRecordDialog.period')} {t(`months.${monthsArray[selectedDate.getMonth()]}`)} {selectedDate.getFullYear()}\n                    </div>\n                </MuiPickersUtilsProvider>\n            }\n        </>\n    );\n}\n\nconst QoinsCheers = ({ qoinsBalance, cheers, messages, setPendingMessages, qlanBalance }) => {\n    const classes = useStyles();\n    const [balance, setBalance] = useState(qoinsBalance + qlanBalance);\n\n    useEffect(() => {\n        if (setPendingMessages !== undefined) {\n            setPendingMessages(0);\n        }\n    }, [setPendingMessages]);\n\n    const showDate = () => {\n        const today = new Date();\n        /**\n         * Not all the browsers supports the parameter \"locales\" from the function toLocaleDateString\n         * https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n         */\n        try {\n            return today.toLocaleDateString('es-MX');\n        } catch (error) {\n            return today.toLocaleDateString();\n        }\n    }\n\n    return (\n        <>\n            {!messages &&\n                <>\n                    <RecordsHeader value={balance} Icon={QoinsIcon} />\n                    <div className={classes.subDataContainer}>\n                        <div style={{ display: 'flex' }}>\n                            <p style={{ display: 'flex', width: '62px' }}> Cheers </p>\n                            <p style={{ display: 'flex', }}> {qoinsBalance.toLocaleString()} </p>\n                        </div>\n                        <div style={{ display: 'flex', marginTop: '30px' }}>\n                            <p style={{ display: 'flex', width: '62px' }}> Qlan </p>\n                            <p style={{ display: 'flex', }}> {qlanBalance.toLocaleString()} </p>\n                        </div>\n                        <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\n                            Cheers recibidos al {showDate()}\n                        </p>\n                    </div>\n                </>\n            }\n            <List className={classes.list} style={{ maxHeight: messages ? '82vh' : '60vh', marginTop: '20px', paddingTop: '0px' }}>\n                {Object.keys(cheers).reverse().map((cheerId) => (\n                    <>\n                        {((messages && cheers[cheerId].message) || (!messages)) &&\n                            <ListItem disableGutters style={{ display: 'flex', flexDirection: 'column', padding: '0px', marginBottom: '40px' }}>\n                                <div style={{ display: 'flex', width: '100%' }}>\n                                    <ListItemAvatar style={{ alignSelf: 'center' }} >\n                                        <Avatar alt={cheers[cheerId].twitchUserName}\n                                            src={cheers[cheerId].photoURL} />\n                                    </ListItemAvatar>\n                                    <ListItemText primary={\n                                        <div style={{ display: 'flex' }}>\n                                            <p>{cheers[cheerId].twitchUserName}</p>\n                                            {!cheers[cheerId].read && <div style={{ backgroundColor: '#8DEBFF', alignSelf: 'center', marginLeft: '8px', width: '8px', height: '8px', borderRadius: '8px' }}>\n                                            </div>}\n                                        </div>\n                                    }\n                                        secondary={formatDate(cheers[cheerId].timestamp)}\n                                        classes={{\n                                            primary: classes.qoinsDonationPrimaryText,\n                                            secondary: classes.qoinsCheersecondaryText\n                                        }} />\n\n                                    <div className={classes.qoinDonationValueContainer}>\n                                        <div className={classes.qoinDonationValueText}>\n                                            {cheers[cheerId].amountQoins}\n                                        </div>\n                                        <DonatedQoinIcon />\n                                    </div>\n                                </div>\n\n                                {messages && cheers[cheerId].message &&\n                                    <div style={{ background: '#3B4BF9', borderRadius: '2px 20px 20px 20px', padding: '16px 20px 16px 20px', alignSelf: 'flex-start' }}>\n                                        <p style={{ color: '#FFF', fontSize: 14, fontWeight: 500, letterSpacing: .35 }}>\n                                            {cheers[cheerId].message}\n                                        </p>\n                                    </div>\n                                }\n                            </ListItem>}\n                    </>\n                ))}\n            </List>\n        </>\n    );\n}\n\nconst PaidBits = ({ bitsBalance, payments, onPeriodChange }) => {\n    const classes = useStyles();\n\n    return (\n        <>\n            <RecordsHeader value={bitsBalance}\n                Icon={BitsIcon}\n                showPeriod\n                onPeriodChange={onPeriodChange} />\n            <div className={classes.subDataContainer}>\n                <p style={{ display: 'flex' }}> 200 Qoins = 10 Bits </p>\n                <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>Bits estimados a entregar con subscripción activa</p>\n                <p style={{ display: 'flex', color: '#FFFFFFA6', marginTop: '45px', lineHeight: '17px', fontWeight: '400' }}>Cheers entregados</p>\n            </div>\n\n            <List className={classes.list} style={{ maxHeight: '54vh', marginTop: '20px', paddingTop: '0px' }}>\n                {Object.keys(payments).reverse().map((paymentId) => (\n                    <ListItem disableGutters>\n                        <ListItemText primary={payments[paymentId].currency}\n                            secondary={formatDate(payments[paymentId].timestamp)}\n                            classes={{\n                                primary: classes.qoinsDonationPrimaryText,\n                                secondary: classes.qoinsCheersecondaryText\n                            }} />\n                        <div className={classes.qoinDonationValueContainer}>\n                            <div className={classes.qoinDonationValueText}>\n                                {payments[paymentId].amount}\n                            </div>\n                        </div>\n                    </ListItem>\n                ))}\n            </List>\n        </>\n    );\n}\n\nconst CheersBitsRecordDialog = ({ user, cheersQoins, qlanQoins, estimatedBits, open, onClose, pressed, setPendingMessages }) => {\n    const [value, setValue] = useState('Qoins');\n    const [qoinsCheers, setQoinsCheers] = useState({});\n    const [paymentsHistory, setPaymentsHistory] = useState({});\n    const classes = useStyles();\n\n    useEffect(() => {\n        async function loadDefaultPayments() {\n            const date = new Date();\n            date.setDate(1);\n            date.setHours(0, 0, 0, 0);\n            const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\n            const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\n            setPaymentsHistory(payments.val() || {});\n        }\n\n        if (user && user.uid) {\n            listenForLastStreamerCheers(user.uid, 20, (cheers) => {\n                if (cheers.exists()) {\n                    setQoinsCheers(cheers.val());\n                    let seekUnread = Object.values(cheers.val());\n                    let unreadCount = 0;\n                    seekUnread.forEach(e => {\n                        if (!e.read && e.message) {\n                            unreadCount++\n                        }\n                    });\n                    setPendingMessages(unreadCount)\n                }\n            });\n            loadDefaultPayments();\n        }\n\n\n        return () => {\n            if (user && user.uid) {\n                removeListenerForLastStreamerCheers(user.uid);\n            }\n        };\n    }, [user]);\n\n    const loadPaymentsByTimestamp = async (timestamp) => {\n        const date = new Date(timestamp);\n        date.setDate(1);\n        date.setHours(0, 0, 0, 0);\n        const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\n        const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\n        setPaymentsHistory(payments.val() || {});\n    }\n\n    return (\n        <Dialog open={open}\n            onClose={onClose}\n            scroll='paper'\n            TransitionComponent={DialoogTransaction}\n            classes={{\n                scrollPaper: classes.scrollPaper,\n                paper: classes.paper,\n                root: classes.dialogRoot\n            }}\n            TransitionProps={{\n                onEnter: () => {\n                    setValue(pressed)\n                }\n            }}>\n            <DialogContent style={{ padding: '0px', overflow: 'visible' }}>\n                <div className={classes.dialogHeaderContainer}>\n                    <div style={{ marginRight: 96 }}>\n                        <ToggleButton currentValue={value}\n                            value='Qoins'\n                            onChange={setValue} />\n                        <ToggleButton currentValue={value}\n                            value='Bits'\n                            onChange={setValue} />\n                        <ToggleButton currentValue={value}\n                            value='Messages'\n                            label='Mensajes'\n                            onChange={setValue} />\n                    </div>\n                    <IconButton onClick={onClose} style={{ zIndex: '10', alignSelf: 'flex-start', width: '40px', height: '40px', padding: '0px', marginTop: '-4px', marginRight: '-16px' }} >\n                        <CloseIcon style={{ width: '40px', height: '40px' }} />\n                    </IconButton>\n                </div>\n                {value === 'Qoins' &&\n                    <QoinsCheers qoinsBalance={cheersQoins}\n                        cheers={qoinsCheers}\n                        qlanBalance={qlanQoins} />\n                }\n                {value === 'Bits' &&\n                    <PaidBits bitsBalance={estimatedBits}\n                        payments={paymentsHistory}\n                        onPeriodChange={loadPaymentsByTimestamp} />\n                }\n                {value === 'Messages' &&\n                    <QoinsCheers qoinsBalance={cheersQoins}\n                        messages={true}\n                        cheers={qoinsCheers}\n                        setPendingMessages={setPendingMessages}\n                    />\n                }\n\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nfunction formatDate(timestamp) {\n    const paymentDate = new Date(timestamp);\n\n    const date = paymentDate.getDate() >= 10 ? paymentDate.getDate() : `0${paymentDate.getDate()}`;\n    const month = (paymentDate.getMonth() + 1) >= 10 ? (paymentDate.getMonth() + 1) : `0${(paymentDate.getMonth() + 1)}`;\n\n    return `${date}/${month}/${paymentDate.getFullYear()}`;\n}\n\nexport default CheersBitsRecordDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["214","215"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\n\nconst useStyles = makeStyles(() => ({\n    languageLabel: {\n        color: '#FFF',\n        fontSize: 16,\n        fontWeight: 600\n    }\n}));\n\nconst LanguageSelect = () => {\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\n    const [langData, setLangData] = useState([])\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        let tempLangArr = []\n        getAvailableLanguages().map((languageCode) => (\n            tempLangArr.push({\n                value: languageCode,\n                label: t(`LanguageHandler.languages.${languageCode}`)\n            })\n        ))\n        setLangData(tempLangArr)\n    }, [t])\n\n    const onLanguageChanged = (languageCode) => {\n        changeLanguage(languageCode);\n        setCurrentLanguageCode(languageCode);\n    }\n\n    return (\n        <div style={{\n            display: 'flex'\n        }}>\n            <TranslateIcon style={{\n                display: 'flex'\n            }} />\n            {/* The style of this select needs to be implemented inline */}\n            <div style={{\n                marginTop: '-10px',\n            }}>\n                <StreamerSelect\n                    style={{ backgroundColor: '#141833' }}\n                    data={langData}\n                    value={currentLanguageCode}\n                    onChange={onLanguageChanged}\n                    overflowY='hidden'\n                    overflowX='hidden'\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LanguageSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],["216","217"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["218"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["219","220","221"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n    })\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",["222"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, Grid, Card, CardMedia, Tooltip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    LEFT,\n    RIGHT\n} from '../../utilities/Constants';\n\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nimport Step1 from './../../assets/addCheersTutorial1.jpg';\nimport Step2 from './../../assets/addCheersTutorial2.jpg';\nimport Step3 from './../../assets/addCheersTutorial3.jpg';\nimport Step4 from './../../assets/addCheersTutorial4.jpg';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport { getStreamerAlertsSettings, setAlertSetting, writeTestCheer } from './../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    instructionsMargin: {\n        marginTop: 50\n    },\n    instructionTitle: {\n        fontWeight: '600',\n        fontSize: 18,\n        color: '#FFF'\n    },\n    instructionDescription: {\n        marginTop: 24,\n        fontSize: 16,\n        color: '#FFF'\n    },\n    instructionMediaCard: {\n        borderRadius: 20\n    },\n    link: {\n        color: '#6C5DD3',\n        fontWeight: '500',\n        fontSize: 18\n    },\n    container: {\n        marginTop: 60,\n        marginRight: 24\n    },\n    cursorPointer: {\n        cursor: 'pointer'\n    }\n}));\n\nconst InstructionSection = ({ title, description, mediaContainerComponent = 'img', src }) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.instructionsMargin}>\n            <p className={classes.instructionTitle}>\n                {title}\n            </p>\n            {description &&\n                <p className={classes.instructionDescription}>\n                    {description}\n                </p>\n            }\n            {src &&\n                <Grid container className={classes.instructionsMargin}>\n                    <Grid xs={12} sm={8} md={7}>\n                        <Card className={classes.instructionMediaCard}>\n                            <CardMedia component={mediaContainerComponent}\n                                width='480'\n                                height='475'\n                                src={src}\n                                frameborder='0'\n                                allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture'\n                                allowfullscreen />\n                        </Card>\n                    </Grid>\n                </Grid>\n            }\n        </div>\n    );\n};\n\nconst CheersSettings = ({ uid, twitchId }) => {\n    const classes = useStyles();\n    const cheersURL = `https://dashboard.qapla.gg/liveDonations/${twitchId}`;\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const [side, setSide] = useState(LEFT);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getSettings() {\n            const settings = await getStreamerAlertsSettings(uid);\n            if (settings.exists()) {\n                setSide(settings.val().alertSideRight ? RIGHT : LEFT);\n            }\n        }\n\n        if (uid) {\n            getSettings();\n        }\n    }, [uid]);\n\n    const copyCheersURL = () => {\n        navigator.clipboard.writeText(cheersURL);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    const sendTestCheer = () => {\n        writeTestCheer(uid, t('CheersSettings.testCheerSuccess'), t('CheersSettings.testCheerError'));\n    }\n\n    const changeSide = (side) => {\n        setSide(side);\n        setAlertSetting(uid, 'alertSideRight', side === RIGHT);\n    }\n\n    return (\n        <div className={classes.container}>\n            <p className={classes.instructionTitle}>\n                {t('CheersSettings.title')}\n            </p>\n            <p className={classes.instructionDescription}>\n                {t('CheersSettings.description')}\n            </p>\n            <Grid container className={classes.instructionsMargin}>\n                <Grid container xs={10} style={{ alignItems: 'center', gap: '20px' }} >\n                    <Grid item xs={4} style={{\n                        display: 'flex',\n                        minWidth: '230px',\n                        maxWidth: '240px'\n                    }}>\n                        <div style={{\n                            display: 'flex',\n                            marginTop: '-8px',\n                            maxWidth: '230px',\n                            minHeight: '50.5px'\n                        }}>\n                            <StreamerSelect\n                                data={[\n                                    {\n                                        value: LEFT,\n                                        label: t('Left')\n                                    },\n                                    {\n                                        value: RIGHT,\n                                        label: t('Right')\n                                    }\n                                ]}\n                                style={{ minHeight: '50.5px', width: '230px', margin: '0px' }}\n                                value={side}\n                                onChange={changeSide}\n                                overflowY='hidden'\n                                overflowX='hidden' />\n                        </div>\n                    </Grid>\n                    <Grid item xs={8} style={{ display: 'flex' }}>\n                        <StreamerTextInput\n                            textInputStyle={{ margin: '0px' }}\n                            containerStyle={{ minWidth: '500px' }}\n                            Icon={\n                                <Tooltip placement='top' open={openTooltip} title='Copiado'>\n                                    <CopyIcon className={classes.cursorPointer} onClick={copyCheersURL} />\n                                </Tooltip>\n                            }\n                            textInputClassName={classes.link}\n                            fullWidth\n                            value={cheersURL} />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <InstructionSection title={t('CheersSettings.instruction0.title')}\n                description={<>{t('CheersSettings.instruction0.description')} <b>{t('CheersSettings.instruction0.descriptionBold')}</b></>} />\n            <InstructionSection title={t('CheersSettings.instruction1.title')}\n                description={t('CheersSettings.instruction1.description')} />\n            <InstructionSection title={t('CheersSettings.instruction2.title')}\n                src={Step1} />\n            <InstructionSection title={t('CheersSettings.instruction3.title')}\n                src={Step2} />\n            <InstructionSection title={t('CheersSettings.instruction4.title')}\n                src={Step3} />\n            <InstructionSection title={t('CheersSettings.instruction5.title')}\n                description={t('CheersSettings.instruction5.description')}\n                src={Step4} />\n            <InstructionSection title={t('CheersSettings.instruction6.title')}\n                description={t('CheersSettings.instruction6.description')} />\n            <ContainedButton onClick={sendTestCheer}>\n                {t('CheersSettings.testButton')}\n            </ContainedButton>\n            <div className={classes.instructionsMargin} />\n        </div>\n    );\n}\n\nexport default CheersSettings;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["223"],"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\n\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n        backdropFilter: 'blur(50px)'\n    },\n    dialogRoot: {\n    },\n    paper: {\n        backgroundColor: '#141833',\n        color: '#FFF',\n        overflow: 'visible',\n        borderRadius: '35px',\n        padding: '64px',\n        minWidth: 'min-content'\n    },\n    closeButton: {\n        '&:hover': {\n            cursor: 'pointer'\n        }\n    },\n    title: {\n        fontSize: '18px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '32px',\n        letterSpacing: '0px'\n    },\n    subtitle: {\n        color: '#FFFFFF9A',\n        fontSize: '12px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '18px',\n        letterSpacing: '0px',\n        marginTop: '8px',\n    },\n    startButtonRoot: {\n        backgroundColor: '#00FFDD',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    startText: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        borderRadius: '16px',\n        color: '#FFFFFF'\n    },\n    enabledXQText: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        color: '#00FFDD'\n    },\n    qoinsButtonRoot: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    qoinsButtonRootDisabled: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF !important',\n        textTransform: 'none',\n        opacity: '0.2'\n    },\n    textInputContainer: {\n        backgroundColor: '#202750',\n        borderRadius: '16px',\n        paddingRight: '4px',\n        overflow: 'hidden'\n    },\n    sendButtonRoot: {\n        backgroundColor: '#6C5DD3',\n        width: '165px',\n        height: '56px',\n        borderRadius: '16px',\n        alignSelf: 'flex-end',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.9'\n        },\n        '&:active': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.8'\n        }\n    },\n    eventName: {\n        fontSize: '16px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '24px',\n        letterSpacing: '0px'\n    },\n}));\n\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\n    const classes = useStyles();\n    const [message, setMessage] = useState('');\n    const [dots, setDots] = useState('')\n    const [enablingQoins, setEnablingQoins] = useState(false);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\n            setTimeout(() => {\n                if (dots.length > 2) {\n                    setDots('');\n                } else {\n                    setDots(dots + '.');\n                }\n            }, 500);\n        }\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\n            setDots('');\n        }\n    }, [streamStarted, dots, enablingQoins]);\n\n    const startStreamHandler = async () => {\n        await startStream();\n    }\n\n    const enableQoinsHandler = async () => {\n        setEnablingQoins(true);\n        await enableQoins();\n        setEnablingQoins(false);\n    }\n\n    const closeStreamHandler = async () => {\n        closeStream();\n    }\n\n    const sendNotificationHandler = async () => {\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\n        await sendMessage(message);\n        setMessage('');\n    }\n\n    return (\n        <Dialog onClose={onClose} open={open} classes={{\n                container: classes.dialogContainer,\n                root: classes.dialogRoot,\n                paper: classes.paper\n            }}\n            maxWidth='sm'\n            fullWidth>\n            <DialogContent style={{ padding: '0px' }}>\n                <div style={{ position: 'absolute', top: '24px', right: '24px' }}>\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\n                </div>\n                <div style={{ display: 'flex' }}>\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '205px', maxWidth: '210px' }}>\n                        <p className={classes.title}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.streamActions')}\n                        </p>\n                        <p className={classes.subtitle}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.manageRewards')}\n                        </p>\n                        <div style={{ height: '20px' }} />\n                        {(!stream && !streamStarted) &&\n                            <Button\n                                style={{ boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)' }}\n                                onClick={startStreamHandler}\n                                classes={{ root: classes.startButtonRoot }}>\n                                {t('QaplaStreamDialogs.EventManagementDialog.start')}\n                            </Button>\n                        }\n\n                        {!stream && streamStarted &&\n                            <p className={classes.startText}>\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.creatingRewards')}${dots}`}\n                            </p>\n                        }\n\n                        {stream && !stream.qoinsEnabled &&\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\n                                <TickSquare style={{ marginTop: '7.5px' }} />\n                                <p className={classes.enabledXQText}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.xqEnabled')}\n                                </p>\n                            </div>\n                        }\n\n                        {stream && enablingQoins &&\n                            <p className={classes.startText}>\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.enablingQoins')}${dots}`}\n                            </p>\n                        }\n\n                        {stream && stream.qoinsEnabled &&\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\n                                <TickSquare style={{ marginTop: '7.5px' }} />\n                                <p className={classes.enabledXQText}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.qoinsEnabled')}\n                                </p>\n                            </div>\n                        }\n                        <div style={{ height: '6px' }} />\n                        {!enablingQoins &&\n                            <Button\n                                onClick={(stream && stream.qoinsEnabled) ? closeStreamHandler : enableQoinsHandler}\n                                classes={{\n                                    root: classes.qoinsButtonRoot,\n                                    disabled: classes.qoinsButtonRootDisabled\n                                }}\n                                style={!stream ? { backgroundColor: '#0000' } : { boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)' }}\n                                disabled={!stream || (stream && enablingQoins) || closingStream}>\n                                {(stream && stream.qoinsEnabled) ?\n                                    t('QaplaStreamDialogs.EventManagementDialog.end')\n                                    :\n                                    t('QaplaStreamDialogs.EventManagementDialog.enableQoins')\n                                }\n                            </Button>\n                        }\n                    </div>\n                    <div style={{ width: '70px' }} />\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '400px' }}>\n                        <p className={classes.title}>\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\n                        </p>\n                        <p className={classes.subtitle}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\n                        </p>\n                        <div style={{ height: '20px' }} />\n                        <StreamerTextInput\n                            value={message}\n                            onChange={(e) => setMessage(e.target.value)}\n                            textInputStyle={{ marginTop: '0px' }}\n                            textInputClassName={classes.textInputContainer}\n                            fullWidth\n                            multiline\n                            rows={6}\n                            maxRows={6}\n                            rowsMax={6}\n                        />\n                        <div style={{ height: '12px' }} />\n                        <Button\n                            onClick={sendNotificationHandler}\n                            classes={{\n                                root: classes.sendButtonRoot\n                            }}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogContent>\n            <p style={{ position: 'absolute', right: '30px', bottom: '-40px', }} className={classes.eventName}>\n                {`${streamTitle} / ${date} / ${hour}`}\n            </p>\n        </Dialog>\n    )\n}\n\nexport default EventManagementDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["224","225","226","227","228"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["229","230","231","232","233","234","235","236","237"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["238"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js",[],{"ruleId":"239","severity":1,"message":"240","line":72,"column":8,"nodeType":"241","endLine":72,"endColumn":38,"suggestions":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","replacedBy":"246"},{"ruleId":"243","replacedBy":"247"},{"ruleId":"245","replacedBy":"248"},{"ruleId":"243","replacedBy":"249"},{"ruleId":"245","replacedBy":"250"},{"ruleId":"243","replacedBy":"251"},{"ruleId":"245","replacedBy":"252"},{"ruleId":"239","severity":1,"message":"253","line":179,"column":8,"nodeType":"241","endLine":179,"endColumn":14,"suggestions":"254"},{"ruleId":"255","severity":1,"message":"256","line":235,"column":25,"nodeType":"257","endLine":235,"endColumn":49},{"ruleId":"243","replacedBy":"258"},{"ruleId":"245","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":4,"column":8,"nodeType":"262","messageId":"263","endLine":4,"endColumn":14},{"ruleId":"239","severity":1,"message":"264","line":137,"column":8,"nodeType":"241","endLine":137,"endColumn":84,"suggestions":"265"},{"ruleId":"243","replacedBy":"266"},{"ruleId":"245","replacedBy":"267"},{"ruleId":"260","severity":1,"message":"268","line":1,"column":17,"nodeType":"262","messageId":"263","endLine":1,"endColumn":26},{"ruleId":"243","replacedBy":"269"},{"ruleId":"245","replacedBy":"270"},{"ruleId":"260","severity":1,"message":"271","line":255,"column":21,"nodeType":"262","messageId":"263","endLine":255,"endColumn":31},{"ruleId":"239","severity":1,"message":"272","line":417,"column":8,"nodeType":"241","endLine":417,"endColumn":14,"suggestions":"273"},{"ruleId":"260","severity":1,"message":"274","line":7,"column":28,"nodeType":"262","messageId":"263","endLine":7,"endColumn":37},{"ruleId":"260","severity":1,"message":"275","line":21,"column":11,"nodeType":"262","messageId":"263","endLine":21,"endColumn":18},{"ruleId":"243","replacedBy":"276"},{"ruleId":"245","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":16,"column":1,"nodeType":"280","endLine":16,"endColumn":52},{"ruleId":"260","severity":1,"message":"281","line":4,"column":5,"nodeType":"262","messageId":"263","endLine":4,"endColumn":14},{"ruleId":"260","severity":1,"message":"282","line":5,"column":5,"nodeType":"262","messageId":"263","endLine":5,"endColumn":17},{"ruleId":"260","severity":1,"message":"283","line":6,"column":5,"nodeType":"262","messageId":"263","endLine":6,"endColumn":15},{"ruleId":"260","severity":1,"message":"274","line":12,"column":28,"nodeType":"262","messageId":"263","endLine":12,"endColumn":37},{"ruleId":"239","severity":1,"message":"284","line":179,"column":8,"nodeType":"241","endLine":179,"endColumn":44,"suggestions":"285"},{"ruleId":"260","severity":1,"message":"286","line":4,"column":5,"nodeType":"262","messageId":"263","endLine":4,"endColumn":11},{"ruleId":"260","severity":1,"message":"287","line":5,"column":5,"nodeType":"262","messageId":"263","endLine":5,"endColumn":12},{"ruleId":"260","severity":1,"message":"288","line":6,"column":5,"nodeType":"262","messageId":"263","endLine":6,"endColumn":9},{"ruleId":"260","severity":1,"message":"289","line":7,"column":5,"nodeType":"262","messageId":"263","endLine":7,"endColumn":11},{"ruleId":"260","severity":1,"message":"290","line":14,"column":8,"nodeType":"262","messageId":"263","endLine":14,"endColumn":23},{"ruleId":"260","severity":1,"message":"291","line":2,"column":67,"nodeType":"262","messageId":"263","endLine":2,"endColumn":74},{"ruleId":"260","severity":1,"message":"292","line":13,"column":28,"nodeType":"262","messageId":"263","endLine":13,"endColumn":36},{"ruleId":"260","severity":1,"message":"293","line":16,"column":28,"nodeType":"262","messageId":"263","endLine":16,"endColumn":33},{"ruleId":"260","severity":1,"message":"294","line":233,"column":12,"nodeType":"262","messageId":"263","endLine":233,"endColumn":29},{"ruleId":"260","severity":1,"message":"295","line":237,"column":12,"nodeType":"262","messageId":"263","endLine":237,"endColumn":23},{"ruleId":"260","severity":1,"message":"296","line":240,"column":12,"nodeType":"262","messageId":"263","endLine":240,"endColumn":21},{"ruleId":"260","severity":1,"message":"297","line":240,"column":23,"nodeType":"262","messageId":"263","endLine":240,"endColumn":35},{"ruleId":"239","severity":1,"message":"298","line":286,"column":8,"nodeType":"241","endLine":286,"endColumn":14,"suggestions":"299"},{"ruleId":"260","severity":1,"message":"300","line":385,"column":11,"nodeType":"262","messageId":"263","endLine":385,"endColumn":24},{"ruleId":"301","severity":1,"message":"302","line":271,"column":99,"nodeType":"303","messageId":"304","endLine":271,"endColumn":101},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.","ArrayExpression",["305"],"no-native-reassign",["306"],"no-negated-in-lhs",["307"],["306"],["307"],["306"],["307"],["306"],["307"],"React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["308"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["306"],["307"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'alertSideRight' and 'mediaContent'. Either include them or remove the dependency array.",["309"],["306"],["307"],"'Component' is defined but never used.",["306"],["307"],"'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["310"],"'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.",["306"],["307"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["311"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["312"],"'copyTwitchURL' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"313","fix":"314"},"no-global-assign","no-unsafe-negation",{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},"Update the dependencies array to be: [user, history, isLoadingAuth, query]",{"range":"325","text":"326"},"Update the dependencies array to be: [query, t, user]",{"range":"327","text":"328"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, mediaContent, alertSideRight]",{"range":"329","text":"330"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"331","text":"332"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"333","text":"334"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"335","text":"336"},[2828,2858],"[user, history, isLoadingAuth, query]",[4767,4773],"[query, t, user]",[5974,6050],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, mediaContent, alertSideRight]",[16012,16018],"[setPendingMessages, user]",[4960,4996],"[streamStarted, dots, enablingQoins, stream]",[8801,8807],"[socialLinksInitialValue, twitchURL, user]"]
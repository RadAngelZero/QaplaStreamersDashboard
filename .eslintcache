[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BarProgressBit\\BarProgressBit.jsx":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutConfirmDialog\\CasthQutConfirmDialog.jsx":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx":"20"},{"size":8617,"mtime":1662753911085,"results":"21","hashOfConfig":"22"},{"size":25563,"mtime":1662559722621,"results":"23","hashOfConfig":"22"},{"size":14923,"mtime":1662559722642,"results":"24","hashOfConfig":"22"},{"size":4215,"mtime":1662753911057,"results":"25","hashOfConfig":"22"},{"size":21697,"mtime":1662559722630,"results":"26","hashOfConfig":"22"},{"size":517,"mtime":1662559722637,"results":"27","hashOfConfig":"22"},{"size":1030,"mtime":1662753911060,"results":"28","hashOfConfig":"22"},{"size":6780,"mtime":1662559722619,"results":"29","hashOfConfig":"22"},{"size":375,"mtime":1660938322013,"results":"30","hashOfConfig":"22"},{"size":23458,"mtime":1660938321971,"results":"31","hashOfConfig":"22"},{"size":1550,"mtime":1660938322017,"results":"32","hashOfConfig":"22"},{"size":1425,"mtime":1660938322018,"results":"33","hashOfConfig":"22"},{"size":1568,"mtime":1660938322011,"results":"34","hashOfConfig":"22"},{"size":9933,"mtime":1660938321992,"results":"35","hashOfConfig":"22"},{"size":398,"mtime":1660938321988,"results":"36","hashOfConfig":"22"},{"size":3513,"mtime":1660938321984,"results":"37","hashOfConfig":"22"},{"size":3510,"mtime":1662559722628,"results":"38","hashOfConfig":"22"},{"size":4435,"mtime":1662559722640,"results":"39","hashOfConfig":"22"},{"size":7758,"mtime":1660938321967,"results":"40","hashOfConfig":"22"},{"size":2074,"mtime":1660938321974,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pa48sw",{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx",["84","85","86"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BarProgressBit\\BarProgressBit.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",["87"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\r\nimport {\r\n    streamsPlaceholderImages,\r\n    SCHEDULED_EVENT_TYPE,\r\n    PAST_STREAMS_EVENT_TYPE,\r\n    PENDING_APPROVAL_EVENT_TYPE,\r\n    HOUR_IN_MILISECONDS\r\n} from '../../utilities/Constants';\r\nimport {\r\n    cancelStreamRequest,\r\n    getStreamTitle,\r\n    getPastStreamTitle,\r\n    checkActiveCustomReward,\r\n    listenToQoinsEnabled,\r\n    removeQoinsEnabledListener\r\n} from '../../services/database';\r\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\r\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\r\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\r\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\r\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\r\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\r\nimport { auth } from '../../services/firebase';\r\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\r\nimport { sendCustomMessage } from '../../services/functions';\r\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    eventCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '1.5rem',\r\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\r\n        height: '100%',\r\n        minWidth: '250px',\r\n        minHeight: '360px',\r\n    },\r\n    relativeContainer: {\r\n        position: 'relative'\r\n    },\r\n    hourContainer: {\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        top: '1rem',\r\n        background: '#1B1D2159',\r\n        borderRadius: '.5rem'\r\n    },\r\n    hourText: {\r\n        color: '#FFF',\r\n        padding: '2px 8px',\r\n        fontSize: '11px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        letterSpacing: '-0.5px',\r\n        textAlign: 'center'\r\n\r\n    },\r\n    dateContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        bottom: '1rem',\r\n        padding: '2px 10px',\r\n        background: '#1B1D21',\r\n        height: '32px',\r\n        borderRadius: '10px'\r\n    },\r\n    dateText: {\r\n        color: '#FFF',\r\n        fontSize: '13px',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        marginLeft: '10px'\r\n    },\r\n    eventImage: {\r\n        objectFit: 'cover',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        borderRadius: '24px'\r\n    },\r\n    eventCardContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '24px 16px',\r\n        height: '100%'\r\n    },\r\n    eventCardTitle: {\r\n        color: '#FFFFFF',\r\n        fontSize: '16px',\r\n        lineHeight: '24px',\r\n        fontWeight: '500',\r\n        height: '48px',\r\n\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    circle: {\r\n        borderRadius: '100%',\r\n        height: '.55rem',\r\n        width: '.55rem',\r\n        marginRight: '.5rem'\r\n    },\r\n    participantsNumber: {\r\n        fontSize: '12px',\r\n        textAlign: 'right',\r\n        lineHeight: '16px'\r\n    },\r\n    streamButton: {\r\n        backgroundColor: '#6C5DD3 !important',\r\n        color: '#FFF'\r\n    },\r\n    buttonsContainer: {\r\n        marginTop: 'auto'\r\n    },\r\n    startButton: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#0D1021',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    endButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#FFF',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    manageButton: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none'\r\n    }\r\n}));\r\n\r\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\r\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\r\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [stream, setStream] = useState(null);\r\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\r\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\r\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\r\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\r\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\r\n    const [startingStream, setStartingStream] = useState(false);\r\n    const [closingStream, setClosingStream] = useState(false);\r\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\r\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\r\n    const [loadingDots, setLoadingDots] = useState('');\r\n    const [hideStream, setHideStream] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getParticipantsNumber() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                /* const participants = await getStreamParticipantsNumber(streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getStreamTitle(streamId);\r\n                if (title.exists()) {\r\n                    setTitle(title.val());\r\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getPastStreamTitle(user.uid, streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\r\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            }\r\n        }\r\n\r\n        async function checkStreamStatus() {\r\n            const streamStatus = await checkActiveCustomReward(streamId);\r\n            if (streamStatus.exists()) {\r\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\r\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                        if (qoinsEnabled.val()) {\r\n                            setStream({\r\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\r\n                                qoinsEnabled: qoinsEnabled.val()\r\n                            });\r\n\r\n                            removeQoinsEnabledListener(streamId);\r\n                        } else {\r\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                        }\r\n                    });\r\n                } else {\r\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                }\r\n\r\n                setShowRewardsOptions(true);\r\n                setHideStream(false);\r\n            } else {\r\n                setStream(null);\r\n            }\r\n        }\r\n\r\n\r\n        getParticipantsNumber();\r\n        checkStreamStatus();\r\n\r\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\r\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\r\n            const currentTimestamp = (new Date()).getTime();\r\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\r\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\r\n                    setHideStream(true);\r\n                } else {\r\n                    setShowRewardsOptions(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startingStream) {\r\n            setTimeout(() => {\r\n                if (loadingDots.length > 2) {\r\n                    setLoadingDots('');\r\n                } else {\r\n                    setLoadingDots(loadingDots + '.');\r\n                }\r\n            }, 500);\r\n        } else if (loadingDots !== '') {\r\n            setLoadingDots('');\r\n        }\r\n\r\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\r\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\r\n\r\n    const cancelStream = (e) => {\r\n        e.stopPropagation();\r\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\r\n            cancelStreamRequest(user.uid, streamId);\r\n            onRemoveStream(streamId);\r\n        }\r\n    }\r\n\r\n    const startStream = async (enableIn) => {\r\n        try {\r\n            setStartingStream(true);\r\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream, enableIn);\r\n\r\n            if (enableIn) {\r\n                listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                    if (qoinsEnabled.val()) {\r\n                        setStream({\r\n                            ...stream,\r\n                            qoinsEnabled: qoinsEnabled.val()\r\n                        });\r\n\r\n                        removeQoinsEnabledListener(streamId);\r\n                    }\r\n                });\r\n            }\r\n\r\n            window.analytics.track('Stream started', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream(streamData);\r\n            if (!openStreamDialog) {\r\n                setOpenStreamStartedDialog(true);\r\n            }\r\n            setStartingStream(false);\r\n\r\n            return streamData;\r\n        } catch (error) {\r\n            if (error && error.status === 401) {\r\n                handleExpiredSession();\r\n            } else {\r\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setClosingStream(true);\r\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId);\r\n\r\n            window.analytics.track('Stream finished', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setOpenRewardsRemovedDialog(true);\r\n\r\n            // Close the rest of Dialogs just in case\r\n            setOpenStreamStartedDialog(false);\r\n            setOpenQoinsWarningDialog(false);\r\n            setOpenStreamDialog(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (stream.qoinsEnabled) {\r\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\r\n            if (dontShowCloseStreamWarning) {\r\n                closeStream();\r\n            } else {\r\n                setOpenEndStreamDialog(true);\r\n            }\r\n        } else {\r\n            setOpenQoinsWarningDialog(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\r\n     * have streamObject as parameter with a default value of stream state\r\n     */\r\n    const enableQoinsReward = async (streamObject = stream) => {\r\n        try {\r\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\r\n\r\n            window.analytics.track('Qoins enabled', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream({ ...streamObject, qoinsEnabled: true });\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\r\n\r\n    const closeDialogsAndOpenManageRewardsDialog = () => {\r\n        setOpenStreamStartedDialog(false);\r\n        setOpenQoinsWarningDialog(false);\r\n        setOpenStreamDialog(true);\r\n    }\r\n\r\n    const closeAndRemoveStream = () => {\r\n        setOpenRewardsRemovedDialog(false);\r\n        onRemoveStream(streamId);\r\n    }\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message) {\r\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\r\n\r\n            window.analytics.track('Custom Message sent', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime(),\r\n                message\r\n            });\r\n            setOpenCustomMessageSentDialog(true);\r\n        }\r\n    }\r\n\r\n    const shareStreamLink = async () => {\r\n        const link = await generateStreamDynamicLink(streamId, {\r\n            title: title && title['en'] ? title['en'] : '',\r\n            description: `Evento de ${user.displayName}`,\r\n            image: image ? image : ''\r\n        });\r\n\r\n        // This does not work on Safari for some reason\r\n        if (link) {\r\n            navigator.clipboard.writeText(link);\r\n        }\r\n    }\r\n\r\n    if (game && !hideStream) {\r\n        return (\r\n            <Card className={classes.eventCard} style={style}>\r\n                <div className={classes.relativeContainer}>\r\n                    <div className={classes.hourContainer}>\r\n                        <p className={classes.hourText}>\r\n                            {hour}\r\n                        </p>\r\n                    </div>\r\n                    <div className={classes.dateContainer}>\r\n                        <CalendarIcon />\r\n                        <p className={classes.dateText}>\r\n                            {date}\r\n                        </p>\r\n                    </div>\r\n                    <img\r\n                        alt='Game'\r\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\r\n                        width='100%'\r\n                        height='180'\r\n                        className={classes.eventImage} />\r\n                </div>\r\n                <div className={classes.eventCardContent}>\r\n                    <p className={classes.eventCardTitle}>\r\n                        {title && title['en'] ? title['en'] : ''}\r\n                    </p>\r\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\r\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\r\n                            <div style={{\r\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\r\n                                width: '8px',\r\n                                height: '8px',\r\n                                borderRadius: '50%'\r\n                            }} />\r\n                            <div style={{ width: '6px' }} />\r\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\r\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                    <div className={classes.buttonsContainer}>\r\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\r\n                            (!startingStream ?\r\n                                (stream ?\r\n                                    (!closingStream && stream.qoinsEnabled ?\r\n                                        <Button size='medium' className={classes.endButton}\r\n                                            disabled={closingStream}\r\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\r\n                                            {t('StreamCard.end')}\r\n                                        </Button>\r\n                                        :\r\n                                        <p style={{ color: '#FFF', textAlign: 'center' }}>\r\n                                            {t('StreamCard.dropsScheduled')}\r\n                                        </p>\r\n                                    )\r\n                                    :\r\n                                    <Button size='medium' className={classes.startButton}\r\n                                        startIcon={<TimerIcon />}\r\n                                        onClick={() => setOpenStreamDialog(true)}>\r\n                                        {t('StreamCard.enableDrops')}\r\n                                    </Button>\r\n                                )\r\n                                :\r\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\r\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\r\n                                </p>\r\n                            )\r\n                        }\r\n                        <div style={{ height: '11px' }} />\r\n                        {streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={manageStream}>\r\n                                {t('StreamCard.manageStream')}\r\n                            </Button>\r\n                        }\r\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\r\n                                {t('StreamCard.cancelStreamRequest')}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <EventManagementDialog open={openStreamDialog}\r\n                    user={user}\r\n                    sendMessage={sendMessage}\r\n                    streamId={streamId}\r\n                    stream={stream}\r\n                    streamStarted={startingStream}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenStreamDialog(false)}\r\n                    startStream={startStream}\r\n                    enableQoins={enableQoinsReward}\r\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\r\n                    streamTitle={title && title['en'] ? title['en'] : ''}\r\n                    date={date}\r\n                    hour={hour} />\r\n                <EventConfirmStartDialog open={openStreamStartedDialog}\r\n                    onClose={() => setOpenStreamStartedDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\r\n                    onClose={() => setOpenQoinsWarningDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenEndStreamDialog(false)}\r\n                    closeStream={closeStream} />\r\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\r\n                    onClose={closeAndRemoveStream}  />\r\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\r\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamCard;",["88","89"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutConfirmDialog\\CasthQutConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx",["90"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx",["91"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx",["92","93"],{"ruleId":"94","severity":1,"message":"95","line":125,"column":27,"nodeType":"96","messageId":"97","endLine":125,"endColumn":43},{"ruleId":"94","severity":1,"message":"98","line":126,"column":24,"nodeType":"96","messageId":"97","endLine":126,"endColumn":37},{"ruleId":"99","severity":1,"message":"100","line":269,"column":103,"nodeType":"101","messageId":"102","endLine":269,"endColumn":105},{"ruleId":"94","severity":1,"message":"103","line":413,"column":11,"nodeType":"96","messageId":"97","endLine":413,"endColumn":26},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"94","severity":1,"message":"108","line":13,"column":5,"nodeType":"96","messageId":"97","endLine":13,"endColumn":11},{"ruleId":"109","severity":1,"message":"110","line":16,"column":1,"nodeType":"111","endLine":16,"endColumn":52},{"ruleId":"94","severity":1,"message":"112","line":7,"column":28,"nodeType":"96","messageId":"97","endLine":7,"endColumn":37},{"ruleId":"94","severity":1,"message":"113","line":21,"column":11,"nodeType":"96","messageId":"97","endLine":21,"endColumn":18},"no-unused-vars","'setSelectedEvent' is assigned a value but never used.","Identifier","unusedVar","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'shareStreamLink' is assigned a value but never used.","no-native-reassign",["114"],"no-negated-in-lhs",["115"],"'Hidden' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
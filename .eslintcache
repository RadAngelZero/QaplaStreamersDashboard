[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"12"},{"size":3946,"mtime":1623104790738,"results":"13","hashOfConfig":"14"},{"size":15417,"mtime":1623278392618,"results":"15","hashOfConfig":"14"},{"size":159,"mtime":1614731664613,"results":"16","hashOfConfig":"14"},{"size":3325,"mtime":1614731664825,"results":"17","hashOfConfig":"14"},{"size":4141,"mtime":1614731664833,"results":"18","hashOfConfig":"14"},{"size":16332,"mtime":1623280601851,"results":"19","hashOfConfig":"14"},{"size":7029,"mtime":1622160096078,"results":"20","hashOfConfig":"14"},{"size":2975,"mtime":1614731664830,"results":"21","hashOfConfig":"14"},{"size":13547,"mtime":1623280549375,"results":"22","hashOfConfig":"14"},{"size":500,"mtime":1614731664837,"results":"23","hashOfConfig":"14"},{"size":21191,"mtime":1623099631979,"results":"24","hashOfConfig":"14"},{"size":20219,"mtime":1621613566204,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gt9ikh",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["53","54"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",["55"],"import React, { useEffect, useState } from 'react';\nimport { Avatar, Grid, Button, Card, CardContent, Box, IconButton, Hidden } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerProfile.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as AddIcon } from './../../assets/AddIcon.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport { loadStreamsByStatus } from '../../services/database';\nimport StreamCard from '../StreamCard/StreamCard';\nimport {\n    SCEHDULED_EVENT_TYPE,\n    PENDING_APPROVAL_EVENT_TYPE,\n    PAST_STREAMS_EVENT_TYPE\n} from '../../utilities/Constants';\n\nconst StreamerProfile = ({ user, games }) => {\n    const history = useHistory();\n    const [streamType, setStreamType] = useState(SCEHDULED_EVENT_TYPE);\n    const [streams, setStreams] = useState({});\n\n    useEffect(() => {\n        function setStreamLoaded(streams) {\n            if (streams.exists()) {\n                setStreams(streams.val());\n            } else {\n                setStreams({});\n            }\n        }\n\n        async function loadStreams() {\n            if (user) {\n                setStreamLoaded(await loadStreamsByStatus(user.uid, streamType));\n            } else {\n                history.push('/');\n            }\n        }\n\n        loadStreams();\n    }, [streamType, user]);\n\n    const createStream = () => history.push('/create');\n\n    const goToStreamDetails = (streamId) => history.push({ pathname: `/edit/${streamId}`, state: { streamType }});\n\n    const changestreamType = (e) => setStreamType(parseInt(e.target.value));\n\n    /**\n     * Format the date to show in the card\n     * @param {string} date date in format DD-MM-YYYY\n     * @example formatDate(\"12-02-2021\") returns 12 Feb 2021\n     */\n    const formatDate = (timestamp) => {\n        const date = new Date(timestamp);\n        const months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sept', 'Oct', 'Nov', 'Dic'];\n        return `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\n    }\n\n    const onRemoveStream = (streamId) => {\n        const streamsCopy = {...streams};\n        delete streamsCopy[streamId];\n        setStreams(streamsCopy);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            {user &&\n                <>\n                    <Box display=\"flex\" flexDirection=\"row\" >\n                        <Hidden smUp>\n                            <div style={{ width: '10%' }}></div>\n                        </Hidden>\n                        <Hidden mdUp xsDown>\n                            <div style={{ width: '5%' }}></div>\n                        </Hidden>\n                        <div className={styles.avatarContainer}>\n                            <Avatar\n                                alt='User image'\n                                src={user.photoUrl} />\n                            <span className={styles.streamerName}>{user.displayName}</span>\n                        </div>\n                    </Box>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <Button variant='contained'\n                                className={styles.twitchButton}\n                                onClick={() => window.open(`https://www.twitch.tv/${user.displayName}`, '_blank')}\n                                startIcon={<TwitchIcon />}>\n                                {user.displayName}\n                            </Button>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container>\n                                <Grid item xs={3}>\n                                    <h1 className={styles.title}>My Streams</h1>\n                                </Grid>\n                                <Grid item xs={9} style={{ marginTop: '6rem' }}>\n                                    <StreamerSelect\n                                        value={streamType}\n                                        onChange={changestreamType}\n                                        Icon={ArrowIcon}>\n                                        <option value={SCEHDULED_EVENT_TYPE}>Scheduled</option>\n                                        <option value={PENDING_APPROVAL_EVENT_TYPE}>Pending Approval</option>\n                                        <option value={PAST_STREAMS_EVENT_TYPE}>Past Streams</option>\n                                    </StreamerSelect>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Grid container spacing={4}>\n                                <Grid item xl={2} lg={3} md={3} sm={4} xs={10}>\n                                    <Card className={styles.createEventCard} onClick={createStream}>\n                                        <h1 className={styles.newStream}>\n                                            Post a <br /> Stream\n                                        </h1>\n                                        <CardContent>\n                                            <Box display='flex' justifyContent='center'>\n                                                <IconButton className={styles.createButton}>\n                                                    <AddIcon />\n                                                </IconButton>\n                                            </Box>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                                {streams && Object.keys(streams).map((streamId) => (\n                                    <Grid item xl={2} lg={3} md={3} sm={4} xs={10} key={streamId}>\n                                        <StreamCard\n                                            streamType={streamType}\n                                            streamId={streamId}\n                                            user={user}\n                                            game={streams[streamId].game}\n                                            games={games}\n                                            date={formatDate(streams[streamId].timestamp)}\n                                            enableOptionsIcon={streamType !== PAST_STREAMS_EVENT_TYPE}\n                                            onClick={() => goToStreamDetails(streamId)}\n                                            onRemoveStream={onRemoveStream} />\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </>\n            }\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default StreamerProfile;",["56","57"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":42,"column":8,"nodeType":"64","endLine":42,"endColumn":26,"suggestions":"65"},{"ruleId":"58","replacedBy":"66"},{"ruleId":"60","replacedBy":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["70"],["68"],["69"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [history, streamType, user]",{"range":"73","text":"74"},[1565,1583],"[history, streamType, user]"]
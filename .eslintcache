[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"43","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx":"44","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"45","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"46","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx":"47","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"48","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"49","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"50","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx":"51","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"52","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"53","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"54","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"55","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CardsPayments/CardsPayments.jsx":"56","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"57","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"58","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"59","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GridSelector/GridSelector.jsx":"60","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/ChatbotCommandSettings.jsx":"61","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmCancellationDialog.jsx":"62","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/SuccessDialog/SuccessDialog.jsx":"63","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/DialogOnlyQoins/DiealogOnlyQoins.jsx":"64","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ErrorBoundary/ErrorBoundary.jsx":"65","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChatBubbleiOS/ChatBubbleiOS.jsx":"66","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ReactionCard/ReactionCard.jsx":"67","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BuySubscriptionDialog/BuySubscriptionDialog.jsx":"68","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Overlay/Overlay.jsx":"69","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Overlay/Components/Reaction.jsx":"70","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/OverlayEmotesAnimation.js":"71"},{"size":226,"mtime":1667432423337,"results":"72","hashOfConfig":"73"},{"size":3579,"mtime":1614731664824,"results":"74","hashOfConfig":"73"},{"size":9059,"mtime":1664228906376,"results":"75","hashOfConfig":"73"},{"size":37511,"mtime":1675895051434,"results":"76","hashOfConfig":"73"},{"size":8965,"mtime":1675963218128,"results":"77","hashOfConfig":"73"},{"size":1919,"mtime":1661972327646,"results":"78","hashOfConfig":"73"},{"size":6010,"mtime":1666043908677,"results":"79","hashOfConfig":"73"},{"size":5675,"mtime":1661974732629,"results":"80","hashOfConfig":"73"},{"size":6609,"mtime":1664228906380,"results":"81","hashOfConfig":"73"},{"size":23202,"mtime":1664288712191,"results":"82","hashOfConfig":"73"},{"size":6727,"mtime":1675896638150,"results":"83","hashOfConfig":"73"},{"size":362,"mtime":1614731664838,"results":"84","hashOfConfig":"73"},{"size":24049,"mtime":1666043908650,"results":"85","hashOfConfig":"73"},{"size":1288,"mtime":1648248621496,"results":"86","hashOfConfig":"73"},{"size":1433,"mtime":1675895051438,"results":"87","hashOfConfig":"73"},{"size":35109,"mtime":1667859722403,"results":"88","hashOfConfig":"73"},{"size":1083,"mtime":1664288712186,"results":"89","hashOfConfig":"73"},{"size":14333,"mtime":1674082548407,"results":"90","hashOfConfig":"73"},{"size":44192,"mtime":1666043908662,"results":"91","hashOfConfig":"73"},{"size":4314,"mtime":1664228906395,"results":"92","hashOfConfig":"73"},{"size":50847,"mtime":1675895051439,"results":"93","hashOfConfig":"73"},{"size":1390,"mtime":1665156854078,"results":"94","hashOfConfig":"73"},{"size":3326,"mtime":1661972327650,"results":"95","hashOfConfig":"73"},{"size":2093,"mtime":1664288712204,"results":"96","hashOfConfig":"73"},{"size":719,"mtime":1666043908658,"results":"97","hashOfConfig":"73"},{"size":19804,"mtime":1667859722404,"results":"98","hashOfConfig":"73"},{"size":2185,"mtime":1664573793507,"results":"99","hashOfConfig":"73"},{"size":2188,"mtime":1667859722397,"results":"100","hashOfConfig":"73"},{"size":51812,"mtime":1675895051441,"results":"101","hashOfConfig":"73"},{"size":2975,"mtime":1614731664830,"results":"102","hashOfConfig":"73"},{"size":1505,"mtime":1673480965470,"results":"103","hashOfConfig":"73"},{"size":503,"mtime":1664228906395,"results":"104","hashOfConfig":"73"},{"size":9916,"mtime":1666043908657,"results":"105","hashOfConfig":"73"},{"size":3170,"mtime":1661972327665,"results":"106","hashOfConfig":"73"},{"size":9519,"mtime":1672872753506,"results":"107","hashOfConfig":"73"},{"size":1897,"mtime":1664288712205,"results":"108","hashOfConfig":"73"},{"size":3844,"mtime":1650310830005,"results":"109","hashOfConfig":"73"},{"size":21097,"mtime":1665173643107,"results":"110","hashOfConfig":"73"},{"size":589,"mtime":1672862009777,"results":"111","hashOfConfig":"73"},{"size":7574,"mtime":1664228906374,"results":"112","hashOfConfig":"73"},{"size":1632,"mtime":1672872753507,"results":"113","hashOfConfig":"73"},{"size":4058,"mtime":1675895051430,"results":"114","hashOfConfig":"73"},{"size":629,"mtime":1635283796967,"results":"115","hashOfConfig":"73"},{"size":1637,"mtime":1664228906375,"results":"116","hashOfConfig":"73"},{"size":870,"mtime":1675811624523,"results":"117","hashOfConfig":"73"},{"size":58515,"mtime":1675896309783,"results":"118","hashOfConfig":"73"},{"size":1295,"mtime":1664288712188,"results":"119","hashOfConfig":"73"},{"size":3390,"mtime":1664228906407,"results":"120","hashOfConfig":"73"},{"size":383,"mtime":1650310830005,"results":"121","hashOfConfig":"73"},{"size":3416,"mtime":1650310830004,"results":"122","hashOfConfig":"73"},{"size":2665,"mtime":1675895051432,"results":"123","hashOfConfig":"73"},{"size":9961,"mtime":1672872753508,"results":"124","hashOfConfig":"73"},{"size":4014,"mtime":1672758832722,"results":"125","hashOfConfig":"73"},{"size":7500,"mtime":1672872753506,"results":"126","hashOfConfig":"73"},{"size":1558,"mtime":1667859722400,"results":"127","hashOfConfig":"73"},{"size":3838,"mtime":1664288712187,"results":"128","hashOfConfig":"73"},{"size":15022,"mtime":1675895051441,"results":"129","hashOfConfig":"73"},{"size":3339,"mtime":1650310830005,"results":"130","hashOfConfig":"73"},{"size":3414,"mtime":1664228906384,"results":"131","hashOfConfig":"73"},{"size":2512,"mtime":1666043908651,"results":"132","hashOfConfig":"73"},{"size":7074,"mtime":1666043908659,"results":"133","hashOfConfig":"73"},{"size":4639,"mtime":1666043908656,"results":"134","hashOfConfig":"73"},{"size":3131,"mtime":1666043908672,"results":"135","hashOfConfig":"73"},{"size":2885,"mtime":1666043908648,"results":"136","hashOfConfig":"73"},{"size":464,"mtime":1667859722397,"results":"137","hashOfConfig":"73"},{"size":958,"mtime":1675294925005,"results":"138","hashOfConfig":"73"},{"size":13348,"mtime":1675895051437,"results":"139","hashOfConfig":"73"},{"size":5182,"mtime":1675895051431,"results":"140","hashOfConfig":"73"},{"size":37399,"mtime":1675964368468,"results":"141","hashOfConfig":"73"},{"size":48323,"mtime":1675961843426,"results":"142","hashOfConfig":"73"},{"size":8387,"mtime":1675962374373,"results":"143","hashOfConfig":"73"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},"v96qq4",{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"146"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"146"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"146"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"146"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"146"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"146"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"146"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"146"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"146"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"146"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"146"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"146"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"146"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"245"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"146"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"146"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"146"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"146"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"276"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"146"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"146"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"146"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["310","311"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["312","313"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ESvg } from './../../assets/g.svg';\nimport {ReactComponent as Closeicon} from './../../assets/Closeicono.svg'\nimport HeartHands from './../../assets/HeartHands.png';\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        height: '100vh'\n    },\n    paymentInfoContainer: {\n        paddingLeft: 50,\n        paddingRight: 64,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    eImageContainer: {\n        display: 'flex',\n        width: 80,\n        height: 80,\n        borderRadius: 20,\n        backgroundColor: '#141833',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    subscriptionBought: {\n        marginTop: 48,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    subTerms: {\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    totalPaid: {\n        fontSize: 48,\n        fontWeight: '600',\n        color: 'rgba(255, 255, 255, .9)',\n        lineHeight:'58.09px'\n    },\n    interval: {\n        marginLeft: 6,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    paymentDetails: {\n        marginTop: 48,\n        display: 'flex',\n        justifyContent: 'space-between',\n        maxWidth:'750px'\n    },\n    subscriptionType: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentInterval: {\n        marginTop: 8,\n        fontSize: 14,\n        fontWeight: '400',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    itemCost: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentUntilTodayContainer: {\n        marginTop: 56,\n        color: '#FFF',\n        display: 'flex',\n        justifyContent: 'space-between',\n        maxWidth:'750px'\n    },\n    paymentUntilToday: {\n        fontSize: 24,\n        fontWeight: '500'\n    },\n    thanksCardContainer: {\n        width: '450px',\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    thanksCard: {\n        backgroundColor: '#141833',\n        display: 'inline-block',\n        color: '#FFF',\n        maxWidth: '80%',\n        borderRadius: 35\n    },\n    cardContentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: 30,\n        paddingRight: 30,\n        maxWidth:'450px'\n    },\n    thanksTitle: {\n        marginTop: 8,\n        fontSize: 18,\n        fontWeight: '700',\n        textAlign: 'center'\n    },\n    thanksDescription: {\n        marginTop: 24,\n        fontSize: 14,\n        fontWeight: '500',\n        lineHeight: '22px',\n        textAlign: 'center',\n        marginRight: 48,\n        marginLeft: 48\n    },\n    publishButton: {\n        marginTop: 64,\n        marginLeft: 30,\n        marginRight: 30,\n        backgroundColor: '#0AFFD2',\n        borderRadius: 10,\n        color: '#4E2D92',\n        fontSize: 16,\n        fontWeight: '700',\n        paddingTop: 19,\n        paddingBottom: 19,\n        '&:hover': {\n            backgroundColor: '#0AFFD2',\n            opacity: '.95'\n        }\n    },\n    backToDashboardButton: {\n        marginTop: 16,\n        marginBottom: 16,\n        fontSize: 16,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    buttonClose:{\n       position: 'absolute',\n       top:'0px',\n       left:'-10px',\n    },\n\n    paymentPolicy:{\n          marginTop:'80px'\n    },\n    textPaymentPolicy:{\n       color: '#FFFFFF',\n       opacity: '0.6',\n       fontWeight:'500',\n       fontSize: '12px',\n       lineHeight: '15px',\n       letterSpacing:'0.5px'\n    }\n}));\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst ChargeConfirmationPage = ({ user }) => {\n    const [totalPaid, setTotalPaid] = useState(0);\n    const [interval, setInterval] = useState('');\n    const [intervalText, setIntervalText] = useState('monthly');\n    const [plan, setPlan] = useState('');\n    const classes = useStyles();\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getDetails() {\n            const id = query.get('subscriptionId');\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\n            setTotalPaid(details.val().totalPaid);\n\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\n\n            setIntervalText(details.val().interval);\n\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\n        }\n\n        if (user && user.uid) {\n            getDetails();\n        }\n    }, [user]);\n\n    const onPublishStreamClick = () => {\n        history.push('/create');\n    }\n\n    const onBackToDashboardClick = () => {\n        history.push('/profile');\n    }\n\n    return (\n        <Grid container alignContent='center' className={classes.container}>\n            <Grid item md={6} className={classes.paymentInfoContainer}>\n                <Button className={classes.buttonClose}>\n                    <Closeicon />\n                    </Button>\n                <div className={classes.eImageContainer}>\n                    <ESvg />\n                </div>\n                <p className={classes.subscriptionBought}>\n                    {plan && intervalText &&\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                    }\n                </p>\n                <div className={classes.subTerms}>\n                    <p className={classes.totalPaid}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                    <p className={classes.interval}>\n                        {interval}\n                    </p>\n                </div>\n                <div className={classes.paymentDetails}>\n                    <div>\n                        <p className={classes.subscriptionType}>\n                            {plan}\n                        </p>\n                        <p className={classes.paymentInterval}>\n                            {intervalText &&\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                            }\n                        </p>\n                    </div>\n                    <p className={classes.itemCost}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentUntilTodayContainer}>\n                    <p className={classes.paymentUntilToday}>\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\n                    </p>\n                    <p className={classes.paymentUntilToday}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentPolicy}>\n                    <p className={classes.textPaymentPolicy}>Powered by Stripe | Terms Privacy</p>\n                </div>\n            </Grid>\n            <Grid item md={6} className={classes.thanksCardContainer}>\n                <Card className={classes.thanksCard}>\n                    <div className={classes.cardContentContainer}>\n                        <img src={HeartHands} />\n                        <CardContent>\n                            <p className={classes.thanksTitle}>\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\n                            </p>\n                            <p className={classes.thanksDescription}>\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\n                            </p>\n                        </CardContent>\n                        <Button fullWidth variant='contained'\n                            className={classes.publishButton}\n                            onClick={onPublishStreamClick}>\n                            {t('ChargeConfirmationPage.publishStream')}\n                        </Button>\n                        <Button className={classes.backToDashboardButton}\n                            onClick={onBackToDashboardClick}>\n                            {t('ChargeConfirmationPage.backToDashboard')}\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ChargeConfirmationPage;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx",["314","315","316"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, Button, Checkbox } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport styles from './OnBoarding.module.css';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { useHistory } from 'react-router-dom';\nimport { getEmotes, getUserWebhooks, subscribeStreamerToTwitchWebhook } from '../../services/functions';\nimport { createInteractionsReward } from '../../services/interactionsQapla';\nimport { loadTwitchExtensionReactionsPrices, saveInteractionsRewardData, writeTestCheer } from '../../services/database';\nimport { CHEERS_URI, InteractionsRewardRedemption, ZAP_REWARD_NAME } from '../../utilities/Constants';\nimport { notifyBugToDevelopTeam } from '../../services/discord';\nimport ReactionCard from '../ReactionCard/ReactionCard';\n\nimport { ReactComponent as Unchecked } from './../../assets/Unchecked.svg';\nimport { ReactComponent as Checked } from './../../assets/Checked.svg';\nimport { ReactComponent as GIFIcon } from './../../assets/reactionCardsIcons/GIF.svg';\nimport { ReactComponent as MemesIcon } from './../../assets/reactionCardsIcons/Memes.svg';\nimport { ReactComponent as MegaStickerIcon } from './../../assets/reactionCardsIcons/MegaSticker.svg';\nimport { ReactComponent as AvatarIcon } from './../../assets/reactionCardsIcons/Avatar.svg';\nimport { ReactComponent as TtGiphyIcon } from './../../assets/reactionCardsIcons/TtGiphy.svg';\nimport { ReactComponent as TTSBotIcon } from './../../assets/reactionCardsIcons/TTSBot.svg';\nimport { ReactComponent as PlusIcon } from './../../assets/reactionCardsIcons/+.svg';\nimport { ReactComponent as ArrowRight } from './../../assets/arrowRight.svg';\nimport { ReactComponent as Zap } from './../../assets/Zap.svg';\nimport ChannelPointsImage from './../../assets/channel-pts-twitch-icon@4x.png';\nimport { deleteCustomReward, getUserCustomRewards } from '../../services/twitch';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: '#00FFDD',\n        color: '#141833',\n        width: '390px',\n        height: '60px',\n        fontSize: '16px',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        textTransform: 'none',\n        borderRadius: '16px',\n        '&:hover': {\n            backgroundColor: '#00EACB',\n            opacity: .9\n        },\n        '&:disabled': {\n            backgroundColor: '#00EACB !important',\n            opacity: .75\n        },\n    },\n    copyOverlayLinkButton: {\n        backgroundColor: '#202750',\n        display: 'flex',\n        marginTop: '32px',\n        borderRadius: '8px',\n        width: '346px',\n        height: '45px',\n        alignItems: 'center',\n        padding: '0',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#202750'\n        },\n    },\n    testButton: {\n        backgroundColor: '#3B4BF9',\n        color: '#fff',\n        width: '346px',\n        height: '60px',\n        fontsize: '16px',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        textTransform: 'none',\n        borderRadius: '16px',\n        '&:hover': {\n            backgroundColor: '#2E3BC9'\n        },\n    },\n}));\n\nconst OnBoarding = ({ user }) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const [step, setStep] = useState(0);\n    const [errorCode, setErrorCode] = useState(0);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [overlayLinkCopied, setOverlayLinkCopied] = useState(false);\n    const [streamerOverlayLink, setStreamerOverlayLink] = useState(CHEERS_URI);\n    const [stepIndicator, setStepIndicator] = useState(0);\n    const [acceptPolicies, setAcceptPolicies] = useState(true);\n    const [randomEmoteUrl, setRandomEmoteUrl] = useState('');\n    const [reactionsPrices, setReactionsPrices] = useState([]);\n    const [creatingReward, setCreatingReward] = useState(false);\n    const [loadingDots, setLoadingDots] = useState('.');\n    const [zapPrice, setZapPrice] = useState(200);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (user && user.id) {\n            setStreamerOverlayLink(`${CHEERS_URI}/${user.id}`);\n        }\n\n        async function getRandomEmote() {\n            if (user && user.uid) {\n                const emotesRequest = await getEmotes(user.uid);\n\n                const emotes = emotesRequest.data ? emotesRequest.data : null;\n                if (emotes) {\n                    // Find the first array who has more than 0 elements\n                    const array = emotes.find((typeOfEmote) => typeOfEmote.data[0].length > 0);\n                    const randomNumber = Math.floor(Math.random() * array.data[0].length);\n\n                    setRandomEmoteUrl(array.data[0][randomNumber].images.url_1x);\n                }\n            }\n        }\n\n        async function loadTwitchExtensionPrices() {\n            const prices = await loadTwitchExtensionReactionsPrices();\n            if (prices.exists()) {\n                setReactionsPrices(prices.val());\n            }\n        }\n\n        loadTwitchExtensionPrices();\n\n        if (!randomEmoteUrl) {\n            getRandomEmote();\n        }\n    }, [user]);\n\n    useEffect(() => {\n        if (creatingReward) {\n            setTimeout(() => {\n                setLoadingDots(loadingDots.length < 3 ? loadingDots + '.' : '.');\n            }, 750);\n        }\n    }, [creatingReward, loadingDots]);\n\n    const handleMainButton = () => {\n        switch (step) {\n            case -1:\n                if (errorCode === 403) {\n                    openTwitchAffiliateProgram();\n                } else {\n                    openDiscordSupport();\n                }\n                break;\n            case 0:\n                setStep(step + 1);\n                break;\n            case 1:\n                createChannelPointsRewards();\n                break;\n            case 3:\n                setStepIndicator(1);\n                setStep(step + 1);\n                break;\n            case 4:\n                setStepIndicator(2);\n                setStep(step + 1);\n                break;\n            case 5:\n                setStep(step + 1);\n                break;\n            case 6:\n                history.push('/profile');\n                break;\n            default:\n                break;\n        }\n    }\n\n    const openDiscordSupport = () => {\n        window.open('https://discord.gg/2UMQ6ZXPkq', '_blank');\n    }\n\n    const openTwitchAffiliateProgram = () => {\n        window.open('https://help.twitch.tv/s/article/joining-the-affiliate-program', '_blank');\n    }\n\n    const createChannelPointsRewards = async (attempt = 1) => {\n        setStep(step + 1);\n        setCreatingReward(true);\n        // Create reward with default value, the user can change their cost in the next step\n        const result = await createInteractionsReward(user.uid, user.id, user.refreshToken, ZAP_REWARD_NAME, zapPrice);\n\n        if (result !== undefined) {\n            if (result.reward.status === 200) {\n                const webhookSubscription = await subscribeStreamerToTwitchWebhook(user.id, InteractionsRewardRedemption.type, InteractionsRewardRedemption.callback, { reward_id: result.reward.data.id });\n\n                if (webhookSubscription.data.id) {\n                    // Store on database\n                    await saveInteractionsRewardData(user.uid, result.reward.data.id, webhookSubscription.data.id);\n\n                    setCreatingReward(false);\n                    return setStep(3);\n                } else {\n                    if (attempt === 1) {\n                        // Webhook creation failed, delete reward and try again\n                        await deleteCustomReward(user.id, user.twitchAccessToken, result.reward.data.id);\n\n                        setCreatingReward(false);\n                        return createChannelPointsRewards(2);\n                    } else {\n                        // If we fail 2 times to create the webhook notify developer team\n                        notifyBugToDevelopTeam(`${user.uid} Reward webhook creation error`);\n\n                        setCreatingReward(false);\n                        return onErrorChannelPointsCreation(500);\n                    }\n                }\n            } else {\n                // Duplicated reward or channel points rewards are full\n                if (result.reward.status === 400) {\n                    const userWebhooks = await getUserWebhooks(user.id);\n\n                    const webhookExists = userWebhooks.data.some((webhook) => {\n                        if (webhook.type === 'channel.channel_points_custom_reward_redemption.add') {\n                            return true;\n                        }\n\n                        return false;\n                    });\n\n                    // Reward exists but does not have webhook linked\n                    if (!webhookExists) {\n                        if (attempt === 1) {\n                            const userRewards = await getUserCustomRewards(user.id, user.twitchAccessToken);\n\n                            if (userRewards) {\n                                return userRewards.forEach(async (reward) => {\n                                    // Find Qapla Reward\n                                    if (reward.title === ZAP_REWARD_NAME) {\n                                        // Reward already exists, but webhook does not, delete reward and try again\n                                        await deleteCustomReward(user.id, user.twitchAccessToken, reward.id);\n\n                                        setCreatingReward(false);\n                                        return createChannelPointsRewards(2);\n                                    }\n                                });\n                            }\n                        } else {\n                            // If we fail 2 times to create the reward and webhook notify developer team\n                            notifyBugToDevelopTeam(`${user.uid} Reactions reward creation error: ` + JSON.stringify(result.reward));\n\n                            setCreatingReward(false);\n                            return onErrorChannelPointsCreation(result.reward.status, result.reward.message);\n                        }\n                    } else {\n                        // Webhook and reward already exists\n                        setCreatingReward(false);\n                        return setStep(3);\n                    }\n                } else if (result.reward.status === 403) {\n                    setCreatingReward(false);\n                    onErrorChannelPointsCreation(result.reward.status, result.reward.error);\n                }\n            }\n        } else {\n            notifyBugToDevelopTeam(`${user.uid} Reactions reward creation error: error 0 (auth token expired)`);\n\n            setCreatingReward(false);\n            return onErrorChannelPointsCreation(0);\n        }\n    }\n\n    const onErrorChannelPointsCreation = (errorCode, errorMessage) => {\n        setErrorCode(errorCode);\n        if (errorCode === 403) {\n            setErrorMessage('noAffiliate');\n        } else {\n            let errorTranslationKey = errorMessage === 'CREATE_CUSTOM_REWARD_TOO_MANY_REWARDS' ? 'tooManyRewards' : 'duplicatedReward';\n            setErrorMessage(errorTranslationKey);\n        }\n        setStep(-1);\n    }\n\n    const handleCopyOverlayLink = () => {\n        copyCheersURL();\n        setOverlayLinkCopied(true);\n    }\n\n    const handleTestOverlay = () => {\n        writeTestCheer(user.uid);\n    }\n\n    const copyCheersURL = () => {\n        navigator.clipboard.writeText(streamerOverlayLink);\n    }\n\n    const handlePoliciesCheckbox = () => setAcceptPolicies(!acceptPolicies);\n\n    return (\n        <div style={{\n            background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), rgba(3, 7, 34, 0.95)',\n            height: '100vh',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexDirection: 'column',\n        }}>\n            {step !== 4 &&\n                <div style={{\n                    marginTop: 24,\n                    position: 'relative',\n                    display: 'flex',\n                    backgroundColor: '#141833',\n                    width: '450px',\n                    height: step === 5 ? '402px' : '256px',\n                    borderRadius: '35px',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                    zIndex: 500,\n                }}>\n                    {step === -1 &&\n                        <>\n                            <img src={`https://media.giphy.com/media/51Uiuy5QBZNkoF3b2Z/giphy.gif`} alt={`Scared Dog`}\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 190, // 256 - 23 (height of container - hidden part of the image)\n                                    width: '238px',\n                                    height: '239px',\n                                    zIndex: '1000',\n                                }}\n                            />\n                        </>\n                    }\n                    {step === 0 &&\n                        <>\n                            <img src={`https://media.giphy.com/media/yQssIXdTQlbN3EEPYj/giphy.gif`} alt={`Barnaby on PC`}\n                                style={{\n                                    zIndex: -1,\n                                    position: 'absolute',\n                                    bottom: 256, // 256 - 23 (height of container - hidden part of the image)\n                                    width: '334px',\n                                    height: '179px',\n                                    resize: ''\n                                }}\n                            />\n                        </>\n                    }\n                    {step === 1 &&\n                        <>\n                            <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2FZaps%2520(3).gif?alt=media&token=8501e6c2-a17b-4b7e-aa6c-2ba8a1ed5acd'\n                                alt='Zaps'\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 256, // height of container\n                                    width: '300px',\n                                    height: '150px',\n                                }}\n                            />\n                            <img src={`https://media.giphy.com/media/3oFzlW8dht4DdvwBqg/giphy.gif`} alt={`Barnaby Looking`}\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 244, // 256 - 12 (height of container - hidden part of the image)\n                                    width: '162px',\n                                    height: '151px',\n                                    zIndex: '1000',\n                                    transform: 'rotate(-3.45deg)',\n                                }}\n                            />\n                        </>\n                    }\n                    {step === 2 &&\n                        <>\n                            <img src='https://media.giphy.com/media/3o752nnUPE7OzLeSVW/giphy.gif' alt={`Barnaby Working`}\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 256, // 256 - 8 (height of container - hidden part of the image)\n                                    width: '206px',\n                                    height: '135px',\n                                    zIndex: '1',\n                                }}\n                            />\n                        </>\n                    }\n                    {step === 3 &&\n                        <>\n                            <img src='https://media.giphy.com/media/xULW8v7LtZrgcaGvC0/giphy.gif' alt={`Barnaby Says Thanks`}\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 190, // 256 - 66 (height of container - visible part of the image over the card)\n                                    width: '239px',\n                                    height: '239px',\n                                    zIndex: '1000',\n                                }}\n                            />\n                        </>\n                    }\n                    {step === 5 &&\n                        <>\n                            <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Foverlay.gif?alt=media&token=178044eb-f697-44ad-860c-81e93741d276'\n                                alt='overlay'\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 402, // 402 - 66 (height of container)\n                                    width: '300px',\n                                    height: '150px',\n                                }}\n                            />\n                            <img src={`https://media.giphy.com/media/3oFzlW8dht4DdvwBqg/giphy.gif`} alt={`Barnaby Looking`}\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 390, // 256 - 12 (height of container - hidden part of the image)\n                                    width: '162px',\n                                    height: '151px',\n                                    zIndex: '1000',\n                                    transform: 'rotate(-3.45deg)',\n                                }}\n                            />\n                        </>\n                    }\n                    {step === -1 &&\n                        <>\n                            <p style={{ marginTop: '42px' }} className={styles.headerText}>\n                                {t(`Onboarding.${errorMessage}.title`)}\n                            </p>\n                            <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                                {t(`Onboarding.${errorMessage}.description`)}\n                            </p>\n                        </>\n                    }\n                    {step === 0 &&\n                        <>\n                            <p className={styles.headerText}>\n                                {t('Onboarding.letsSetUp')}\n                            </p>\n                            <ul>\n                                <li className={styles.subText}>\n                                    {t('Onboarding.processDescriptionP1')}\n                                </li>\n                                <li className={`${styles.subText} ${styles.liMargin}`}>\n                                    {t('Onboarding.processDescriptionP2')}\n                                </li>\n                                <li className={`${styles.subText} ${styles.liMargin}`}>\n                                    {t('Onboarding.processDescriptionP3')}\n                                </li>\n                            </ul>\n                        </>\n                    }\n                    {step === 1 &&\n                        <>\n                            <h1 className={styles.headerText}>\n                                {t('Onboarding.setZapPrice')}\n                            </h1>\n                            <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                                {t('Onboarding.zapBenefits')}\n                            </p>\n                            <div className={styles.zapPriceContainer}>\n                                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                    <div style={{\n                                        height: '32px',\n                                        width: '32px',\n                                        borderRadius: '5px',\n                                        background: '#8B46FF',\n                                        display: 'flex',\n                                        justifyContent: 'center',\n                                        alignItems: 'center',\n                                        marginRight: '8px'\n                                    }}>\n                                        <img src={ChannelPointsImage} style={{\n                                            width: '20px',\n                                            height: '30px',\n                                            objectFit: 'contain'\n                                        }} />\n                                    </div>\n                                    <div className={styles.qoinsMainContainer}>\n                                        <div className={styles.qoinsSubContainer}>\n                                        <input\n                                            className={styles.qoins}\n                                            value={zapPrice}\n                                            onChange={(e) => setZapPrice(parseInt(e.target.value) >= 1 ? parseInt(e.target.value) : 1)}\n                                            min={1}\n                                            type='number'\n                                            onKeyDown={(e) => ['e', 'E', '+', '-'].includes(e.key) && e.preventDefault()} />\n                                        </div>\n                                    </div>\n                                </div>\n                                <ArrowRight />\n                                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                    <Zap />\n                                    <p style={{ marginLeft: '4px', fontSize: '18px', fontWeight: '700', color: '#FFF' }}>\n                                        1 Zap\n                                    </p>\n                                </div>\n                            </div>\n                        </>\n                    }\n                    {step === 2 &&\n                        <>\n                            <h1 className={styles.gradientText}>\n                                {t('Onboarding.workingOnRequest', { loadingDots })}\n                            </h1>\n                        </>\n                    }\n                    {step === 3 &&\n                        <>\n                            <h1 className={styles.gradientText}>\n                                {t('Onboarding.rewardCreated')}\n                            </h1>\n                        </>\n                    }\n                    {step === 5 &&\n                        <>\n                            <h1 className={styles.headerText}>\n                                {t('Onboarding.addReactionsToOverlay')}\n                            </h1>\n                            <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                                {t('Onboarding.copyLink')}\n                            </p>\n                            <div style={{\n                                marginTop: '32px',\n                                display: 'flex',\n                            }}>\n                                <div style={{\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'row',\n                                }}>\n                                    <p className={styles.overlayResText}>\n                                        {t('Onboarding.width')}\n                                    </p>\n                                    <div className={styles.overlayResNumbContainer}>\n                                        <p className={styles.overlayResNumb}>\n                                            1920\n                                        </p>\n                                    </div>\n                                </div>\n                                <div style={{\n                                    marginLeft: '10px',\n                                    display: 'flex',\n                                    alignItems: 'center',\n                                    flexDirection: 'row',\n                                }}>\n                                    <p className={styles.overlayResText}>\n                                        {t('Onboarding.height')}\n                                    </p>\n                                    <div className={styles.overlayResNumbContainer}>\n                                        <p className={styles.overlayResNumb}>\n                                            1080\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            <Button\n                                disableRipple\n                                onClick={handleCopyOverlayLink}\n                                className={classes.copyOverlayLinkButton}>\n                                <p style={{\n                                    color: '#6C5DD3',\n                                    fontSize: '12px',\n                                    fontWeight: '500',\n                                    lineHeight: '24px',\n                                    textAlign: 'center',\n                                    flexGrow: 1,\n                                }}>\n                                    {streamerOverlayLink}\n                                </p>\n                                <CopyIcon style={{\n                                    justifySelf: 'flex-end',\n                                }} />\n                            </Button>\n                            <div style={{\n                                marginTop: '32px',\n                            }}>\n                                {overlayLinkCopied ?\n                                    <Button\n                                        onClick={handleTestOverlay}\n                                        className={classes.testButton}>\n                                        {t('Onboarding.testOverlay')}\n                                    </Button>\n                                    :\n                                    <div style={{ height: '60px' }} />\n                                }\n                            </div>\n                        </>\n                    }\n                    {step === 6 &&\n                        <>\n                            <img src={`https://media.giphy.com/media/3o751SMzZ5TjLWInoQ/giphy.gif`} alt={`Barnaby Thats Rad`}\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 135, // 256 - 121\n                                    width: '351px',\n                                    height: '220px',\n                                    marginTop: '-100px',\n                                }}\n                            />\n                            <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Fyou%2520are%2520set.gif?alt=media&token=0c285185-9be1-4f56-ae8e-efd67a7e2099'\n                                alt={`you're set`}\n                                style={{\n                                    position: 'absolute',\n                                    bottom: 24, // 256 - 121\n                                    width: '400px',\n                                    height: '107px',\n                                }}\n                            />\n                        </>\n                    }\n                </div>\n            }\n            {step === 4 &&\n                <>\n                    <div style={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        transform: 'translateY(260px)',\n                    }}>\n                        <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2FReactionTiers.gif?alt=media&token=6a2e66ba-5749-4a0e-a0f1-e6411d1ee9f3'\n                            alt='channel points'\n                            style={{\n                                position: 'absolute',\n                                width: '269px',\n                                height: '134px',\n                                transform: 'rotate(-15deg)',\n                                bottom: 256, // 256 (height of container)\n                            }}\n                        />\n                        <img src={`https://media.giphy.com/media/3oFzlW8dht4DdvwBqg/giphy.gif`} alt={`Barnaby Looking`}\n                            style={{\n                                position: 'absolute',\n                                width: '162px',\n                                height: '151px',\n                                zIndex: '1000',\n                                transform: 'rotate(-3.45deg)',\n                                bottom: 244, // 256 - 12 (height of container - hidden part of the image)\n                            }}\n                        />\n                    </div>\n                    <div style={{\n                        display: 'flex',\n                        gap: '24px',\n                        flexWrap: 'wrap',\n                    }}>\n                        <ReactionCard\n                            icons={\n                                [\n                                    <GIFIcon />,\n                                    <MemesIcon />,\n                                    <MegaStickerIcon />,\n                                ]\n                            }\n                            title={t('StreamerProfile.ReactionCard.tier1Title')}\n                            subtitle={t('StreamerProfile.ReactionCard.tier1Subtitle')}\n                            textMaxWidth='110px'\n                            reactionLevel={1}\n                            user={user}\n                            availablePrices={reactionsPrices}\n                            hideBorder\n                            subsMode={1}\n                        />\n                        <ReactionCard\n                            icons={\n                                [\n                                    <PlusIcon fill={'url(#icons-gradient)'} />,\n                                    <AvatarIcon fill={'url(#icons-gradient)'} />,\n                                    <TtGiphyIcon fill={'url(#icons-gradient)'} />,\n                                    <TTSBotIcon fill={'url(#icons-gradient)'} />,\n                                ]\n                            }\n                            title={t('StreamerProfile.ReactionCard.tier2Title')}\n                            subtitle={t('StreamerProfile.ReactionCard.tier2Subtitle')}\n                            textMaxWidth='160px'\n                            reactionLevel={2}\n                            user={user}\n                            availablePrices={reactionsPrices}\n                            hideBorder\n                            subsMode={1}\n                        />\n                        <ReactionCard\n                            icons={\n                                [\n                                    <PlusIcon fill={'url(#icons-gradient)'} />,\n                                    <img src={randomEmoteUrl}\n                                        style={{ height: 24, width: 24 }} />\n                                ]\n                            }\n                            title={t('StreamerProfile.ReactionCard.tier3Title')}\n                            subtitle={t('StreamerProfile.ReactionCard.tier3Subtitle')}\n                            textMaxWidth='130px'\n                            reactionLevel={3}\n                            user={user}\n                            availablePrices={reactionsPrices}\n                            hideBorder\n                            subsMode={1}\n                        />\n                    </div>\n                    <p className={styles.headerText} style={{ marginTop: '40px', marginBottom: '16px' }}>\n                        {t('Onboarding.tiersPricingInstructions')}\n                    </p>\n                </>\n            }\n            <div\n                style={{\n                    marginTop: 24,\n                }}>\n                <Button\n                    disabled={step === 2 || (step === 5 && !overlayLinkCopied) || (step === 0 && !acceptPolicies) || creatingReward}\n                    onClick={handleMainButton}\n                    className={classes.button}\n                >\n                    {step === -1 &&\n                        <>\n                            {errorCode === 403 ?\n                                t('Onboarding.goToTwitch')\n                                :\n                                t('Onboarding.goToDiscord')\n                            }\n                        </>\n                    }\n                    {step === 0 &&\n                        <>\n                            {t('Onboarding.letsGo')}\n                        </>\n                    }\n                    {step === 1 &&\n                        <>\n                            {t('Onboarding.createZap')}\n                        </>\n                    }\n                    {step === 2 &&\n                        <>\n                            {t('Onboarding.waitABit')}\n                        </>\n                    }\n                    {step === 3 &&\n                        <>\n                            {t('Onboarding.configureTiers')}\n                        </>\n                    }\n                    {step === 4 &&\n                        <>\n                            {t('Onboarding.imAllSet')}\n                        </>\n                    }\n                    {step === 5 &&\n                        <>\n                            {overlayLinkCopied ?\n                                t('Onboarding.finishSetUp')\n                                :\n                                t('Onboarding.copyToTest')\n                            }\n                        </>\n                    }\n                    {step === 6 &&\n                        <>\n                            {t('Onboarding.goToDashboard')}\n                        </>\n                    }\n                </Button>\n            </div>\n            {step !== 6 &&\n                <div style={{\n                    display: 'flex',\n                    position: 'absolute',\n                    bottom: 72,\n                }}>\n                    <div style={{\n                        backgroundColor: stepIndicator === 0 ? '#00FEDF' : '#00FEDF8A',\n                        height: '8px',\n                        width: stepIndicator === 0 ? '28px' : '8px',\n                        borderRadius: '4px',\n                        margin: '0px 6.5px',\n                    }} />\n                    <div style={{\n                        backgroundColor: stepIndicator === 1 ? '#00FEDF' : '#00FEDF8A',\n                        height: '8px',\n                        width: stepIndicator === 1 ? '28px' : '8px',\n                        borderRadius: '4px',\n                        margin: '0px 6.5px',\n\n                    }} />\n                    <div style={{\n                        backgroundColor: stepIndicator === 2 ? '#00FEDF' : '#00FEDF8A',\n                        height: '8px',\n                        width: stepIndicator === 2 ? '28px' : '8px',\n                        borderRadius: '4px',\n                        margin: '0px 6.5px',\n                    }} />\n                </div>\n            }\n            {step === 0 &&\n                <div style={{ position: 'absolute', bottom: 24, display: 'flex', alignItems: 'center' }}>\n                    <Checkbox\n                        icon={<Unchecked />}\n                        checkedIcon={<Checked />}\n                        onChange={handlePoliciesCheckbox}\n                        checked={acceptPolicies}\n                        style={{ paddingRight: '0px' }}\n                    />\n                    <div style={{ opacity: acceptPolicies ? 1 : 0.7, color: '#FFF', paddingLeft: '6px' }}>\n                        {t('Onboarding.policiesP1')}\n                        <a href={t('Onboarding.termsOfUseUrl')} target='_blank'\n                            rel='noreferrer'\n                            style={{ color: '#00FFDD', marginLeft: 4, marginRight: 4, textDecoration: 'none' }}>\n                            {t('Onboarding.policiesP2')}\n                        </a>\n                        {t('Onboarding.policiesP3')}\n                        <a href={t('Onboarding.privacyPolicy')}\n                            target='_blank'\n                            rel='noreferrer'\n                            style={{ color: '#00FFDD', marginLeft: 4, textDecoration: 'none' }}>\n                            {t('Onboarding.policiesP4')}\n                        </a>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n\n}\n\nexport default OnBoarding;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["317","318"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, CircularProgress } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\n\nimport { createNewStreamRequest, updateStreamerProfile } from './../../services/database';\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    titleLabel: {\n        marginBottom: 8\n    },\n    datePickerLabel: {\n        marginBottom: theme.spacing(1),\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px',\n        width:'274px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        height: '56px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10',\n            height: '56px',\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games, qoinsDrops }) => {\n    const userLang = navigator.language || navigator.userLanguage;\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [gamesData, setGamesData] = useState([]);\n    const [dropsForStream, setDropsForStream] = useState(null);\n    const [lockSendButton, setLockSendButton] = useState(false);\n    const [dropsError, setDropsError] = useState(null);\n\n    useEffect(() => {\n        let gameList = [];\n\n        if (games.allGames) {\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\n\n            let tempGamesData = [];\n            gameList.forEach((game) => {\n                tempGamesData.push({\n                    id: game.gameKey,\n                    name: game.gameName\n                })\n            });\n\n            setGamesData(tempGamesData);\n        }\n\n        if (dropsForStream === null && qoinsDrops.original > 0) {\n            setDropsForStream(qoinsDrops.original - qoinsDrops.used < 50 ? qoinsDrops.original - qoinsDrops.used : 50);\n        }\n    }, [games.allGames, user, qoinsDrops, dropsForStream]);\n\n    const optionalDataReducer = (state, action) => {\n        // We don´t need this to be a reducer anymore, we should change it later\n        switch (action.target.id) {\n            case 'eventTitle':\n                return ({\n                    ...state,\n                    title: action.target.value\n                });\n            default:\n                break;\n        }\n    }\n\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n    // Minimum valid date is 5 minutes from the current date\n    const minDate = new Date((new Date()).getTime() + 300000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    const setDrops = (drops) => {\n        if (drops >= 0) {\n            if (drops > qoinsDrops.original - qoinsDrops.used) {\n                setDropsError(\n                    <p style={{ fontSize: 12, fontWeight: '400', color: '#FF0000', marginTop: 8 }}>\n                        {t('NewStream.dropsAboveLimitErrorP1')}\n                        <span style={{ color: '#00FFDD', fontSize: 12 }}>\n                            {t('NewStream.dropsAboveLimitErrorP2', { drops: qoinsDrops.original - qoinsDrops.used })}\n                        </span>\n                        {t('NewStream.dropsAboveLimitErrorP3')}\n                    </p>\n                );\n            } else if (drops === 0) {\n                setDropsError(\n                    <p style={{ fontSize: 12, fontWeight: '400', color: '#FF0000', marginTop: 8 }}>\n                        {t('NewStream.setValidAmountOfDropsP1')}\n                        <span style={{ color: '#00FFDD', fontSize: 12 }}>\n                            {t('NewStream.setValidAmountOfDropsP2', { drops: qoinsDrops.original - qoinsDrops.used })}\n                        </span>\n                    </p>\n                );\n            } else {\n                setDropsError(null);\n            }\n\n            setDropsForStream(drops);\n        }\n    }\n\n    const submitEvent = async () => {\n        setLockSendButton(true);\n        if (user.broadcasterType === '') {\n            setLockSendButton(false);\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        // User is not premium and don´t have a Free Trial\n        if (user.premium === undefined && user.freeTrial === undefined) {\n            return setLockSendButton(false);\n        }\n\n        if (selectedDate < minDate) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.beforeXminutes'));\n            return;\n        }\n        if (!selectedGame) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        if (user.currentPeriod) {\n            const { endDate } = user.currentPeriod;\n\n            /**\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\n             */\n            if (selectedDate.getTime() <= endDate) {\n\n                const userCanCreateStream = qoinsDrops.original;\n\n                /**\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n                 * is lower or equal to the user limit per month then we create the event\n                 */\n                if (userCanCreateStream) {\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                    let streamerData = {\n                        displayName: user.displayName,\n                        login: user.login,\n                        photoUrl: user.photoUrl\n                    };\n\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\n                    if (userData && userData.data) {\n                        streamerData = {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url\n                        };\n\n                        await updateStreamerProfile(user.uid, {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url,\n                            broadcasterType: userData.data.broadcaster_type\n                        });\n                    }\n\n                    let titles = {\n                        es: '🪂 Únete y obtén Drops de Qoins',\n                        en: '🪂 Join to get Qoins Drops'\n                    };\n\n                    if (optionalData.title) {\n                        titles = {\n                            es: optionalData.title,\n                            en: optionalData.title\n                        };\n                    }\n\n                    await createNewStreamRequest(\n                        user.uid,\n                        streamerData,\n                        selectedGame,\n                        UTCDate,\n                        UTCTime,\n                        selectedEvent,\n                        selectedDate.getTime(),\n                        titles,\n                        (new Date()).getTime(),\n                        stringDate,\n                        dropsForStream,\n                        () => {\n                            window.analytics.track('Stream requested', {\n                                selectedGame,\n                                selectedDate: selectedDate.getTime(),\n                                uid: user.uid\n                            });\n                            setOpenSuccessDialog(true);\n                        }\n                    );\n                }\n            } else {\n                alert(t('NewStream.alerts.beforePlanExpiration'));\n            }\n        }\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <BackButton onClick={history.goBack} />\n                </Grid>\n                <Grid item sm={8}>\n                    <h1 className={styles.title}>\n                        {t('NewStream.whatAreYouPlaying')}\n                    </h1>\n                    <Grid container spacing={4} style={{width: '800px',marginTop: '2px' }}>\n                        <Grid item sm={5} style={{ width: '274px', maxWidth: '308px', }}>\n                            <InputLabel className={classes.datePickerLabel}>\n                                {t('NewStream.pickACategory')}\n                            </InputLabel>\n                            <ReactSearchAutocomplete\n                                items={gamesData}\n                                autofocus\n                                placeholder={t('NewStream.categoryPickerPlaceholder')}\n                                showItemsOnFocus\n                                maxResults={gamesData.length}\n                                onSelect={(game) => setSelectedGame(game.id)}\n                                onClear={() => setSelectedGame(null)}\n                                styling={{\n                                    zIndex: 999,\n                                    height: '56px',\n                                    width: '274px',\n                                    color: '#FFF',\n                                    hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\n                                    fontSize: '1rem',\n                                    fontWeight: 'bold',\n                                    backgroundColor: '#141833',\n                                    border: 'none',\n                                    borderRadius: '8px',\n                                    placeholderColor: 'rgba(255, 255, 255, 0.5)',\n                                    fontFamily: 'Inter',\n                                    lineColor: 'transparent',\n                                }}\n                                showIcon={false}\n                                formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\n                        </Grid>\n                    </Grid>\n                    <h1 className={styles.title}>\n                        {t('NewStream.when')}\n                    </h1>\n                    <MuiPickersUtilsProvider utils={DayJsUtils}>\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                            <Grid item sm={5} style={{ maxWidth: '304px', }}>\n                                <InputLabel className={classes.datePickerLabel} >\n                                    {t('NewStream.date')}\n                                </InputLabel>\n                                <KeyboardDatePicker\n                                    open={calendarOpen}\n                                    onClick={() => setCalendarOpen(true)}\n                                    onOpen={() => { }}\n                                    onClose={() => setCalendarOpen(false)}\n                                    clearable\n                                    disablePast\n                                    disableToolbar\n                                    autoOk\n                                    value={displayDate}\n                                    placeholder='10-10-2021'\n                                    onChange={handleDateChange}\n                                    defaultValue={new Date()}\n                                    minDate={minDate}\n                                    minDateMessage={t('NewStream.alerts.beforeXminutes')}\n                                    format='DD-MM-YY ddd'\n                                    style={{width:'274px', height:'56px'}}\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <CalendarIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.time')}\n                                </InputLabel>\n                                <KeyboardTimePicker\n                                    open={clockOpen}\n                                    onClick={() => setClockOpen(true)}\n                                    onOpen={() => { }}\n                                    onClose={() => setClockOpen(false)}\n                                    autoOk\n                                    error={selectedDate <= minDate}\n                                    helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.beforeXminutes')}\n                                    value={displayDate}\n                                    placeholder='08:00 AM'\n                                    onChange={handleDateChange}\n                                    style={{width:'274px',height:'56px'}}\n                                    // mask='__:__ _M'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <TimeIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                    <Grid  spacing={4} style={{ marginTop: '2px' }}>\n                        <Grid item sm={5}  style={{display: 'flex'}}>\n                            <Grid >\n                                <h1 className={styles.title}>\n                                    {t('NewStream.streamTitle')}\n                                    <span style={{ fontSize: 16 }}>\n                                        {t('NewStream.optional')}\n                                    </span>\n                                </h1>\n                                <p className={styles.subTitle}>\n                                    {t('NewStream.streamTitleDescription')}\n                                </p>\n                                <Grid container spacing={4} style={{ marginTop:'10px'}}>\n                                    <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px'}}>\n                                        <StreamerTextInput\n                                            labelClassName={classes.titleLabel}\n                                            label={t('NewStream.streamTitle')}\n                                            placeholder={t('NewStream.streamTitlePlaceholder')}\n                                            id='eventTitle'\n                                            fullWidth={true}\n                                            value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                            onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid  style={{marginLeft:'30px'}}>\n                                <h1 className={styles.title}>\n                                    {t('NewStream.dropsTitle')}\n                                </h1>\n                                <p className={styles.subTitle}>\n                                    {t('NewStream.dropsDescription')}\n                                </p>\n                                <Grid container spacing={4} style={{ marginTop:'10px'}}>\n                                    <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px'}}>\n                                        <StreamerTextInput\n                                            labelClassName={classes.titleLabel}\n                                            label={t('NewStream.maxLimit')}\n                                            id='eventTitle'\n                                            fullWidth={true}\n                                            value={dropsForStream}\n                                            onChange={(e) => setDrops(Number(e.target.value))}\n                                            type='Number'\n                                        />\n                                        {dropsError}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        disabled={lockSendButton || dropsError || !dropsForStream}\n                        className={styles.button}\n                        onClick={submitEvent}>\n                        {lockSendButton ?\n                            <CircularProgress\n                                style={{\n                                    color: '#fff7',\n                                    alignSelf: 'center'\n                                }}\n                                size={25} />\n                            :\n                            t('NewStream.submit')\n                        }\n                    </Button>\n                </Grid>\n            </Grid>\n            <NewStreamSuccessDialog\n                open={openSuccessDialog}\n                onClose={() => history.push('/profile')}\n                mainPage={() => history.push('/profile')}\n            />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["319","320"],"import React, { useState, useEffect } from 'react';\nimport {\n    makeStyles,\n    Grid,\n    TableCell,\n    withStyles,\n    InputLabel,\n    InputAdornment,\n    Button\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next'\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate, cancelStreamRequest, updateStreamTitle } from '../../services/database';\nimport { notifyAboutStreamToFollowersAndParticipants } from '../../services/functions';\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\nimport EventConfirmCancellationDialog from '../QaplaStreamDialogs/EventConfirmCancellationDialog';\nimport SuccessDialog from '../SuccessDialog/SuccessDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: '24px',\n        color: '#FFF'\n    },\n    description: {\n        height: '30px',\n        fontSize: '12px',\n        color: 'rgba(255,255,255,0.60)',\n        lineHeight: '18px',\n        paddingRight: '16px',\n        marginTop: '8px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        marginTop: '32px',\n        backgroundColor: '#3B4BF9',\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\n        borderRadius: '16px',\n        color: '#FFF',\n        padding: '18px 0px',\n        fontSize: '14px',\n        fontWeight: '600',\n        width: '166px',\n        textTransform: 'none',\n        '&:disabled': {\n            opacity: .4,\n            color: '#FFF',\n            padding: '18px 0px',\n            fontSize: '14px',\n            fontWeight: '600',\n            width: '166px',\n            boxShadow: 'none',\n        },\n        '&:hover': {\n            backgroundColor: '#3B4BF9',\n            opacity: .9\n        }\n    },\n    cancelButton: {\n        marginBottom: '32px',\n        backgroundColor: '#FF006B',\n        borderRadius: '16px',\n        color: '#FFF',\n        padding: '18px 0px',\n        fontSize: '14px',\n        fontWeight: '600',\n        width: '166px',\n        textTransform: 'none',\n        '&:disabled': {\n            opacity: .4,\n            color: '#FFF',\n            padding: '18px 0px',\n            fontSize: '14px',\n            fontWeight: '600',\n            width: '166px',\n        },\n        '&:hover': {\n            backgroundColor: '#FF006B',\n            opacity: .9\n        }\n    },\n    containerTextArea: {\n        width: '100%'\n    },\n    textArea: {\n        minHeight: '100px',\n        fontSize: '13px',\n        fontWeight: '700'\n    },\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    participantsColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'center'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginBottom: 16\n    },\n    dateInput: {\n        width: '274px',\n        height: '56px',\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    }\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst SectionHeader = ({ title, description }) => {\n    const classes = useStyles();\n\n    return (\n        <div style={{ marginTop: '48px' }}>\n            <p className={classes.title}>\n                {title}\n            </p>\n            <p className={classes.description}>\n                {description}\n            </p>\n        </div>\n    );\n};\n\nconst EditStreamerEvent = ({ user }) => {\n    const { streamType } = useLocation().state;\n    const { streamId } = useParams();\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\n    const [notificationBody, setNotificationBody] = useState('');\n    const [participantsList, setParticipantsList] = useState({});\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\n    const [openCancelStreamDialog, setOpenCancelStreamDialog] = useState(false);\n    const [openCanceledStreamSuccessfulDialog, setOpenCanceledStreamSuccessfulDialog] = useState(false);\n    const [disableChangesButton, setDisableChangesButton] = useState(true);\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function setStreamData() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\n                if (timeStamp.exists()) {\n                    setSelectedDate(new Date(timeStamp.val()));\n                    setDisplayDate(new Date(timeStamp.val()));\n                    setFirstTimestamp(new Date(timeStamp.val()));\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\n                }\n            }\n        }\n\n        async function setStreamParticipantsList() {\n            const participantsList = await getStreamParticipantsList(streamId);\n            if (participantsList.exists()) {\n                setParticipantsList(participantsList.val());\n            }\n        }\n\n        async function setStreamTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n                setTitle(title.val());\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                if (user.uid) {\n                    const title = await getPastStreamTitle(user.uid, streamId);\n                    setTitle(title.val());\n                }\n            }\n        }\n\n        setStreamData();\n        setStreamParticipantsList();\n        setStreamTitle();\n    }, [streamId, streamType, user]);\n\n    const sendNotification = async () => {\n        await notifyAboutStreamToFollowersAndParticipants(streamId,\n            user.uid,\n            {\n                es: title.es,\n                en: title.en\n            },\n            {\n                es: notificationBody,\n                en: notificationBody\n            },\n            'reminders'\n        );\n\n        setNotificationBody('');\n        alert(t('EditStream.alerts.sent'));\n    }\n\n    const onChangeNotificationBody = (e) => {\n        const body = e.target.value;\n        if (body.length <= 140) {\n            setNotificationBody(body);\n        }\n    }\n\n    const saveDate = async () => {\n        if (selectedDate) {\n            const minValidDate = new Date().getTime() + 300000;\n            if (selectedDate.getTime() >= minValidDate) {\n                const dateRef = new Date(selectedDate);\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\n\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\n\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\n\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\n                let localHour = `${localHours}:${localMinutes}`;\n\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\n\n                return true;\n            } else {\n                alert(t('EditStream.alerts.errorDate'))\n            }\n        } else {\n            alert(t('EditStream.alerts.errorDate'));\n        }\n    }\n\n    const saveChanges = async () => {\n        const dateChanged = !((new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime());\n        let dateUpdated = false;\n        if (dateChanged) {\n            dateUpdated = await saveDate();\n        }\n\n        // disableChangesButton is only false when title has changed\n        if (!disableChangesButton && title.en && title.es) {\n            await updateStreamTitle(streamId, title);\n        }\n\n        if (!disableChangesButton || (dateChanged && dateUpdated)) {\n            alert(t('EditStream.alerts.updated'));\n        }\n    }\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    const cancelStream = async () => {\n        await cancelStreamRequest(user.uid, streamId);\n        setOpenCancelStreamDialog(false);\n        setOpenCanceledStreamSuccessfulDialog(true);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid xs={12}>\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\n                        onClick={history.goBack} />\n                </Grid>\n                <Grid container style={{ maxWidth: '588px' }}>\n                    {streamType === SCHEDULED_EVENT_TYPE &&\n                        <>\n                            <Grid xs={12}>\n                                <SectionHeader\n                                    title={t('EditStream.change')}\n                                    description={t('EditStream.changeDesc')} />\n                                <Grid item sm={12}>\n                                    <Grid container>\n                                        {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\n                                            <></>\n                                            :\n                                            <MuiPickersUtilsProvider utils={DayJsUtils}>\n                                                <Grid container style={{\n                                                    marginTop: '24px'\n                                                }}>\n                                                    <Grid item sm={12} md={6}>\n                                                        <InputLabel className={classes.datePickerLabel}>\n                                                            {t('NewStream.date')}\n                                                        </InputLabel>\n                                                        <KeyboardDatePicker\n                                                            disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                            open={calendarOpen}\n                                                            onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\n                                                            onClose={() => setCalendarOpen(false)}\n                                                            clearable\n                                                            disablePast\n                                                            disableToolbar\n                                                            autoOk\n                                                            value={displayDate}\n                                                            placeholder='10-10-2021'\n                                                            onChange={handleDateChange}\n                                                            minDate={new Date()}\n                                                            format='DD-MM-YY ddd'\n                                                            keyboardIcon={\n                                                                <InputAdornment position='end' >\n                                                                    <CalendarIcon />\n                                                                </InputAdornment>\n                                                            }\n                                                            InputProps={{\n                                                                disableUnderline: true,\n                                                                className: classes.dateInput\n                                                            }}\n                                                            variant={'inline'}\n                                                            PopoverProps={{\n                                                                PaperProps: {\n                                                                    className: classes.popover,\n                                                                }\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item sm={12} md={6}>\n                                                        <InputLabel className={classes.datePickerLabel}>\n                                                            {t('NewStream.time')}\n                                                        </InputLabel>\n                                                        <KeyboardTimePicker\n                                                            open={clockOpen}\n                                                            onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\n                                                            onOpen={() => { }}\n                                                            onClose={() => setClockOpen(false)}\n                                                            disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                            autoOk\n                                                            error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                            helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\n                                                            value={displayDate}\n                                                            placeholder='08:00 AM'\n                                                            onChange={handleDateChange}\n                                                            keyboardIcon={\n                                                                <InputAdornment position='end' >\n                                                                    <TimeIcon />\n                                                                </InputAdornment>\n                                                            }\n                                                            InputProps={{\n                                                                disableUnderline: true,\n                                                                className: classes.dateInput\n                                                            }}\n                                                            variant={'inline'}\n                                                            PopoverProps={{\n                                                                PaperProps: {\n                                                                    className: classes.popover,\n                                                                }\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                            </MuiPickersUtilsProvider>\n                                        }\n                                        <Button className={classes.button}\n                                            onClick={saveChanges}\n                                            buttonColor={2}\n                                            disabled={disableChangesButton && ((new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime())}>\n                                            {t('EditStream.save')}\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                                <SectionHeader title={t('EditStream.sendMessage')}\n                                    description={t('EditStream.sendMessageDesc')} />\n                                <Grid item md={12} style={{\n                                    marginTop: '32px'\n                                }}>\n                                    <StreamerTextInput placeholder={t('EditStream.limit')}\n                                        multiline\n                                        rows={3}\n                                        fullWidth\n                                        textInputClassName={classes.textArea}\n                                        containerClassName={classes.containerTextArea}\n                                        value={notificationBody}\n                                        onChange={onChangeNotificationBody} />\n                                    <Button className={classes.button}\n                                        disabled={!notificationBody}\n                                        onClick={sendNotification}>\n                                        {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                                    </Button>\n                                </Grid>\n                                <SectionHeader title={t('EditStream.cancelStream')}\n                                    description={t('EditStream.cancelStreamDescription')} />\n                                <Grid item md={12} style={{\n                                    marginTop: '32px'\n                                }}>\n                                    <Button className={classes.cancelButton}\n                                        onClick={() => setOpenCancelStreamDialog(true)}>\n                                        {t('EditStream.cancelStream')}\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </>\n                    }\n                </Grid>\n                <div style={{ width: '32px' }}></div>\n                <Grid container style={{ maxWidth: '274px', flexDirection: 'column' }} alignItems='flex-start'>\n                    <SectionHeader title={t('NewStream.streamTitle')}\n                        description={t('NewStream.streamTitleDescription')} />\n                    <div style={{ marginTop: '24px' }}>\n                        <StreamerTextInput\n                            textInputStyle={{ marginTop: '8px' }}\n                            label={t('NewStream.streamTitle')}\n                            placeholder={t('NewStream.streamTitlePlaceholder')}\n                            id='eventTitle'\n                            fullWidth={true}\n                            value={title.en}\n                            onChange={(e) =>{ setDisableChangesButton(false); setTitle({ en: e.target.value, es: e.target.value }); }}\n                        />\n                    </div>\n                </Grid>\n            </Grid>\n            <EventConfirmCancellationDialog open={openCancelStreamDialog}\n                streamTitle={title.en}\n                streamerName={user.displayName}\n                streamerUid={user.uid}\n                streamId={streamId}\n                onClose={() => setOpenCancelStreamDialog(false)}\n                cancelStream={cancelStream} />\n            <SuccessDialog open={openCanceledStreamSuccessfulDialog}\n                title={t('StreamCard.successfullyCanceledStreamDialogTitle')}\n                buttonText={t('StreamCard.successfullyCanceledStreamDialogButtonText')}\n                onClose={() => { history.push('/profile'); setOpenCanceledStreamSuccessfulDialog(false); }} />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default EditStreamerEvent;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["321","322","323","324"],"import React, { useEffect, useState } from 'react';\nimport { withStyles, makeStyles, Button, Chip, Switch, Tabs, Tab, Tooltip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport StreamerProfileEditorOnBoarding from '../StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding';\n\nimport styles from './StreamerProfileEditor.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getStreamerDeepLink, getStreamerLinks, listenStreamerPublicProfile, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { ReactComponent as EditIcon } from './../../assets/Edit.svg';\nimport { ReactComponent as CameraIcon } from './../../assets/Camera.svg';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport { uploadImage } from '../../services/storage';\nimport { MIN_TAGS, PROFILE_BACKGROUND_GRADIENTS } from '../../utilities/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    linkPlaceholder: {\n        '&::placeholder': {\n            color: 'rgba(108, 93, 211, 0.4)'\n        }\n    },\n    linkInput: {\n        backgroundColor: '#202750',\n        color: '#FFF',\n        '&.Mui-disabled': {\n            color: '#AAA'\n        }\n    }\n}));\n\nconst EditBioButton = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        justifyItems: 'center',\n        padding: '0.8rem 1rem',\n        borderRadius: '0.8rem',\n        maxHeight: '46px',\n        textTransform: 'capitalize',\n        fontSize: '14px',\n        fontWeight: 600,\n        '&:hover': {\n            backgroundColor: '#24456680'\n        },\n        '&:disabled': {\n            backgroundColor: '#272D5780',\n            color: '#FFFFFF99',\n        },\n        '&#cover': {\n            backgroundColor: '#272D5780'\n        }\n    },\n\n}))(Button);\n\nconst QaplaChip = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFFA6',\n        minHeight: '41px',\n        borderRadius: '100rem',\n        padding: '1.2rem 0.4rem',\n        fontWeight: 600,\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n            backgroundColor: '#4040FF4F',\n            opacity: 0.8\n        }\n    },\n    deletable: {\n        backgroundColor: '#4040FF4F',\n        color: '#FFFFFFA6',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n\n        }\n    },\n    deleteIcon: {\n        display: 'flex',\n        backgroundColor: '#FFFD',\n        borderRadius: '100px',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '&:hover': {\n            backgroundColor: '#F00D'\n        },\n        '&:active': {\n            backgroundColor: '#A00D'\n        }\n    }\n}))(Chip)\n\nconst QaplaSwitch = withStyles(() => ({\n    root: {\n\n    },\n    track: {\n        backgroundColor: '#202750'\n    },\n    checked: {\n        color: '#2CE9D2 !important',\n        '& + .MuiSwitch-track': {\n            backgroundColor: '#202750 !important'\n        }\n    },\n    thumb: {\n\n    }\n}))(Switch);\n\nconst QaplaTabs = withStyles({\n    root: {\n        minHeight: 0,\n        marginTop: '3rem'\n    },\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            // maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#0AFFD2',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        padding: '0 0.6rem',\n        minWidth: 0,\n        minHeight: 0,\n        textTransform: 'none',\n        color: '#fff',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n\nfunction TabPanel(props) {\n    const { children, value, index, className, ...other } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`profile-editor-tabpanel-${index}`}\n            aria-labelledby={`profile-editor-tab-${index}`}\n            {...other}\n            className={className}\n        >\n            {value === index && (\n                <>\n                    {children}\n                </>\n            )}\n        </div>\n    )\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst StreamerProfileEditor = ({ user }) => {\n    const socialLinksInitialValue = [\n        {\n            socialPage: 'Twitch',\n            value: ''\n        },\n        {\n            socialPage: 'Twitter',\n            value: ''\n        },\n        {\n            socialPage: 'Instagram',\n            value: ''\n        },\n        {\n            socialPage: 'Discord',\n            value: ''\n        },\n        {\n            socialPage: 'Youtube',\n            value: ''\n        },\n        /* {\n            socialPage: 'TikTok',\n            value: ''\n        } */\n    ];\n\n    const socialLinksPlaceholders = {\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\n        Discord: `https://discord.gg/inviteCode`,\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`,\n        tiktok: `https://www.tiktok.com/@${user ? user.displayName : ''}`\n    };\n\n    const classes = useStyles();\n    const [dataIsFetched, setDataIsFetched] = useState(false);\n    const [selectedTab, setSelectedTab] = useState(0);\n    const [editingBio, setEditingBio] = useState(false);\n    const [addingTag, setAddingTag] = useState(false);\n    const [streamerBio, setStreamerBio] = useState('');\n    const [backgroundUrl, setBackgroundUrl] = useState('');\n    const [backgroundGradient, setBackgroundGradient] = useState(null);\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\n    const [streamerTags, setStreamerTags] = useState([]);\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const [onBoardingDone, setOnBoardingDone] = useState(true);\n    const [onBoardingStep, setOnBoardingStep] = useState(0);\n    const [badge, setBadge] = useState(false);\n    const [qaplaLink, setQaplaLink] = useState('');\n    const [chipHover, setChipHover] = useState({});\n    const { t } = useTranslation();\n    const twitchURL = `https://www.twitch.tv/${user && user.login ? user.login : ''}`;\n\n    useEffect(() => {\n        async function getStreamerInfo() {\n            listenStreamerPublicProfile(user.uid, async (info) => {\n                if (info.exists()) {\n                    const { bio, tags, backgroundUrl, backgroundGradient, badge } = info.val();\n                    const link = await getStreamerDeepLink(user.uid);\n                    if (!link.exists()) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(0);\n                    }\n\n                    if (!tags || tags.length < MIN_TAGS) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(2);\n                    }\n\n                    if (!bio) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(1);\n                    }\n                    setStreamerBio(bio || '');\n                    setBackgroundGradient(backgroundGradient);\n                    setBackgroundUrl(backgroundUrl);\n                    setStreamerTags(tags || []);\n                    setBadge(badge);\n                } else {\n                    setOnBoardingDone(false);\n                }\n\n                const qaplaLink = await getStreamerDeepLink(user.uid);\n                if (qaplaLink.exists()) {\n                    setQaplaLink(qaplaLink.val());\n                }\n\n                const links = await getStreamerLinks(user.uid);\n                if (links.exists()) {\n                    setSocialLinks(links.val());\n                } else {\n                    /**\n                     * Set Twitch Link by default (we already know this link)\n                     */\n                    const socialLinksWithTwitchAdded = socialLinksInitialValue;\n                    socialLinksWithTwitchAdded[0].value = twitchURL;\n\n                    setSocialLinks(socialLinksInitialValue);\n                }\n\n                setDataIsFetched(true);\n            });\n        }\n\n        if (user && user.uid) {\n            getStreamerInfo();\n        }\n    }, [user]);\n\n    const onBoardingDoneByStreamer = async () => {\n        const min = 0;\n        const max = 4;\n        const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\n\n        const backgroundSelected = PROFILE_BACKGROUND_GRADIENTS[randomIndex];\n        setBackgroundGradient(backgroundSelected);\n\n        await updateStreamerPublicProfile(user.uid, {\n            backgroundGradient: backgroundSelected,\n            displayName: user.displayName,\n            photoUrl: user.photoUrl\n        });\n\n        window.analytics.track('Public profile onboarding done', {\n            uid: user.uid,\n            timestamp: (new Date()).getTime()\n        });\n        setOnBoardingDone(true);\n    }\n\n    const handleTabChange = (event, newValue) => {\n        setSelectedTab(newValue)\n    }\n\n    const handleTagDelete = async (indexToDelete) => {\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\n\n        try {\n            await updateStreamerPublicProfile(user.uid, { tags });\n            setStreamerTags(tags);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.deleteTag'));\n        }\n    }\n\n    const updateSocialLinks = (value, index) => {\n        setSocialLinksChanged(true);\n        let newArray = [...socialLinks];\n        newArray[index] = {\n            ...newArray[index],\n            value\n        };\n\n        setSocialLinks(newArray);\n    }\n\n    const saveLinks = async () => {\n        // Creates an array without the placeholder value\n        const objectToSave = {};\n        socialLinks.forEach((link, index) => {\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\n        });\n\n        try {\n            await saveStreamerLinks(user.uid, objectToSave);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.updateLinks'));\n        }\n        setSocialLinksChanged(false);\n    }\n\n    const addTag = async () => {\n        setOnBoardingStep(2);\n        setAddingTag(true);\n    }\n\n    const uploadBackgroundImage = (e) => {\n        if (e.target.files[0]) {\n            const newBackgroundImage = (e.target.files[0]);\n            uploadImage(\n                newBackgroundImage,\n                `/StreamersProfilesBackgroundImages/${user.uid}`,\n                (progressValue) => setUploadImageStatus(progressValue * 100),\n                (error) => { alert('Error al agregar imagen'); console.log(error); },\n                async (url) => {\n                    try {\n                        await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\n                        alert(t('StreamerProfileEditor.confirmations.saveImage'));\n                    } catch (error) {\n                        alert(t('StreamerProfileEditor.errors.saveImage'));\n                        console.log(error);\n                    }\n                }\n            );\n\n            const reader = new FileReader();\n            reader.addEventListener('load', () => {\n                setBackgroundUrl(reader.result);\n            });\n\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    }\n\n    const copyQaplaLink = () => {\n        navigator.clipboard.writeText(qaplaLink);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    const createLinearGradientCSS = () => {\n        if (backgroundGradient) {\n            let colorsString = '';\n            backgroundGradient.colors.forEach((color, index) => {\n                if (index !== backgroundGradient.colors.length - 1) {\n                    colorsString += `${color},`;\n                } else {\n                    colorsString += color;\n                }\n            });\n\n            return `linear-gradient(${backgroundGradient.angle}deg, ${colorsString})`;\n        }\n\n        return '';\n    }\n\n    const editBio = () => {\n        setOnBoardingStep(1);\n        setEditingBio(true);\n    }\n\n    const cancelEditing = () => {\n        setEditingBio(false);\n        setAddingTag(false);\n    }\n\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return\n        }\n        let source = result.source.index\n        let destination = result.destination.index\n\n        if (source === destination) {\n            return\n        }\n\n        const socialLinksCopy = [...socialLinks];\n        socialLinksCopy.splice(destination, 0, socialLinksCopy.splice(source, 1)[0]);\n\n        setSocialLinks(socialLinksCopy);\n        setSocialLinksChanged(true);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\n            {dataIsFetched &&\n                <>\n                    {onBoardingDone && !editingBio && !addingTag ?\n                        <>\n                            <div className={styles.coverContainer}>\n                                {backgroundUrl ?\n                                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\n                                    :\n                                    <div className={styles.cover} style={{ background: createLinearGradientCSS() }} />\n                                }\n                            </div>\n                            <div className={styles.editCoverButtonContainer}>\n                                <input\n                                    accept='image/*'\n                                    style={{ display: 'none' }}\n                                    type='file'\n                                    id='image-input'\n                                    onChange={uploadBackgroundImage} />\n                                <label htmlFor='image-input'>\n                                    <EditBioButton id='cover' component='span'>\n                                        <CameraIcon />\n                                        <div style={{ width: '0.4rem' }} />\n                                        {t('StreamerProfileEditor.editCover')}\n                                    </EditBioButton>\n                                </label>\n                            </div>\n                            <div className={styles.profileContainer}>\n                                <div className={styles.profilePicContainer}>\n                                    <img src={user.photoUrl} alt='User pfp' className={styles.profilePic} />\n                                </div>\n                                <div className={styles.streamerNameAndEditBioButtonContainer}>\n                                    <div className={styles.streamerNameContainer}>\n                                        <p className={styles.streamerName}>\n                                            {user.displayName}\n                                        </p>\n                                        <div className={styles.founderBadgeContainer}>\n                                            {badge &&\n                                                <FounderBadge className={styles.founderBadge} />\n                                            }\n                                        </div>\n                                    </div>\n                                    <div className={styles.editBioButtonContainer}>\n                                        <EditBioButton variant='contained'\n                                            onClick={editBio}>\n                                            {!editingBio ?\n                                                <>\n                                                    <EditIcon />\n                                                    <div style={{ width: '0.4rem' }} />\n                                                    {t('StreamerProfileEditor.editBio')}\n                                                </>\n                                                :\n                                                t('StreamerProfileEditor.saveChanges')\n                                            }\n                                        </EditBioButton>\n                                    </div>\n                                </div>\n                                <div className={styles.twitchURLContainer}>\n                                    <div className={styles.twitchURLSubContainer}>\n                                        <a href={qaplaLink} target='_blank' rel='noreferrer' className={styles.twitchURL}>\n                                            {qaplaLink}\n                                        </a>\n                                        <Tooltip placement='top' open={openTooltip} title='Copiado'>\n                                            <CopyIcon onClick={copyQaplaLink} className={styles.copyIcon} />\n                                        </Tooltip>\n                                    </div>\n                                </div>\n                                <div className={styles.bioContainer}>\n                                    <p className={styles.bioText} onClick={editBio}>\n                                        {streamerBio}\n                                    </p>\n                                </div>\n                                <ul className={styles.tagsList}>\n                                    {streamerTags.map((data, index) => {\n                                        return (\n                                            <li key={`chip-${data}-${index}`} className={styles.tag}>\n                                                <QaplaChip\n                                                    label={data}\n                                                    onDelete={() => handleTagDelete(index)}\n                                                />\n                                            </li>\n                                        )\n                                    })}\n                                    <li key='new' className={styles.tag}>\n                                        <QaplaChip onClick={addTag}\n                                            label={t('StreamerProfileEditor.addTag')}\n                                        />\n                                    </li>\n                                </ul>\n                                <div className={styles.showNextStreamsContainer}>\n                                    <p className={styles.showNextStreamsText}>\n                                        {t('StreamerProfileEditor.showUpcomingStreams')}\n                                    </p>\n                                    <QaplaSwitch\n                                        name='showNextStreams'\n                                    /** ToDo: Show streams in profile. Also show twitch status (online or offline) <= more of this on cloud function */\n                                    />\n                                </div>\n                                <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\n                                    <QaplaTab wid label={t('StreamerProfileEditor.social')} {...a11yProps(0)} />\n                                    {/* <QaplaTab label='Códigos de creador' {...a11yProps(1)} /> */}\n                                </QaplaTabs>\n                                <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\n                                    <DragDropContext onDragEnd={onDragEnd}>\n                                        <Droppable droppableId='links-droppable'>\n                                            {(provided, snapshot) => (\n                                                <div style={{ width: '100%' }}\n                                                    {...provided.droppableProps}\n                                                    ref={provided.innerRef}\n                                                >\n                                                    {socialLinks.map((data, index) => (\n                                                        <Draggable key={`draggable-link-${index}`} draggableId={`draggable-link-${index}`} index={index}>\n                                                            {(provided, snapshot) => (\n                                                                <div\n                                                                    ref={provided.innerRef}\n                                                                    {...provided.draggableProps}\n                                                                    {...provided.dragHandleProps}\n                                                                >\n                                                                    <div\n                                                                        style={{\n                                                                            display: 'flex',\n                                                                            flexDirection: 'row',\n                                                                            alignItems: 'center',\n                                                                            width: '100%'\n                                                                        }}>\n                                                                        <div style={{ display: 'flex', width: '100%' }}>\n                                                                            <StreamerTextInput\n                                                                                label={data.socialPage}\n                                                                                containerClassName={styles.socialLinkContainer}\n                                                                                labelClassName={styles.socialLinkLabel}\n                                                                                value={data.value}\n                                                                                disabled={data.socialPage.toLowerCase() === 'twitch'}\n                                                                                placeholder={socialLinksPlaceholders[data.socialPage]}\n                                                                                classes={{ input: classes.linkPlaceholder }}\n                                                                                textInputClassName={classes.linkInput}\n                                                                                fullWidth\n                                                                                onChange={(e) => updateSocialLinks(e.target.value, index)}\n                                                                            />\n                                                                        </div>\n                                                                        <div style={{\n                                                                            display: 'flex',\n                                                                            backgroundColor: '#141833',\n                                                                            width: '30px',\n                                                                            minWidth: '30px',\n                                                                            height: '45px',\n                                                                            marginBottom: '12px',\n                                                                            alignSelf: 'flex-end',\n                                                                            borderRadius: '8px'\n\n                                                                        }} >\n                                                                            <div style={{\n                                                                                display: 'flex',\n                                                                                flex: 1,\n                                                                                padding: '14px 10px',\n                                                                            }}>\n                                                                                <div style={{\n                                                                                    display: 'flex',\n                                                                                    flex: 1,\n                                                                                    flexDirection: 'column',\n                                                                                    justifyContent: 'space-between',\n                                                                                }}>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                </div>\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            )}\n                                                        </Draggable>\n                                                    ))}\n                                                    {provided.placeholder}\n                                                </div>\n                                            )}\n                                        </Droppable>\n                                    </DragDropContext>\n                                    <br />\n                                    {socialLinksChanged &&\n                                        <ContainedButton onClick={saveLinks}>\n                                            {t('StreamerProfileEditor.saveChanges')}\n                                        </ContainedButton>\n                                    }\n                                </TabPanel>\n                                <TabPanel value={selectedTab} index={1}>\n                                    <p>b</p>\n                                </TabPanel>\n                            </div>\n                        </>\n                        :\n                    <StreamerProfileEditorOnBoarding step={onBoardingStep}\n                        user={user}\n                        onBoardingDone={onBoardingDoneByStreamer}\n                        showOnlySpecificStep={editingBio || addingTag}\n                        streamerBio={streamerBio}\n                        streamerTags={streamerTags}\n                        closeOnBoarding={cancelEditing} />\n                    }\n                </>\n            }\n        </StreamerDashboardContainer>\n    )\n}\n\nexport default StreamerProfileEditor;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",["325"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button, Grid } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ShareArrow } from './../../assets/ShareArrow.svg';\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\nimport { ReactComponent as EditIcon } from './../../assets/EditPencil.svg';\nimport { ReactComponent as DeleteIcon } from './../../assets/Delete.svg';\nimport {\n    streamsPlaceholderImages,\n    SCHEDULED_EVENT_TYPE,\n    PAST_STREAMS_EVENT_TYPE,\n    PENDING_APPROVAL_EVENT_TYPE,\n    HOUR_IN_MILISECONDS\n} from '../../utilities/Constants';\nimport {\n    cancelStreamRequest,\n    getStreamTitle,\n    getPastStreamTitle,\n    checkActiveCustomReward,\n    listenToQoinsEnabled,\n    removeQoinsEnabledListener,\n    getStreamLink,\n    sendQoinsDropsAlert\n} from '../../services/database';\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\nimport { auth } from '../../services/firebase';\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\nimport { notifyAboutStreamToFollowersAndParticipants, sendCustomMessage } from '../../services/functions';\nimport { getCurrentLanguage } from '../../utilities/i18n';\nimport EventConfirmCancellationDialog from '../QaplaStreamDialogs/EventConfirmCancellationDialog';\nimport SuccessDialog from '../SuccessDialog/SuccessDialog';\n\nconst useStyles = makeStyles(() => ({\n    eventCard: {\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: '#141833',\n        borderRadius: '1.5rem',\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\n        height: '100%',\n        minWidth: '250px',\n        minHeight: '360px',\n    },\n    relativeContainer: {\n        position: 'relative'\n    },\n    hourContainer: {\n        position: 'absolute',\n        right: '1rem',\n        top: '1rem',\n        background: '#1B1D2159',\n        borderRadius: '.5rem'\n    },\n    hourText: {\n        color: '#FFF',\n        padding: '2px 8px',\n        fontSize: '11px',\n        fontStyle: 'normal',\n        fontWeight: '700',\n        lineHeight: '20px',\n        letterSpacing: '-0.5px',\n        textAlign: 'center'\n\n    },\n    dateContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        position: 'absolute',\n        right: '1rem',\n        bottom: '1rem',\n        padding: '2px 10px',\n        background: '#1B1D21',\n        height: '32px',\n        borderRadius: '10px'\n    },\n    dateText: {\n        color: '#FFF',\n        fontSize: '13px',\n        fontWeight: '700',\n        lineHeight: '20px',\n        marginLeft: '10px'\n    },\n    eventImage: {\n        objectFit: 'cover',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        borderRadius: '24px'\n    },\n    eventCardContent: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '24px 16px',\n        height: '100%'\n    },\n    eventCardTitle: {\n        color: '#FFFFFF',\n        fontSize: '16px',\n        lineHeight: '24px',\n        fontWeight: '500',\n        height: '48px',\n\n    },\n    rowContainer: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    circle: {\n        borderRadius: '100%',\n        height: '.55rem',\n        width: '.55rem',\n        marginRight: '.5rem'\n    },\n    participantsNumber: {\n        fontSize: '12px',\n        textAlign: 'right',\n        lineHeight: '16px'\n    },\n    streamButton: {\n        backgroundColor: '#6C5DD3 !important',\n        color: '#FFF'\n    },\n    buttonsContainer: {\n        marginTop: 'auto'\n    },\n    startButton: {\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: '#00FFDD',\n        color: '#0D1021',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    endButton: {\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: '#3B4BF9',\n        color: '#FFF',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    manageButton: {\n        marginTop: '16px',\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#272D5780',\n            opacity: 0.8\n        }\n    },\n    cardContainer: {\n        padding: '0px 16px !important',\n        maxWidth: '270px !important',\n        marginBottom: '20px !important'\n    },\n    cancelButton: {\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: 'transparent',\n        color: '#FFF',\n        opacity: 0.6,\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none'\n    }\n}));\n\nconst StreamCard = ({ key, user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image, drops, usedDrops = 0 }) => {\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [stream, setStream] = useState(null);\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\n    const [startingStream, setStartingStream] = useState(false);\n    const [closingStream, setClosingStream] = useState(false);\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\n    const [loadingDots, setLoadingDots] = useState('');\n    const [hideStream, setHideStream] = useState(false);\n    const [shareHover, setShareHover] = useState(false);\n    const [shareCopied, setShareCopied] = useState(false);\n    const [shareGrowAnimationPlay, setShareGrowAnimationPlay] = useState(\"false\");\n    const [shareShrinkAnimationPlay, setShareShrinkAnimationPlay] = useState(\"false\");\n    const [copiedEnterAnimationPlay, setCopiedEnterAnimationPlay] = useState(\"false\");\n    const [copiedExitAnimationPlay, setCopiedExitAnimationPlay] = useState(\"false\");\n    const [playBothEnterAnimation, setPlayBothEnterAnimation] = useState(\"false\");\n    const [playBothExitAnimation, setPlayBothExitAnimation] = useState(\"false\");\n    const [isTouch, setIsTouch] = useState(false);\n    const [streamLink, setStreamLink] = useState('');\n    const [openCancelStreamDialog, setOpenCancelStreamDialog] = useState(false);\n    const [openCanceledStreamSuccessfulDialog, setOpenCanceledStreamSuccessfulDialog] = useState(false);\n    const actualShareHover = useRef(null);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n\n                if (title.exists()) {\n                    setTitle(title.val());\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName, es: games['allGames'][game].gameName });\n                }\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                const title = await getPastStreamTitle(user.uid, streamId);\n                setTitle(title.val());\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName });\n                }\n            }\n        }\n\n        async function getLink() {\n            const link = await getStreamLink(streamId);\n            setStreamLink(link.val());\n        }\n\n        async function checkStreamStatus() {\n            const streamStatus = await checkActiveCustomReward(streamId);\n            if (streamStatus.exists()) {\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                        if (qoinsEnabled.val()) {\n                            setStream({\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\n                                qoinsEnabled: qoinsEnabled.val()\n                            });\n\n                            removeQoinsEnabledListener(streamId);\n                        } else {\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\n                        }\n                    });\n                } else {\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\n                }\n\n                setShowRewardsOptions(true);\n                setHideStream(false);\n            } else {\n                setStream(null);\n            }\n        }\n\n        getLink();\n        getTitle();\n        checkStreamStatus();\n\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\n            const currentTimestamp = (new Date()).getTime();\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\n                    setHideStream(true);\n                } else {\n                    setShowRewardsOptions(true);\n                }\n            }\n        }\n\n        if (startingStream) {\n            setTimeout(() => {\n                if (loadingDots.length > 2) {\n                    setLoadingDots('');\n                } else {\n                    setLoadingDots(loadingDots + '.');\n                }\n            }, 500);\n        } else if (loadingDots !== '') {\n            setLoadingDots('');\n        }\n\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\n\n    const cancelStream = async () => {\n        await cancelStreamRequest(user.uid, streamId);\n        onRemoveStream(streamId);\n        setOpenCancelStreamDialog(false);\n        setOpenCanceledStreamSuccessfulDialog(true);\n    }\n\n    const startStream = async (enableIn) => {\n        try {\n            setStartingStream(true);\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, drops, enableIn);\n\n            if (enableIn) {\n                listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                    if (qoinsEnabled.val()) {\n                        setStream({\n                            ...stream,\n                            qoinsEnabled: qoinsEnabled.val()\n                        });\n\n                        removeQoinsEnabledListener(streamId);\n                    }\n                });\n            } else {\n                sendQoinsDropsAlert(user.uid);\n            }\n\n            setStream(streamData);\n            if (!openStreamDialog) {\n                setOpenStreamStartedDialog(true);\n            }\n            setStartingStream(false);\n\n            try {\n                await notifyAboutStreamToFollowersAndParticipants(streamId,\n                    user.uid,\n                    {\n                        es: title.en,\n                        en: title.es\n                    },\n                    {\n                        en: `${user.displayName}’s is live! Come for your drops 🪂`,\n                        es: `${user.displayName} ya prendió su stream con drops 🪂`\n                    },\n                    'reminders'\n                );\n            } catch (error) {\n                console.log(error);\n            }\n\n            window.analytics.track('Stream started', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n\n            return streamData;\n        } catch (error) {\n            if (error && error.status === 401) {\n                handleExpiredSession();\n            } else {\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\n            }\n        }\n    }\n\n    const closeStream = async (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        try {\n            setClosingStream(true);\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId, drops);\n\n            window.analytics.track('Stream finished', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setOpenRewardsRemovedDialog(true);\n\n            // Close the rest of Dialogs just in case\n            setOpenStreamStartedDialog(false);\n            setOpenQoinsWarningDialog(false);\n            setOpenStreamDialog(false);\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        if (stream.qoinsEnabled) {\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\n            if (dontShowCloseStreamWarning) {\n                closeStream();\n            } else {\n                setOpenEndStreamDialog(true);\n            }\n        } else {\n            setOpenQoinsWarningDialog(true);\n        }\n    }\n\n    /**\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\n     * have streamObject as parameter with a default value of stream state\n     */\n    const enableQoinsReward = async (streamObject = stream) => {\n        try {\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\n\n            window.analytics.track('Qoins enabled', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setStream({ ...streamObject, qoinsEnabled: true });\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\n\n    const closeDialogsAndOpenManageRewardsDialog = () => {\n        setOpenStreamStartedDialog(false);\n        setOpenQoinsWarningDialog(false);\n        setOpenStreamDialog(true);\n    }\n\n    const closeAndRemoveStream = () => {\n        setOpenRewardsRemovedDialog(false);\n        onRemoveStream(streamId);\n    }\n\n    const sendMessage = async (message) => {\n        if (message) {\n            notifyAboutStreamToFollowersAndParticipants(streamId,\n                user.uid,\n                {\n                    es: title.en,\n                    en: title.es\n                },\n                {\n                    es: message,\n                    en: message\n                },\n                'reminders'\n            );\n            setOpenCustomMessageSentDialog(true);\n\n            window.analytics.track('Custom Message sent', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime(),\n                message\n            });\n        }\n    }\n\n    const copiedLink = () => {\n        navigator.clipboard.writeText(streamLink);\n        setTimeout(() => {\n            setShareCopied(false);\n            if (actualShareHover.current && !isTouch) {\n                setCopiedExitAnimationPlay(\"true\");\n            } else {\n                setPlayBothExitAnimation(\"true\");\n            }\n        }, 2.5 * 1000)\n    }\n\n    if (game && !hideStream) {\n        const currentLanguage = getCurrentLanguage();\n        return (\n            <Grid item xl={2} lg={3} md={3} sm={4} xs={10} key={key} className={classes.cardContainer}>\n                <Card className={classes.eventCard} style={style}>\n                    <div className={classes.relativeContainer}>\n                        {streamType === SCHEDULED_EVENT_TYPE &&\n                            <div\n                                onAnimationEnd={() => {\n                                    setShareGrowAnimationPlay(\"false\");\n                                    setCopiedEnterAnimationPlay(\"false\");\n                                    setShareShrinkAnimationPlay(\"false\");\n                                    setCopiedExitAnimationPlay(\"false\");\n                                    setPlayBothEnterAnimation(\"false\");\n                                    setPlayBothExitAnimation(\"false\");\n                                }}\n                                playGrowAnimation={shareGrowAnimationPlay}\n                                playShrinkAnimation={shareShrinkAnimationPlay}\n                                playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                playCopiedExitAnimetion={copiedExitAnimationPlay}\n                                playBothEnterAnimation={playBothEnterAnimation}\n                                playBothExitAnimation={playBothExitAnimation}\n                                className=\"share-container\"\n                                style={{\n                                    position: 'absolute',\n                                    display: 'flex',\n                                    backgroundColor: shareCopied ? '#3B4BF9' : '#1B1D21',\n                                    borderRadius: '5px',\n                                    height: '28px',\n                                    bottom: '18px',\n                                    left: '18px',\n                                    width: shareHover || shareCopied ? '86px' : '28px',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                }}\n                                onMouseEnter={() => {\n                                    if (isTouch) return;\n                                    setShareHover(true);\n                                    actualShareHover.current = true;\n                                    if (!shareCopied) {\n                                        setShareGrowAnimationPlay(\"true\");\n                                    }\n                                }}\n                                onMouseLeave={() => {\n                                    setShareHover(false);\n                                    actualShareHover.current = false;\n                                    if (shareCopied || isTouch) return;\n                                    setShareShrinkAnimationPlay(\"true\");\n                                }}\n                                onMouseDown={() => {\n                                    if (shareCopied) return;\n                                    setShareCopied(true);\n                                    if (isTouch) {\n                                        setPlayBothEnterAnimation(\"true\");\n                                    } else {\n                                        setCopiedEnterAnimationPlay(\"true\");\n                                    }\n                                    copiedLink();\n                                }}\n                                onMouseUp={() => {\n                                    if (shareCopied) return;\n                                    setShareCopied(false);\n                                }}\n                                onTouchStart={() => {\n                                    setIsTouch(true);\n                                }}\n                                onTouchEnd={() => {\n                                    setIsTouch(true);\n                                    setShareHover(false);\n                                }}\n                            >\n                                <style>{`\n                                    @keyframes widthGrow {\n                                        from {\n                                            width: 28px;\n                                            }\n                                        to {\n                                            width: 86px;\n                                        }\n                                    }\n                                    @keyframes widthShrink {\n                                        from {\n                                            width: 86px;\n                                            }\n                                        to {\n                                            width: 28px;\n                                        }\n                                    }\n                                    @keyframes copiedEnter {\n                                        from {\n                                            background-color: #1B1D21;\n                                            }\n                                        to {\n                                            background-color: #3B4BF9;\n                                        }\n                                    }\n                                    @keyframes copiedExit {\n                                        from {\n                                            background-color: #3B4BF9;\n                                            }\n                                        to {\n                                            background-color: #1B1D21;\n                                        }\n                                    }\n                                    @keyframes bothEnter {\n                                        from {\n                                            background-color: #1B1D21;\n                                            width: 28px;\n                                            }\n                                        to {\n                                            background-color: #3B4BF9;\n                                            width: 86px;\n                                        }\n                                    }\n                                    @keyframes bothExit {\n                                        from {\n                                            background-color: #3B4BF9;\n                                            width: 86px;\n                                            }\n                                        to {\n                                            background-color: #1B1D21;\n                                            width: 28px;\n                                        }\n                                    }\n                                    .share-container[playBothEnterAnimation=\"true\"] {\n                                        animation: bothEnter 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playBothExitAnimation=\"true\"] {\n                                        animation: bothExit 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playGrowAnimation=\"true\"] {\n                                        animation: widthGrow 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playShrinkAnimation=\"true\"] {\n                                        animation: widthShrink 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playCopiedEnterAnimation=\"true\"] {\n                                        animation: copiedEnter 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playCopiedExitAnimetion=\"true\"] {\n                                        animation: copiedExit 0.5s ease-in-out 1;\n                                    }\n                                `}</style>\n                                <p\n                                    playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                    playCopiedExitAnimation={copiedExitAnimationPlay}\n                                    playBothEnterAnimation={playBothEnterAnimation}\n                                    playBothExitAnimation={playBothExitAnimation}\n                                    style={{\n                                        display: 'flex',\n                                        color: '#fff',\n                                        fontSize: '11px',\n                                        fontWeight: '700',\n                                        lineHeight: '13px',\n                                        letterSpacing: '0px',\n                                        textAlign: 'center',\n                                        width: shareCopied ? '100%' : '0%',\n                                        overflow: 'hidden',\n                                        justifyContent: 'center',\n                                        whiteSpace: 'nowrap',\n                                    }}\n                                    className=\"copied-text\">\n                                    <style>{`\n\n                                        @keyframes copiedTextGrow {\n                                            from {\n                                                width: 0%;\n                                                }\n                                            to {\n                                                width: 100%;\n                                            }\n                                        }\n                                        @keyframes copiedTextShrink {\n                                            from {\n                                                width: 100%;\n                                                }\n                                            to {\n                                                width: 0%;\n                                            }\n                                        }\n\n                                        .copied-text[playCopiedEnterAnimation=\"true\"] {\n                                            animation: copiedTextGrow 0.5s ease-in-out 1;\n                                        }\n                                        .copied-text[playCopiedExitAnimation=\"true\"] {\n                                            animation: copiedTextShrink 0.5s ease-in-out 1;\n                                        }\n                                        .copied-text[playBothEnterAnimation=\"true\"] {\n                                            animation: copiedTextGrow 0.5s ease-in-out 1;\n                                        }\n                                        .copied-text[playBothExitAnimation=\"true\"] {\n                                            animation: copiedTextShrink 0.5s ease-in-out 1;\n                                        }\n                                        `}</style>\n                                    {'🔗 Copiado'}\n                                </p>\n                                <div\n                                    playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                    playCopiedExitAnimation={copiedExitAnimationPlay}\n                                    playBothEnterAnimation={playBothEnterAnimation}\n                                    playBothExitAnimation={playBothExitAnimation}\n                                    style={{\n                                        display: 'flex',\n                                        flex: 1,\n                                        flexDirection: 'row',\n                                        flexWrap: 'nowrap',\n                                        justifyContent: 'center',\n                                        // margin: '0px 15px',\n                                        width: shareCopied ? '0%' : '100%',\n                                    }}\n                                    className=\"share-display-container\"\n                                >\n                                    <style>{`\n                                    @keyframes shareDisplayGrow {\n                                        from {\n                                            width: 0%;\n                                            }\n                                        to {\n                                            width: 100%;\n                                        }\n                                    }\n                                    @keyframes shareDisplayShrink {\n                                        from {\n                                            width: 100%;\n                                            }\n                                        to {\n                                            width: 0%;\n                                        }\n                                    }\n\n                                    .share-display-container[playCopiedEnterAnimation=\"true\"] {\n                                        animation: shareDisplayShrink 0.5s ease-in-out 1;\n                                    }\n                                    .share-display-container[playCopiedExitAnimation=\"true\"] {\n                                        animation: shareDisplayGrow 0.5s ease-in-out 1;\n                                    }\n                                    .share-display-container[playBothEnterAnimation=\"true\"] {\n                                        animation: shareDisplayShrink 0.5s ease-in-out 1;\n                                    }\n                                    .share-display-container[playBothExitAnimation=\"true\"] {\n                                        animation: shareDisplayGrow 0.5s ease-in-out 1;\n                                    }\n                                    `}</style>\n                                    <p\n                                        playGrowAnimation={shareGrowAnimationPlay}\n                                        playShrinkAnimation={shareShrinkAnimationPlay}\n                                        playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                        playCopiedExitAnimation={copiedExitAnimationPlay}\n                                        style={{\n                                            display: 'flex',\n                                            color: '#fff',\n                                            fontSize: '11px',\n                                            fontWeight: '700',\n                                            lineHeight: '13px',\n                                            letterSpacing: '0px',\n                                            marginRight: shareHover ? '4px' : '0px',\n                                            width: shareHover ? '64%' : '0%',\n                                            overflow: 'hidden',\n                                        }}\n                                        className=\"share-text\">\n                                        <style>{`\n\n                                        @keyframes shareTextGrow {\n                                            from {\n                                                width: 0%;\n                                                margin-right: 0px;\n                                                }\n                                            to {\n                                                width: 64%;\n                                                margin-right: 4px;\n                                            }\n                                        }\n                                        @keyframes shareTextShrink {\n                                            from {\n                                                width: 64%;\n                                                margin-right: 4px;\n                                                }\n                                            to {\n                                                width: 0%;\n                                                margin-right: 0px;\n                                            }\n                                        }\n\n                                        .share-text[playGrowAnimation=\"true\"] {\n                                            animation: shareTextGrow 0.5s ease-in-out 1;\n                                        }\n                                        .share-text[playShrinkAnimation=\"true\"] {\n                                            animation: shareTextShrink 0.5s ease-in-out 1;\n                                        }\n                                        `}</style>\n                                        {'Compartir'}\n                                    </p>\n                                    <ShareArrow\n                                        playGrowAnimation={shareGrowAnimationPlay}\n                                        playShrinkAnimation={shareShrinkAnimationPlay}\n                                        style={shareHover ?\n                                            {\n                                                transform: 'scale(0.8)',\n                                            }\n                                            :\n                                            {\n                                                transform: 'scale(1)'\n                                            }\n                                        } className=\"share-icon\">\n                                        <style>{`\n                                                @keyframes shareIconShrink {\n                                                    from {\n                                                        transform: scale(1);\n                                                        }\n                                                    to {\n                                                        transform: scale(0.8);\n                                                    }\n                                                }\n                                                @keyframes shareIconNormal {\n                                                    from {\n                                                        transform: scale(0.8);\n                                                        }\n                                                    to {\n                                                        transform: scale(1);\n                                                    }\n                                                }\n\n                                                .share-icon[playGrowAnimation=\"true\"] {\n                                                    animation: shareIconShrink 0.5s ease-in-out 1;\n                                                }\n                                                .share-icon[playShrinkAnimation=\"true\"] {\n                                                    animation: shareIconNormal 0.5s ease-in-out 1;\n                                                }\n                                            `}</style>\n                                    </ShareArrow>\n                                </div>\n                            </div>\n                        }\n                        <div className={classes.hourContainer}>\n                            <p className={classes.hourText}>\n                                {hour}\n                            </p>\n                        </div>\n                        <div className={classes.dateContainer}>\n                            <CalendarIcon />\n                            <p className={classes.dateText}>\n                                {date}\n                            </p>\n                        </div>\n                        <img\n                            alt='Game'\n                            src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\n                            width='100%'\n                            height='180'\n                            className={classes.eventImage} />\n                    </div>\n                    <div className={classes.eventCardContent}>\n                        <p className={classes.eventCardTitle}>\n                            {title && title[currentLanguage] ? title[currentLanguage] : ''}\n                        </p>\n                        {(usedDrops && streamType === PAST_STREAMS_EVENT_TYPE) ?\n                            <p style={{ fontSize: '16px', fontWeight: '500', color: '#FFF', marginTop: '13px' }}>\n                                🪂 <span style={{ color: '#00FFDD' }}>{usedDrops} drops</span> {t('StreamCard.used')}\n                            </p>\n                            :\n                            null\n                        }\n                        <div className={classes.buttonsContainer}>\n                            {streamType === SCHEDULED_EVENT_TYPE && !startingStream && !stream &&\n                                <>\n                                <Button size='medium'\n                                    className={classes.cancelButton}\n                                    onClick={() => setOpenCancelStreamDialog(true)}\n                                    startIcon={<DeleteIcon color='rgba(255, 255, 255, 0.6)' />}>\n                                    {t('StreamCard.cancelStreamRequest')}\n                                </Button>\n                                {!showRewardsOptions &&\n                                    <Button size='medium'\n                                        className={classes.manageButton}\n                                        onClick={manageStream}\n                                        startIcon={<EditIcon />}>\n                                        {t('StreamCard.manageStream')}\n                                    </Button>\n                                }\n                                </>\n                            }\n                            <div style={{ height: '11px' }} />\n                            {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\n                                (!startingStream ?\n                                    (stream ?\n                                        (!closingStream && stream.qoinsEnabled ?\n                                            <Button size='medium' className={classes.endButton}\n                                                disabled={closingStream}\n                                                onClick={checkIfCloseStreamDialogMustBeShown}>\n                                                {t('StreamCard.end')}\n                                            </Button>\n                                            :\n                                            <p style={{ color: '#FFF', textAlign: 'center' }}>\n                                                {t('StreamCard.dropsScheduled')}\n                                            </p>\n                                        )\n                                        :\n                                        <Button size='medium' className={classes.startButton}\n                                            startIcon={<TimerIcon />}\n                                            onClick={() => setOpenStreamDialog(true)}>\n                                            {t('StreamCard.enableDrops')}\n                                        </Button>\n                                    )\n                                    :\n                                    <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\n                                        {`${t('StreamCard.creatingRewards')}${loadingDots}`}\n                                    </p>\n                                )\n                            }\n                        </div>\n                    </div>\n                    <EventManagementDialog open={openStreamDialog}\n                        user={user}\n                        sendMessage={(message) => sendMessage(message)}\n                        streamId={streamId}\n                        stream={stream}\n                        streamStarted={startingStream}\n                        closingStream={closingStream}\n                        onClose={() => setOpenStreamDialog(false)}\n                        startStream={startStream}\n                        enableQoins={enableQoinsReward}\n                        closeStream={checkIfCloseStreamDialogMustBeShown}\n                        streamTitle={title && title['en'] ? title['en'] : ''}\n                        date={date}\n                        hour={hour} />\n                    <EventConfirmStartDialog open={openStreamStartedDialog}\n                        onClose={() => setOpenStreamStartedDialog(false)}\n                        manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                    <EventWarningQoinsDialog open={openQoinsWarningDialog}\n                        onClose={() => setOpenQoinsWarningDialog(false)}\n                        manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                    <EventEndStreamConfirmDialog open={openEndStreamDialog}\n                        closingStream={closingStream}\n                        onClose={() => setOpenEndStreamDialog(false)}\n                        closeStream={closeStream} />\n                    <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\n                        onClose={closeAndRemoveStream} />\n                    <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\n                        onClose={() => setOpenCustomMessageSentDialog(false)} />\n                    <EventConfirmCancellationDialog open={openCancelStreamDialog}\n                        streamTitle={title && title['en'] ? title['en'] : ''}\n                        streamerName={user.displayName}\n                        streamerUid={user.uid}\n                        streamId={streamId}\n                        onClose={() => setOpenCancelStreamDialog(false)}\n                        cancelStream={cancelStream} />\n                    <SuccessDialog open={openCanceledStreamSuccessfulDialog}\n                        title={t('StreamCard.successfullyCanceledStreamDialogTitle')}\n                        buttonText={t('StreamCard.successfullyCanceledStreamDialogButtonText')}\n                        onClose={() => setOpenCanceledStreamSuccessfulDialog(false)} />\n                </Card>\n            </Grid>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamCard;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],["326","327"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",["328","329","330","331","332","333"],"import React, { useEffect, useRef, useState } from 'react';\nimport { withStyles, Grid, Avatar, Button, Card, CardContent, Box, IconButton, Hidden, makeStyles, Switch, CircularProgress, Tab, Tabs } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport styles from './StreamerProfile.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamsLeft from '../StreamsLeft/StreamsLeft';\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as AddIcon } from './../../assets/AddIcon.svg';\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\nimport { ReactComponent as BitsIcon } from './../../assets/BitsIcon.svg';\nimport { ReactComponent as MessageIcon } from './../../assets/MessageBubble.svg';\n\nimport { ReactComponent as GIFIcon } from './../../assets/reactionCardsIcons/GIF.svg';\nimport { ReactComponent as MemesIcon } from './../../assets/reactionCardsIcons/Memes.svg';\nimport { ReactComponent as MegaStickerIcon } from './../../assets/reactionCardsIcons/MegaSticker.svg';\nimport { ReactComponent as AvatarIcon } from './../../assets/reactionCardsIcons/Avatar.svg';\nimport { ReactComponent as TtGiphyIcon } from './../../assets/reactionCardsIcons/TtGiphy.svg';\nimport { ReactComponent as TTSBotIcon } from './../../assets/reactionCardsIcons/TTSBot.svg';\nimport { ReactComponent as PlusIcon } from './../../assets/reactionCardsIcons/+.svg';\n\nimport { ReactComponent as Star } from './../../assets/Star.svg';\nimport { ReactComponent as Zap } from './../../assets/Zap.svg';\nimport { ReactComponent as ChPts } from './../../assets/reactionCardsIcons/ChPts.svg';\nimport { ReactComponent as Edit } from './../../assets/Edit.svg';\nimport { ReactComponent as OnEye } from './../../assets/OnEye.svg';\nimport { ReactComponent as OffEye } from './../../assets/OffEye.svg';\nimport { ReactComponent as CalendarOnTabIcon } from './../../assets/CalendarTabOn.svg';\nimport { ReactComponent as CalendarOffTabIcon } from './../../assets/CalendarTabOff.svg';\nimport { ReactComponent as ClockOnTabIcon } from './../../assets/ClockTabOn.svg';\nimport { ReactComponent as ClockOffTabIcon } from './../../assets/ClockTabOff.svg';\nimport { ReactComponent as Heart } from './../../assets/Heart.svg';\nimport { ReactComponent as SlidersSettings } from './../../assets/SlidersSettings.svg';\n\nimport BarProgressBit from '../BarProgressBit/BarProgressBit';\n\nimport { getInteractionsRewardData, getQreatorCode, getStreamerAlertSetting, getStreamerValueOfQoins, loadStreamsByStatus, loadStreamsByStatusRange, loadTwitchExtensionReactionsPrices, setAlertSetting, updateStreamerProfile } from '../../services/database';\nimport StreamCard from '../StreamCard/StreamCard';\nimport {\n    SCHEDULED_EVENT_TYPE,\n    PENDING_APPROVAL_EVENT_TYPE,\n    PAST_STREAMS_EVENT_TYPE,\n    PREMIUM\n} from '../../utilities/Constants';\nimport CheersBitsRecordDialog from '../CheersBitsRecordDialog/CheersBitsRecordDialog';\nimport BuySubscriptionDialog from '../BuySubscriptionDialog/BuySubscriptionDialog';\nimport ReactionCard from '../ReactionCard/ReactionCard';\nimport { getEmotes, refreshUserAccessToken } from '../../services/functions';\nimport { auth } from '../../services/firebase';\nimport { getCustomReward, updateCustomReward } from '../../services/twitch';\n\nconst BalanceButtonContainer = withStyles(() => ({\n    root: {\n        display: 'flex',\n        backgroundColor: '#141735',\n        width: '100%',\n        padding: '22px 24px',\n        height: '100px',\n        minWidth: '250px !important',\n        maxWidth: '330px !important',\n        borderRadius: '20px',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#141735',\n            opacity: 0.7\n        }\n    },\n    label: {\n        display: 'flex'\n    },\n}))(Button);\n\nconst BitsButtonContainer = withStyles(() => ({\n    root: {\n        display: 'flex',\n        backgroundColor: '#141735',\n        padding: '22px 24px',\n        height: '100px',\n        minWidth: '190px !important',\n        maxWidth: 522,\n        borderRadius: '20px',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        textTransform: 'none',\n        marginLeft: '5px',\n        '&:hover': {\n            backgroundColor: '#141735'\n        },\n        '&:active': {\n            backgroundColor: '#141735'\n        }\n    },\n    label: {\n        display: 'flex'\n    },\n}))(Button);\n\nconst useStyles = makeStyles((theme) => ({\n    createCardContentRoot: {\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        alignItems: 'center',\n    },\n    createCardButtonIconLabel: {\n        width: '18px',\n        height: '18px'\n    }\n}));\n\n\nconst ReactionsSwitch = withStyles((theme) => ({\n    root: {\n        width: 44.4,\n        height: 24,\n        padding: 0,\n    },\n    switchBase: {\n        color: '#999',\n        padding: 0,\n        '&$checked': {\n            transform: 'translateX(20.4px)',\n            color: '#2CE9D2',\n            '& + $track': {\n                backgroundColor: '#3B4BF9',\n                opacity: 1,\n                border: 'none',\n            },\n        },\n    },\n    checked: {\n        // idk why this must exist for the above class to work\n    },\n    thumb: {\n        width: 24,\n        height: 24,\n    },\n    disabled: {\n        opacity: 0.6,\n        '& + $track': {\n            opacity: '0.6 !important',\n            backgroundColor: '#444 !important',\n        },\n    },\n    track: {\n        borderRadius: 24 / 2,\n        backgroundColor: '#444',\n        opacity: 1,\n    },\n}))(Switch);\n\nconst QaplaTabs = withStyles(() => ({\n    root: {\n        webkitBoxSizing: 'border-box',\n        mozBoxSizing: 'border-box',\n        boxSizing: 'border-box',\n        marginTop: '24px',\n    },\n    flexContainer: {\n        webkitBoxSizing: 'border-box',\n        mozBoxSizing: 'border-box',\n        boxSizing: 'border-box',\n    },\n    indicator: {\n        backgroundColor: '#0000'\n    }\n}))(Tabs);\n\nconst QaplaTab = withStyles(() => ({\n    root: {\n        height: '35px',\n        maxHeight: '35px',\n        padding: '8px 12px',\n        webkitBoxSizing: 'border-box',\n        mozBoxSizing: 'border-box',\n        boxSizing: 'border-box',\n        color: '#fff',\n        borderRadius: '6px',\n        marginRight: '16px',\n        minWidth: 'auto',\n        minHeight: 'auto',\n        textTransform: 'none',\n        fontSize: '16px',\n        fontWeight: '600',\n        lineHeight: '19px',\n        letterSpacing: '-0.33764705061912537px',\n        textAlign: 'center',\n\n    },\n    selected: {\n        backgroundColor: '#29326B',\n    },\n    wrapper: {\n        flexDirection: 'row',\n        justifyItems: 'center',\n        gap: '4px',\n    }\n}))(Tab);\n\nconst StreamerProfile = ({ user, games, qoinsDrops }) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const [streams, setStreams] = useState({});\n    const [openRecordsDialog, setOpenRecordsDialog] = useState(false);\n    const [buttonPressed, setButtonPressed] = useState('Qoins');\n    const [pendingMessages, setPendingMessages] = useState(0);\n    const [valueOfQoinsForStreamer, setValueOfQoinsForStreamer] = useState(0);\n    const [streamsTab, setStreamsTab] = useState(0);\n    const [qreatorCode, setQreatorCode] = useState('');\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const [randomEmoteUrl, setRandomEmoteUrl] = useState('');\n    const [reactionsEnabled, setReactionsEnabled] = useState(false);\n    const [updatingReactionsStatus, setUpdatingReactionsStatus] = useState(false);\n    const [reactionsPrices, setReactionsPrices] = useState([]);\n    const [openGoPremiumDialog, setOpenGoPremiumDialog] = useState(false);\n    const [editingChannelRewardCost, setEditingChannelRewardCost] = useState(false);\n    const [updatingChannelRewardCost, setUpdatingChannelRewardCost] = useState(false);\n    const [channelRewardCost, setChannelRewardCost] = useState(null);\n    const [newChannelRewardCost, setNewChannelRewardCost] = useState(null);\n    const [rewardId, setRewardId] = useState(null);\n    const [inputWidth, setInputWidth] = useState('4ch');\n    const [editingSubsRewards, setEditingSubsRewards] = useState(0);\n    const [nextMilestone, setNextMilestone] = useState(0);\n    const [availableBits, setAvailableBits] = useState(0);\n    const [estimatedBits, setEstimatedBits] = useState(0);\n    const inputRef = useRef(null);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        function setStreamLoaded(streams) {\n            if (streams.exists()) {\n                setStreams(streams.val());\n            } else {\n                setStreams({});\n            }\n        }\n\n        async function getValueOfQoins() {\n            if (user) {\n                let valueOfQoins = (await getStreamerValueOfQoins(PREMIUM)).val();\n\n                setValueOfQoinsForStreamer(valueOfQoins);\n            }\n        }\n\n        async function loadStreams() {\n            if (user) {\n                if (!streamsTab) {\n                    setStreamLoaded(await loadStreamsByStatusRange(user.uid, PENDING_APPROVAL_EVENT_TYPE, SCHEDULED_EVENT_TYPE));\n                } else {\n                    setStreamLoaded(await loadStreamsByStatus(user.uid, PAST_STREAMS_EVENT_TYPE));\n                }\n            } else if (user === undefined) {\n                history.push('/');\n            }\n        }\n\n        async function getUserQreatorCode() {\n            if (user) {\n                const code = await getQreatorCode(user.uid);\n                if (code.exists()) {\n                    setQreatorCode(code.val());\n                }\n            }\n        }\n\n        async function getRandomEmote() {\n            if (user && user.uid) {\n                const emotesRequest = await getEmotes(user.uid);\n\n                const emotes = emotesRequest ? emotesRequest.data : null;\n                if (emotes) {\n                    // Find the first array who has more than 0 elements\n                    const array = emotes.find((typeOfEmote) => typeOfEmote.data[0].length > 0);\n                    const randomNumber = Math.floor(Math.random() * array.data[0].length);\n\n                    setRandomEmoteUrl(array.data[0][randomNumber].images.url_1x);\n                }\n            }\n        }\n\n        async function loadReactionsEnabled() {\n            if (user && user.uid) {\n                const reactionsEnabled = await getStreamerAlertSetting(user.uid, 'reactionsEnabled');\n\n                /**\n                 * When reactionsEnabled does not exist the reactions are enabled, they are only disabled when the user\n                 * has explicitly required them to be disabled\n                 */\n                setReactionsEnabled(reactionsEnabled.exists() ? Boolean(reactionsEnabled.val()).valueOf() : true);\n            }\n        }\n\n        async function loadTwitchExtensionPrices() {\n            const prices = await loadTwitchExtensionReactionsPrices();\n            if (prices.exists()) {\n                setReactionsPrices(prices.val());\n            }\n        }\n\n        async function getChannelPointRewardData() {\n            try {\n                const rewardData = await getInteractionsRewardData(user.uid);\n                if (rewardData.exists()) {\n                    const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n                    if (userTokensUpdated.data.status === 200) {\n                        const userCredentialsUpdated = userTokensUpdated.data;\n                        updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                        const reward = await getCustomReward(rewardData.val().rewardId, user.id, userCredentialsUpdated.access_token);\n                        if (reward && reward.id) {\n                            setChannelRewardCost(reward.cost);\n                            setRewardId(reward.id);\n                            setInputWidth(reward.cost.toLocaleString().length > 0 ? (reward.cost.toLocaleString().length > 8 ? '8ch' : reward.cost.toLocaleString().length + 'ch') : '1ch');\n                        } else if (reward === 404) {\n                            history.push('/onboarding');\n                        }\n                    } else {\n                        // Refresh token is useless, signout user\n                        alert(t('StreamCard.sessionExpired'));\n                        await auth.signOut();\n                        history.push('/');\n                    }\n                } else {\n                    history.push('/onboarding');\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        if (!editingChannelRewardCost && newChannelRewardCost === null && rewardId === null) {\n            getChannelPointRewardData();\n        }\n        loadStreams();\n        getValueOfQoins();\n        getUserQreatorCode();\n        loadReactionsEnabled();\n        loadTwitchExtensionPrices();\n\n        if (!randomEmoteUrl) {\n            getRandomEmote();\n        }\n    }, [streamsTab, user, history, randomEmoteUrl, channelRewardCost, t, editingChannelRewardCost, newChannelRewardCost]);\n\n    useEffect(() => {\n        async function calculateAvailableBits(isPremium) {\n            let cheersQoins = 0;\n            let nextMilestone = isPremium ? 50 : 500;\n            let availableBits = 0;\n            let estimatedBits = 0;\n\n            cheersQoins = user.qoinsBalance || 0;\n            const tensOfBits = cheersQoins / 100;\n            estimatedBits = Math.floor((tensOfBits) * valueOfQoinsForStreamer);\n            setEstimatedBits(estimatedBits);\n            setAvailableBits(nextMilestone * Math.floor((estimatedBits) / nextMilestone));\n            setNextMilestone(nextMilestone * Math.ceil((estimatedBits + 1) / nextMilestone));\n        }\n\n        if (user) {\n            const isPremium = user && (user.premium || user.freeTrial);\n            setEditingSubsRewards(isPremium ? 0 : 1);\n            calculateAvailableBits(isPremium);\n        }\n    }, [user]);\n\n    const createStream = () => {\n        // User never has been premium and has never used a Free Trial\n        if (user.premium === undefined && user.freeTrial === undefined) {\n            setOpenGoPremiumDialog(true);\n            // User was premium at least once but now is not premium, suggest him to buy a membership\n        } else if (user.premium === false) {\n            setOpenGoPremiumDialog(true);\n        } else {\n            history.push('/create');\n        }\n    }\n\n    /**\n     * Format the date to show in the card\n     * @param {string} date date in format DD-MM-YYYY\n     * @example formatDate(\"12-02-2021\") returns 12 Feb 2021\n     */\n    const formatDate = (timestamp) => {\n        const date = new Date(timestamp);\n        const months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sept', 'Oct', 'Nov', 'Dic'];\n        return `${date.getDate()} ${months[date.getMonth()]}`;\n    }\n\n    const formatHour = (timestamp) => {\n        const date = new Date(timestamp);\n        let hour = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n        const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n\n        const amPm = hour >= 12 ? 'p.m.' : 'a.m.';\n        hour = hour % 12;\n        hour = hour ? hour : 12;\n\n        hour = hour < 10 ? `0${hour}` : hour;\n\n        return `${hour}:${minutes} ${amPm}`;\n    }\n\n    const onRemoveStream = (streamId) => {\n        const streamsCopy = { ...streams };\n        delete streamsCopy[streamId];\n        setStreams(streamsCopy);\n    }\n\n    const handleStreamsTabs = (event, newValue) => {\n        setStreamsTab(newValue);\n    }\n\n    const copyQreatorCode = () => {\n        navigator.clipboard.writeText(qreatorCode);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    const handleReactionsSwitch = async (e) => {\n        setUpdatingReactionsStatus(true);\n        await setAlertSetting(user.uid, 'reactionsEnabled', !reactionsEnabled);\n        setReactionsEnabled(!reactionsEnabled);\n        setUpdatingReactionsStatus(false);\n    }\n\n    const handlePremiumButton = async (e) => {\n        const isPremium = user && (user.premium || user.freeTrial);\n        if (!isPremium) {\n            e.preventDefault();\n\n            return setOpenGoPremiumDialog(true);\n        }\n    }\n\n    const handleChannelRewardCost = async (e) => {\n        setNewChannelRewardCost(e.target.value);\n        setInputWidth(e.target.value.length > 0 ? (e.target.value.length > 8 ? '8ch' : e.target.value.length + 'ch') : '1ch');\n    }\n\n    const handleChannelRewardButton = async () => {\n        if (updatingChannelRewardCost) {\n            return;\n        }\n        if (!editingChannelRewardCost) {\n            setEditingChannelRewardCost(true);\n            setNewChannelRewardCost(channelRewardCost);\n            setTimeout(() => {\n                inputRef.current.focus();\n            }, 100);\n\n            return;\n        }\n\n        let newCostInt = parseInt(newChannelRewardCost);\n\n        if (channelRewardCost === newChannelRewardCost || newChannelRewardCost === '') {\n            setEditingChannelRewardCost(false);\n            setInputWidth(channelRewardCost.toLocaleString().length > 0 ? (channelRewardCost.toLocaleString().length > 8 ? '8ch' : channelRewardCost.toLocaleString().length + 'ch') : '1ch');\n\n            return;\n        }\n\n        setUpdatingChannelRewardCost(true);\n        setEditingChannelRewardCost(false);\n\n        const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n        if (userTokensUpdated.data.status === 200) {\n            const userCredentialsUpdated = userTokensUpdated.data;\n            updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n            const rewardUpdated = await updateCustomReward(\n                user.id,\n                userCredentialsUpdated.access_token,\n                rewardId,\n                {\n                    cost: newCostInt\n                }\n            );\n\n            if (rewardUpdated.status === 200) {\n                setChannelRewardCost(newCostInt);\n                setInputWidth(newCostInt.toLocaleString().length > 0 ? (newCostInt.toLocaleString().length > 8 ? '8ch' : newCostInt.toLocaleString().length + 'ch') : '1ch');\n                setUpdatingChannelRewardCost(false);\n                setNewChannelRewardCost(null);\n                return;\n            }\n        }\n    }\n\n    const handleSubsTabs = async (event, newValue) => {\n        setEditingSubsRewards(newValue);\n    }\n\n    const isPremium = user && (user.premium || user.freeTrial);\n\n    let cheersQoins = 0;\n\n    if (user) {\n        cheersQoins = user.qoinsBalance || 0;\n    }\n\n    let dateRenovation;\n    let renovationDay;\n    let renovationMonth;\n    let monthsArray;\n    if (user && user.currentPeriod) {\n        dateRenovation = new Date(user.currentPeriod.endDate);\n        renovationDay = (dateRenovation.getDate().toString().length < 2 ? '0' : '') + dateRenovation.getDate().toString();\n        renovationMonth = dateRenovation.getMonth();\n        monthsArray = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n    }\n\n    const showMyStreamsSection = user && (user.stripeCustomerId === 'cus_MBJ0NIAvYpOMKp' || user.stripeCustomerId === 'cus_LykciwEvMsa8a4' || user.stripeCustomerId === 'cus_LLERvJxaTrTmIQ' || user.stripeCustomerId === 'cus_KDlRHV8yZzVb5K');\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            {user &&\n                <>\n                    <Grid style={{ maxWidth: '1180px' }} container xs={12} >\n                        <Grid style={{ maxWidth: '800px' }} item xs={12}>\n                            <Grid container xs={12}>\n                                <Grid xs={12}>\n                                    <div className={styles.header}>\n                                        <Hidden lgUp>\n                                            <div style={{ width: '30px' }}></div>\n                                        </Hidden>\n                                        <div className={styles.avatarContainer}>\n                                            <Avatar\n                                                alt='User image'\n                                                src={user.photoUrl} />\n                                            <span className={styles.streamerName}>{user.displayName}</span>\n                                        </div>\n                                        <Button variant='contained'\n                                            style={{ height: '48px', }}\n                                            className={styles.twitchButton}\n                                            onClick={() => window.open(`https://www.twitch.tv/${user.displayName}`, '_blank')}\n                                            startIcon={<TwitchIcon style={{ width: '20px', height: '20px' }} />}>\n                                            {user.displayName}\n                                        </Button>\n                                        <Button variant='contained'\n                                            className={styles.messagesButton}\n                                            style={{ backgroundColor: '#141735', minWidth: '212px', marginLeft: 'auto' }}\n                                            onClick={() => { setOpenRecordsDialog(true); setButtonPressed('Messages') }}\n                                            endIcon={\n                                                <div style={{ display: 'flex', alignItems: 'center' }}>\n                                                    {pendingMessages > 0 ?\n                                                        <div style={{\n                                                            display: 'flex',\n                                                            backgroundColor: '#FF007A',\n                                                            width: '27px',\n                                                            height: '27px',\n                                                            borderRadius: '30px',\n                                                            justifyContent: 'center'\n                                                        }}>\n                                                            <p style={{\n                                                                display: 'flex',\n                                                                fontSize: '11px',\n                                                                lineHeight: '24px',\n                                                                fontWeight: '600',\n                                                                marginTop: '2px'\n                                                            }}>\n                                                                {pendingMessages}\n                                                            </p>\n                                                        </div>\n                                                        :\n                                                        <MessageIcon style={{ width: '32px', height: '32px' }} />\n                                                    }\n                                                </div>\n                                            }>\n                                            <p>\n                                                Text-to-Speech\n                                            </p>\n                                        </Button>\n                                    </div>\n                                </Grid>\n                                <Grid xs={12}>\n                                    <Grid container xs={12}>\n                                        <Grid item xs={12}>\n                                            <h1 className={styles.title}>\n                                                {t('StreamerProfile.balance')}\n                                            </h1>\n                                            <p className={styles.subtitle}>\n                                                {t('StreamerProfile.balanceSubtitle')}\n                                            </p>\n                                        </Grid>\n                                        <Grid container xs={12} style={{ justifyContent: 'space-between' }} >\n                                            <Grid item xs={12} sm={4} style={{ paddingRight: 24 }}>\n                                                <BalanceButtonContainer onClick={() => { setOpenRecordsDialog(true); setButtonPressed('Qoins') }}>\n                                                    <DonatedQoin style={{ width: '35px', height: '35px' }} />\n                                                    <div className={styles.balanceInnerContainer}>\n                                                        <p className={styles.balanceDataTextTitle}>Qoins</p>\n                                                        <p className={styles.balanceDataText}>\n                                                            {cheersQoins.toLocaleString()}\n                                                        </p>\n                                                    </div>\n                                                </BalanceButtonContainer>\n                                            </Grid>\n                                            <Grid item xs={12} sm={8}>\n                                                {/* e.currentTarget != e.target Help us to prevent trigger the event if the user clicks the inner button and not this button */}\n                                                <BitsButtonContainer disableRipple className={styles.containerBit} onClick={(e) => { if (e.currentTarget !== e.target) return; setOpenRecordsDialog(true); setButtonPressed(\"Bits\"); }}>\n                                                    <BitsIcon style={{ width: '35px', height: '35px' }} />\n                                                    <BarProgressBit user={user}\n                                                        estimatedBits={Math.floor(estimatedBits)}\n                                                        availableBits={Math.floor(availableBits)}\n                                                        nextMilestone={nextMilestone} />\n                                                </BitsButtonContainer>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid container xs={12} className={styles.reactionsContainer}>\n                                        <Grid item xs={12}>\n                                            <div className={styles.reactionsHeaderContainer}>\n                                                <div>\n                                                    <div style={{\n                                                        display: 'flex',\n                                                        alignItems: 'center',\n                                                    }}>\n                                                        <h1 className={styles.title}>\n                                                            {t('StreamerProfile.reactions')}\n                                                        </h1>\n                                                    </div>\n                                                    {isPremium &&\n                                                        <QaplaTabs value={editingSubsRewards} onChange={handleSubsTabs}>\n                                                            {/* Must be 0 & 1 because false deselect tabs */}\n                                                            <QaplaTab label={t('StreamerProfile.subscribers')} value={0} icon={<Star style={{ marginBottom: '0px' }} />} style={{\n                                                                background: editingSubsRewards === 0 ? 'linear-gradient(93.52deg, #6F11F9 0%, #FA5668 108.72%)' : '#0000',\n                                                            }} />\n                                                            <QaplaTab label={t('StreamerProfile.allViewers')} value={1} icon={editingSubsRewards === 0 ? <OffEye style={{ marginBottom: '0px' }} /> : <OnEye style={{ marginBottom: '0px' }} />} />\n                                                        </QaplaTabs>\n                                                    }\n                                                    <p className={styles.subtitle}>\n                                                        {t('StreamerProfile.reactionsSubtitle')}\n                                                    </p>\n                                                </div>\n                                            </div>\n                                        </Grid>\n                                        <Grid container xs={12} style={{ justifyContent: 'space-between', gap: '24px', marginTop: '3px' }} >\n                                            <div className={styles.reactionSettingContainer}>\n                                                <div style={{ display: 'flex' }}>\n                                                    <div>\n                                                        <Zap />\n                                                    </div>\n                                                    <div style={{ marginLeft: '8px' }}>\n                                                        <p className={styles.reactionSettingTitle}>\n                                                            {t('StreamerProfile.zaps')}\n                                                        </p>\n                                                        <p className={styles.reactionSettingSubtitle}>\n                                                            {t('StreamerProfile.setZapsPrice')}\n                                                        </p>\n                                                    </div>\n                                                </div>\n                                                <div style={{\n                                                    display: 'flex',\n                                                    flexDirection: 'row',\n                                                    alignItems: 'center',\n                                                    alignSelf: 'flex-end',\n                                                    marginTop: 'auto',\n                                                }}>\n                                                    <ChPts />\n                                                    <input ref={inputRef}\n                                                        style={{\n                                                            width: !editingChannelRewardCost ? inputWidth : '100%'\n                                                        }}\n                                                        className={styles.costInput}\n                                                        type={!editingChannelRewardCost ? 'text' : 'number'}\n                                                        value={editingChannelRewardCost ? newChannelRewardCost : channelRewardCost ? channelRewardCost.toLocaleString() : ''}\n                                                        disabled={!editingChannelRewardCost}\n                                                        onKeyDown={(e) => ['e', 'E', '+', '-'].includes(e.key) && e.preventDefault()}\n                                                        onChange={handleChannelRewardCost} />\n                                                    <div className={styles.editChannelRewardButton} onClick={handleChannelRewardButton} style={{\n                                                        backgroundColor: editingChannelRewardCost ? '#3B4BF9' : '#0000'\n                                                    }}>\n                                                        {updatingChannelRewardCost ?\n                                                            <CircularProgress size={12} className={classes.circularProgress} />\n                                                            :\n                                                            <>\n                                                                {editingChannelRewardCost ?\n                                                                    <p className={styles.editChannelRewardButtonText}>\n                                                                        {t('StreamerProfile.ReactionCard.button.save')}\n                                                                    </p>\n                                                                    :\n                                                                    <Edit height={24}\n                                                                        width={24}\n                                                                        style={{\n                                                                            transform: 'scale(.75)',\n                                                                            maxWidth: '24px',\n                                                                            maxHeight: '24px',\n                                                                            margin: '0px -8px',\n                                                                        }} />\n                                                                }\n                                                            </>\n                                                        }\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className={styles.reactionSettingContainer} style={{}}>\n                                                <div style={{ display: 'flex' }}>\n                                                    <div>\n                                                        <SlidersSettings style={{ height: '24px', width: '24px' }} />\n                                                    </div>\n                                                    <div style={{ marginLeft: '8px' }}>\n                                                        <p className={styles.reactionSettingTitle}>\n                                                            {reactionsEnabled ?\n                                                                t('StreamerProfile.reactionsEnabled')\n                                                                :\n                                                                t('StreamerProfile.reactionsDisabled')\n                                                            }\n                                                        </p>\n                                                        <p className={styles.reactionSettingSubtitle}>\n                                                            {t('StreamerProfile.toggleReactions')}\n                                                        </p>\n                                                    </div>\n                                                </div>\n                                                <div className={styles.switchContainer}>\n                                                    <ReactionsSwitch checked={reactionsEnabled} onChange={handleReactionsSwitch} disabled={updatingReactionsStatus} />\n                                                </div>\n                                            </div>\n                                            <form action='https://us-central1-qapplaapp.cloudfunctions.net/stripeCustomerPortal'\n                                                method='post'\n                                                className={styles.reactionSettingContainer}\n                                                onSubmit={handlePremiumButton}\n                                                style={{ background: isPremium && user.currentPeriod ? '#141735' : 'linear-gradient(318.55deg, #4BDEFE 9.94%, #5328FF 90.92%)' }}>\n                                                <button className={styles.reactionSettingContainer}\n                                                    style={{ background: 'transparent', padding: 0, border: 'none', cursor: 'pointer' }}\n                                                    type='submit'>\n                                                    <input type='hidden' name='stripeCustomerId' value={user.stripeCustomerId || ''} />\n                                                    <div style={{ display: 'flex' }}>\n                                                        <div>\n                                                            {isPremium && user.currentPeriod ?\n                                                                <Heart style={{ height: '24px', width: '24px' }} />\n                                                                :\n                                                                <Star style={{ height: '24px', width: '24px' }} />\n                                                            }\n                                                        </div>\n                                                        <div style={{ marginLeft: '8px' }}>\n                                                            <p className={styles.reactionSettingTitle}>\n                                                                {isPremium && user.currentPeriod ?\n                                                                    t('StreamerProfile.youArePremium')\n                                                                    :\n                                                                    t('StreamerProfile.subsSetUp')\n                                                                }\n                                                            </p>\n                                                            <p className={styles.reactionSettingSubtitle}>\n                                                                {isPremium && user.currentPeriod ?\n                                                                    t('StreamsLeft.renewsOn', { date: renovationDay, month: t(`months.${monthsArray[renovationMonth]}`) })\n                                                                    :\n                                                                    t('StreamerProfile.subsSetUpDescription')\n                                                                }\n                                                            </p>\n                                                        </div>\n                                                    </div>\n                                                </button>\n                                            </form>\n                                        </Grid>\n                                        <Grid container xs={12} style={{ justifyContent: 'space-between', gap: '24px', marginTop: '35px' }} >\n                                            <ReactionCard\n                                                icons={\n                                                    [\n                                                        <GIFIcon />,\n                                                        <MemesIcon />,\n                                                        <MegaStickerIcon />,\n                                                    ]\n                                                }\n                                                title={t('StreamerProfile.ReactionCard.tier1Title')}\n                                                subtitle={t('StreamerProfile.ReactionCard.tier1Subtitle')}\n                                                textMaxWidth='110px'\n                                                reactionLevel={1}\n                                                user={user}\n                                                availablePrices={reactionsPrices}\n                                                subsMode={editingSubsRewards}\n                                            />\n                                            <ReactionCard\n                                                icons={\n                                                    [\n                                                        <PlusIcon fill={'url(#icons-gradient)'} />,\n                                                        <AvatarIcon fill={'url(#icons-gradient)'} />,\n                                                        <TtGiphyIcon fill={'url(#icons-gradient)'} />,\n                                                        <TTSBotIcon fill={'url(#icons-gradient)'} />,\n                                                    ]\n                                                }\n                                                title={t('StreamerProfile.ReactionCard.tier2Title')}\n                                                subtitle={t('StreamerProfile.ReactionCard.tier2Subtitle')}\n                                                textMaxWidth='160px'\n                                                reactionLevel={2}\n                                                user={user}\n                                                availablePrices={reactionsPrices}\n                                                subsMode={editingSubsRewards}\n                                            />\n                                            <ReactionCard\n                                                icons={\n                                                    [\n                                                        <PlusIcon fill={'url(#icons-gradient)'} />,\n                                                        <img src={randomEmoteUrl}\n                                                            style={{ height: 24, width: 24 }} />\n                                                    ]\n                                                }\n                                                title={t('StreamerProfile.ReactionCard.tier3Title')}\n                                                subtitle={t('StreamerProfile.ReactionCard.tier3Subtitle')}\n                                                textMaxWidth='130px'\n                                                reactionLevel={3}\n                                                user={user}\n                                                availablePrices={reactionsPrices}\n                                                subsMode={editingSubsRewards}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12}>\n                                            <p className={styles.miniInfoText}>\n                                                {t('StreamerProfile.peopleUsingTheApp')}\n                                            </p>\n                                        </Grid>\n                                    </Grid>\n                                    {showMyStreamsSection &&\n                                        <Grid item xs={12}>\n                                            <Grid container className={styles.myStreamsContainer}>\n                                                <div style={{ display: 'flex', flex: 1, }}>\n                                                    <h1 className={styles.title}>\n                                                        {t('StreamerProfile.myStreams')}\n                                                    </h1>\n                                                    <div style={{\n                                                        marginLeft: 'auto'\n                                                    }}>\n                                                        {isPremium && user.currentPeriod &&\n                                                            <StreamsLeft uid={user.uid}\n                                                                qoinsDrops={qoinsDrops}\n                                                                renovationDate={user.currentPeriod.endDate} />\n                                                        }\n                                                    </div>\n                                                </div>\n                                            </Grid>\n                                            <div style={{\n                                                marginBottom: ''\n                                            }}>\n                                                <QaplaTabs value={streamsTab} onChange={handleStreamsTabs}>\n                                                    <QaplaTab label=\"Scheduled\" value={0} icon={streamsTab === 0 ? <CalendarOnTabIcon style={{ marginBottom: '0px' }} /> : <CalendarOffTabIcon style={{ marginBottom: '0px' }} />} />\n                                                    <QaplaTab label=\"History\" value={1} icon={streamsTab === 1 ? <ClockOnTabIcon style={{ marginBottom: '0px' }} /> : <ClockOffTabIcon style={{ marginBottom: '0px' }} />} />\n                                                </QaplaTabs>\n                                            </div>\n                                            <div style={{\n                                                marginTop: '14px',\n                                            }}>\n                                                <p style={{\n                                                    color: '#FFFFFF9A',\n                                                    fontSize: '16px',\n                                                    fontWeight: '400',\n                                                    lineHeight: '19px',\n                                                }}>Schedule Qoins drops for your streams</p>\n                                            </div>\n                                        </Grid>\n                                    }\n                                </Grid>\n                                {showMyStreamsSection &&\n                                    <Grid item xs={12} className={styles.streamsCardContainer}>\n                                        <Grid container spacing={4} className={styles.innerStreamsCardContainer}>\n                                            <Grid item xl={2} lg={3} md={3} sm={4} xs={10} className={styles.cardContainer}>\n                                                <Card className={styles.createEventCard} onClick={createStream}>\n                                                    <h1 className={styles.newStream} style={{ whiteSpace: 'pre-line' }}>\n                                                        {t('StreamerProfile.postStream')}\n                                                    </h1>\n                                                    <CardContent classes={{\n                                                        root: classes.createCardContentRoot,\n                                                    }}>\n                                                        <Box display='flex' justifyContent='center'>\n                                                            <IconButton className={styles.createButton} classes={{\n                                                                label: classes.buttonIconLabel\n                                                            }}>\n                                                                <AddIcon />\n                                                            </IconButton>\n                                                        </Box>\n                                                    </CardContent>\n                                                </Card>\n                                            </Grid>\n                                            <div style={{\n                                                display: 'flex',\n                                                justifyContent: 'space-between'\n                                            }}>\n                                                {streams && Object.keys(streams).reverse().map((streamId) => (\n                                                    <StreamCard\n                                                        key={streamId}\n                                                        streamType={streams[streamId].status}\n                                                        streamId={streamId}\n                                                        image={streams[streamId].image}\n                                                        user={user}\n                                                        game={streams[streamId].game}\n                                                        games={games}\n                                                        date={formatDate(streams[streamId].timestamp)}\n                                                        hour={formatHour(streams[streamId].timestamp)}\n                                                        timestamp={streams[streamId].timestamp}\n                                                        drops={streams[streamId].drops}\n                                                        usedDrops={streams[streamId].usedDrops}\n                                                        onRemoveStream={onRemoveStream} />\n                                                ))}\n                                            </div>\n\n                                        </Grid>\n                                    </Grid>\n                                }\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <CheersBitsRecordDialog open={openRecordsDialog}\n                        onClose={() => setOpenRecordsDialog(false)}\n                        user={user}\n                        cheersQoins={cheersQoins}\n                        estimatedBits={availableBits}\n                        valueOfQoinsForStreamer={valueOfQoinsForStreamer}\n                        pressed={buttonPressed}\n                        setPendingMessages={setPendingMessages} />\n                    <BuySubscriptionDialog open={openGoPremiumDialog}\n                        onClose={() => setOpenGoPremiumDialog(false)}\n                        user={user} />\n                </>\n            }\n        </StreamerDashboardContainer >\n    );\n}\n\nexport default StreamerProfile;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["334"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        color: '#fff6',\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",["335"],"import React, { useState } from 'react';\nimport { makeStyles, withStyles, Chip, Button, Tooltip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport styles from './StreamerProfileEditorOnBoarding.module.css';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { saveStreamerDeepLink, saveTags, updateStreamerPublicProfile } from '../../services/database';\nimport BioEditorTextArea from '../BioEditorTextArea/BioEditorTextArea';\nimport { MIN_BIO_LENGTH, MIN_TAGS } from '../../utilities/Constants';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { createBranchDeepLink } from '../../services/functions';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: '#00FFDD',\n        color: '#141833',\n        width: '390px',\n        height: '60px',\n        fontSize: '16px',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        textTransform: 'none',\n        borderRadius: '16px',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n    },\n}));\n\nconst QaplaChip = withStyles(() => ({\n    root: {\n        backgroundColor: 'rgba(64, 64, 255, 0.30859)',\n        color: '#FFFFFFA6',\n        fontWeight: '600',\n        fontSize: '14px',\n        padding: '10px 6px',\n        minWidth: '90px',\n        minHeight: '40px',\n        borderRadius: '100px',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n            backgroundColor: '#4040FF4F',\n            opacity: 0.8\n        }\n    },\n    deletable: {\n        backgroundColor: '#4040FF4F',\n        color: '#FFFFFFA6',\n        padding: '0 0.4rem',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        }\n    },\n    deleteIcon: {\n        color: '#FFFD',\n        '&:hover': {\n            color: '#F00D'\n        },\n        '&:active': {\n            color: '#A00D'\n        }\n    }\n}))(Chip)\n\nconst QaplaDots = ({ index, dots, activeWidth = '30px' }) => {\n\n    let dotsRender = []\n\n    for (let i = 0; i < dots; i++) {\n        dotsRender.push(\n            <div key={`dot-${i}`}\n                style={{\n                    backgroundColor: index === i ? '#00FEDF' : '#00FEDF8A',\n                    width: index === i ? activeWidth : '8px',\n                    height: '8px',\n                    margin: '0px 6.5px',\n                    borderRadius: '100px'\n                }}>\n            </div>\n        )\n    }\n\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'row'\n        }}>\n            {dotsRender}\n        </div>\n    )\n}\n\nconst createDefaultTag = (label) => ({ label, selected: false, isCustom: false });\n\nconst DEFUALT_TAGS = [\n    createDefaultTag('Just Chatting'),\n    createDefaultTag('Musica'),\n    createDefaultTag('IRL'),\n    createDefaultTag('Brawl Stars'),\n    createDefaultTag('Minecraft'),\n    createDefaultTag('CoD'),\n    createDefaultTag('KPop'),\n    createDefaultTag('Ajedrez'),\n    createDefaultTag('Valorant')\n];\n\nconst StreamerProfileEditorOnBoarding = ({ step, showOnlySpecificStep = false, user, onBoardingDone, streamerBio = '', streamerTags = [], closeOnBoarding = () => { } }) => {\n    const [currentStep, setCurrentStep] = useState(step)\n    const [tagSearch, setTagSearch] = useState('')\n    const [tagSearchLimit, setTagSearchLimit] = useState(false)\n    const [tags, setTags] = useState(streamerTags.length === 0 ? DEFUALT_TAGS : streamerTags.map((tag) => ({ label: tag, selected: true, isCustom: true })));\n    const [bio, setBio] = useState(streamerBio);\n    const [bioError, setBioError] = useState(false);\n    const [tagError, setTagError] = useState(false);\n    const [showTagHelper, setShowTagHelper] = useState(true);\n    const [qaplaLinkAlias, setQaplaLinkAlias] = useState('');\n    const [qaplaLink, setQaplaLink] = useState('');\n    const [linkError, setLinkError] = useState('');\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const onTagSearchChange = (e) => {\n        setTagError(false);\n        let input = e.target.value\n        if (input.length > 43) {\n            input = input.slice(0, 43)\n        }\n\n        setTagSearch(input)\n    }\n\n    const addNewTag = () => {\n        setShowTagHelper(false);\n        setTagError(false);\n        let tagsArr = [...tags]\n        tagsArr.push({\n            label: tagSearch,\n            selected: true,\n            isCustom: true\n        })\n        if (tagSearchLimit) {\n            setTagSearchLimit(false)\n        }\n        setTags(tagsArr)\n        setTagSearch('')\n    }\n\n    const tagClick = (data, index, e) => {\n        setShowTagHelper(false);\n        setTagError(false);\n        let tagsArr = [...tags]\n        tagsArr[index] = {\n            ...data,\n            selected: !data.selected\n        }\n        if (data.isCustom) {\n            tagsArr.splice(index, 1)\n        }\n        setTags(tagsArr)\n    }\n\n    const saveBio = async () => {\n        try {\n            await updateStreamerPublicProfile(user.uid, { bio });\n        } catch (error) {\n            console.log(error);\n            alert('Hubo un problema al actualizar la bio, intentalo mas tarde o contacta con soporte tecnico');\n        }\n    }\n\n    const updateBio = (bio) => {\n        setBioError(false);\n        setBio(bio);\n    }\n\n    const handleMainButton = async () => {\n        switch (currentStep) {\n            case 0:\n                const linkResponse = await createBranchDeepLink(user.uid, qaplaLinkAlias);\n\n                if (linkResponse.data.status === 200) {\n                    await saveStreamerDeepLink(user.uid, linkResponse.data.url);\n                    setQaplaLink(linkResponse.data.url);\n\n                    if (showOnlySpecificStep) {\n                        closeOnBoarding();\n                    }\n                } else if (linkResponse.data.status === 409) {\n                    return setLinkError(t('StreamerProfileEditor.OnBoarding.duplicatedLink'));\n                }\n                break;\n            case 1:\n                if (bio.replace(/\\s/g, '').length === 0) {\n                    setBioError(true);\n                    return;\n                } else {\n                    if (bio.length >= MIN_BIO_LENGTH) {\n                        if (showOnlySpecificStep) {\n                            closeOnBoarding();\n                        } else {\n                            setCurrentStep(currentStep + 1);\n                        }\n                        return await saveBio();\n                    }\n                }\n                break;\n            case 2:\n                const tagsSelected = tags.filter((tag) => tag.selected);\n                if (tagsSelected.length >= MIN_TAGS) {\n                    const tagsLabels = tagsSelected.map((tag) => tag.label);\n                    await updateStreamerPublicProfile(user.uid, { tags: tagsLabels });\n\n                    // We don´t know how we are going to use this information but we want to save it\n                    const tagObject = {};\n                    tagsLabels.forEach((tag) => {\n                        tagObject[tag] = true;\n                    });\n\n                    saveTags(tagObject);\n                    if (showOnlySpecificStep) {\n                        return closeOnBoarding();\n                    }\n                } else {\n                    return setTagError(true);\n                }\n                break;\n            case 3:\n                return onBoardingDone();\n            default:\n                break;\n        }\n\n        setCurrentStep(currentStep + 1);\n    }\n\n    const handleQaplaLinkAliasChange = (e) => {\n        setQaplaLinkAlias(e.target.value);\n    }\n\n    const copyTwitchURL = () => {\n        navigator.clipboard.writeText(qaplaLink);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    return (\n        <div className={styles.profileOnBoardingContainer}>\n            <div style={{\n                marginTop: 24,\n                position: 'relative',\n                display: 'flex',\n                backgroundColor: '#141833',\n                width: '450px',\n                height: currentStep >= 1 ? '450px' : '256px',\n                borderRadius: '35px',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column',\n                zIndex: 500,\n            }}>\n                {currentStep === 0 &&\n                <>\n                    <img src={`https://media.giphy.com/media/57WAs7bCG9o4lCzEX9/giphy.gif`} alt={`Whats up`}\n                        style={{\n                            zIndex: 10000,\n                            position: 'absolute',\n                            bottom: 236, // 256 - 20 (height of container - overlaped part of the image)\n                            width: '223px',\n                            height: '173px',\n                        }}\n                    />\n                </>\n                }\n                {currentStep === 1 &&\n                    <>\n                        <img src={`https://media.giphy.com/media/Ll3URGrGa6EAuibyel/giphy.gif`} alt={`Chill`}\n                            style={{\n                                zIndex: 10000,\n                                position: 'absolute',\n                                bottom: 400, // 450 - 50 (height of container - overlaped part of the image)\n                                width: '175px',\n                                height: '175px',\n                            }}\n                        />\n                    </>\n                }\n                {currentStep === 2 &&\n                    <>\n                        <img src={`https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2FIMB_SZ5VPc.gif?alt=media&token=3014ab22-4ab2-4c80-8694-14586d991b3b`} alt={`Umbrella`}\n                            style={{\n                                zIndex: -1,\n                                position: 'absolute',\n                                bottom: 450, // (height of container)\n                                width: '181px',\n                                height: '118px',\n                            }}\n                        />\n                    </>\n                }\n                {currentStep === 3 &&\n                    <>\n                        <img src={`https://media.giphy.com/media/lRRomMvhcT66FpTwlc/giphy.gif`} alt={`Victory`}\n                            style={{\n                                zIndex: -1,\n                                position: 'absolute',\n                                bottom: 400, // 450 - 50 (height of container - hidden part of the image)\n                                width: '142px',\n                                height: '175px',\n                            }}\n                        />\n                    </>\n                }\n\n                {currentStep === 0 &&\n                    <>\n                        <p className={styles.headerText}>\n                            {t('StreamerProfileEditor.OnBoarding.header1')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body1')}\n                        </p>\n                        <div className={styles.createLinkContainer}>\n                            <p style={{\n                                color: '#fff',\n                                fontSize: '14px',\n                                fontWeight: '600',\n                                lineHeight: '17px',\n                            }}>\n                                myqap.la/\n                            </p>\n                            <div className={styles.createLinkFieldContainer}>\n                                <div className={styles.createLinkFieldInnerConainer}>\n                                    <input\n                                        className={styles.createLinkText}\n                                        placeholder={t('StreamerProfileEditor.OnBoarding.typeToCreateLink')}\n                                        onChange={handleQaplaLinkAliasChange}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <p style={{ color: '#FF0000', fontSize: 10 }}>\n                            {linkError}\n                        </p>\n                    </>\n                }\n                {currentStep === 1 &&\n                    <>\n                        <p className={styles.headerText} style={{ marginTop: '18px' }}>\n                            {t('StreamerProfileEditor.OnBoarding.header2')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body2')}\n                        </p>\n                        <BioEditorTextArea bio={bio}\n                            setBio={updateBio}\n                            error={bioError}\n                            minLength={MIN_BIO_LENGTH} />\n                    </>\n                }\n                {currentStep === 2 &&\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}>\n                        <p className={styles.headerText} style={{ marginTop: '18px' }}>\n                            {t('StreamerProfileEditor.OnBoarding.header3')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body3')}\n                        </p>\n                        <StreamerTextInput\n                            containerClassName={styles.modalTagSearchContainer}\n                            textInputStyle={{ backgroundColor: (tagSearch.length === 43 || tagError) ? '#802750' : '#202750' }}\n                            textInputClassName={styles.modalTagSearchTextInput}\n                            value={tagSearch}\n                            onChange={onTagSearchChange}\n                            placeholder={t('StreamerProfileEditor.addTagPlaceholder')}\n                            fullWidth />\n                        {tagError &&\n                            <p style={{ color: 'rgba(255, 255, 255, .65)', fontSize: 10 }}>\n                                {showTagHelper ?\n                                    t('StreamerProfileEditor.OnBoarding.tagErrorNotSelected')\n                                    :\n                                    t('StreamerProfileEditor.OnBoarding.minTags', { minTags: MIN_TAGS })\n                                }\n                            </p>\n                        }\n                        <ul className={styles.modalTagsList}\n                            style={{\n                                width: '100%',\n                                overflowY: 'auto',\n                                scrollBehavior: 'smooth',\n                            }}>\n                            {tags.map((data, index) => (\n                                <li key={index} className={styles.modalTag}>\n                                    <QaplaChip\n                                        label={data.label.length > 20 ? data.label.slice(0, 20) + '...' : data.label}\n                                        style={{ backgroundColor: data.selected ? '#4040FF' : 'rgba(64, 64, 255, 0.30859)' }}\n                                        onClick={(e) => tagClick(data, index, e)}\n                                    />\n                                </li>\n                            ))}\n                            {tagSearch !== '' &&\n                                <li className={styles.modalTag}>\n                                    <QaplaChip\n                                        label={tagSearch}\n                                        onClick={addNewTag}\n                                    />\n                                </li>\n                            }\n                        </ul>\n                    </div>\n                }\n                {currentStep === 3 &&\n                    <>\n                        <p className={styles.headerText} style={{ marginTop: '18px' }}>\n                            {t('StreamerProfileEditor.OnBoarding.header4')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body4')}\n                        </p>\n                        <div style={{\n                            marginTop: '35px',\n                        }}>\n                            <p className={`${styles.finalListText}`}>\n                                {t('StreamerProfileEditor.OnBoarding.waysOfSharing')}\n                            </p>\n                            <p className={`${styles.finalListText}`} style={{\n                                marginTop: '18px',\n                            }}>\n                                {t('StreamerProfileEditor.OnBoarding.addToYourBio')}\n                            </p>\n                            <p className={`${styles.finalListText}`} style={{\n                                marginTop: '18px',\n                            }}>\n                                {t('StreamerProfileEditor.OnBoarding.useItAsLinkInBio')}\n                            </p>\n                            <p className={`${styles.finalListText}`} style={{\n                                marginTop: '18px',\n                            }}>\n                                {t('StreamerProfileEditor.OnBoarding.addToNightbot')}\n                            </p>\n                        </div>\n                        <div className={styles.twitchURLContainer}>\n                            <Tooltip onClick={copyTwitchURL} style={{ cursor: 'pointer' }} placement='top' open={openTooltip} title='Copiado'>\n                                <div className={styles.twitchURLSubContainer}>\n                                    <p href={qaplaLink} target='_blank' rel='noreferrer' className={styles.twitchURL}>\n                                        {qaplaLink}\n                                    </p>\n                                    <CopyIcon className={styles.copyIcon} />\n                                </div>\n                            </Tooltip>\n                        </div>\n                    </>\n                }\n            </div>\n            <div\n                style={{\n                    marginTop: 24,\n                }}>\n                <Button\n                    disabled={qaplaLinkAlias === '' && !showOnlySpecificStep}\n                    onClick={handleMainButton}\n                    className={classes.button}\n                >\n                    {currentStep === 0 &&\n                        t('StreamerProfileEditor.OnBoarding.createProfileLink')\n                    }\n                    {currentStep === 1 &&\n                        t('StreamerProfileEditor.OnBoarding.confirmBio')\n                    }\n                    {currentStep === 2 &&\n                        t('StreamerProfileEditor.OnBoarding.finish')\n                    }\n                    {currentStep === 3 &&\n                        t('StreamerProfileEditor.OnBoarding.goToProfile')\n                    }\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default StreamerProfileEditorOnBoarding;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["336","337"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport { setStreamerDashboardUserLanguage } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    languageLabel: {\n        color: '#FFF',\n        fontSize: 16,\n        fontWeight: 600\n    }\n}));\n\nconst LanguageSelect = ({ uid }) => {\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\n    const [langData, setLangData] = useState([])\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        let tempLangArr = []\n        getAvailableLanguages().map((languageCode) => (\n            tempLangArr.push({\n                value: languageCode,\n                label: t(`LanguageHandler.languages.${languageCode}`)\n            })\n        ))\n        setLangData(tempLangArr)\n    }, [t])\n\n    const onLanguageChanged = (languageCode) => {\n        if (uid) {\n            setStreamerDashboardUserLanguage(uid, languageCode);\n        }\n        changeLanguage(languageCode);\n        setCurrentLanguageCode(languageCode);\n    }\n\n    return (\n        <div style={{\n            display: 'flex'\n        }}>\n            <TranslateIcon style={{\n                display: 'flex'\n            }} />\n            {/* The style of this select needs to be implemented inline */}\n            <div style={{\n                marginTop: '-10px',\n            }}>\n                <StreamerSelect\n                    style={{ backgroundColor: '#141833' }}\n                    data={langData}\n                    value={currentLanguageCode}\n                    onChange={onLanguageChanged}\n                    overflowY='hidden'\n                    overflowX='hidden'\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LanguageSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["338","339","340"],"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\n\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\nimport ModalQoinsDrops from '../ModalQoinsDrops/ModalQoinsDrops';\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n        backdropFilter: 'blur(50px)',\n        [theme.breakpoints.down('md')]: {\n            backgroundColor: '#141833',\n        }\n    },\n    dialogRoot: {\n    },\n    paper: {\n        backgroundColor: '#141833',\n        color: '#FFF',\n        overflow: 'visible',\n        borderRadius: '35px',\n        padding: '64px',\n        minWidth: 'min-content',\n        [theme.breakpoints.down('md')]: {\n            minWidth: '100%',\n            minHeight: '100%',\n        }\n    },\n    itemsContainer: {\n        display: 'flex',\n        [theme.breakpoints.down('md')]: {\n            padding: '184px 66px 20px 66px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            flexWrap: 'wrap',\n            gap: '50px 0px'\n        }\n    },\n    closeButtonContainer: {\n        position: 'absolute',\n        top: '24px',\n        right: '24px',\n        [theme.breakpoints.down('md')]: {\n            top: '118px',\n            right: '128px',\n        }\n    },\n    closeButton: {\n        '&:hover': {\n            cursor: 'pointer'\n        }\n    },\n    title: {\n        fontSize: '18px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '32px',\n        letterSpacing: '0px'\n    },\n    subtitle: {\n        color: '#FFFFFF9A',\n        fontSize: '12px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '18px',\n        letterSpacing: '0px',\n    },\n    startButtonRoot: {\n        backgroundColor: '#00FFDD',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    startText: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        borderRadius: '16px',\n        color: '#FFFFFF'\n    },\n    enabledRewardText: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        color: '#00FFDD'\n    },\n    qoinsButtonRoot: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    qoinsButtonRootDisabled: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF !important',\n        textTransform: 'none',\n        opacity: '0.2'\n    },\n    textInputContainer: {\n        height: '100px',\n        backgroundColor: '#202750',\n        borderRadius: '16px',\n        paddingRight: '4px',\n        overflow: 'hidden'\n    },\n    sendContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        [theme.breakpoints.up('md')]: {\n            minWidth: '400px',\n        },\n    },\n    sendButtonRoot: {\n        backgroundColor: '#6C5DD3',\n        width: '165px',\n        height: '56px',\n        borderRadius: '16px',\n        alignSelf: 'flex-end',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.9'\n        },\n        '&:active': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.8'\n        }\n    },\n    eventNameContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        position: 'absolute',\n        right: '30px',\n        bottom: '-40px',\n        gap: '0px 5px',\n        [theme.breakpoints.down('md')]: {\n            top: '98px',\n            left: '128px',\n            bottom: 'auto',\n            width: '60%',\n            // right: 'auto',\n            paddingTop: '30px',\n            backgroundColor: '#141833'\n        },\n        [theme.breakpoints.down('xs')]: {\n            top: '148px',\n            left: '128px',\n            bottom: 'auto',\n            right: 'auto',\n            paddingTop: '30px',\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n        },\n\n        fontSize: '16px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '24px',\n        letterSpacing: '0px',\n    },\n    eventName: {\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\n        backgroundClip: 'text',\n        WebkitBackgroundClip: 'text',\n        WebkitTextFillColor: 'transparent'\n    },\n}));\n\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\n    const classes = useStyles();\n    const [message, setMessage] = useState('');\n    const [dots, setDots] = useState('')\n    const [enablingQoins, setEnablingQoins] = useState(false);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\n            setTimeout(() => {\n                if (dots.length > 2) {\n                    setDots('');\n                } else {\n                    setDots(dots + '.');\n                }\n            }, 500);\n        }\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\n            setDots('');\n        }\n    }, [streamStarted, dots, enablingQoins]);\n\n    const sendNotificationHandler = async () => {\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\n        await sendMessage(message);\n        setMessage('');\n    }\n\n    return (\n        <Dialog onClose={onClose} open={open} classes={{\n            container: classes.dialogContainer,\n            root: classes.dialogRoot,\n            paper: classes.paper\n        }}\n            maxWidth='sm'\n            fullWidth>\n            <DialogContent style={{ padding: '0px' }}>\n                <div className={classes.closeButtonContainer}>\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\n                </div>\n                <div className={classes.itemsContainer}>\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\n                        <ModalQoinsDrops\n                            stream={stream}\n                            streamStarted={streamStarted}\n                            closingStream={closingStream}\n                            startStream={startStream}\n                            enableQoins={enableQoins} />\n                    </div>\n                    <div className={classes.sendContainer}>\n                        <p className={classes.title}>\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\n                        </p>\n                        <p className={classes.subtitle}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\n                        </p>\n                        <div style={{ height: '20px' }} />\n                        <StreamerTextInput\n                            value={message}\n                            textInputStyle={{ paddingTop: '24px' }}\n                            onChange={(e) => setMessage(e.target.value)}\n                            textInputClassName={classes.textInputContainer}\n                            fullWidth\n                            multiline\n                            rows={6}\n                            maxRows={6}\n                            rowsMax={6}\n                        />\n                        <div style={{ height: '12px' }} />\n                        <Button\n                            onClick={sendNotificationHandler}\n                            classes={{\n                                root: classes.sendButtonRoot\n                            }}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogContent>\n            <div className={classes.eventNameContainer}>\n                <p className={classes.eventName}>\n                    {`${streamTitle} `}\n                </p>\n                <p>\n                    {`/ ${date} / ${hour}`}\n                </p>\n            </div>\n\n        </Dialog>\n    )\n}\n\nexport default EventManagementDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["341","342","343"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n        if (initialLabel && value === undefined) {\n            setSelectedLabel(initialLabel);\n        }\n    }, [data, initialLabel, value])\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["344","345"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, Slide, Button, Dialog, DialogContent, IconButton, List, ListItem, ListItemAvatar, Avatar, ListItemText, Box } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as QoinsIcon } from './../../assets/DonatedQoin.svg';\nimport { ReactComponent as BitsIcon } from './../../assets/BitsIcon.svg';\nimport { ReactComponent as DonatedQoinIcon } from './../../assets/DonatedQoin.svg';\nimport { ReactComponent as RepeatIcon } from './../../assets/RepeatIcon.svg';\nimport { getPeriodStreamerPayments, listenForLastStreamerCheers, markDonationAsUnreadToRepeat, removeListenerForLastStreamerCheers } from '../../services/database';\n\nconst useStyles = makeStyles((theme) => ({\n    toggleButton: {\n        borderRadius: 6,\n        textAlign: 'center',\n        marginRight: 8,\n        fontSize: 17,\n        fontStyle: 'normal',\n        fontWeight: 600,\n        paddingLeft: 16,\n        paddingRight: 16,\n        textTransform: 'none',\n        '&:hover': {\n            opacity: '.80',\n            background: '#29326B44 !important'\n        }\n    },\n    scrollPaper: {\n        alignItems: 'flex-start',\n        justifyContent: 'flex-end'\n    },\n    paper: {\n        height: '100vh',\n        background: 'linear-gradient(0deg, #0D1021, #0D1021), #141735',\n        borderRadius: 20,\n        paddingBottom: '5px',\n        padding: '28px 40px',\n        maxWidth: '100%',\n        width: '100%',\n        margin: '21px 17px 0px 0px',\n        [theme.breakpoints.down(\"xs\")]: {\n            width: '100%',\n            margin: '0px',\n            borderRadius: '0px',\n            maxHeight: '100%'\n        },\n        [theme.breakpoints.up(\"sm\")]: {\n            width: '440px'\n        }\n    },\n    dialogRoot: {\n        zIndex: '100 !important',\n        '& .MuiBackdrop-root': {\n            backgroundColor: '#02071E80',\n            backdropFilter: 'blur(5px)',\n            width: '200wh',\n            height: '200vh'\n\n        }\n    },\n    dialogHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        overflow: ''\n    },\n    balanceCurrencyContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: '23px',\n        minWidth: '200px'\n    },\n    balanceCurrencyValue: {\n        display: 'flex',\n        color: '#FFF',\n        fontSize: '48px',\n        lineHeight: '52px',\n        fontWeight: 600,\n        letterSpacing: '-0.86',\n        marginLeft: '12px',\n    },\n    subDataContainer: {\n        marginTop: '30px',\n        color: '#8692FF',\n        fontWeight: '500',\n        fontSize: '14px',\n        lineHeight: '17px',\n        letterSpacing: '0.35px'\n    },\n    periodText: {\n        color: 'rgba(134, 146, 255, 0.65)',\n        fontSize: 14,\n        fontWeight: 600,\n        letterSpacing: .35,\n        marginBottom: 16,\n        cursor: 'pointer'\n    },\n    qoinsDonationPrimaryText: {\n        fontSize: 18,\n        fontWeight: 600,\n        color: '#FFF'\n    },\n    qoinsCheersecondaryText: {\n        fontSize: 14,\n        fontWeight: 500,\n        color: 'rgba(255, 255, 255, .65)'\n    },\n    qoinDonationValueContainer: {\n        display: 'flex',\n        alignSelf: 'flex-start',\n        alignItems: 'center',\n        marginTop: 6\n    },\n    qoinDonationValueText: {\n        color: '#FFF',\n        fontSize: 18,\n        fontWeight: 600,\n        marginRight: 4\n    },\n    list: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingRight: '20px',\n        marginRight: '-20px',\n        position: 'relative',\n        overflow: 'auto'\n    },\n    periodPicker: {\n        color: '#FFF',\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    repeatButton: {\n        alignSelf: 'center',\n        fontSize: 11,\n        fontWeight: '700',\n        color: '#FFF',\n        borderRadius: 5,\n        backgroundColor: '#22272F',\n        marginLeft: 8,\n        paddingTop: '2px',\n        paddingBottom: '2px',\n        paddingLeft: '11px',\n        paddingRight: '11px',\n        '&:hover': {\n            backgroundColor: '#22272F',\n            opacity: '.9'\n        }\n    }\n}));\n\nconst DialoogTransaction = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction='left' ref={ref} {...props} />;\n});\n\nconst ToggleButton = ({ currentValue, value, onChange, label }) => {\n    const classes = useStyles();\n    const active = currentValue === value;\n\n    return (\n        <Button\n            className={classes.toggleButton}\n            style={{ background: active ? '#29326B' : 'rgba(41, 50, 107, 0)', color: active ? '#FFF' : 'rgba(255, 255, 255, .6)' }}\n            onClick={() => onChange(value)}>\n            {label || value}\n        </Button>\n    );\n};\n\nconst RecordsHeader = ({ value, Icon, showPeriod, onPeriodChange }) => {\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [openMonthPicker, setOpenMonthPicker] = useState(false);\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const monthsArray = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date.$d);\n        setOpenMonthPicker(false);\n        if (onPeriodChange) {\n            onPeriodChange(date.$d);\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'flex', flexDirection: 'column', minWidth: '200px' }}>\n                <div className={classes.balanceCurrencyContainer}>\n                    <Icon />\n                    <p className={classes.balanceCurrencyValue}>\n                        {parseInt(value || 0).toLocaleString()}\n                    </p>\n                </div>\n            </div>\n\n            {showPeriod &&\n                <MuiPickersUtilsProvider utils={DayJsUtils}>\n                    {/**\n                     * Box hides the TextField of the picker but allows the user to open\n                     * the dialog to select the period\n                     */}\n                    <Box component='div' visibility='hidden'>\n                        <DatePicker format='MM'\n                            disableFuture\n                            disableToolbar\n                            variant='inline'\n                            views={['month']}\n                            open={openMonthPicker}\n                            openTo='month'\n                            value={selectedDate}\n                            onChange={handleDateChange}\n                            PopoverProps={{\n                                PaperProps: {\n                                    className: classes.popover\n                                }\n                            }} />\n                    </Box>\n                    <div className={classes.periodText} onClick={() => setOpenMonthPicker(true)}>\n                        {t('CheersBitsRecordDialog.period')} {t(`months.${monthsArray[selectedDate.getMonth()]}`)} {selectedDate.getFullYear()}\n                    </div>\n                </MuiPickersUtilsProvider>\n            }\n        </>\n    );\n}\n\nconst QoinsCheers = ({ uid, qoinsBalance, cheers, messages, setPendingMessages }) => {\n    const classes = useStyles();\n    const [balance, setBalance] = useState(qoinsBalance);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (setPendingMessages !== undefined) {\n            setPendingMessages(0);\n        }\n    }, [setPendingMessages]);\n\n    const showDate = () => {\n        const today = new Date();\n        /**\n         * Not all the browsers supports the parameter \"locales\" from the function toLocaleDateString\n         * https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n         */\n        try {\n            return today.toLocaleDateString('es-MX');\n        } catch (error) {\n            return today.toLocaleDateString();\n        }\n    }\n\n    const repeatSelectedCheer = async (cheerId) => {\n        await markDonationAsUnreadToRepeat(uid, cheerId);\n        window.analytics.track('Cheer repeated');\n    }\n\n    return (\n        <>\n            {!messages &&\n                <>\n                    <RecordsHeader value={balance} Icon={QoinsIcon} />\n                    <div className={classes.subDataContainer}>\n                        <div style={{ display: 'flex' }}>\n                            <p style={{ display: 'flex', width: '62px' }}>\n                                Qoins\n                            </p>\n                            <p style={{ display: 'flex', }}> {qoinsBalance.toLocaleString()} </p>\n                        </div>\n                        <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\n                            {t('CheersBitsRecordDialog.cheersReceivedAt', { date: showDate() })}\n                        </p>\n                    </div>\n                </>\n            }\n            <List className={classes.list} style={{ maxHeight: messages ? '82vh' : '60vh', marginTop: '20px', paddingTop: '0px' }}>\n                {Object.keys(cheers).reverse().map((cheerId) => (\n                    <>\n                        {/* uid validation to not show Qoins Drops activation alerts here */}\n                        {(((messages && cheers[cheerId].message) || (!messages && cheers[cheerId].amountQoins > 0))) && (cheers[cheerId].uid) &&\n                            <ListItem disableGutters style={{ display: 'flex', flexDirection: 'column', padding: '0px', marginBottom: '40px' }}>\n                                <div style={{ display: 'flex', width: '100%' }}>\n                                    <ListItemAvatar style={{ alignSelf: 'center' }} >\n                                        <Avatar alt={cheers[cheerId].twitchUserName}\n                                            src={cheers[cheerId].photoURL} />\n                                    </ListItemAvatar>\n                                    <ListItemText primary={\n                                        <div style={{ display: 'flex', alignContent: 'center' }}>\n                                            <p>{cheers[cheerId].twitchUserName}</p>\n                                            {cheers[cheerId].read &&\n                                                <Button onClick={() => repeatSelectedCheer(cheerId)}\n                                                    className={classes.repeatButton}\n                                                    endIcon={<RepeatIcon />}\n                                                    variant='contained'>\n                                                    {t('CheersBitsRecordDialog.repeatCheer')}\n                                                </Button>\n                                            }\n                                            {!cheers[cheerId].read && <div style={{ backgroundColor: '#8DEBFF', alignSelf: 'center', marginLeft: '8px', width: '8px', height: '8px', borderRadius: '8px' }}>\n                                            </div>}\n                                        </div>\n                                    }\n                                        secondary={formatDate(cheers[cheerId].timestamp)}\n                                        classes={{\n                                            primary: classes.qoinsDonationPrimaryText,\n                                            secondary: classes.qoinsCheersecondaryText\n                                        }} />\n\n                                    <div className={classes.qoinDonationValueContainer}>\n                                        <div className={classes.qoinDonationValueText}>\n                                            {cheers[cheerId].amountQoins}\n                                        </div>\n                                        <DonatedQoinIcon style={{ height: 35, width: 35 }} />\n                                    </div>\n                                </div>\n\n                                {messages && cheers[cheerId].message &&\n                                    <div style={{ background: '#3B4BF9', borderRadius: '2px 20px 20px 20px', padding: '16px 20px 16px 20px', alignSelf: 'flex-start' }}>\n                                        <p style={{ color: '#FFF', fontSize: 14, fontWeight: 500, letterSpacing: .35 }}>\n                                            {cheers[cheerId].message}\n                                        </p>\n                                    </div>\n                                }\n                            </ListItem>\n                        }\n                    </>\n                ))}\n            </List>\n        </>\n    );\n}\n\nconst PaidBits = ({ bitsBalance, valueOfQoinsForStreamer, isPaidUser, payments, onPeriodChange }) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <RecordsHeader value={bitsBalance}\n                Icon={BitsIcon}\n                showPeriod\n                onPeriodChange={onPeriodChange} />\n            <div className={classes.subDataContainer}>\n                <p style={{ display: 'flex' }}>\n                    200 Qoins = {valueOfQoinsForStreamer} Bits\n                </p>\n                <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\n                    {`${t('CheersBitsRecordDialog.bitsToPay')} ${isPaidUser ? t('CheersBitsRecordDialog.withSubscription') : ''}`}\n                </p>\n                <p style={{ display: 'flex', color: '#FFFFFFA6', marginTop: '45px', lineHeight: '17px', fontWeight: '400' }}>\n                    {t('CheersBitsRecordDialog.deliveredCheers')}\n                </p>\n            </div>\n\n            <List className={classes.list} style={{ maxHeight: '54vh', marginTop: '20px', paddingTop: '0px' }}>\n                {Object.keys(payments).reverse().map((paymentId) => (\n                    <ListItem disableGutters>\n                        <ListItemText primary={payments[paymentId].currency}\n                            secondary={formatDate(payments[paymentId].timestamp)}\n                            classes={{\n                                primary: classes.qoinsDonationPrimaryText,\n                                secondary: classes.qoinsCheersecondaryText\n                            }} />\n                        <div className={classes.qoinDonationValueContainer}>\n                            <div className={classes.qoinDonationValueText}>\n                                {payments[paymentId].amount}\n                            </div>\n                        </div>\n                    </ListItem>\n                ))}\n            </List>\n        </>\n    );\n}\n\nconst CheersBitsRecordDialog = ({ user, cheersQoins, qlanQoins, estimatedBits, valueOfQoinsForStreamer, open, onClose, pressed, setPendingMessages }) => {\n    const [value, setValue] = useState('Qoins');\n    const [qoinsCheers, setQoinsCheers] = useState({});\n    const [paymentsHistory, setPaymentsHistory] = useState({});\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function loadDefaultPayments() {\n            const date = new Date();\n            date.setDate(1);\n            date.setHours(0, 0, 0, 0);\n            const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\n            const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\n            setPaymentsHistory(payments.val() || {});\n        }\n\n        if (user && user.uid) {\n            listenForLastStreamerCheers(user.uid, 20, (cheers) => {\n                if (cheers.exists()) {\n                    setQoinsCheers(cheers.val());\n                    let seekUnread = Object.values(cheers.val());\n                    let unreadCount = 0;\n                    seekUnread.forEach(e => {\n                        if (!e.read && e.message) {\n                            unreadCount++\n                        }\n                    });\n                    setPendingMessages(unreadCount)\n                }\n            });\n            loadDefaultPayments();\n        }\n\n\n        return () => {\n            if (user && user.uid) {\n                removeListenerForLastStreamerCheers(user.uid);\n            }\n        };\n    }, [user]);\n\n    const loadPaymentsByTimestamp = async (timestamp) => {\n        const date = new Date(timestamp);\n        date.setDate(1);\n        date.setHours(0, 0, 0, 0);\n        const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\n        const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\n        setPaymentsHistory(payments.val() || {});\n    }\n\n    return (\n        <Dialog open={open}\n            onClose={onClose}\n            scroll='paper'\n            TransitionComponent={DialoogTransaction}\n            classes={{\n                scrollPaper: classes.scrollPaper,\n                paper: classes.paper,\n                root: classes.dialogRoot\n            }}\n            TransitionProps={{\n                onEnter: () => {\n                    setValue(pressed)\n                }\n            }}>\n            <DialogContent style={{ padding: '0px', overflow: 'visible' }}>\n                <div className={classes.dialogHeaderContainer}>\n                    <div style={{ marginRight: 96 }}>\n                        <ToggleButton currentValue={value}\n                            value='Qoins'\n                            onChange={setValue} />\n                        <ToggleButton currentValue={value}\n                            value='Bits'\n                            onChange={setValue} />\n                        <ToggleButton currentValue={value}\n                            value='Messages'\n                            label={t('CheersBitsRecordDialog.messages')}\n                            onChange={setValue} />\n                    </div>\n                    <IconButton onClick={onClose} style={{ zIndex: '10', alignSelf: 'flex-start', width: '40px', height: '40px', padding: '0px', marginTop: '-4px', marginRight: '-16px' }} >\n                        <CloseIcon style={{ width: '40px', height: '40px' }} />\n                    </IconButton>\n                </div>\n                {value === 'Qoins' &&\n                    <QoinsCheers uid={user.uid}\n                        qoinsBalance={cheersQoins}\n                        cheers={qoinsCheers} />\n                }\n                {value === 'Bits' &&\n                    <PaidBits bitsBalance={estimatedBits}\n                        valueOfQoinsForStreamer={valueOfQoinsForStreamer}\n                        isPaidUser={user.premium || user.freeTrial}\n                        payments={paymentsHistory}\n                        onPeriodChange={loadPaymentsByTimestamp} />\n                }\n                {value === 'Messages' &&\n                    <QoinsCheers uid={user.uid}\n                        qoinsBalance={cheersQoins}\n                        messages={true}\n                        cheers={qoinsCheers}\n                        setPendingMessages={setPendingMessages}\n                    />\n                }\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nfunction formatDate(timestamp) {\n    const paymentDate = new Date(timestamp);\n\n    const date = paymentDate.getDate() >= 10 ? paymentDate.getDate() : `0${paymentDate.getDate()}`;\n    const month = (paymentDate.getMonth() + 1) >= 10 ? (paymentDate.getMonth() + 1) : `0${(paymentDate.getMonth() + 1)}`;\n\n    return `${date}/${month}/${paymentDate.getFullYear().toString().substring(2)}`;\n}\n\nexport default CheersBitsRecordDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],["346","347"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["368"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx",["369"],"import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Dialog, makeStyles } from \"@material-ui/core\";\n\nimport style from \"./CasthQutDialog.module.css\";\nimport { ReactComponent as BitsIcon } from \"./../../assets/BitsIcon.svg\";\nimport { notifyCashOutToQaplaAdmin } from \"../../services/discord\";\nimport { saveStreamerCashOutRequest } from \"../../services/database\";\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n    backdropFilter: \"blur(20px)\",\n    },\n    dialogRoot: {},\n    paper: {\n    backgroundColor: \"#141833\",\n    color: \"#FFF\",\n    overflow: \"visible\",\n    borderRadius: \"35px\",\n    },\n}));\n\nconst CasthQutDialog = ({ user, setOpen, setOpenConfirm, setConfirmCashOut, amountBits, open, onClose }) => {\n    const [bits, setBits] = useState(0);\n    const [disableButton, setDisableButton] = useState(false);\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (amountBits > 0 && !bits) {\n        setBits(amountBits);\n        }\n    }, [amountBits]);\n\n  const confirmCashOut = async () => {\n        const qoinsCashOut = amountBits / 10 * 100;\n\n        setDisableButton(true);\n        await saveStreamerCashOutRequest(user.uid, qoinsCashOut, amountBits);\n        await notifyCashOutToQaplaAdmin(user.uid, user.displayName, qoinsCashOut, amountBits);\n        setOpenConfirm(true);\n        setConfirmCashOut(true);\n        setDisableButton(false);\n  }\n\n  return (\n    <Dialog\n          onClose={onClose}\n          open={open}\n          classes={{\n          container: classes.dialogContainer,\n          root: classes.dialogRoot,\n          paper: classes.paper,\n    }}>\n        <div className={style.container_Dialog}>\n            <div className={style.container}>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <BitsIcon style={{ width: \"35px\", height: \"35px\" }} />\n                <h1>\n                {bits.toLocaleString()}\n                </h1>\n            </div>\n            <p className={style.calculated_Bit}>10 Qoins = 1 Bit</p>\n            <p className={style.text}>\n                {t('StreamerProfile.BarProgressBit.confirmCashOut')}\n            </p>\n            <button disabled={disableButton} onClick={confirmCashOut} className={style.button_cash}>\n                {t('StreamerProfile.BarProgressBit.cashOut')}\n            </button>\n            <button onClick={() => setOpen(false)} className={style.button_cancel}>\n                {t('StreamerProfile.BarProgressBit.cancel')}\n            </button>\n            </div>\n        </div>\n    </Dialog>\n  );\n};\n\nexport default CasthQutDialog;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["370"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Button,\n    Hidden\n} from '@material-ui/core';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as QaplaGaming } from './../../assets/QaplaGamingLandingPage.svg';\nimport styles from './StreamersSignin.module.css';\nimport SignInImage from './../../assets/SignIn.png';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\nimport { getUserToken, subscribeStreamerToTwitchWebhook, subscribeStreamerToMailerLiteGroup } from '../../services/functions';\nimport { createStreamerProfile, getInteractionsRewardData, getNumberOfVisits, getStreamerDeepLink, setVisitsCounter, updateStreamerProfile, userHasPublicProfile } from '../../services/database';\nimport { webhookStreamOffline, webhookStreamOnline } from '../../utilities/Constants';\nimport { getTwitchUserData } from '../../services/twitch';\n\nvar utc = require('dayjs/plugin/utc');\ndayjs.extend(utc);\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst StreamersSignin = ({ user, title }) => {\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function checkIfUsersIsSigningIn() {\n            const twitchClientCode = query.get('code');\n\n            if (!isLoadingAuth && !user && twitchClientCode) {\n                setIsLoadingAuth(true);\n                const tokenData = await getUserToken(twitchClientCode);\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\n\n                    if (user.userData.isNewUser) {\n                        try {\n                            await subscribeStreamerToMailerLiteGroup(user.userData.email, user.userData.displayName);\n                        } catch (error) {\n                            console.error(error);\n                        }\n\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOnline.type, webhookStreamOnline.callback);\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOffline.type, webhookStreamOffline.callback);\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\n                    }\n\n                    try {\n                        await updateStreamerProfile(user.firebaseAuthUser.user.uid, {\n                            twitchAccessToken: tokenData.data.access_token,\n                            refreshToken: tokenData.data.refresh_token,\n                            displayName: user.userData.displayName,\n                            photoUrl: user.userData.photoUrl,\n                            broadcasterType: user.userData.broadcasterType\n                        });\n\n                        redirectUser(user.firebaseAuthUser.user.uid);\n                    } catch (error) {\n                        console.log(error);\n                    }\n                } else {\n                    alert(t('StreamersSignin.alerts.errorSignIn'));\n                }\n            }\n        }\n        async function redirectUser(uid) {\n            const interactionsRewardData = await getInteractionsRewardData(uid);\n            if (interactionsRewardData.exists()) {\n                const userHasProfile = await userHasPublicProfile(uid);\n                const userHasLink = await getStreamerDeepLink(uid);\n\n                /**\n                 * This flag ensures that the next time the user enters after creating their interactions reward they will be redirected\n                 * to create their profile\n                 */\n                const userHasBeenRedirectedToCreateProfile = localStorage.getItem('userHasBeenRedirectedToCreateProfile');\n\n                // We use this to know if the user must be redirected again to create a profile\n                const numberOfTimesUserEnterDashboard = await getNumberOfVisits(uid);\n                await setVisitsCounter(uid, numberOfTimesUserEnterDashboard.val() < 2 ? numberOfTimesUserEnterDashboard.val() + 1 : 0);\n\n                if (userHasBeenRedirectedToCreateProfile && numberOfTimesUserEnterDashboard.val() < 2) {\n                    history.push('/profile');\n                } else {\n                    if ((userHasProfile && userHasLink.exists()) || numberOfTimesUserEnterDashboard.val() < 2) {\n                        history.push('/profile');\n                    } else {\n                        history.push('/editProfile');\n                        localStorage.setItem('userHasBeenRedirectedToCreateProfile', 'true');\n                    }\n                }\n            } else {\n                history.push('/onboarding');\n            }\n        }\n\n        checkIfUsersIsSigningIn();\n\n        if (user && !isLoadingAuth) {\n            redirectUser(user.uid);\n        }\n    }, [user, history, isLoadingAuth]);\n\n    const signIn = () => {\n        setIsLoadingAuth(true);\n        signInWithTwitch();\n        setIsLoadingAuth(false);\n    }\n\n    if (user === undefined || isLoadingAuth) {\n        return (\n            <StreamerDashboardContainer>\n                <Grid item md='1' />\n                <Grid item md='6' className={styles.mainContainer}>\n                    <QaplaGaming style={{ marginTop: '100px', marginBottom: '80px', transform: 'scale(0.9)' }} />\n                    <p className={styles.getStarted}>\n                        {title}\n                    </p>\n                    <div className={styles.formContainer}>\n                        <Button variant='contained'\n                            className={styles.continueButton}\n                            disabled={isLoadingAuth}\n                            startIcon={<TwitchIcon />}\n                            onClick={signIn}>\n                            {!isLoadingAuth ?\n                                t('StreamersSignin.signIn')\n                                :\n                                t('StreamersSignin.loading')\n                            }\n                        </Button>\n                        <p style={{ marginTop: '38px', color: '#FFF', fontSize: '.8rem' }}>\n                            {t('StreamersSignin.termsAndConditionsP1')}\n                            <a style={{ cursor: 'pointer', color: '#3B4BF9' }} href={t('Onboarding.termsOfUseUrl')} target='_blank' rel=\"noreferrer\">\n                                {t('StreamersSignin.termsAndConditionsP2')}\n                            </a>\n                        </p>\n                    </div>\n                    <Hidden smDown>\n                        <div className={styles.bottomImage} >\n                            <img src={SignInImage} alt='Sign In' />\n                        </div>\n                    </Hidden>\n                </Grid>\n                <Grid item md='1' />\n            </StreamerDashboardContainer>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamersSignin;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["371","372","373","374"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(6),\n        paddingRight: theme.spacing(6),\n        paddingTop: theme.spacing(6),\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CardsPayments/CardsPayments.jsx",[],["375","376"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GridSelector/GridSelector.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/ChatbotCommandSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmCancellationDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/SuccessDialog/SuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/DialogOnlyQoins/DiealogOnlyQoins.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ErrorBoundary/ErrorBoundary.jsx",["377"],"import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    };\n\n    static getDerivedStateFromError(error) {\n        return { error: true };\n    }\n\n      componentDidCatch(error, errorInfo) {\n        this.props.onFail(error, errorInfo);\n    }\n\n\n    render() {\n        if (this.state.error) {\n            return null;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChatBubbleiOS/ChatBubbleiOS.jsx",["378"],"import React, { useEffect, useState } from 'react';\n\nimport styles from './ChatBubbleiOS.module.css';\n\nconst ChatBubbleiOS = ({ children, bubbleColor = '#22f', textColor = '#fff', maxWidth = '255px', tailRight = false }) => {\n    const [bubbleColors, setBubbleColors] = useState(`\n        :root {\n            --bubble-color: #22f;\n            --text-color: #fff;\n        }\n        p {\n            max-width: 255px;\n        }\n    `);\n\n    useEffect(() => {\n        setBubbleColors(`\n            :root {\n                --bubble-color: ${bubbleColor};\n                --text-color: ${textColor};\n            }\n            p {\n                max-width: ${maxWidth};\n            }\n        `)\n    }, [bubbleColor, textColor])\n\n    return (\n        <p className={`${tailRight ? styles.tailRight : styles.tailLeft} ${styles.paragrapChatBubble}`}>\n            <style>{bubbleColors}</style>\n            {children}\n        </p>\n    );\n}\n\nexport default ChatBubbleiOS;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ReactionCard/ReactionCard.jsx",["379"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles, MenuItem, Select, Switch, withStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport style from './ReactionCard.module.css';\n\nimport { QOIN, ZAP } from '../../utilities/Constants';\nimport { getReactionLevelDefaultPrice, getReactionLevelPrice, getReactionSubscriberLevelPrice, getReactionSubscribersLevelDefaultPrice, setReactionLevelPrice, setReactionSubscriberLevelPrice } from '../../services/database';\n\nimport { ReactComponent as Bits } from './../../assets/Bits.svg';\nimport { ReactComponent as Show } from './../../assets/Show.svg';\nimport { ReactComponent as Zap } from './../../assets/Zap.svg';\n\nconst useStyles = makeStyles(() => ({\n    circularProgress: {\n        color: '#0AFFD2',\n        alignSelf: 'center'\n    },\n    select: {\n        paddingLeft: '16px',\n        paddingRight: '16px',\n        maxHeight: '320px',\n        '& ul': {\n            padding: 0\n        },\n        '& li': {\n            fontSize: 12,\n            fontWeight: 600,\n            color: '#FFF',\n            backgroundColor: '#141735 !important',\n            justifyContent: 'flex-end'\n        },\n    },\n    selectPaper: {\n        borderRadius: '10px',\n        backgroundColor: '#141735 !important',\n        '&::-webkit-scrollbar': {\n            width: 0\n        }\n    }\n}));\n\nconst ChannelPoinsSwitch = withStyles((theme) => ({\n    root: {\n        width: 44.4,\n        height: 24,\n        padding: 0,\n    },\n    switchBase: {\n        color: '#999',\n        padding: 0,\n        '&$checked': {\n            transform: 'translateX(20.4px)',\n            color: '#2CE9D2',\n            '& + $track': {\n                backgroundColor: '#3B4BF9',\n                opacity: 1,\n                border: 'none',\n            },\n        },\n    },\n    checked: {\n        // idk why this must exist for the above class to work\n    },\n    thumb: {\n        width: 24,\n        height: 24,\n    },\n    disabled: {\n        opacity: 0.6,\n        '& + $track': {\n            opacity: '0.6 !important',\n            backgroundColor: '#444 !important',\n        },\n    },\n    track: {\n        borderRadius: 24 / 2,\n        backgroundColor: '#444',\n        opacity: 1,\n    },\n}))(Switch);\n\nconst SubsSwitch = withStyles((theme) => ({\n    root: {\n        width: 32,\n        height: 24,\n        padding: 0,\n        borderRadius: 16,\n    },\n    switchBase: {\n        color: '#FF5862',\n        padding: 4,\n        paddingTop: 6,\n        '&$checked': {\n            transform: 'translateX(13px)',\n            color: '#FF5862',\n            '& + $track': {\n                backgroundColor: '#fff',\n                opacity: 1,\n                border: 'none',\n            },\n        },\n    },\n    checked: {\n        // idk why this must exist for the above class to work\n    },\n    thumb: {\n        width: 12,\n        height: 12,\n    },\n    disabled: {\n        opacity: 0.6,\n        '& + $track': {\n            opacity: '0.6 !important',\n            backgroundColor: '#fff !important',\n        },\n    },\n    track: {\n        borderRadius: 12 / 2,\n        backgroundColor: '#FFFFFF99',\n        opacity: 1,\n    },\n}))(Switch);\n\nconst zapsCostArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst ReactionCard = ({\n    icons,\n    title,\n    subtitle,\n    textMaxWidth = '100%',\n    reactionLevel = 1,\n    user,\n    availablePrices,\n    hideBorder,\n    subsMode = 0,\n}) => {\n    const [cost, setCost] = useState(0);\n    const [type, setType] = useState(ZAP);\n    const { t } = useTranslation('translation', { keyPrefix: 'StreamerProfile.ReactionCard' });\n    const classes = useStyles();\n\n    const level = `level${reactionLevel}`;\n\n    useEffect(() => {\n        async function getPriceData() {\n            try {\n                let price = null;\n                if (subsMode === 1) {\n                    price = await getReactionLevelPrice(user.uid, level);\n                } else {\n                    price = await getReactionSubscriberLevelPrice(user.uid, level);\n                }\n\n                if (price.exists()) {\n                    setCost(price.val().type === ZAP ? price.val().price : price.val().bitsPrice);\n                    setType(price.val().type);\n                } else {\n                    if (subsMode === 1) {\n                        price = await getReactionLevelDefaultPrice(level);\n                    } else {\n                        price = await getReactionSubscribersLevelDefaultPrice(level);\n                    }\n\n                    setCost(price.val().type === ZAP ? price.val().price : price.val().bitsPrice);\n                    setType(price.val().type);\n                }\n            } catch (error) {\n                if (type === QOIN) {\n                    console.log('error on qoins card: ' + level);\n                } else {\n                    console.log('error on channel points card: ' + level);\n                }\n                console.log(error);\n            }\n        }\n\n        if (user && user.uid) {\n            getPriceData();\n        }\n    }, [cost, type, user.uid, subsMode]);\n\n    const handleCost = async (value, priceType) => {\n        const selectedProduct = availablePrices?.find(({ cost }) => (cost === value));\n\n        if (subsMode === 1) {\n            await setReactionLevelPrice(\n                user.uid,\n                level,\n                priceType,\n                // 10 Qoins = 1 Bit, so the price in Qoins is the price in Bits * 10\n                priceType === ZAP ? value : value * 10,\n                priceType === ZAP ? null : value,\n                selectedProduct?.twitchSku\n            );\n        } else {\n            await setReactionSubscriberLevelPrice(\n                user.uid,\n                level,\n                priceType,\n                // 10 Qoins = 1 Bit, so the price in Qoins is the price in Bits * 10\n                priceType === ZAP ? value : value * 10,\n                priceType === ZAP ? null : value,\n                selectedProduct?.twitchSku\n            );\n        }\n\n        setCost(value);\n    }\n\n    const toggleReactionType = async () => {\n        // Changes in type will trigger the 2nd useEffect, update the cost there\n        if (type === ZAP) {\n            setType(QOIN);\n            handleCost(availablePrices[0].cost, QOIN);\n        } else {\n            setType(ZAP);\n            handleCost(1, ZAP);\n        }\n    }\n\n    return (\n        <div className={style.gradientContainer} style={{ background: hideBorder ? 'none' : subsMode === 0 ? 'linear-gradient(152.4deg, #690EFF 0%, #FF5862 100%)' : 'linear-gradient(141.89deg, #4657FF 0%, #8F4EFF 100%)', }}>\n            <div className={style.container} style={{ background: subsMode === 0 ? 'none' : '#141735' }}>\n                <div style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                }}>\n                    <svg style={{ width: 0, height: 0, position: 'absolute' }} aria-hidden=\"true\" focusable=\"false\">\n                        <linearGradient xmlns=\"http://www.w3.org/2000/svg\" id=\"icons-gradient\" x1=\"14.1628\" y1=\"-0.16279\" x2=\"3.47637\" y2=\"16.4971\" gradientUnits=\"userSpaceOnUse\">\n                            <stop stopColor=\"#FFD3FB\" />\n                            <stop offset=\"0.484375\" stopColor=\"#F5FFCB\" />\n                            <stop offset=\"1\" stopColor=\"#9FFFDD\" />\n                        </linearGradient>\n                    </svg>\n                    <div style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                    }}>\n                        {icons.map((icon, index) => (\n                                <div key={`icon-${index}`}\n                                    style={{\n                                        marginRight: '16px',\n                                    }}>\n                                    {icon}\n                                </div>\n                            ))\n                        }\n                    </div>\n                    <p style={{\n                        fontSize: '10px',\n                        fontWeight: '700',\n                        color: '#FFF'\n                    }}>\n                        Tier {reactionLevel}\n                    </p>\n                </div>\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    maxWidth: textMaxWidth,\n                }}>\n                    <p className={style.subtitle}>\n                        {subtitle}\n                    </p>\n                    <p className={style.title}>\n                        {title}\n                    </p>\n                </div>\n                <div style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                }}>\n                    <div style={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                    }}>\n                        <div style={{\n                            maxWidth: '136px',\n                        }}>\n                            <p className={style.title}>\n                                {t('channelPoints')}\n                            </p>\n                            <p className={style.subtitle}>\n                                {t('allowViewers')}\n                            </p>\n                        </div>\n                        {subsMode === 0 ?\n                            <SubsSwitch checked={type === ZAP}\n                                onChange={toggleReactionType} />\n                            :\n                            <ChannelPoinsSwitch checked={type === ZAP}\n                                onChange={toggleReactionType} />\n                        }\n                    </div>\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                        marginTop: '20px'\n                    }}>\n                        <div style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                        }}>\n                            {type === ZAP &&\n                                <Zap style={{\n                                    width: '16px',\n                                    heigt: '16px',\n                                }} />\n                            }\n                            {type === QOIN &&\n                                <Bits />\n                            }\n                            <Select MenuProps={{\n                                    classes: {\n                                        paper: classes.select\n                                    },\n                                    PaperProps: {\n                                        className: classes.selectPaper\n                                    },\n                                    anchorOrigin: {\n                                        vertical: 'top',\n                                        horizontal: 'left'\n                                    },\n                                    transformOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left'\n                                    },\n                                    getContentAnchorEl: null\n                                }}\n                                style={{\n                                    color: '#fff',\n                                    fontSize: '18px',\n                                    fontWeight: '700',\n                                    border: 'none',\n                                    outline: 'none',\n                                    borderRadius: '8px',\n                                    padding: '0px 0px 0px 8px'\n                                }}\n                                IconComponent={(props) => <Show {...props} style={{ marginTop: '4px' }} />}\n                                displayEmpty\n                                disableUnderline\n                                value={cost}\n                                onChange={({ target: { value } }) => handleCost(value, type)}>\n                                {type === QOIN ?\n                                    availablePrices.map(({ cost, twitchSku }) => (\n                                        <MenuItem value={cost} key={twitchSku}>\n                                            {cost.toLocaleString()}\n                                        </MenuItem>\n                                    ))\n                                    :\n                                    zapsCostArray.map((zapNumber) => (\n                                        <MenuItem value={zapNumber} key={zapNumber}>\n                                            {zapNumber.toLocaleString()}\n                                        </MenuItem>\n                                    ))\n                                }\n                            </Select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ReactionCard;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BuySubscriptionDialog/BuySubscriptionDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Overlay/Overlay.jsx",["380","381","382","383","384","385","386"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Overlay/Components/Reaction.jsx",["387","388","389","390","391","392"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/OverlayEmotesAnimation.js",[],{"ruleId":"393","replacedBy":"394"},{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","severity":1,"message":"398","line":201,"column":8,"nodeType":"399","endLine":201,"endColumn":14,"suggestions":"400"},{"ruleId":"401","severity":1,"message":"402","line":263,"column":25,"nodeType":"403","endLine":263,"endColumn":49},{"ruleId":"397","severity":1,"message":"404","line":130,"column":8,"nodeType":"399","endLine":130,"endColumn":14,"suggestions":"405"},{"ruleId":"401","severity":1,"message":"402","line":464,"column":41,"nodeType":"403","endLine":468,"endColumn":46},{"ruleId":"401","severity":1,"message":"402","line":677,"column":37,"nodeType":"403","endLine":678,"endColumn":77},{"ruleId":"406","severity":1,"message":"407","line":126,"column":27,"nodeType":"408","messageId":"409","endLine":126,"endColumn":43},{"ruleId":"406","severity":1,"message":"410","line":127,"column":24,"nodeType":"408","messageId":"409","endLine":127,"endColumn":37},{"ruleId":"406","severity":1,"message":"411","line":199,"column":7,"nodeType":"408","messageId":"409","endLine":199,"endColumn":22},{"ruleId":"406","severity":1,"message":"412","line":232,"column":12,"nodeType":"408","messageId":"409","endLine":232,"endColumn":28},{"ruleId":"406","severity":1,"message":"413","line":232,"column":12,"nodeType":"408","messageId":"409","endLine":232,"endColumn":29},{"ruleId":"406","severity":1,"message":"414","line":241,"column":12,"nodeType":"408","messageId":"409","endLine":241,"endColumn":21},{"ruleId":"406","severity":1,"message":"415","line":241,"column":23,"nodeType":"408","messageId":"409","endLine":241,"endColumn":35},{"ruleId":"397","severity":1,"message":"416","line":299,"column":8,"nodeType":"399","endLine":299,"endColumn":14,"suggestions":"417"},{"ruleId":"406","severity":1,"message":"418","line":36,"column":55,"nodeType":"408","messageId":"409","endLine":36,"endColumn":72},{"ruleId":"393","replacedBy":"419"},{"ruleId":"395","replacedBy":"420"},{"ruleId":"406","severity":1,"message":"421","line":213,"column":12,"nodeType":"408","messageId":"409","endLine":213,"endColumn":23},{"ruleId":"397","severity":1,"message":"422","line":346,"column":8,"nodeType":"399","endLine":346,"endColumn":121,"suggestions":"423"},{"ruleId":"406","severity":1,"message":"424","line":352,"column":17,"nodeType":"408","messageId":"409","endLine":352,"endColumn":30},{"ruleId":"397","severity":1,"message":"425","line":368,"column":8,"nodeType":"399","endLine":368,"endColumn":14,"suggestions":"426"},{"ruleId":"406","severity":1,"message":"427","line":417,"column":11,"nodeType":"408","messageId":"409","endLine":417,"endColumn":26},{"ruleId":"401","severity":1,"message":"402","line":799,"column":57,"nodeType":"403","endLine":800,"endColumn":97},{"ruleId":"428","severity":1,"message":"429","line":27,"column":1,"nodeType":"430","endLine":27,"endColumn":51},{"ruleId":"406","severity":1,"message":"431","line":68,"column":7,"nodeType":"408","messageId":"409","endLine":68,"endColumn":16},{"ruleId":"406","severity":1,"message":"432","line":7,"column":28,"nodeType":"408","messageId":"409","endLine":7,"endColumn":37},{"ruleId":"406","severity":1,"message":"433","line":22,"column":11,"nodeType":"408","messageId":"409","endLine":22,"endColumn":18},{"ruleId":"406","severity":1,"message":"434","line":7,"column":28,"nodeType":"408","messageId":"409","endLine":7,"endColumn":38},{"ruleId":"406","severity":1,"message":"435","line":229,"column":27,"nodeType":"408","messageId":"409","endLine":229,"endColumn":43},{"ruleId":"397","severity":1,"message":"436","line":245,"column":8,"nodeType":"399","endLine":245,"endColumn":44,"suggestions":"437"},{"ruleId":"406","severity":1,"message":"438","line":4,"column":5,"nodeType":"408","messageId":"409","endLine":4,"endColumn":14},{"ruleId":"406","severity":1,"message":"439","line":5,"column":5,"nodeType":"408","messageId":"409","endLine":5,"endColumn":17},{"ruleId":"406","severity":1,"message":"440","line":6,"column":5,"nodeType":"408","messageId":"409","endLine":6,"endColumn":15},{"ruleId":"406","severity":1,"message":"441","line":273,"column":21,"nodeType":"408","messageId":"409","endLine":273,"endColumn":31},{"ruleId":"397","severity":1,"message":"442","line":457,"column":8,"nodeType":"399","endLine":457,"endColumn":14,"suggestions":"443"},{"ruleId":"393","replacedBy":"444"},{"ruleId":"395","replacedBy":"445"},{"ruleId":"406","severity":1,"message":"446","line":14,"column":465,"nodeType":"408","messageId":"409","endLine":14,"endColumn":497},{"ruleId":"406","severity":1,"message":"447","line":26,"column":10,"nodeType":"408","messageId":"409","endLine":26,"endColumn":24},{"ruleId":"406","severity":1,"message":"448","line":26,"column":42,"nodeType":"408","messageId":"409","endLine":26,"endColumn":52},{"ruleId":"406","severity":1,"message":"449","line":26,"column":73,"nodeType":"408","messageId":"409","endLine":26,"endColumn":92},{"ruleId":"406","severity":1,"message":"450","line":46,"column":12,"nodeType":"408","messageId":"409","endLine":46,"endColumn":25},{"ruleId":"397","severity":1,"message":"451","line":386,"column":8,"nodeType":"399","endLine":386,"endColumn":118,"suggestions":"452"},{"ruleId":"397","severity":1,"message":"453","line":609,"column":8,"nodeType":"399","endLine":609,"endColumn":55,"suggestions":"454"},{"ruleId":"397","severity":1,"message":"455","line":632,"column":8,"nodeType":"399","endLine":632,"endColumn":39,"suggestions":"456"},{"ruleId":"397","severity":1,"message":"457","line":647,"column":8,"nodeType":"399","endLine":647,"endColumn":10,"suggestions":"458"},{"ruleId":"401","severity":1,"message":"402","line":746,"column":25,"nodeType":"403","endLine":757,"endColumn":34},{"ruleId":"401","severity":1,"message":"402","line":759,"column":25,"nodeType":"403","endLine":765,"endColumn":34},{"ruleId":"401","severity":1,"message":"402","line":879,"column":33,"nodeType":"403","endLine":885,"endColumn":42},{"ruleId":"397","severity":1,"message":"459","line":953,"column":8,"nodeType":"399","endLine":953,"endColumn":46,"suggestions":"460"},{"ruleId":"397","severity":1,"message":"459","line":998,"column":8,"nodeType":"399","endLine":998,"endColumn":87,"suggestions":"461"},{"ruleId":"397","severity":1,"message":"462","line":1070,"column":8,"nodeType":"399","endLine":1070,"endColumn":10,"suggestions":"463"},{"ruleId":"397","severity":1,"message":"464","line":1077,"column":8,"nodeType":"399","endLine":1077,"endColumn":46,"suggestions":"465"},{"ruleId":"397","severity":1,"message":"466","line":1101,"column":8,"nodeType":"399","endLine":1101,"endColumn":37,"suggestions":"467"},{"ruleId":"397","severity":1,"message":"459","line":1198,"column":8,"nodeType":"399","endLine":1198,"endColumn":86,"suggestions":"468"},{"ruleId":"406","severity":1,"message":"469","line":1237,"column":12,"nodeType":"408","messageId":"409","endLine":1237,"endColumn":22},{"ruleId":"397","severity":1,"message":"470","line":1247,"column":8,"nodeType":"399","endLine":1247,"endColumn":52,"suggestions":"471"},{"ruleId":"428","severity":1,"message":"429","line":16,"column":1,"nodeType":"430","endLine":16,"endColumn":52},{"ruleId":"397","severity":1,"message":"472","line":33,"column":8,"nodeType":"399","endLine":33,"endColumn":20,"suggestions":"473"},{"ruleId":"397","severity":1,"message":"398","line":114,"column":8,"nodeType":"399","endLine":114,"endColumn":38,"suggestions":"474"},{"ruleId":"406","severity":1,"message":"475","line":4,"column":5,"nodeType":"408","messageId":"409","endLine":4,"endColumn":11},{"ruleId":"406","severity":1,"message":"476","line":5,"column":5,"nodeType":"408","messageId":"409","endLine":5,"endColumn":12},{"ruleId":"406","severity":1,"message":"477","line":6,"column":5,"nodeType":"408","messageId":"409","endLine":6,"endColumn":9},{"ruleId":"406","severity":1,"message":"478","line":7,"column":5,"nodeType":"408","messageId":"409","endLine":7,"endColumn":11},{"ruleId":"393","replacedBy":"479"},{"ruleId":"395","replacedBy":"480"},{"ruleId":"406","severity":1,"message":"481","line":1,"column":8,"nodeType":"408","messageId":"409","endLine":1,"endColumn":13},{"ruleId":"397","severity":1,"message":"482","line":26,"column":8,"nodeType":"399","endLine":26,"endColumn":32,"suggestions":"483"},{"ruleId":"397","severity":1,"message":"484","line":181,"column":8,"nodeType":"399","endLine":181,"endColumn":40,"suggestions":"485"},{"ruleId":"397","severity":1,"message":"486","line":417,"column":8,"nodeType":"399","endLine":417,"endColumn":118,"suggestions":"487"},{"ruleId":"397","severity":1,"message":"462","line":643,"column":8,"nodeType":"399","endLine":643,"endColumn":10,"suggestions":"488"},{"ruleId":"397","severity":1,"message":"464","line":650,"column":8,"nodeType":"399","endLine":650,"endColumn":46,"suggestions":"489"},{"ruleId":"397","severity":1,"message":"466","line":674,"column":8,"nodeType":"399","endLine":674,"endColumn":37,"suggestions":"490"},{"ruleId":"397","severity":1,"message":"459","line":769,"column":8,"nodeType":"399","endLine":769,"endColumn":86,"suggestions":"491"},{"ruleId":"406","severity":1,"message":"469","line":808,"column":12,"nodeType":"408","messageId":"409","endLine":808,"endColumn":22},{"ruleId":"397","severity":1,"message":"470","line":818,"column":8,"nodeType":"399","endLine":818,"endColumn":52,"suggestions":"492"},{"ruleId":"397","severity":1,"message":"493","line":72,"column":8,"nodeType":"399","endLine":72,"endColumn":49,"suggestions":"494"},{"ruleId":"397","severity":1,"message":"495","line":87,"column":8,"nodeType":"399","endLine":87,"endColumn":10,"suggestions":"496"},{"ruleId":"401","severity":1,"message":"402","line":956,"column":13,"nodeType":"403","endLine":967,"endColumn":22},{"ruleId":"401","severity":1,"message":"402","line":972,"column":9,"nodeType":"403","endLine":977,"endColumn":18},{"ruleId":"397","severity":1,"message":"459","line":1041,"column":8,"nodeType":"399","endLine":1041,"endColumn":46,"suggestions":"497"},{"ruleId":"397","severity":1,"message":"459","line":1087,"column":8,"nodeType":"399","endLine":1087,"endColumn":87,"suggestions":"498"},"no-native-reassign",["499"],"no-negated-in-lhs",["500"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.","ArrayExpression",["501"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'randomEmoteUrl'. Either include it or remove the dependency array.",["502"],"no-unused-vars","'setSelectedEvent' is assigned a value but never used.","Identifier","unusedVar","'setStringDate' is assigned a value but never used.","'TableCellStyled' is assigned a value but never used.","'participantsList' is assigned a value but never used.","'uploadImageStatus' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["503"],"'sendCustomMessage' is defined but never used.",["499"],["500"],"'openTooltip' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'rewardId'. Either include it or remove the dependency array.",["504"],"'availableBits' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'valueOfQoinsForStreamer'. Either include it or remove the dependency array.",["505"],"'copyQreatorCode' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'QaplaDots' is assigned a value but never used.","'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["506"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["507"],["499"],["500"],"'getStreamerDashboardUserLanguage' is defined but never used.","'EmoteExplosion' is defined but never used.","'EmoteTunel' is defined but never used.","'StartEmoteFireworks' is defined but never used.","'showEmojiRain' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'finishReaction', 'queueAnimation', and 't'. Either include them or remove the dependency array.",["508"],"React Hook useEffect has missing dependencies: 'displayDonation', 'donation.media', 'donation.message', and 'donation.messageExtraData'. Either include them or remove the dependency array.",["509"],"React Hook useEffect has missing dependencies: 'donation.amountQoins' and 'donation.message'. Either include them or remove the dependency array.",["510"],"React Hook useEffect has a missing dependency: 'donation.avatar'. Either include it or remove the dependency array.",["511"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["512"],["513"],"React Hook useEffect has missing dependencies: 'animationId', 't', and 'twitchUsername'. Either include them or remove the dependency array. If 'setTextOpts' needs the current value of 'twitchUsername', you can also switch to useReducer instead of useState and read 'twitchUsername' in the reducer.",["514"],"React Hook useEffect has a missing dependency: 'startGreeting'. Either include it or remove the dependency array. If 'startGreeting' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["515"],"React Hook useEffect has a missing dependency: 'onFail'. Either include it or remove the dependency array. If 'onFail' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["516"],["517"],"'text2Ready' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTextReady'. Either include it or remove the dependency array. If 'setTextReady' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["518"],"React Hook useEffect has a missing dependency: 'bits'. Either include it or remove the dependency array.",["519"],["520"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.",["499"],["500"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'maxWidth'. Either include it or remove the dependency array. If 'setBubbleColors' needs the current value of 'maxWidth', you can also switch to useReducer instead of useState and read 'maxWidth' in the reducer.",["521"],"React Hook useEffect has missing dependencies: 'level' and 'user'. Either include them or remove the dependency array.",["522"],"React Hook useEffect has missing dependencies: 'angryTalkingAnimation.animations', 'finishReaction', 'happyTalkingAnimation.animations', 'queueAnimation', 'sadTalkingAnimation.animations', and 't'. Either include them or remove the dependency array.",["523"],["524"],["525"],["526"],["527"],["528"],"React Hook useEffect has missing dependencies: 'displayDonation', 'media', 'message', and 'messageExtraData'. Either include them or remove the dependency array.",["529"],"React Hook useEffect has a missing dependency: 'avatar'. Either include it or remove the dependency array.",["530"],["531"],["532"],"no-global-assign","no-unsafe-negation",{"desc":"533","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"557","fix":"558"},{"desc":"559","fix":"560"},{"desc":"561","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"559","fix":"579"},{"desc":"561","fix":"580"},{"desc":"563","fix":"581"},{"desc":"565","fix":"582"},{"desc":"567","fix":"583"},{"desc":"584","fix":"585"},{"desc":"586","fix":"587"},{"desc":"555","fix":"588"},{"desc":"557","fix":"589"},"Update the dependencies array to be: [query, t, user]",{"range":"590","text":"591"},"Update the dependencies array to be: [randomEmoteUrl, user]",{"range":"592","text":"593"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"594","text":"595"},"Update the dependencies array to be: [streamsTab, user, history, randomEmoteUrl, channelRewardCost, t, editingChannelRewardCost, newChannelRewardCost, rewardId]",{"range":"596","text":"597"},"Update the dependencies array to be: [user, valueOfQoinsForStreamer]",{"range":"598","text":"599"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"600","text":"601"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"602","text":"603"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, greetingsQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, t, finishReaction]",{"range":"604","text":"605"},"Update the dependencies array to be: [avatarReady, clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",{"range":"606","text":"607"},"Update the dependencies array to be: [donation.amountQoins, donation.message, showDonation, showQoinsBubble]",{"range":"608","text":"609"},"Update the dependencies array to be: [donation.avatar]",{"range":"610","text":"611"},"Update the dependencies array to be: [props.animations, avatarMixer, scene, props]",{"range":"612","text":"613"},"Update the dependencies array to be: [animations, avatarMixer, cameraReady, scene, props.playAnimation, props]",{"range":"614","text":"615"},"Update the dependencies array to be: [animationId, t, twitchUsername]",{"range":"616","text":"617"},"Update the dependencies array to be: [avatarReady, textReady, showGreeting, startGreeting]",{"range":"618","text":"619"},"Update the dependencies array to be: [showGreeting, renderTimeout, onFail]",{"range":"620","text":"621"},"Update the dependencies array to be: [animations, avatarMixer, cameraReady, scene, props.showGreeting, props]",{"range":"622","text":"623"},"Update the dependencies array to be: [text1Ready, showGreeting, setTextReady]",{"range":"624","text":"625"},"Update the dependencies array to be: [amountBits, bits]",{"range":"626","text":"627"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"628","text":"629"},"Update the dependencies array to be: [bubbleColor, maxWidth, textColor]",{"range":"630","text":"631"},"Update the dependencies array to be: [cost, type, user.uid, subsMode, user, level]",{"range":"632","text":"633"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, greetingsQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, t, happyTalkingAnimation.animations, angryTalkingAnimation.animations, sadTalkingAnimation.animations, finishReaction]",{"range":"634","text":"635"},{"range":"636","text":"617"},{"range":"637","text":"619"},{"range":"638","text":"621"},{"range":"639","text":"623"},{"range":"640","text":"625"},"Update the dependencies array to be: [avatarReady, mediaReady, giphyTextReady, media, messageExtraData, message, displayDonation]",{"range":"641","text":"642"},"Update the dependencies array to be: [avatar]",{"range":"643","text":"644"},{"range":"645","text":"613"},{"range":"646","text":"615"},[5289,5295],"[query, t, user]",[5266,5272],"[randomEmoteUrl, user]",[9311,9317],"[socialLinksInitialValue, twitchURL, user]",[13286,13399],"[streamsTab, user, history, randomEmoteUrl, channelRewardCost, t, editingChannelRewardCost, newChannelRewardCost, rewardId]",[14273,14279],"[user, valueOfQoinsForStreamer]",[6830,6866],"[streamStarted, dots, enablingQoins, stream]",[17734,17740],"[setPendingMessages, user]",[19951,20061],"[streamerId, streamerUid, donationQueue, greetingsQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, t, finishReaction]",[29676,29723],"[avatarReady, clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",[30543,30574],"[donation.amountQoins, donation.message, showDonation, showQoinsBubble]",[31082,31084],"[donation.avatar]",[45752,45790],"[props.animations, avatarMixer, scene, props]",[47265,47344],"[animations, avatarMixer, cameraReady, scene, props.playAnimation, props]",[50136,50138],"[animationId, t, twitchUsername]",[50302,50340],"[avatarReady, textReady, showGreeting, startGreeting]",[51013,51042],"[showGreeting, renderTimeout, onFail]",[55067,55145],"[animations, avatarMixer, cameraReady, scene, props.showGreeting, props]",[56595,56639],"[text1Ready, showGreeting, setTextReady]",[1065,1077],"[amountBits, bits]",[5434,5464],"[user, history, isLoadingAuth, query, t]",[696,720],"[bubbleColor, maxWidth, textColor]",[5048,5080],"[cost, type, user.uid, subsMode, user, level]",[19763,19873],"[streamerId, streamerUid, donationQueue, greetingsQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, t, happyTalkingAnimation.animations, angryTalkingAnimation.animations, sadTalkingAnimation.animations, finishReaction]",[29339,29341],[29505,29543],[30214,30243],[34088,34166],[35632,35676],[2904,2945],"[avatarReady, mediaReady, giphyTextReady, media, messageExtraData, message, displayDonation]",[3417,3419],"[avatar]",[45784,45822],[47361,47440]]
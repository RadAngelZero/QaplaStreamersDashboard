[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"43","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"44","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js":"45","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx":"46","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"47","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx":"48","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"49","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"50","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx":"51","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"52","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"53","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"54","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx":"55","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"56","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"57","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"58","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"59","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CardsPayments/CardsPayments.jsx":"60","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"61","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"62","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"63","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GridSelector/GridSelector.jsx":"64","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/ChatbotCommandSettings.jsx":"65","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmCancellationDialog.jsx":"66","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/SuccessDialog/SuccessDialog.jsx":"67","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/DialogOnlyQoins/DiealogOnlyQoins.jsx":"68","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ErrorBoundary/ErrorBoundary.jsx":"69","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QlanProgressBar.jsx":"70"},{"size":226,"mtime":1667432423337,"results":"71","hashOfConfig":"72"},{"size":3579,"mtime":1614731664824,"results":"73","hashOfConfig":"72"},{"size":7180,"mtime":1664288712194,"results":"74","hashOfConfig":"72"},{"size":9059,"mtime":1664228906376,"results":"75","hashOfConfig":"72"},{"size":21550,"mtime":1664288712193,"results":"76","hashOfConfig":"72"},{"size":8380,"mtime":1666043908678,"results":"77","hashOfConfig":"72"},{"size":1520,"mtime":1654019625276,"results":"78","hashOfConfig":"72"},{"size":1919,"mtime":1661972327646,"results":"79","hashOfConfig":"72"},{"size":6010,"mtime":1666043908677,"results":"80","hashOfConfig":"72"},{"size":5675,"mtime":1661974732629,"results":"81","hashOfConfig":"72"},{"size":6609,"mtime":1664228906380,"results":"82","hashOfConfig":"72"},{"size":23202,"mtime":1664288712191,"results":"83","hashOfConfig":"72"},{"size":5738,"mtime":1667432619222,"results":"84","hashOfConfig":"72"},{"size":362,"mtime":1614731664838,"results":"85","hashOfConfig":"72"},{"size":24049,"mtime":1666043908650,"results":"86","hashOfConfig":"72"},{"size":1288,"mtime":1648248621496,"results":"87","hashOfConfig":"72"},{"size":1485,"mtime":1666043908661,"results":"88","hashOfConfig":"72"},{"size":35109,"mtime":1667505869154,"results":"89","hashOfConfig":"72"},{"size":1083,"mtime":1664288712186,"results":"90","hashOfConfig":"72"},{"size":14217,"mtime":1666043908660,"results":"91","hashOfConfig":"72"},{"size":44192,"mtime":1666043908662,"results":"92","hashOfConfig":"72"},{"size":4314,"mtime":1664228906395,"results":"93","hashOfConfig":"72"},{"size":19827,"mtime":1666043908663,"results":"94","hashOfConfig":"72"},{"size":1390,"mtime":1665156854078,"results":"95","hashOfConfig":"72"},{"size":3326,"mtime":1661972327650,"results":"96","hashOfConfig":"72"},{"size":2093,"mtime":1664288712204,"results":"97","hashOfConfig":"72"},{"size":719,"mtime":1666043908658,"results":"98","hashOfConfig":"72"},{"size":19804,"mtime":1667505934839,"results":"99","hashOfConfig":"72"},{"size":2185,"mtime":1664573793507,"results":"100","hashOfConfig":"72"},{"size":2188,"mtime":1667434832790,"results":"101","hashOfConfig":"72"},{"size":47174,"mtime":1667508872640,"results":"102","hashOfConfig":"72"},{"size":2975,"mtime":1614731664830,"results":"103","hashOfConfig":"72"},{"size":1505,"mtime":1662223237485,"results":"104","hashOfConfig":"72"},{"size":16161,"mtime":1666043908665,"results":"105","hashOfConfig":"72"},{"size":503,"mtime":1664228906395,"results":"106","hashOfConfig":"72"},{"size":9916,"mtime":1666043908657,"results":"107","hashOfConfig":"72"},{"size":3170,"mtime":1661972327665,"results":"108","hashOfConfig":"72"},{"size":8804,"mtime":1666043908675,"results":"109","hashOfConfig":"72"},{"size":1897,"mtime":1664288712205,"results":"110","hashOfConfig":"72"},{"size":3844,"mtime":1650310830005,"results":"111","hashOfConfig":"72"},{"size":5706,"mtime":1664288712196,"results":"112","hashOfConfig":"72"},{"size":21097,"mtime":1665173643107,"results":"113","hashOfConfig":"72"},{"size":589,"mtime":1666652845126,"results":"114","hashOfConfig":"72"},{"size":7574,"mtime":1664228906374,"results":"115","hashOfConfig":"72"},{"size":2473,"mtime":1664228906410,"results":"116","hashOfConfig":"72"},{"size":3991,"mtime":1664228906374,"results":"117","hashOfConfig":"72"},{"size":629,"mtime":1635283796967,"results":"118","hashOfConfig":"72"},{"size":1637,"mtime":1664228906375,"results":"119","hashOfConfig":"72"},{"size":870,"mtime":1667253578296,"results":"120","hashOfConfig":"72"},{"size":51659,"mtime":1667508872639,"results":"121","hashOfConfig":"72"},{"size":1295,"mtime":1664288712188,"results":"122","hashOfConfig":"72"},{"size":3390,"mtime":1664228906407,"results":"123","hashOfConfig":"72"},{"size":383,"mtime":1650310830005,"results":"124","hashOfConfig":"72"},{"size":3416,"mtime":1650310830004,"results":"125","hashOfConfig":"72"},{"size":2668,"mtime":1664228906375,"results":"126","hashOfConfig":"72"},{"size":9052,"mtime":1664228906412,"results":"127","hashOfConfig":"72"},{"size":4014,"mtime":1664228906403,"results":"128","hashOfConfig":"72"},{"size":7571,"mtime":1666043908670,"results":"129","hashOfConfig":"72"},{"size":1558,"mtime":1667434737750,"results":"130","hashOfConfig":"72"},{"size":3838,"mtime":1664288712187,"results":"131","hashOfConfig":"72"},{"size":14707,"mtime":1667434815406,"results":"132","hashOfConfig":"72"},{"size":3339,"mtime":1650310830005,"results":"133","hashOfConfig":"72"},{"size":3414,"mtime":1664228906384,"results":"134","hashOfConfig":"72"},{"size":2512,"mtime":1666043908651,"results":"135","hashOfConfig":"72"},{"size":7074,"mtime":1666043908659,"results":"136","hashOfConfig":"72"},{"size":4639,"mtime":1666043908656,"results":"137","hashOfConfig":"72"},{"size":3131,"mtime":1666043908672,"results":"138","hashOfConfig":"72"},{"size":2885,"mtime":1666043908648,"results":"139","hashOfConfig":"72"},{"size":464,"mtime":1667269474679,"results":"140","hashOfConfig":"72"},{"size":3957,"mtime":1667341660556,"results":"141","hashOfConfig":"72"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"v96qq4",{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"144"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"144"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"144"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"144"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"144"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"144"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"144"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"144"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"144"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"144"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"144"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"144"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"144"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["300","301"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",["302"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, Button, Box, Grid } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport styles from './PlanPicker.module.css';\nimport { getSubscriptionsDetails } from '../../services/database';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { MONTHLY, QUARTERLY, YEARLY } from '../../utilities/Constants';\n\nimport CardsPayments from '../CardsPayments/CardsPayments'\nimport { getCurrentLanguage } from '../../utilities/i18n';\n\nconst useStyles = makeStyles(() => ({\n    toggleButton: {\n        borderRadius: '6px',\n        margin: '0px 2px',\n        textAlign: 'center',\n        fontWeight: '600',\n        fontSize: '14px',\n        padding: '12px 24px',\n        lineHeight: 'normal',\n        textTransform: 'none',\n        minWidth: '114px',\n        letterSpacing: '-0.34px'\n    },\n    cardGridItem: {\n        margin: '0px 27px',\n        maxWidth: '430px',\n    },\n    essentialPlanContainer: {\n        background: '#141833',\n        borderRadius: 20\n    },\n    growthPlanContainer: {\n        background: '#3B4BF9',\n        borderRadius: 20\n    },\n    planBody: {\n        padding: '40px',\n        paddingBottom: '0px'\n    },\n    subscribeButton: {\n        height: '52px',\n        width: '260px',\n        lineHeight: '17px',\n        fontSize: '14px',\n        fontWeight: 700,\n        padding: '0px',\n        borderRadius: '10px',\n        letterSpacing: '-0.23px'\n    }\n}));\n\nconst ToggleButton = ({ currentValue, value, label, onChange }) => {\n    const classes = useStyles();\n    const active = currentValue === value;\n\n    const capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1);\n\n    return (\n        <Button\n            className={classes.toggleButton}\n            style={{ background: active ? '#141833' : 'transparent', color: active ? '#FFF' : 'rgba(255, 255, 255, .6)' }}\n            onClick={() => onChange(value)}>\n            {capitalizeFirstLetter(label)}\n        </Button>\n    );\n};\n\nconst PlanPicker = ({ user }) => {\n    const [subscriptions, setSubscriptions] = useState({});\n    const [period, setPeriod] = useState(QUARTERLY);\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    useEffect(() => {\n        async function loadSubscriptions() {\n            const subscriptions = await getSubscriptionsDetails();\n\n            if (subscriptions.exists()) {\n                setSubscriptions(subscriptions.val());\n            }\n        }\n\n        if (user) {\n            loadSubscriptions();\n        }\n    }, [user]);\n\n    const renderTotalPayment = (period, monthlyAmount) => {\n        let totalPayment = 0;\n        if (period === QUARTERLY) {\n            totalPayment = monthlyAmount * 3;\n        } else if (period === YEARLY) {\n            totalPayment = monthlyAmount * 12;\n        }\n\n        return (\n            `${t('PlanPicker.totalPeriodPayment', { totalPayment: Number.isInteger(totalPayment) ? totalPayment : totalPayment.toFixed(2) })} ${t(`PlanPicker.plansPeriods.${period}`)}.`\n        );\n    }\n\n    const userLanguage = getCurrentLanguage();\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={styles.backgroundContainer}>\n            <div className={styles.backgroundFilter}/>\n            <Box display='flex' alignItems='center' justifyContent='center'>\n                {user &&\n                    <h1 className={styles.title}>\n                        {!user.freeTrial ?\n                            t('PlanPicker.titlePart1')\n                            :\n                            t('PlanPicker.titlePart1FreeTrial')\n                        }\n                        {' '}\n                        {t('PlanPicker.titlePart2')}\n                    </h1>\n                }\n            </Box>\n            <Box display='flex' alignItems='center' justifyContent='center'>\n                {Object.keys(subscriptions).map((subscriptionType) => (\n                    <ToggleButton key={subscriptionType}\n                        currentValue={period}\n                        value={subscriptions[subscriptionType].title['en'].toLowerCase()}\n                        label={t(`PlanPicker.plansPeriods.${subscriptions[subscriptionType].title['en'].toLowerCase()}`)}\n                        onChange={setPeriod} />\n                ))}\n            </Box>\n            <Grid container spacing={0}  className={styles.plansContainer} justify='center'>\n                <CardsPayments\n                    title={'Basic'}\n                    textButon={'Current'}\n                    subtitle={'Free forever'}\n                    backgroundButon={'#141833'}\n                    colorTextButon={'#FFFFFF'}\n                    price={0}\n                    disableButton\n                    period={period}\n                    items={[{ text: 'Qapla Reactions' }, { text: 'Qoins cash out' }]} />\n                {subscriptions[period] && Object.keys(subscriptions[period].packages).map((plan) => (\n                    <form action='https://us-central1-qapplaapp.cloudfunctions.net/streamerSubscriptionCheckoutIntent' method='post'>\n                        <CardsPayments backgroundCards={plan === 'growth' ? '#3B4BF9' : '#141833'}\n                            title={subscriptions[period].packages[plan].title[userLanguage]}\n                            textButon={plan === 'growth' ? t('PlanPicker.rewardYourCommunity') : t('PlanPicker.getVisibility')}\n                            subtitle={period === MONTHLY ? `${t('PlanPicker.payment')} ${t(`PlanPicker.plansPeriods.${period}`)}` : renderTotalPayment(period, subscriptions[period].packages[plan].cost)}\n                            paymentPerMonth={period === MONTHLY ? '' : t('PlanPicker.saving', { saving: subscriptions[period].packages[plan].saving })}\n                            backgroundButon={plan === 'growth' ? '#0AFFD2' : '#6C5DD3'}\n                            colorTextButon={plan === 'growth' ? '#4E2D92' : '#FFF'}\n                            price={subscriptions[period].packages[plan].cost}\n                            items={[\n                                { text: t('PlanPicker.drops', { numberOfDrops: plan === 'growth' ? 400 : 200 }), color:'#0AFFD2' },\n                                { text: t('PlanPicker.postAlways') },\n                                { text: t('PlanPicker.qaplaReactions') },\n                                { text: t('PlanPicker.cashOut') }\n                            ]} />\n                        <input type='hidden' name='uid' value={user.uid} />\n                        <input type='hidden' name='stripeCustomerId' value={user.stripeCustomerId || ''} />\n                        <input type='hidden' name='email' value={user.email} />\n                        <input type='hidden' name='lookupKey' value={subscriptions[period].packages[plan].lookupKey} />\n                        <input type='hidden' name='plan' value={plan} />\n                        <input type='hidden' name='interval' value={period} />\n                    </form>\n                ))}\n            </Grid>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default PlanPicker;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["303","304"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ESvg } from './../../assets/g.svg';\nimport {ReactComponent as Closeicon} from './../../assets/Closeicono.svg'\nimport HeartHands from './../../assets/HeartHands.png';\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        height: '100vh'\n    },\n    paymentInfoContainer: {\n        paddingLeft: 50,\n        paddingRight: 64,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    eImageContainer: {\n        display: 'flex',\n        width: 80,\n        height: 80,\n        borderRadius: 20,\n        backgroundColor: '#141833',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    subscriptionBought: {\n        marginTop: 48,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    subTerms: {\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    totalPaid: {\n        fontSize: 48,\n        fontWeight: '600',\n        color: 'rgba(255, 255, 255, .9)',\n        lineHeight:'58.09px'\n    },\n    interval: {\n        marginLeft: 6,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    paymentDetails: {\n        marginTop: 48,\n        display: 'flex',\n        justifyContent: 'space-between',\n        maxWidth:'750px'\n    },\n    subscriptionType: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentInterval: {\n        marginTop: 8,\n        fontSize: 14,\n        fontWeight: '400',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    itemCost: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentUntilTodayContainer: {\n        marginTop: 56,\n        color: '#FFF',\n        display: 'flex',\n        justifyContent: 'space-between',\n        maxWidth:'750px'\n    },\n    paymentUntilToday: {\n        fontSize: 24,\n        fontWeight: '500'\n    },\n    thanksCardContainer: {\n        width: '450px',\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    thanksCard: {\n        backgroundColor: '#141833',\n        display: 'inline-block',\n        color: '#FFF',\n        maxWidth: '80%',\n        borderRadius: 35\n    },\n    cardContentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: 30,\n        paddingRight: 30,\n        maxWidth:'450px'\n    },\n    thanksTitle: {\n        marginTop: 8,\n        fontSize: 18,\n        fontWeight: '700',\n        textAlign: 'center'\n    },\n    thanksDescription: {\n        marginTop: 24,\n        fontSize: 14,\n        fontWeight: '500',\n        lineHeight: '22px',\n        textAlign: 'center',\n        marginRight: 48,\n        marginLeft: 48\n    },\n    publishButton: {\n        marginTop: 64,\n        marginLeft: 30,\n        marginRight: 30,\n        backgroundColor: '#0AFFD2',\n        borderRadius: 10,\n        color: '#4E2D92',\n        fontSize: 16,\n        fontWeight: '700',\n        paddingTop: 19,\n        paddingBottom: 19,\n        '&:hover': {\n            backgroundColor: '#0AFFD2',\n            opacity: '.95'\n        }\n    },\n    backToDashboardButton: {\n        marginTop: 16,\n        marginBottom: 16,\n        fontSize: 16,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    buttonClose:{\n       position: 'absolute',\n       top:'0px',\n       left:'-10px',\n    },\n\n    paymentPolicy:{\n          marginTop:'80px'\n    },\n    textPaymentPolicy:{\n       color: '#FFFFFF',\n       opacity: '0.6',\n       fontWeight:'500',\n       fontSize: '12px',\n       lineHeight: '15px',\n       letterSpacing:'0.5px'\n    }\n}));\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst ChargeConfirmationPage = ({ user }) => {\n    const [totalPaid, setTotalPaid] = useState(0);\n    const [interval, setInterval] = useState('');\n    const [intervalText, setIntervalText] = useState('monthly');\n    const [plan, setPlan] = useState('');\n    const classes = useStyles();\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getDetails() {\n            const id = query.get('subscriptionId');\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\n            setTotalPaid(details.val().totalPaid);\n\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\n\n            setIntervalText(details.val().interval);\n\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\n        }\n\n        if (user && user.uid) {\n            getDetails();\n        }\n    }, [user]);\n\n    const onPublishStreamClick = () => {\n        history.push('/create');\n    }\n\n    const onBackToDashboardClick = () => {\n        history.push('/profile');\n    }\n\n    return (\n        <Grid container alignContent='center' className={classes.container}>\n            <Grid item md={6} className={classes.paymentInfoContainer}>\n                <Button className={classes.buttonClose}>\n                    <Closeicon />\n                    </Button>\n                <div className={classes.eImageContainer}>\n                    <ESvg />\n                </div>\n                <p className={classes.subscriptionBought}>\n                    {plan && intervalText &&\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                    }\n                </p>\n                <div className={classes.subTerms}>\n                    <p className={classes.totalPaid}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                    <p className={classes.interval}>\n                        {interval}\n                    </p>\n                </div>\n                <div className={classes.paymentDetails}>\n                    <div>\n                        <p className={classes.subscriptionType}>\n                            {plan}\n                        </p>\n                        <p className={classes.paymentInterval}>\n                            {intervalText &&\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                            }\n                        </p>\n                    </div>\n                    <p className={classes.itemCost}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentUntilTodayContainer}>\n                    <p className={classes.paymentUntilToday}>\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\n                    </p>\n                    <p className={classes.paymentUntilToday}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentPolicy}>\n                    <p className={classes.textPaymentPolicy}>Powered by Stripe | Terms Privacy</p>\n                </div>\n            </Grid>\n            <Grid item md={6} className={classes.thanksCardContainer}>\n                <Card className={classes.thanksCard}>\n                    <div className={classes.cardContentContainer}>\n                        <img src={HeartHands} />\n                        <CardContent>\n                            <p className={classes.thanksTitle}>\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\n                            </p>\n                            <p className={classes.thanksDescription}>\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\n                            </p>\n                        </CardContent>\n                        <Button fullWidth variant='contained'\n                            className={classes.publishButton}\n                            onClick={onPublishStreamClick}>\n                            {t('ChargeConfirmationPage.publishStream')}\n                        </Button>\n                        <Button className={classes.backToDashboardButton}\n                            onClick={onBackToDashboardClick}>\n                            {t('ChargeConfirmationPage.backToDashboard')}\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ChargeConfirmationPage;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["305","306"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, CircularProgress } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\n\nimport { createNewStreamRequest, updateStreamerProfile } from './../../services/database';\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    titleLabel: {\n        marginBottom: 8\n    },\n    datePickerLabel: {\n        marginBottom: theme.spacing(1),\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px',\n        width:'274px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        height: '56px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10',\n            height: '56px',\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games, qoinsDrops }) => {\n    const userLang = navigator.language || navigator.userLanguage;\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [gamesData, setGamesData] = useState([]);\n    const [dropsForStream, setDropsForStream] = useState(null);\n    const [lockSendButton, setLockSendButton] = useState(false);\n    const [dropsError, setDropsError] = useState(null);\n\n    useEffect(() => {\n        let gameList = [];\n\n        if (games.allGames) {\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\n\n            let tempGamesData = [];\n            gameList.forEach((game) => {\n                tempGamesData.push({\n                    id: game.gameKey,\n                    name: game.gameName\n                })\n            });\n\n            setGamesData(tempGamesData);\n        }\n\n        if (dropsForStream === null && qoinsDrops.original > 0) {\n            setDropsForStream(qoinsDrops.original - qoinsDrops.used < 50 ? qoinsDrops.original - qoinsDrops.used : 50);\n        }\n    }, [games.allGames, user, qoinsDrops, dropsForStream]);\n\n    const optionalDataReducer = (state, action) => {\n        // We don´t need this to be a reducer anymore, we should change it later\n        switch (action.target.id) {\n            case 'eventTitle':\n                return ({\n                    ...state,\n                    title: action.target.value\n                });\n            default:\n                break;\n        }\n    }\n\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n    // Minimum valid date is 5 minutes from the current date\n    const minDate = new Date((new Date()).getTime() + 300000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    const setDrops = (drops) => {\n        if (drops >= 0) {\n            if (drops > qoinsDrops.original - qoinsDrops.used) {\n                setDropsError(\n                    <p style={{ fontSize: 12, fontWeight: '400', color: '#FF0000', marginTop: 8 }}>\n                        {t('NewStream.dropsAboveLimitErrorP1')}\n                        <span style={{ color: '#00FFDD', fontSize: 12 }}>\n                            {t('NewStream.dropsAboveLimitErrorP2', { drops: qoinsDrops.original - qoinsDrops.used })}\n                        </span>\n                        {t('NewStream.dropsAboveLimitErrorP3')}\n                    </p>\n                );\n            } else if (drops === 0) {\n                setDropsError(\n                    <p style={{ fontSize: 12, fontWeight: '400', color: '#FF0000', marginTop: 8 }}>\n                        {t('NewStream.setValidAmountOfDropsP1')}\n                        <span style={{ color: '#00FFDD', fontSize: 12 }}>\n                            {t('NewStream.setValidAmountOfDropsP2', { drops: qoinsDrops.original - qoinsDrops.used })}\n                        </span>\n                    </p>\n                );\n            } else {\n                setDropsError(null);\n            }\n\n            setDropsForStream(drops);\n        }\n    }\n\n    const submitEvent = async () => {\n        setLockSendButton(true);\n        if (user.broadcasterType === '') {\n            setLockSendButton(false);\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        // User is not premium and don´t have a Free Trial\n        if (user.premium === undefined && user.freeTrial === undefined) {\n            return setLockSendButton(false);\n        }\n\n        if (selectedDate < minDate) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.beforeXminutes'));\n            return;\n        }\n        if (!selectedGame) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        if (user.currentPeriod) {\n            const { endDate } = user.currentPeriod;\n\n            /**\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\n             */\n            if (selectedDate.getTime() <= endDate) {\n\n                const userCanCreateStream = qoinsDrops.original;\n\n                /**\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n                 * is lower or equal to the user limit per month then we create the event\n                 */\n                if (userCanCreateStream) {\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                    let streamerData = {\n                        displayName: user.displayName,\n                        login: user.login,\n                        photoUrl: user.photoUrl\n                    };\n\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\n                    if (userData && userData.data) {\n                        streamerData = {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url\n                        };\n\n                        await updateStreamerProfile(user.uid, {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url,\n                            broadcasterType: userData.data.broadcaster_type\n                        });\n                    }\n\n                    let titles = {\n                        es: '🪂 Únete y obtén Drops de Qoins',\n                        en: '🪂 Join to get Qoins Drops'\n                    };\n\n                    if (optionalData.title) {\n                        titles = {\n                            es: optionalData.title,\n                            en: optionalData.title\n                        };\n                    }\n\n                    await createNewStreamRequest(\n                        user.uid,\n                        streamerData,\n                        selectedGame,\n                        UTCDate,\n                        UTCTime,\n                        selectedEvent,\n                        selectedDate.getTime(),\n                        titles,\n                        (new Date()).getTime(),\n                        stringDate,\n                        dropsForStream,\n                        () => {\n                            window.analytics.track('Stream requested', {\n                                selectedGame,\n                                selectedDate: selectedDate.getTime(),\n                                uid: user.uid\n                            });\n                            setOpenSuccessDialog(true);\n                        }\n                    );\n                }\n            } else {\n                alert(t('NewStream.alerts.beforePlanExpiration'));\n            }\n        }\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <BackButton onClick={history.goBack} />\n                </Grid>\n                <Grid item sm={8}>\n                    <h1 className={styles.title}>\n                        {t('NewStream.whatAreYouPlaying')}\n                    </h1>\n                    <Grid container spacing={4} style={{width: '800px',marginTop: '2px' }}>\n                        <Grid item sm={5} style={{ width: '274px', maxWidth: '308px', }}>\n                            <InputLabel className={classes.datePickerLabel}>\n                                {t('NewStream.pickACategory')}\n                            </InputLabel>\n                            <ReactSearchAutocomplete\n                                items={gamesData}\n                                autofocus\n                                placeholder={t('NewStream.categoryPickerPlaceholder')}\n                                showItemsOnFocus\n                                maxResults={gamesData.length}\n                                onSelect={(game) => setSelectedGame(game.id)}\n                                onClear={() => setSelectedGame(null)}\n                                styling={{\n                                    zIndex: 999,\n                                    height: '56px',\n                                    width: '274px',\n                                    color: '#FFF',\n                                    hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\n                                    fontSize: '1rem',\n                                    fontWeight: 'bold',\n                                    backgroundColor: '#141833',\n                                    border: 'none',\n                                    borderRadius: '8px',\n                                    placeholderColor: 'rgba(255, 255, 255, 0.5)',\n                                    fontFamily: 'Inter',\n                                    lineColor: 'transparent',\n                                }}\n                                showIcon={false}\n                                formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\n                        </Grid>\n                    </Grid>\n                    <h1 className={styles.title}>\n                        {t('NewStream.when')}\n                    </h1>\n                    <MuiPickersUtilsProvider utils={DayJsUtils}>\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                            <Grid item sm={5} style={{ maxWidth: '304px', }}>\n                                <InputLabel className={classes.datePickerLabel} >\n                                    {t('NewStream.date')}\n                                </InputLabel>\n                                <KeyboardDatePicker\n                                    open={calendarOpen}\n                                    onClick={() => setCalendarOpen(true)}\n                                    onOpen={() => { }}\n                                    onClose={() => setCalendarOpen(false)}\n                                    clearable\n                                    disablePast\n                                    disableToolbar\n                                    autoOk\n                                    value={displayDate}\n                                    placeholder='10-10-2021'\n                                    onChange={handleDateChange}\n                                    defaultValue={new Date()}\n                                    minDate={minDate}\n                                    minDateMessage={t('NewStream.alerts.beforeXminutes')}\n                                    format='DD-MM-YY ddd'\n                                    style={{width:'274px', height:'56px'}}\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <CalendarIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.time')}\n                                </InputLabel>\n                                <KeyboardTimePicker\n                                    open={clockOpen}\n                                    onClick={() => setClockOpen(true)}\n                                    onOpen={() => { }}\n                                    onClose={() => setClockOpen(false)}\n                                    autoOk\n                                    error={selectedDate <= minDate}\n                                    helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.beforeXminutes')}\n                                    value={displayDate}\n                                    placeholder='08:00 AM'\n                                    onChange={handleDateChange}\n                                    style={{width:'274px',height:'56px'}}\n                                    // mask='__:__ _M'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <TimeIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                    <Grid  spacing={4} style={{ marginTop: '2px' }}>\n                        <Grid item sm={5}  style={{display: 'flex'}}>\n                            <Grid >\n                                <h1 className={styles.title}>\n                                    {t('NewStream.streamTitle')}\n                                    <span style={{ fontSize: 16 }}>\n                                        {t('NewStream.optional')}\n                                    </span>\n                                </h1>\n                                <p className={styles.subTitle}>\n                                    {t('NewStream.streamTitleDescription')}\n                                </p>\n                                <Grid container spacing={4} style={{ marginTop:'10px'}}>\n                                    <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px'}}>\n                                        <StreamerTextInput\n                                            labelClassName={classes.titleLabel}\n                                            label={t('NewStream.streamTitle')}\n                                            placeholder={t('NewStream.streamTitlePlaceholder')}\n                                            id='eventTitle'\n                                            fullWidth={true}\n                                            value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                            onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                            <Grid  style={{marginLeft:'30px'}}>\n                                <h1 className={styles.title}>\n                                    {t('NewStream.dropsTitle')}\n                                </h1>\n                                <p className={styles.subTitle}>\n                                    {t('NewStream.dropsDescription')}\n                                </p>\n                                <Grid container spacing={4} style={{ marginTop:'10px'}}>\n                                    <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px'}}>\n                                        <StreamerTextInput\n                                            labelClassName={classes.titleLabel}\n                                            label={t('NewStream.maxLimit')}\n                                            id='eventTitle'\n                                            fullWidth={true}\n                                            value={dropsForStream}\n                                            onChange={(e) => setDrops(Number(e.target.value))}\n                                            type='Number'\n                                        />\n                                        {dropsError}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Button\n                        disabled={lockSendButton || dropsError || !dropsForStream}\n                        className={styles.button}\n                        onClick={submitEvent}>\n                        {lockSendButton ?\n                            <CircularProgress\n                                style={{\n                                    color: '#fff7',\n                                    alignSelf: 'center'\n                                }}\n                                size={25} />\n                            :\n                            t('NewStream.submit')\n                        }\n                    </Button>\n                </Grid>\n            </Grid>\n            <NewStreamSuccessDialog\n                open={openSuccessDialog}\n                onClose={() => history.push('/profile')}\n                mainPage={() => history.push('/profile')}\n            />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["307","308"],"import React, { useState, useEffect } from 'react';\nimport {\n    makeStyles,\n    Grid,\n    TableCell,\n    withStyles,\n    InputLabel,\n    InputAdornment,\n    Button\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next'\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate, cancelStreamRequest, updateStreamTitle } from '../../services/database';\nimport { notifyAboutStreamToFollowersAndParticipants } from '../../services/functions';\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\nimport EventConfirmCancellationDialog from '../QaplaStreamDialogs/EventConfirmCancellationDialog';\nimport SuccessDialog from '../SuccessDialog/SuccessDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: '24px',\n        color: '#FFF'\n    },\n    description: {\n        height: '30px',\n        fontSize: '12px',\n        color: 'rgba(255,255,255,0.60)',\n        lineHeight: '18px',\n        paddingRight: '16px',\n        marginTop: '8px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        marginTop: '32px',\n        backgroundColor: '#3B4BF9',\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\n        borderRadius: '16px',\n        color: '#FFF',\n        padding: '18px 0px',\n        fontSize: '14px',\n        fontWeight: '600',\n        width: '166px',\n        textTransform: 'none',\n        '&:disabled': {\n            opacity: .4,\n            color: '#FFF',\n            padding: '18px 0px',\n            fontSize: '14px',\n            fontWeight: '600',\n            width: '166px',\n            boxShadow: 'none',\n        },\n        '&:hover': {\n            backgroundColor: '#3B4BF9',\n            opacity: .9\n        }\n    },\n    cancelButton: {\n        marginBottom: '32px',\n        backgroundColor: '#FF006B',\n        borderRadius: '16px',\n        color: '#FFF',\n        padding: '18px 0px',\n        fontSize: '14px',\n        fontWeight: '600',\n        width: '166px',\n        textTransform: 'none',\n        '&:disabled': {\n            opacity: .4,\n            color: '#FFF',\n            padding: '18px 0px',\n            fontSize: '14px',\n            fontWeight: '600',\n            width: '166px',\n        },\n        '&:hover': {\n            backgroundColor: '#FF006B',\n            opacity: .9\n        }\n    },\n    containerTextArea: {\n        width: '100%'\n    },\n    textArea: {\n        minHeight: '100px',\n        fontSize: '13px',\n        fontWeight: '700'\n    },\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    participantsColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'center'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginBottom: 16\n    },\n    dateInput: {\n        width: '274px',\n        height: '56px',\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    }\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst SectionHeader = ({ title, description }) => {\n    const classes = useStyles();\n\n    return (\n        <div style={{ marginTop: '48px' }}>\n            <p className={classes.title}>\n                {title}\n            </p>\n            <p className={classes.description}>\n                {description}\n            </p>\n        </div>\n    );\n};\n\nconst EditStreamerEvent = ({ user }) => {\n    const { streamType } = useLocation().state;\n    const { streamId } = useParams();\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\n    const [notificationBody, setNotificationBody] = useState('');\n    const [participantsList, setParticipantsList] = useState({});\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\n    const [openCancelStreamDialog, setOpenCancelStreamDialog] = useState(false);\n    const [openCanceledStreamSuccessfulDialog, setOpenCanceledStreamSuccessfulDialog] = useState(false);\n    const [disableChangesButton, setDisableChangesButton] = useState(true);\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function setStreamData() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\n                if (timeStamp.exists()) {\n                    setSelectedDate(new Date(timeStamp.val()));\n                    setDisplayDate(new Date(timeStamp.val()));\n                    setFirstTimestamp(new Date(timeStamp.val()));\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\n                }\n            }\n        }\n\n        async function setStreamParticipantsList() {\n            const participantsList = await getStreamParticipantsList(streamId);\n            if (participantsList.exists()) {\n                setParticipantsList(participantsList.val());\n            }\n        }\n\n        async function setStreamTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n                setTitle(title.val());\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                if (user.uid) {\n                    const title = await getPastStreamTitle(user.uid, streamId);\n                    setTitle(title.val());\n                }\n            }\n        }\n\n        setStreamData();\n        setStreamParticipantsList();\n        setStreamTitle();\n    }, [streamId, streamType, user]);\n\n    const sendNotification = async () => {\n        await notifyAboutStreamToFollowersAndParticipants(streamId,\n            user.uid,\n            {\n                es: title.es,\n                en: title.en\n            },\n            {\n                es: notificationBody,\n                en: notificationBody\n            },\n            'reminders'\n        );\n\n        setNotificationBody('');\n        alert(t('EditStream.alerts.sent'));\n    }\n\n    const onChangeNotificationBody = (e) => {\n        const body = e.target.value;\n        if (body.length <= 140) {\n            setNotificationBody(body);\n        }\n    }\n\n    const saveDate = async () => {\n        if (selectedDate) {\n            const minValidDate = new Date().getTime() + 300000;\n            if (selectedDate.getTime() >= minValidDate) {\n                const dateRef = new Date(selectedDate);\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\n\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\n\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\n\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\n                let localHour = `${localHours}:${localMinutes}`;\n\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\n\n                return true;\n            } else {\n                alert(t('EditStream.alerts.errorDate'))\n            }\n        } else {\n            alert(t('EditStream.alerts.errorDate'));\n        }\n    }\n\n    const saveChanges = async () => {\n        const dateChanged = !((new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime());\n        let dateUpdated = false;\n        if (dateChanged) {\n            dateUpdated = await saveDate();\n        }\n\n        // disableChangesButton is only false when title has changed\n        if (!disableChangesButton && title.en && title.es) {\n            await updateStreamTitle(streamId, title);\n        }\n\n        if (!disableChangesButton || (dateChanged && dateUpdated)) {\n            alert(t('EditStream.alerts.updated'));\n        }\n    }\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    const cancelStream = async () => {\n        await cancelStreamRequest(user.uid, streamId);\n        setOpenCancelStreamDialog(false);\n        setOpenCanceledStreamSuccessfulDialog(true);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid xs={12}>\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\n                        onClick={history.goBack} />\n                </Grid>\n                <Grid container style={{ maxWidth: '588px' }}>\n                    {streamType === SCHEDULED_EVENT_TYPE &&\n                        <>\n                            <Grid xs={12}>\n                                <SectionHeader\n                                    title={t('EditStream.change')}\n                                    description={t('EditStream.changeDesc')} />\n                                <Grid item sm={12}>\n                                    <Grid container>\n                                        {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\n                                            <></>\n                                            :\n                                            <MuiPickersUtilsProvider utils={DayJsUtils}>\n                                                <Grid container style={{\n                                                    marginTop: '24px'\n                                                }}>\n                                                    <Grid item sm={12} md={6}>\n                                                        <InputLabel className={classes.datePickerLabel}>\n                                                            {t('NewStream.date')}\n                                                        </InputLabel>\n                                                        <KeyboardDatePicker\n                                                            disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                            open={calendarOpen}\n                                                            onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\n                                                            onClose={() => setCalendarOpen(false)}\n                                                            clearable\n                                                            disablePast\n                                                            disableToolbar\n                                                            autoOk\n                                                            value={displayDate}\n                                                            placeholder='10-10-2021'\n                                                            onChange={handleDateChange}\n                                                            minDate={new Date()}\n                                                            format='DD-MM-YY ddd'\n                                                            keyboardIcon={\n                                                                <InputAdornment position='end' >\n                                                                    <CalendarIcon />\n                                                                </InputAdornment>\n                                                            }\n                                                            InputProps={{\n                                                                disableUnderline: true,\n                                                                className: classes.dateInput\n                                                            }}\n                                                            variant={'inline'}\n                                                            PopoverProps={{\n                                                                PaperProps: {\n                                                                    className: classes.popover,\n                                                                }\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                    <Grid item sm={12} md={6}>\n                                                        <InputLabel className={classes.datePickerLabel}>\n                                                            {t('NewStream.time')}\n                                                        </InputLabel>\n                                                        <KeyboardTimePicker\n                                                            open={clockOpen}\n                                                            onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\n                                                            onOpen={() => { }}\n                                                            onClose={() => setClockOpen(false)}\n                                                            disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                            autoOk\n                                                            error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                            helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\n                                                            value={displayDate}\n                                                            placeholder='08:00 AM'\n                                                            onChange={handleDateChange}\n                                                            keyboardIcon={\n                                                                <InputAdornment position='end' >\n                                                                    <TimeIcon />\n                                                                </InputAdornment>\n                                                            }\n                                                            InputProps={{\n                                                                disableUnderline: true,\n                                                                className: classes.dateInput\n                                                            }}\n                                                            variant={'inline'}\n                                                            PopoverProps={{\n                                                                PaperProps: {\n                                                                    className: classes.popover,\n                                                                }\n                                                            }}\n                                                        />\n                                                    </Grid>\n                                                </Grid>\n                                            </MuiPickersUtilsProvider>\n                                        }\n                                        <Button className={classes.button}\n                                            onClick={saveChanges}\n                                            buttonColor={2}\n                                            disabled={disableChangesButton && ((new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime())}>\n                                            {t('EditStream.save')}\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                                <SectionHeader title={t('EditStream.sendMessage')}\n                                    description={t('EditStream.sendMessageDesc')} />\n                                <Grid item md={12} style={{\n                                    marginTop: '32px'\n                                }}>\n                                    <StreamerTextInput placeholder={t('EditStream.limit')}\n                                        multiline\n                                        rows={3}\n                                        fullWidth\n                                        textInputClassName={classes.textArea}\n                                        containerClassName={classes.containerTextArea}\n                                        value={notificationBody}\n                                        onChange={onChangeNotificationBody} />\n                                    <Button className={classes.button}\n                                        disabled={!notificationBody}\n                                        onClick={sendNotification}>\n                                        {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                                    </Button>\n                                </Grid>\n                                <SectionHeader title={t('EditStream.cancelStream')}\n                                    description={t('EditStream.cancelStreamDescription')} />\n                                <Grid item md={12} style={{\n                                    marginTop: '32px'\n                                }}>\n                                    <Button className={classes.cancelButton}\n                                        onClick={() => setOpenCancelStreamDialog(true)}>\n                                        {t('EditStream.cancelStream')}\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </>\n                    }\n                </Grid>\n                <div style={{ width: '32px' }}></div>\n                <Grid container style={{ maxWidth: '274px', flexDirection: 'column' }} alignItems='flex-start'>\n                    <SectionHeader title={t('NewStream.streamTitle')}\n                        description={t('NewStream.streamTitleDescription')} />\n                    <div style={{ marginTop: '24px' }}>\n                        <StreamerTextInput\n                            textInputStyle={{ marginTop: '8px' }}\n                            label={t('NewStream.streamTitle')}\n                            placeholder={t('NewStream.streamTitlePlaceholder')}\n                            id='eventTitle'\n                            fullWidth={true}\n                            value={title.en}\n                            onChange={(e) =>{ setDisableChangesButton(false); setTitle({ en: e.target.value, es: e.target.value }); }}\n                        />\n                    </div>\n                </Grid>\n            </Grid>\n            <EventConfirmCancellationDialog open={openCancelStreamDialog}\n                streamTitle={title.en}\n                streamerName={user.displayName}\n                streamerUid={user.uid}\n                streamId={streamId}\n                onClose={() => setOpenCancelStreamDialog(false)}\n                cancelStream={cancelStream} />\n            <SuccessDialog open={openCanceledStreamSuccessfulDialog}\n                title={t('StreamCard.successfullyCanceledStreamDialogTitle')}\n                buttonText={t('StreamCard.successfullyCanceledStreamDialogButtonText')}\n                onClose={() => { history.push('/profile'); setOpenCanceledStreamSuccessfulDialog(false); }} />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default EditStreamerEvent;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["309","310","311","312"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",["313"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button, Grid } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ShareArrow } from './../../assets/ShareArrow.svg';\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\nimport { ReactComponent as EditIcon } from './../../assets/EditPencil.svg';\nimport { ReactComponent as DeleteIcon } from './../../assets/Delete.svg';\nimport {\n    streamsPlaceholderImages,\n    SCHEDULED_EVENT_TYPE,\n    PAST_STREAMS_EVENT_TYPE,\n    PENDING_APPROVAL_EVENT_TYPE,\n    HOUR_IN_MILISECONDS\n} from '../../utilities/Constants';\nimport {\n    cancelStreamRequest,\n    getStreamTitle,\n    getPastStreamTitle,\n    checkActiveCustomReward,\n    listenToQoinsEnabled,\n    removeQoinsEnabledListener,\n    getStreamLink,\n    sendQoinsDropsAlert\n} from '../../services/database';\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\nimport { auth } from '../../services/firebase';\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\nimport { notifyAboutStreamToFollowersAndParticipants, sendCustomMessage } from '../../services/functions';\nimport { getCurrentLanguage } from '../../utilities/i18n';\nimport EventConfirmCancellationDialog from '../QaplaStreamDialogs/EventConfirmCancellationDialog';\nimport SuccessDialog from '../SuccessDialog/SuccessDialog';\n\nconst useStyles = makeStyles(() => ({\n    eventCard: {\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: '#141833',\n        borderRadius: '1.5rem',\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\n        height: '100%',\n        minWidth: '250px',\n        minHeight: '360px',\n    },\n    relativeContainer: {\n        position: 'relative'\n    },\n    hourContainer: {\n        position: 'absolute',\n        right: '1rem',\n        top: '1rem',\n        background: '#1B1D2159',\n        borderRadius: '.5rem'\n    },\n    hourText: {\n        color: '#FFF',\n        padding: '2px 8px',\n        fontSize: '11px',\n        fontStyle: 'normal',\n        fontWeight: '700',\n        lineHeight: '20px',\n        letterSpacing: '-0.5px',\n        textAlign: 'center'\n\n    },\n    dateContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        position: 'absolute',\n        right: '1rem',\n        bottom: '1rem',\n        padding: '2px 10px',\n        background: '#1B1D21',\n        height: '32px',\n        borderRadius: '10px'\n    },\n    dateText: {\n        color: '#FFF',\n        fontSize: '13px',\n        fontWeight: '700',\n        lineHeight: '20px',\n        marginLeft: '10px'\n    },\n    eventImage: {\n        objectFit: 'cover',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        borderRadius: '24px'\n    },\n    eventCardContent: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '24px 16px',\n        height: '100%'\n    },\n    eventCardTitle: {\n        color: '#FFFFFF',\n        fontSize: '16px',\n        lineHeight: '24px',\n        fontWeight: '500',\n        height: '48px',\n\n    },\n    rowContainer: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    circle: {\n        borderRadius: '100%',\n        height: '.55rem',\n        width: '.55rem',\n        marginRight: '.5rem'\n    },\n    participantsNumber: {\n        fontSize: '12px',\n        textAlign: 'right',\n        lineHeight: '16px'\n    },\n    streamButton: {\n        backgroundColor: '#6C5DD3 !important',\n        color: '#FFF'\n    },\n    buttonsContainer: {\n        marginTop: 'auto'\n    },\n    startButton: {\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: '#00FFDD',\n        color: '#0D1021',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    endButton: {\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: '#3B4BF9',\n        color: '#FFF',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    manageButton: {\n        marginTop: '16px',\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#272D5780',\n            opacity: 0.8\n        }\n    },\n    cardContainer: {\n        padding: '0px 16px !important',\n        maxWidth: '270px !important',\n        marginBottom: '20px !important'\n    },\n    cancelButton: {\n        fontSize: '12px',\n        paddingTop: '12px',\n        paddingBottom: '12px',\n        fontWeight: '600',\n        backgroundColor: 'transparent',\n        color: '#FFF',\n        opacity: 0.6,\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none'\n    }\n}));\n\nconst StreamCard = ({ key, user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image, drops, usedDrops = 0 }) => {\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [stream, setStream] = useState(null);\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\n    const [startingStream, setStartingStream] = useState(false);\n    const [closingStream, setClosingStream] = useState(false);\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\n    const [loadingDots, setLoadingDots] = useState('');\n    const [hideStream, setHideStream] = useState(false);\n    const [shareHover, setShareHover] = useState(false);\n    const [shareCopied, setShareCopied] = useState(false);\n    const [shareGrowAnimationPlay, setShareGrowAnimationPlay] = useState(\"false\");\n    const [shareShrinkAnimationPlay, setShareShrinkAnimationPlay] = useState(\"false\");\n    const [copiedEnterAnimationPlay, setCopiedEnterAnimationPlay] = useState(\"false\");\n    const [copiedExitAnimationPlay, setCopiedExitAnimationPlay] = useState(\"false\");\n    const [playBothEnterAnimation, setPlayBothEnterAnimation] = useState(\"false\");\n    const [playBothExitAnimation, setPlayBothExitAnimation] = useState(\"false\");\n    const [isTouch, setIsTouch] = useState(false);\n    const [streamLink, setStreamLink] = useState('');\n    const [openCancelStreamDialog, setOpenCancelStreamDialog] = useState(false);\n    const [openCanceledStreamSuccessfulDialog, setOpenCanceledStreamSuccessfulDialog] = useState(false);\n    const actualShareHover = useRef(null);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n\n                if (title.exists()) {\n                    setTitle(title.val());\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName, es: games['allGames'][game].gameName });\n                }\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                const title = await getPastStreamTitle(user.uid, streamId);\n                setTitle(title.val());\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName });\n                }\n            }\n        }\n\n        async function getLink() {\n            const link = await getStreamLink(streamId);\n            setStreamLink(link.val());\n        }\n\n        async function checkStreamStatus() {\n            const streamStatus = await checkActiveCustomReward(streamId);\n            if (streamStatus.exists()) {\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                        if (qoinsEnabled.val()) {\n                            setStream({\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\n                                qoinsEnabled: qoinsEnabled.val()\n                            });\n\n                            removeQoinsEnabledListener(streamId);\n                        } else {\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\n                        }\n                    });\n                } else {\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\n                }\n\n                setShowRewardsOptions(true);\n                setHideStream(false);\n            } else {\n                setStream(null);\n            }\n        }\n\n        getLink();\n        getTitle();\n        checkStreamStatus();\n\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\n            const currentTimestamp = (new Date()).getTime();\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\n                    setHideStream(true);\n                } else {\n                    setShowRewardsOptions(true);\n                }\n            }\n        }\n\n        if (startingStream) {\n            setTimeout(() => {\n                if (loadingDots.length > 2) {\n                    setLoadingDots('');\n                } else {\n                    setLoadingDots(loadingDots + '.');\n                }\n            }, 500);\n        } else if (loadingDots !== '') {\n            setLoadingDots('');\n        }\n\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\n\n    const cancelStream = async () => {\n        await cancelStreamRequest(user.uid, streamId);\n        onRemoveStream(streamId);\n        setOpenCancelStreamDialog(false);\n        setOpenCanceledStreamSuccessfulDialog(true);\n    }\n\n    const startStream = async (enableIn) => {\n        try {\n            setStartingStream(true);\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, drops, enableIn);\n\n            if (enableIn) {\n                listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                    if (qoinsEnabled.val()) {\n                        setStream({\n                            ...stream,\n                            qoinsEnabled: qoinsEnabled.val()\n                        });\n\n                        removeQoinsEnabledListener(streamId);\n                    }\n                });\n            } else {\n                sendQoinsDropsAlert(user.uid);\n            }\n\n            setStream(streamData);\n            if (!openStreamDialog) {\n                setOpenStreamStartedDialog(true);\n            }\n            setStartingStream(false);\n\n            try {\n                await notifyAboutStreamToFollowersAndParticipants(streamId,\n                    user.uid,\n                    {\n                        es: title.en,\n                        en: title.es\n                    },\n                    {\n                        en: `${user.displayName}’s is live! Come for your drops 🪂`,\n                        es: `${user.displayName} ya prendió su stream con drops 🪂`\n                    },\n                    'reminders'\n                );\n            } catch (error) {\n                console.log(error);\n            }\n\n            window.analytics.track('Stream started', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n\n            return streamData;\n        } catch (error) {\n            if (error && error.status === 401) {\n                handleExpiredSession();\n            } else {\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\n            }\n        }\n    }\n\n    const closeStream = async (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        try {\n            setClosingStream(true);\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId, drops);\n\n            window.analytics.track('Stream finished', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setOpenRewardsRemovedDialog(true);\n\n            // Close the rest of Dialogs just in case\n            setOpenStreamStartedDialog(false);\n            setOpenQoinsWarningDialog(false);\n            setOpenStreamDialog(false);\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        if (stream.qoinsEnabled) {\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\n            if (dontShowCloseStreamWarning) {\n                closeStream();\n            } else {\n                setOpenEndStreamDialog(true);\n            }\n        } else {\n            setOpenQoinsWarningDialog(true);\n        }\n    }\n\n    /**\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\n     * have streamObject as parameter with a default value of stream state\n     */\n    const enableQoinsReward = async (streamObject = stream) => {\n        try {\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\n\n            window.analytics.track('Qoins enabled', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setStream({ ...streamObject, qoinsEnabled: true });\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\n\n    const closeDialogsAndOpenManageRewardsDialog = () => {\n        setOpenStreamStartedDialog(false);\n        setOpenQoinsWarningDialog(false);\n        setOpenStreamDialog(true);\n    }\n\n    const closeAndRemoveStream = () => {\n        setOpenRewardsRemovedDialog(false);\n        onRemoveStream(streamId);\n    }\n\n    const sendMessage = async (message) => {\n        if (message) {\n            notifyAboutStreamToFollowersAndParticipants(streamId,\n                user.uid,\n                {\n                    es: title.en,\n                    en: title.es\n                },\n                {\n                    es: message,\n                    en: message\n                },\n                'reminders'\n            );\n            setOpenCustomMessageSentDialog(true);\n\n            window.analytics.track('Custom Message sent', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime(),\n                message\n            });\n        }\n    }\n\n    const copiedLink = () => {\n        navigator.clipboard.writeText(streamLink);\n        setTimeout(() => {\n            setShareCopied(false);\n            if (actualShareHover.current && !isTouch) {\n                setCopiedExitAnimationPlay(\"true\");\n            } else {\n                setPlayBothExitAnimation(\"true\");\n            }\n        }, 2.5 * 1000)\n    }\n\n    if (game && !hideStream) {\n        const currentLanguage = getCurrentLanguage();\n        return (\n            <Grid item xl={2} lg={3} md={3} sm={4} xs={10} key={key} className={classes.cardContainer}>\n                <Card className={classes.eventCard} style={style}>\n                    <div className={classes.relativeContainer}>\n                        {streamType === SCHEDULED_EVENT_TYPE &&\n                            <div\n                                onAnimationEnd={() => {\n                                    setShareGrowAnimationPlay(\"false\");\n                                    setCopiedEnterAnimationPlay(\"false\");\n                                    setShareShrinkAnimationPlay(\"false\");\n                                    setCopiedExitAnimationPlay(\"false\");\n                                    setPlayBothEnterAnimation(\"false\");\n                                    setPlayBothExitAnimation(\"false\");\n                                }}\n                                playGrowAnimation={shareGrowAnimationPlay}\n                                playShrinkAnimation={shareShrinkAnimationPlay}\n                                playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                playCopiedExitAnimetion={copiedExitAnimationPlay}\n                                playBothEnterAnimation={playBothEnterAnimation}\n                                playBothExitAnimation={playBothExitAnimation}\n                                className=\"share-container\"\n                                style={{\n                                    position: 'absolute',\n                                    display: 'flex',\n                                    backgroundColor: shareCopied ? '#3B4BF9' : '#1B1D21',\n                                    borderRadius: '5px',\n                                    height: '28px',\n                                    bottom: '18px',\n                                    left: '18px',\n                                    width: shareHover || shareCopied ? '86px' : '28px',\n                                    justifyContent: 'center',\n                                    alignItems: 'center',\n                                }}\n                                onMouseEnter={() => {\n                                    if (isTouch) return;\n                                    setShareHover(true);\n                                    actualShareHover.current = true;\n                                    if (!shareCopied) {\n                                        setShareGrowAnimationPlay(\"true\");\n                                    }\n                                }}\n                                onMouseLeave={() => {\n                                    setShareHover(false);\n                                    actualShareHover.current = false;\n                                    if (shareCopied || isTouch) return;\n                                    setShareShrinkAnimationPlay(\"true\");\n                                }}\n                                onMouseDown={() => {\n                                    if (shareCopied) return;\n                                    setShareCopied(true);\n                                    if (isTouch) {\n                                        setPlayBothEnterAnimation(\"true\");\n                                    } else {\n                                        setCopiedEnterAnimationPlay(\"true\");\n                                    }\n                                    copiedLink();\n                                }}\n                                onMouseUp={() => {\n                                    if (shareCopied) return;\n                                    setShareCopied(false);\n                                }}\n                                onTouchStart={() => {\n                                    setIsTouch(true);\n                                }}\n                                onTouchEnd={() => {\n                                    setIsTouch(true);\n                                    setShareHover(false);\n                                }}\n                            >\n                                <style>{`\n                                    @keyframes widthGrow {\n                                        from {\n                                            width: 28px;\n                                            }\n                                        to {\n                                            width: 86px;\n                                        }\n                                    }\n                                    @keyframes widthShrink {\n                                        from {\n                                            width: 86px;\n                                            }\n                                        to {\n                                            width: 28px;\n                                        }\n                                    }\n                                    @keyframes copiedEnter {\n                                        from {\n                                            background-color: #1B1D21;\n                                            }\n                                        to {\n                                            background-color: #3B4BF9;\n                                        }\n                                    }\n                                    @keyframes copiedExit {\n                                        from {\n                                            background-color: #3B4BF9;\n                                            }\n                                        to {\n                                            background-color: #1B1D21;\n                                        }\n                                    }\n                                    @keyframes bothEnter {\n                                        from {\n                                            background-color: #1B1D21;\n                                            width: 28px;\n                                            }\n                                        to {\n                                            background-color: #3B4BF9;\n                                            width: 86px;\n                                        }\n                                    }\n                                    @keyframes bothExit {\n                                        from {\n                                            background-color: #3B4BF9;\n                                            width: 86px;\n                                            }\n                                        to {\n                                            background-color: #1B1D21;\n                                            width: 28px;\n                                        }\n                                    }\n                                    .share-container[playBothEnterAnimation=\"true\"] {\n                                        animation: bothEnter 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playBothExitAnimation=\"true\"] {\n                                        animation: bothExit 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playGrowAnimation=\"true\"] {\n                                        animation: widthGrow 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playShrinkAnimation=\"true\"] {\n                                        animation: widthShrink 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playCopiedEnterAnimation=\"true\"] {\n                                        animation: copiedEnter 0.5s ease-in-out 1;\n                                    }\n                                    .share-container[playCopiedExitAnimetion=\"true\"] {\n                                        animation: copiedExit 0.5s ease-in-out 1;\n                                    }\n                                `}</style>\n                                <p\n                                    playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                    playCopiedExitAnimation={copiedExitAnimationPlay}\n                                    playBothEnterAnimation={playBothEnterAnimation}\n                                    playBothExitAnimation={playBothExitAnimation}\n                                    style={{\n                                        display: 'flex',\n                                        color: '#fff',\n                                        fontSize: '11px',\n                                        fontWeight: '700',\n                                        lineHeight: '13px',\n                                        letterSpacing: '0px',\n                                        textAlign: 'center',\n                                        width: shareCopied ? '100%' : '0%',\n                                        overflow: 'hidden',\n                                        justifyContent: 'center',\n                                        whiteSpace: 'nowrap',\n                                    }}\n                                    className=\"copied-text\">\n                                    <style>{`\n\n                                        @keyframes copiedTextGrow {\n                                            from {\n                                                width: 0%;\n                                                }\n                                            to {\n                                                width: 100%;\n                                            }\n                                        }\n                                        @keyframes copiedTextShrink {\n                                            from {\n                                                width: 100%;\n                                                }\n                                            to {\n                                                width: 0%;\n                                            }\n                                        }\n\n                                        .copied-text[playCopiedEnterAnimation=\"true\"] {\n                                            animation: copiedTextGrow 0.5s ease-in-out 1;\n                                        }\n                                        .copied-text[playCopiedExitAnimation=\"true\"] {\n                                            animation: copiedTextShrink 0.5s ease-in-out 1;\n                                        }\n                                        .copied-text[playBothEnterAnimation=\"true\"] {\n                                            animation: copiedTextGrow 0.5s ease-in-out 1;\n                                        }\n                                        .copied-text[playBothExitAnimation=\"true\"] {\n                                            animation: copiedTextShrink 0.5s ease-in-out 1;\n                                        }\n                                        `}</style>\n                                    {'🔗 Copiado'}\n                                </p>\n                                <div\n                                    playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                    playCopiedExitAnimation={copiedExitAnimationPlay}\n                                    playBothEnterAnimation={playBothEnterAnimation}\n                                    playBothExitAnimation={playBothExitAnimation}\n                                    style={{\n                                        display: 'flex',\n                                        flex: 1,\n                                        flexDirection: 'row',\n                                        flexWrap: 'nowrap',\n                                        justifyContent: 'center',\n                                        // margin: '0px 15px',\n                                        width: shareCopied ? '0%' : '100%',\n                                    }}\n                                    className=\"share-display-container\"\n                                >\n                                    <style>{`\n                                    @keyframes shareDisplayGrow {\n                                        from {\n                                            width: 0%;\n                                            }\n                                        to {\n                                            width: 100%;\n                                        }\n                                    }\n                                    @keyframes shareDisplayShrink {\n                                        from {\n                                            width: 100%;\n                                            }\n                                        to {\n                                            width: 0%;\n                                        }\n                                    }\n\n                                    .share-display-container[playCopiedEnterAnimation=\"true\"] {\n                                        animation: shareDisplayShrink 0.5s ease-in-out 1;\n                                    }\n                                    .share-display-container[playCopiedExitAnimation=\"true\"] {\n                                        animation: shareDisplayGrow 0.5s ease-in-out 1;\n                                    }\n                                    .share-display-container[playBothEnterAnimation=\"true\"] {\n                                        animation: shareDisplayShrink 0.5s ease-in-out 1;\n                                    }\n                                    .share-display-container[playBothExitAnimation=\"true\"] {\n                                        animation: shareDisplayGrow 0.5s ease-in-out 1;\n                                    }\n                                    `}</style>\n                                    <p\n                                        playGrowAnimation={shareGrowAnimationPlay}\n                                        playShrinkAnimation={shareShrinkAnimationPlay}\n                                        playCopiedEnterAnimation={copiedEnterAnimationPlay}\n                                        playCopiedExitAnimation={copiedExitAnimationPlay}\n                                        style={{\n                                            display: 'flex',\n                                            color: '#fff',\n                                            fontSize: '11px',\n                                            fontWeight: '700',\n                                            lineHeight: '13px',\n                                            letterSpacing: '0px',\n                                            marginRight: shareHover ? '4px' : '0px',\n                                            width: shareHover ? '64%' : '0%',\n                                            overflow: 'hidden',\n                                        }}\n                                        className=\"share-text\">\n                                        <style>{`\n\n                                        @keyframes shareTextGrow {\n                                            from {\n                                                width: 0%;\n                                                margin-right: 0px;\n                                                }\n                                            to {\n                                                width: 64%;\n                                                margin-right: 4px;\n                                            }\n                                        }\n                                        @keyframes shareTextShrink {\n                                            from {\n                                                width: 64%;\n                                                margin-right: 4px;\n                                                }\n                                            to {\n                                                width: 0%;\n                                                margin-right: 0px;\n                                            }\n                                        }\n\n                                        .share-text[playGrowAnimation=\"true\"] {\n                                            animation: shareTextGrow 0.5s ease-in-out 1;\n                                        }\n                                        .share-text[playShrinkAnimation=\"true\"] {\n                                            animation: shareTextShrink 0.5s ease-in-out 1;\n                                        }\n                                        `}</style>\n                                        {'Compartir'}\n                                    </p>\n                                    <ShareArrow\n                                        playGrowAnimation={shareGrowAnimationPlay}\n                                        playShrinkAnimation={shareShrinkAnimationPlay}\n                                        style={shareHover ?\n                                            {\n                                                transform: 'scale(0.8)',\n                                            }\n                                            :\n                                            {\n                                                transform: 'scale(1)'\n                                            }\n                                        } className=\"share-icon\">\n                                        <style>{`\n                                                @keyframes shareIconShrink {\n                                                    from {\n                                                        transform: scale(1);\n                                                        }\n                                                    to {\n                                                        transform: scale(0.8);\n                                                    }\n                                                }\n                                                @keyframes shareIconNormal {\n                                                    from {\n                                                        transform: scale(0.8);\n                                                        }\n                                                    to {\n                                                        transform: scale(1);\n                                                    }\n                                                }\n\n                                                .share-icon[playGrowAnimation=\"true\"] {\n                                                    animation: shareIconShrink 0.5s ease-in-out 1;\n                                                }\n                                                .share-icon[playShrinkAnimation=\"true\"] {\n                                                    animation: shareIconNormal 0.5s ease-in-out 1;\n                                                }\n                                            `}</style>\n                                    </ShareArrow>\n                                </div>\n                            </div>\n                        }\n                        <div className={classes.hourContainer}>\n                            <p className={classes.hourText}>\n                                {hour}\n                            </p>\n                        </div>\n                        <div className={classes.dateContainer}>\n                            <CalendarIcon />\n                            <p className={classes.dateText}>\n                                {date}\n                            </p>\n                        </div>\n                        <img\n                            alt='Game'\n                            src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\n                            width='100%'\n                            height='180'\n                            className={classes.eventImage} />\n                    </div>\n                    <div className={classes.eventCardContent}>\n                        <p className={classes.eventCardTitle}>\n                            {title && title[currentLanguage] ? title[currentLanguage] : ''}\n                        </p>\n                        {(usedDrops && streamType === PAST_STREAMS_EVENT_TYPE) ?\n                            <p style={{ fontSize: '16px', fontWeight: '500', color: '#FFF', marginTop: '13px' }}>\n                                🪂 <span style={{ color: '#00FFDD' }}>{usedDrops} drops</span> {t('StreamCard.used')}\n                            </p>\n                            :\n                            null\n                        }\n                        <div className={classes.buttonsContainer}>\n                            {streamType === SCHEDULED_EVENT_TYPE && !startingStream && !stream &&\n                                <>\n                                <Button size='medium'\n                                    className={classes.cancelButton}\n                                    onClick={() => setOpenCancelStreamDialog(true)}\n                                    startIcon={<DeleteIcon color='rgba(255, 255, 255, 0.6)' />}>\n                                    {t('StreamCard.cancelStreamRequest')}\n                                </Button>\n                                {!showRewardsOptions &&\n                                    <Button size='medium'\n                                        className={classes.manageButton}\n                                        onClick={manageStream}\n                                        startIcon={<EditIcon />}>\n                                        {t('StreamCard.manageStream')}\n                                    </Button>\n                                }\n                                </>\n                            }\n                            <div style={{ height: '11px' }} />\n                            {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\n                                (!startingStream ?\n                                    (stream ?\n                                        (!closingStream && stream.qoinsEnabled ?\n                                            <Button size='medium' className={classes.endButton}\n                                                disabled={closingStream}\n                                                onClick={checkIfCloseStreamDialogMustBeShown}>\n                                                {t('StreamCard.end')}\n                                            </Button>\n                                            :\n                                            <p style={{ color: '#FFF', textAlign: 'center' }}>\n                                                {t('StreamCard.dropsScheduled')}\n                                            </p>\n                                        )\n                                        :\n                                        <Button size='medium' className={classes.startButton}\n                                            startIcon={<TimerIcon />}\n                                            onClick={() => setOpenStreamDialog(true)}>\n                                            {t('StreamCard.enableDrops')}\n                                        </Button>\n                                    )\n                                    :\n                                    <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\n                                        {`${t('StreamCard.creatingRewards')}${loadingDots}`}\n                                    </p>\n                                )\n                            }\n                        </div>\n                    </div>\n                    <EventManagementDialog open={openStreamDialog}\n                        user={user}\n                        sendMessage={(message) => sendMessage(message)}\n                        streamId={streamId}\n                        stream={stream}\n                        streamStarted={startingStream}\n                        closingStream={closingStream}\n                        onClose={() => setOpenStreamDialog(false)}\n                        startStream={startStream}\n                        enableQoins={enableQoinsReward}\n                        closeStream={checkIfCloseStreamDialogMustBeShown}\n                        streamTitle={title && title['en'] ? title['en'] : ''}\n                        date={date}\n                        hour={hour} />\n                    <EventConfirmStartDialog open={openStreamStartedDialog}\n                        onClose={() => setOpenStreamStartedDialog(false)}\n                        manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                    <EventWarningQoinsDialog open={openQoinsWarningDialog}\n                        onClose={() => setOpenQoinsWarningDialog(false)}\n                        manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                    <EventEndStreamConfirmDialog open={openEndStreamDialog}\n                        closingStream={closingStream}\n                        onClose={() => setOpenEndStreamDialog(false)}\n                        closeStream={closeStream} />\n                    <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\n                        onClose={closeAndRemoveStream} />\n                    <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\n                        onClose={() => setOpenCustomMessageSentDialog(false)} />\n                    <EventConfirmCancellationDialog open={openCancelStreamDialog}\n                        streamTitle={title && title['en'] ? title['en'] : ''}\n                        streamerName={user.displayName}\n                        streamerUid={user.uid}\n                        streamId={streamId}\n                        onClose={() => setOpenCancelStreamDialog(false)}\n                        cancelStream={cancelStream} />\n                    <SuccessDialog open={openCanceledStreamSuccessfulDialog}\n                        title={t('StreamCard.successfullyCanceledStreamDialogTitle')}\n                        buttonText={t('StreamCard.successfullyCanceledStreamDialogButtonText')}\n                        onClose={() => setOpenCanceledStreamSuccessfulDialog(false)} />\n                </Card>\n            </Grid>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamCard;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["314"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        color: '#fff6',\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",["315"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["316","317"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport { setStreamerDashboardUserLanguage } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    languageLabel: {\n        color: '#FFF',\n        fontSize: 16,\n        fontWeight: 600\n    }\n}));\n\nconst LanguageSelect = ({ uid }) => {\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\n    const [langData, setLangData] = useState([])\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        let tempLangArr = []\n        getAvailableLanguages().map((languageCode) => (\n            tempLangArr.push({\n                value: languageCode,\n                label: t(`LanguageHandler.languages.${languageCode}`)\n            })\n        ))\n        setLangData(tempLangArr)\n    }, [t])\n\n    const onLanguageChanged = (languageCode) => {\n        if (uid) {\n            setStreamerDashboardUserLanguage(uid, languageCode);\n        }\n        changeLanguage(languageCode);\n        setCurrentLanguageCode(languageCode);\n    }\n\n    return (\n        <div style={{\n            display: 'flex'\n        }}>\n            <TranslateIcon style={{\n                display: 'flex'\n            }} />\n            {/* The style of this select needs to be implemented inline */}\n            <div style={{\n                marginTop: '-10px',\n            }}>\n                <StreamerSelect\n                    style={{ backgroundColor: '#141833' }}\n                    data={langData}\n                    value={currentLanguageCode}\n                    onChange={onLanguageChanged}\n                    overflowY='hidden'\n                    overflowX='hidden'\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LanguageSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx",["318","319","320","321","322","323","324","325","326","327"],"import React, { useState, useEffect } from \"react\";\nimport { Button, CircularProgress, FormControlLabel, makeStyles, Switch, withStyles,Dialog } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from \"@material-ui/core\";\n\nimport iconEdit from \"../../assets/Edit.svg\";\nimport { ReactComponent as  IconCheck} from \"../../assets/TickSquareDark.svg\"\nimport { getCustomReward, updateCustomReward } from \"../../services/twitch\";\nimport { getInteractionsRewardData, setAlertSetting, updateStreamerProfile } from \"../../services/database\";\nimport { refreshUserAccessToken } from \"../../services/functions\";\nimport { auth } from \"../../services/firebase\";\nimport { ReactComponent as ConfirmChange } from './../../assets/ConfirmChange.svg';\nimport StreamerProfileModalDisableInteractions from \"../StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions\";\nimport StreamerProfileImgCoin from '../StreamerProfileImgCoin/StreamerProfileImgCoin';\nimport style from \"./StreamerProfileEditCoin.module.css\";\nimport DialogOnlyQoins from '../DialogOnlyQoins/DiealogOnlyQoins'\n\nconst useStyles = makeStyles((theme) => ({\n    circularProgress: {\n        color: '#0AFFD2',\n        alignSelf: 'center'\n    },\n    dialogContainer: {\n        backdropFilter: \"blur(20px)\",\n        },\n        dialogRoot: {},\n        paper: {\n        backgroundColor: \"#141833\",\n        color: \"#FFF\",\n        overflow: \"visible\",\n        borderRadius: \"35px\",\n        },\n    ButtonRoot: {\n        background:\"linear-gradient(0deg, #3B4BF9, #3B4BF9), #FF006B;\",\n        color:'#FFFFFF',\n        width:\"202px\",\n        height:\"56px\",\n        textTransform: 'none',\n        fontSize:\"14px\",\n        fontWeight:\"600\",\n        borderRadius: \"16px\",\n        boxShadow:\"0px 20px 40px -10px rgba(59, 75, 249, 0.4)\"\n    }\n}));\n\n\nconst GreenSwitch = withStyles({\n\n    switchBase: {\n      color: 'rgb(156, 156, 156)',\n      height:30,\n      width:20,\n      '&$checked': {\n        color: '#2ce9d2',\n      },\n      '&$checked + $track': {\n        backgroundColor: '#2ce9d2',\n        height: '25px',\n        borderRadius: '10px'\n\n      },\n    },\n    thumb: {\n        width: 30,\n        height: 24,\n        boxShadow: 'none',\n  },\n    checked: {},\n    track: {\n        backgroundColor:'rgb(156, 156, 156)',\n        height:'25px',\n        width:70,\n        borderRadius:'15px'\n        },\n  })(Switch);\n\nconst StreamerProfileEditCoin = ({ user }) => {\n    const [ActiveEditTitle, setActiveEditTitle] = useState(false);\n    const [ActiveEditCoins, setActiveEditCoins] = useState(false);\n    const [rewardId, setRewardId] = useState('');\n    const [rewardName, setRewardName] = useState('');\n    const [rewardCost, setRewardCost] = useState('');\n    const [savingChanges, setSavingChanges] = useState(false);\n    const [rewardBackgroundColor, setRewardBackgroundColor] = useState('');\n    const [modal, setModal] = useState(false);\n    const [titleCheckbox, setTitleCheckbox] = useState('');\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\n    const [qoinsReaction, setQoinsReaction] = useState(false);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [confiDialog, setConfirDialog] = useState(false);\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function getRewardData() {\n            try {\n                const rewardData = await getInteractionsRewardData(user.uid);\n                if (rewardData.exists()) {\n                    const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n                    if (userTokensUpdated.data.status === 200) {\n                        const userCredentialsUpdated = userTokensUpdated.data;\n                        updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                        const reward = await getCustomReward(rewardData.val().rewardId, user.id, userCredentialsUpdated.access_token);\n                        if (reward && reward.id) {\n                            setRewardName(reward.title);\n                            setRewardCost(reward.cost);\n                            setRewardBackgroundColor(reward.background_color);\n                            setReactionsEnabled(!reward.is_paused);\n                            setTitleCheckbox(t(!reward.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'));\n                            setRewardId(reward.id);\n                        } else if (reward === 404) {\n                            history.push('/onboarding');\n                        }\n                    }\n                } else {\n                    // history.push('/onboarding');\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        if (user.uid) {\n            getRewardData();\n        }\n    }, [user.uid, user.id, user.refreshToken]);\n\n    const saveData = async (event) => {\n        if (event.key === 'Enter' || event.type === 'click') {\n            setSavingChanges(true);\n            const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n            if (userTokensUpdated.data.status === 200) {\n                const userCredentialsUpdated = userTokensUpdated.data;\n                updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                const rewardUpdated = await updateCustomReward(\n                    user.id,\n                    userCredentialsUpdated.access_token,\n                    rewardId,\n                    {\n                        title: rewardName,\n                        cost: rewardCost\n                    }\n                );\n\n                if (rewardUpdated.status === 200) {\n                    setRewardName(rewardUpdated.title);\n                    setRewardCost(rewardUpdated.cost);\n                    setRewardBackgroundColor(rewardUpdated.background_color);\n                    setActiveEditCoins(false);\n                    setActiveEditTitle(false);\n                } else {\n                    switch (rewardUpdated.status) {\n                        case 404:\n                            // Not found (maybe the reward was removed from Twitch)\n                            break;\n                        case 500:\n                            // Twitch internal server error (could not update because of Twitch)\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                setSavingChanges(false);\n            } else {\n                switch (userTokensUpdated.data.status) {\n                    case 401:\n                        // Invalid refresh token (need to sign in again)\n                        handleExpiredSession();\n                        break;\n                    case 500:\n                        // Twitch internal server error\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n    const handleCloseDialog = () => {\n        setOpenDialog(false)\n        setConfirDialog(false)\n    }\n\n    const handleCheckbox = (e) => {\n        if (!e.target.checked) {\n            const dontShowDialog = localStorage.getItem('dontShowCloseDisableReactionsDialog');\n            if (!dontShowDialog) {\n                setModal(true);\n            } else {\n                toggleReward();\n            }\n        } else {\n            setTitleCheckbox(t('StreamerProfile.StreamerProfileEditCoin.enabled'));\n            toggleReward();\n        }\n    }\n    const handleQoinsReactions = (e) => {\n        if (!e.target.checked) {\n            setQoinsReaction(false)\n        }\n        else {\n            setQoinsReaction(true)\n        }\n    }\n\n    const toggleReward = async () => {\n        setSavingChanges(true);\n        const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n        if (userTokensUpdated.data.status === 200) {\n            const userCredentialsUpdated = userTokensUpdated.data;\n            updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n            const rewardUpdated = await updateCustomReward(\n                user.id,\n                userCredentialsUpdated.access_token,\n                rewardId,\n                {\n                    is_paused: reactionsEnabled\n                }\n            );\n\n            if (rewardUpdated.status === 200) {\n                setAlertSetting(user.uid, 'reactionsEnabled', !rewardUpdated.is_paused);\n                setReactionsEnabled(!rewardUpdated.is_paused);\n                setTitleCheckbox(t(!rewardUpdated.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'))\n            } else {\n                switch (rewardUpdated.status) {\n                    case 404:\n                        // Not found (maybe the reward was removed from Twitch)\n                        break;\n                    case 500:\n                        // Twitch internal server error (could not update because of Twitch)\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            setSavingChanges(false);\n        } else {\n            switch (userTokensUpdated.data.status) {\n                case 401:\n                    // Invalid refresh token (need to sign in again)\n                    handleExpiredSession();\n                    break;\n                case 500:\n                    // Twitch internal server error\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    return (\n        <div className={style.containerItereractions}>\n            <h1 className={style.title}>\n                {t('StreamerProfile.StreamerProfileEditCoin.reactions')}\n            </h1>\n            {rewardId !== '' && !savingChanges ?\n                <>\n                <StreamerProfileImgCoin rewardCost={rewardCost} backgroundColor={rewardBackgroundColor} />\n                <div className={style.contentInput}>\n                    <div className={style.input}>\n                        {ActiveEditTitle ?\n                            <>\n                                <input\n                                    className={style.VisibilityInput}\n                                    type=\"text\"\n                                    maxLength={18}\n                                    autoFocus\n                                    value={rewardName}\n                                    onChange={(event) => setRewardName(event.target.value)}\n                                    onKeyPress={saveData} />\n                                <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                    <ConfirmChange />\n                                </Button>\n                            </>\n                            :\n                            <>\n                                <p className={style.p}>\n                                    {rewardName}\n                                </p>\n                                <Button onClick={() => setActiveEditTitle(!ActiveEditTitle)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                    <img src={iconEdit} alt=\"icons-edit\" />\n                                </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.input}>\n                        {ActiveEditCoins ?\n                            <>\n                                <input\n                                    className={style.VisibilityInput}\n                                    type=\"number\"\n                                    autoFocus\n                                    value={rewardCost}\n                                    onChange={(event) => setRewardCost(event.target.value || 0)}\n                                    onKeyPress={saveData} />\n                                    <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                        <ConfirmChange />\n                                    </Button>\n                            </>\n                            :\n                            <>\n                                <p className={style.p}>\n                                    {rewardCost.toLocaleString()}\n                                </p>\n                                <Button onClick={() => setActiveEditCoins(!ActiveEditCoins)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                    <img src={iconEdit} alt=\"icons-edit\" />\n                                </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.disableInteractions}>\n                        <p className={style.p}>\n                            {t('StreamerProfile.StreamerProfileEditCoin.reactions')} {titleCheckbox}\n                        </p>\n                        <GreenSwitch checked={reactionsEnabled}\n                            onChange={(e) => handleCheckbox(e)} />\n                    </div>\n                    {/* <div className={style.onlyQoinsReaction}>\n                        <p style={{fontSize:'14px', fontWeight:'500', color:'#FFFFFF'}}>Only Qoins</p>\n                        <GreenSwitch />\n                        {!confiDialog ?\n                            <DialogOnlyQoins  open={openDialog} onClose={() => setOpenDialog(false)} setConfirDialog={setConfirDialog}  />\n                            :\n                            <Dialog open={openDialog} onClose={() => setOpenDialog(true)}  classes={{\n                                container: classes.dialogContainer,\n                                root: classes.dialogRoot,\n                                paper: classes.paper}}>\n                                <div style={{ width: '347px', height: '384px', display: 'flex', justifyContent: 'space-evenly', marginTop:'10px', alignItems: 'center', flexDirection: 'column', padding: '20px'}}>\n                                < IconCheck style={{width:'120px', height:'120px', }} src={IconCheck}  alt='icons'/>\n                                <p style={{fontSize:'18px', fontWeight:'600', textAlign: 'center', color:'#FFFFFF', maxWidth:'250px', marginBottom:'30px'}}>You will get only paid reactions on your stream</p>\n                                <Button classes={{\n                                    root: classes.ButtonRoot,\n                                    }} onClick={handleCloseDialog}>Go to Dashoboard</Button>\n                                </div>\n                            </Dialog>\n                        }\n                    </div> */}\n                </div>\n                </>\n            :\n                <div style={{ display: 'flex', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n                    <CircularProgress className={classes.circularProgress} size={25} />\n                </div>\n            }\n            <Modal className={style.modalContainer}\n                open={modal}\n                onClose={() => setModal(false)}>\n                <StreamerProfileModalDisableInteractions closeDialog={() => setModal(false)}\n                    disableReward={toggleReward}\n                    setReactionsEnabled={setReactionsEnabled}\n                    setTitleCheckbox={setTitleCheckbox} />\n            </Modal>\n        </div>\n    );\n};\n\nexport default StreamerProfileEditCoin;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["328","329","330"],"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\n\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\nimport ModalQoinsDrops from '../ModalQoinsDrops/ModalQoinsDrops';\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n        backdropFilter: 'blur(50px)',\n        [theme.breakpoints.down('md')]: {\n            backgroundColor: '#141833',\n        }\n    },\n    dialogRoot: {\n    },\n    paper: {\n        backgroundColor: '#141833',\n        color: '#FFF',\n        overflow: 'visible',\n        borderRadius: '35px',\n        padding: '64px',\n        minWidth: 'min-content',\n        [theme.breakpoints.down('md')]: {\n            minWidth: '100%',\n            minHeight: '100%',\n        }\n    },\n    itemsContainer: {\n        display: 'flex',\n        [theme.breakpoints.down('md')]: {\n            padding: '184px 66px 20px 66px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            flexWrap: 'wrap',\n            gap: '50px 0px'\n        }\n    },\n    closeButtonContainer: {\n        position: 'absolute',\n        top: '24px',\n        right: '24px',\n        [theme.breakpoints.down('md')]: {\n            top: '118px',\n            right: '128px',\n        }\n    },\n    closeButton: {\n        '&:hover': {\n            cursor: 'pointer'\n        }\n    },\n    title: {\n        fontSize: '18px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '32px',\n        letterSpacing: '0px'\n    },\n    subtitle: {\n        color: '#FFFFFF9A',\n        fontSize: '12px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '18px',\n        letterSpacing: '0px',\n    },\n    startButtonRoot: {\n        backgroundColor: '#00FFDD',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    startText: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        borderRadius: '16px',\n        color: '#FFFFFF'\n    },\n    enabledRewardText: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        color: '#00FFDD'\n    },\n    qoinsButtonRoot: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    qoinsButtonRootDisabled: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF !important',\n        textTransform: 'none',\n        opacity: '0.2'\n    },\n    textInputContainer: {\n        height: '100px',\n        backgroundColor: '#202750',\n        borderRadius: '16px',\n        paddingRight: '4px',\n        overflow: 'hidden'\n    },\n    sendContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        [theme.breakpoints.up('md')]: {\n            minWidth: '400px',\n        },\n    },\n    sendButtonRoot: {\n        backgroundColor: '#6C5DD3',\n        width: '165px',\n        height: '56px',\n        borderRadius: '16px',\n        alignSelf: 'flex-end',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.9'\n        },\n        '&:active': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.8'\n        }\n    },\n    eventNameContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        position: 'absolute',\n        right: '30px',\n        bottom: '-40px',\n        gap: '0px 5px',\n        [theme.breakpoints.down('md')]: {\n            top: '98px',\n            left: '128px',\n            bottom: 'auto',\n            width: '60%',\n            // right: 'auto',\n            paddingTop: '30px',\n            backgroundColor: '#141833'\n        },\n        [theme.breakpoints.down('xs')]: {\n            top: '148px',\n            left: '128px',\n            bottom: 'auto',\n            right: 'auto',\n            paddingTop: '30px',\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n        },\n\n        fontSize: '16px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '24px',\n        letterSpacing: '0px',\n    },\n    eventName: {\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\n        backgroundClip: 'text',\n        WebkitBackgroundClip: 'text',\n        WebkitTextFillColor: 'transparent'\n    },\n}));\n\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\n    const classes = useStyles();\n    const [message, setMessage] = useState('');\n    const [dots, setDots] = useState('')\n    const [enablingQoins, setEnablingQoins] = useState(false);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\n            setTimeout(() => {\n                if (dots.length > 2) {\n                    setDots('');\n                } else {\n                    setDots(dots + '.');\n                }\n            }, 500);\n        }\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\n            setDots('');\n        }\n    }, [streamStarted, dots, enablingQoins]);\n\n    const sendNotificationHandler = async () => {\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\n        await sendMessage(message);\n        setMessage('');\n    }\n\n    return (\n        <Dialog onClose={onClose} open={open} classes={{\n            container: classes.dialogContainer,\n            root: classes.dialogRoot,\n            paper: classes.paper\n        }}\n            maxWidth='sm'\n            fullWidth>\n            <DialogContent style={{ padding: '0px' }}>\n                <div className={classes.closeButtonContainer}>\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\n                </div>\n                <div className={classes.itemsContainer}>\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\n                        <ModalQoinsDrops\n                            stream={stream}\n                            streamStarted={streamStarted}\n                            closingStream={closingStream}\n                            startStream={startStream}\n                            enableQoins={enableQoins} />\n                    </div>\n                    <div className={classes.sendContainer}>\n                        <p className={classes.title}>\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\n                        </p>\n                        <p className={classes.subtitle}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\n                        </p>\n                        <div style={{ height: '20px' }} />\n                        <StreamerTextInput\n                            value={message}\n                            textInputStyle={{ paddingTop: '24px' }}\n                            onChange={(e) => setMessage(e.target.value)}\n                            textInputClassName={classes.textInputContainer}\n                            fullWidth\n                            multiline\n                            rows={6}\n                            maxRows={6}\n                            rowsMax={6}\n                        />\n                        <div style={{ height: '12px' }} />\n                        <Button\n                            onClick={sendNotificationHandler}\n                            classes={{\n                                root: classes.sendButtonRoot\n                            }}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogContent>\n            <div className={classes.eventNameContainer}>\n                <p className={classes.eventName}>\n                    {`${streamTitle} `}\n                </p>\n                <p>\n                    {`/ ${date} / ${hour}`}\n                </p>\n            </div>\n\n        </Dialog>\n    )\n}\n\nexport default EventManagementDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["331","332","333"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n        if (initialLabel && value === undefined) {\n            setSelectedLabel(initialLabel);\n        }\n    }, [data, initialLabel, value])\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["334","335"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, Slide, Button, Dialog, DialogContent, IconButton, List, ListItem, ListItemAvatar, Avatar, ListItemText, Box } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as QoinsIcon } from './../../assets/DonatedQoin.svg';\nimport { ReactComponent as BitsIcon } from './../../assets/BitsIcon.svg';\nimport { ReactComponent as DonatedQoinIcon } from './../../assets/DonatedQoin.svg';\nimport { ReactComponent as RepeatIcon } from './../../assets/RepeatIcon.svg';\nimport { getPeriodStreamerPayments, listenForLastStreamerCheers, markDonationAsUnreadToRepeat, removeListenerForLastStreamerCheers } from '../../services/database';\n\nconst useStyles = makeStyles((theme) => ({\n    toggleButton: {\n        borderRadius: 6,\n        textAlign: 'center',\n        marginRight: 8,\n        fontSize: 17,\n        fontStyle: 'normal',\n        fontWeight: 600,\n        paddingLeft: 16,\n        paddingRight: 16,\n        textTransform: 'none',\n        '&:hover': {\n            opacity: '.80',\n            background: '#29326B44 !important'\n        }\n    },\n    scrollPaper: {\n        alignItems: 'flex-start',\n        justifyContent: 'flex-end'\n    },\n    paper: {\n        height: '100vh',\n        background: 'linear-gradient(0deg, #0D1021, #0D1021), #141735',\n        borderRadius: 20,\n        paddingBottom: '5px',\n        padding: '28px 40px',\n        maxWidth: '100%',\n        width: '100%',\n        margin: '21px 17px 0px 0px',\n        [theme.breakpoints.down(\"xs\")]: {\n            width: '100%',\n            margin: '0px',\n            borderRadius: '0px',\n            maxHeight: '100%'\n        },\n        [theme.breakpoints.up(\"sm\")]: {\n            width: '440px'\n        }\n    },\n    dialogRoot: {\n        zIndex: '100 !important',\n        '& .MuiBackdrop-root': {\n            backgroundColor: '#02071E80',\n            backdropFilter: 'blur(5px)',\n            width: '200wh',\n            height: '200vh'\n\n        }\n    },\n    dialogHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        overflow: ''\n    },\n    balanceCurrencyContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: '23px',\n        minWidth: '200px'\n    },\n    balanceCurrencyValue: {\n        display: 'flex',\n        color: '#FFF',\n        fontSize: '48px',\n        lineHeight: '52px',\n        fontWeight: 600,\n        letterSpacing: '-0.86',\n        marginLeft: '12px',\n    },\n    subDataContainer: {\n        marginTop: '30px',\n        color: '#8692FF',\n        fontWeight: '500',\n        fontSize: '14px',\n        lineHeight: '17px',\n        letterSpacing: '0.35px'\n    },\n    periodText: {\n        color: 'rgba(134, 146, 255, 0.65)',\n        fontSize: 14,\n        fontWeight: 600,\n        letterSpacing: .35,\n        marginBottom: 16,\n        cursor: 'pointer'\n    },\n    qoinsDonationPrimaryText: {\n        fontSize: 18,\n        fontWeight: 600,\n        color: '#FFF'\n    },\n    qoinsCheersecondaryText: {\n        fontSize: 14,\n        fontWeight: 500,\n        color: 'rgba(255, 255, 255, .65)'\n    },\n    qoinDonationValueContainer: {\n        display: 'flex',\n        alignSelf: 'flex-start',\n        alignItems: 'center',\n        marginTop: 6\n    },\n    qoinDonationValueText: {\n        color: '#FFF',\n        fontSize: 18,\n        fontWeight: 600,\n        marginRight: 4\n    },\n    list: {\n        display: 'flex',\n        flexDirection: 'column',\n        paddingRight: '20px',\n        marginRight: '-20px',\n        position: 'relative',\n        overflow: 'auto'\n    },\n    periodPicker: {\n        color: '#FFF',\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    repeatButton: {\n        alignSelf: 'center',\n        fontSize: 11,\n        fontWeight: '700',\n        color: '#FFF',\n        borderRadius: 5,\n        backgroundColor: '#22272F',\n        marginLeft: 8,\n        paddingTop: '2px',\n        paddingBottom: '2px',\n        paddingLeft: '11px',\n        paddingRight: '11px',\n        '&:hover': {\n            backgroundColor: '#22272F',\n            opacity: '.9'\n        }\n    }\n}));\n\nconst DialoogTransaction = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction='left' ref={ref} {...props} />;\n});\n\nconst ToggleButton = ({ currentValue, value, onChange, label }) => {\n    const classes = useStyles();\n    const active = currentValue === value;\n\n    return (\n        <Button\n            className={classes.toggleButton}\n            style={{ background: active ? '#29326B' : 'rgba(41, 50, 107, 0)', color: active ? '#FFF' : 'rgba(255, 255, 255, .6)' }}\n            onClick={() => onChange(value)}>\n            {label || value}\n        </Button>\n    );\n};\n\nconst RecordsHeader = ({ value, Icon, showPeriod, onPeriodChange }) => {\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [openMonthPicker, setOpenMonthPicker] = useState(false);\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const monthsArray = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date.$d);\n        setOpenMonthPicker(false);\n        if (onPeriodChange) {\n            onPeriodChange(date.$d);\n        }\n    }\n\n    return (\n        <>\n            <div style={{ display: 'flex', flexDirection: 'column', minWidth: '200px' }}>\n                <div className={classes.balanceCurrencyContainer}>\n                    <Icon />\n                    <p className={classes.balanceCurrencyValue}>\n                        {parseInt(value || 0).toLocaleString()}\n                    </p>\n                </div>\n            </div>\n\n            {showPeriod &&\n                <MuiPickersUtilsProvider utils={DayJsUtils}>\n                    {/**\n                     * Box hides the TextField of the picker but allows the user to open\n                     * the dialog to select the period\n                     */}\n                    <Box component='div' visibility='hidden'>\n                        <DatePicker format='MM'\n                            disableFuture\n                            disableToolbar\n                            variant='inline'\n                            views={['month']}\n                            open={openMonthPicker}\n                            openTo='month'\n                            value={selectedDate}\n                            onChange={handleDateChange}\n                            PopoverProps={{\n                                PaperProps: {\n                                    className: classes.popover\n                                }\n                            }} />\n                    </Box>\n                    <div className={classes.periodText} onClick={() => setOpenMonthPicker(true)}>\n                        {t('CheersBitsRecordDialog.period')} {t(`months.${monthsArray[selectedDate.getMonth()]}`)} {selectedDate.getFullYear()}\n                    </div>\n                </MuiPickersUtilsProvider>\n            }\n        </>\n    );\n}\n\nconst QoinsCheers = ({ uid, qoinsBalance, cheers, messages, setPendingMessages }) => {\n    const classes = useStyles();\n    const [balance, setBalance] = useState(qoinsBalance);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (setPendingMessages !== undefined) {\n            setPendingMessages(0);\n        }\n    }, [setPendingMessages]);\n\n    const showDate = () => {\n        const today = new Date();\n        /**\n         * Not all the browsers supports the parameter \"locales\" from the function toLocaleDateString\n         * https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n         */\n        try {\n            return today.toLocaleDateString('es-MX');\n        } catch (error) {\n            return today.toLocaleDateString();\n        }\n    }\n\n    const repeatSelectedCheer = async (cheerId) => {\n        await markDonationAsUnreadToRepeat(uid, cheerId);\n        window.analytics.track('Cheer repeated');\n    }\n\n    return (\n        <>\n            {!messages &&\n                <>\n                    <RecordsHeader value={balance} Icon={QoinsIcon} />\n                    <div className={classes.subDataContainer}>\n                        <div style={{ display: 'flex' }}>\n                            <p style={{ display: 'flex', width: '62px' }}>\n                                Qoins\n                            </p>\n                            <p style={{ display: 'flex', }}> {qoinsBalance.toLocaleString()} </p>\n                        </div>\n                        <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\n                            {t('CheersBitsRecordDialog.cheersReceivedAt', { date: showDate() })}\n                        </p>\n                    </div>\n                </>\n            }\n            <List className={classes.list} style={{ maxHeight: messages ? '82vh' : '60vh', marginTop: '20px', paddingTop: '0px' }}>\n                {Object.keys(cheers).reverse().map((cheerId) => (\n                    <>\n                        {/* uid validation to not show Qoins Drops activation alerts here */}\n                        {(((messages && cheers[cheerId].message) || (!messages && cheers[cheerId].amountQoins > 0))) && (cheers[cheerId].uid) &&\n                            <ListItem disableGutters style={{ display: 'flex', flexDirection: 'column', padding: '0px', marginBottom: '40px' }}>\n                                <div style={{ display: 'flex', width: '100%' }}>\n                                    <ListItemAvatar style={{ alignSelf: 'center' }} >\n                                        <Avatar alt={cheers[cheerId].twitchUserName}\n                                            src={cheers[cheerId].photoURL} />\n                                    </ListItemAvatar>\n                                    <ListItemText primary={\n                                        <div style={{ display: 'flex', alignContent: 'center' }}>\n                                            <p>{cheers[cheerId].twitchUserName}</p>\n                                            {cheers[cheerId].read &&\n                                                <Button onClick={() => repeatSelectedCheer(cheerId)}\n                                                    className={classes.repeatButton}\n                                                    endIcon={<RepeatIcon />}\n                                                    variant='contained'>\n                                                    {t('CheersBitsRecordDialog.repeatCheer')}\n                                                </Button>\n                                            }\n                                            {!cheers[cheerId].read && <div style={{ backgroundColor: '#8DEBFF', alignSelf: 'center', marginLeft: '8px', width: '8px', height: '8px', borderRadius: '8px' }}>\n                                            </div>}\n                                        </div>\n                                    }\n                                        secondary={formatDate(cheers[cheerId].timestamp)}\n                                        classes={{\n                                            primary: classes.qoinsDonationPrimaryText,\n                                            secondary: classes.qoinsCheersecondaryText\n                                        }} />\n\n                                    <div className={classes.qoinDonationValueContainer}>\n                                        <div className={classes.qoinDonationValueText}>\n                                            {cheers[cheerId].amountQoins}\n                                        </div>\n                                        <DonatedQoinIcon style={{ height: 35, width: 35 }} />\n                                    </div>\n                                </div>\n\n                                {messages && cheers[cheerId].message &&\n                                    <div style={{ background: '#3B4BF9', borderRadius: '2px 20px 20px 20px', padding: '16px 20px 16px 20px', alignSelf: 'flex-start' }}>\n                                        <p style={{ color: '#FFF', fontSize: 14, fontWeight: 500, letterSpacing: .35 }}>\n                                            {cheers[cheerId].message}\n                                        </p>\n                                    </div>\n                                }\n                            </ListItem>\n                        }\n                    </>\n                ))}\n            </List>\n        </>\n    );\n}\n\nconst PaidBits = ({ bitsBalance, valueOfQoinsForStreamer, isPaidUser, payments, onPeriodChange }) => {\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    return (\n        <>\n            <RecordsHeader value={bitsBalance}\n                Icon={BitsIcon}\n                showPeriod\n                onPeriodChange={onPeriodChange} />\n            <div className={classes.subDataContainer}>\n                <p style={{ display: 'flex' }}>\n                    200 Qoins = {valueOfQoinsForStreamer} Bits\n                </p>\n                <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\n                    {`${t('CheersBitsRecordDialog.bitsToPay')} ${isPaidUser ? t('CheersBitsRecordDialog.withSubscription') : ''}`}\n                </p>\n                <p style={{ display: 'flex', color: '#FFFFFFA6', marginTop: '45px', lineHeight: '17px', fontWeight: '400' }}>\n                    {t('CheersBitsRecordDialog.deliveredCheers')}\n                </p>\n            </div>\n\n            <List className={classes.list} style={{ maxHeight: '54vh', marginTop: '20px', paddingTop: '0px' }}>\n                {Object.keys(payments).reverse().map((paymentId) => (\n                    <ListItem disableGutters>\n                        <ListItemText primary={payments[paymentId].currency}\n                            secondary={formatDate(payments[paymentId].timestamp)}\n                            classes={{\n                                primary: classes.qoinsDonationPrimaryText,\n                                secondary: classes.qoinsCheersecondaryText\n                            }} />\n                        <div className={classes.qoinDonationValueContainer}>\n                            <div className={classes.qoinDonationValueText}>\n                                {payments[paymentId].amount}\n                            </div>\n                        </div>\n                    </ListItem>\n                ))}\n            </List>\n        </>\n    );\n}\n\nconst CheersBitsRecordDialog = ({ user, cheersQoins, qlanQoins, estimatedBits, valueOfQoinsForStreamer, open, onClose, pressed, setPendingMessages }) => {\n    const [value, setValue] = useState('Qoins');\n    const [qoinsCheers, setQoinsCheers] = useState({});\n    const [paymentsHistory, setPaymentsHistory] = useState({});\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function loadDefaultPayments() {\n            const date = new Date();\n            date.setDate(1);\n            date.setHours(0, 0, 0, 0);\n            const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\n            const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\n            setPaymentsHistory(payments.val() || {});\n        }\n\n        if (user && user.uid) {\n            listenForLastStreamerCheers(user.uid, 20, (cheers) => {\n                if (cheers.exists()) {\n                    setQoinsCheers(cheers.val());\n                    let seekUnread = Object.values(cheers.val());\n                    let unreadCount = 0;\n                    seekUnread.forEach(e => {\n                        if (!e.read && e.message) {\n                            unreadCount++\n                        }\n                    });\n                    setPendingMessages(unreadCount)\n                }\n            });\n            loadDefaultPayments();\n        }\n\n\n        return () => {\n            if (user && user.uid) {\n                removeListenerForLastStreamerCheers(user.uid);\n            }\n        };\n    }, [user]);\n\n    const loadPaymentsByTimestamp = async (timestamp) => {\n        const date = new Date(timestamp);\n        date.setDate(1);\n        date.setHours(0, 0, 0, 0);\n        const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\n        const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\n        setPaymentsHistory(payments.val() || {});\n    }\n\n    return (\n        <Dialog open={open}\n            onClose={onClose}\n            scroll='paper'\n            TransitionComponent={DialoogTransaction}\n            classes={{\n                scrollPaper: classes.scrollPaper,\n                paper: classes.paper,\n                root: classes.dialogRoot\n            }}\n            TransitionProps={{\n                onEnter: () => {\n                    setValue(pressed)\n                }\n            }}>\n            <DialogContent style={{ padding: '0px', overflow: 'visible' }}>\n                <div className={classes.dialogHeaderContainer}>\n                    <div style={{ marginRight: 96 }}>\n                        <ToggleButton currentValue={value}\n                            value='Qoins'\n                            onChange={setValue} />\n                        <ToggleButton currentValue={value}\n                            value='Bits'\n                            onChange={setValue} />\n                        <ToggleButton currentValue={value}\n                            value='Messages'\n                            label={t('CheersBitsRecordDialog.messages')}\n                            onChange={setValue} />\n                    </div>\n                    <IconButton onClick={onClose} style={{ zIndex: '10', alignSelf: 'flex-start', width: '40px', height: '40px', padding: '0px', marginTop: '-4px', marginRight: '-16px' }} >\n                        <CloseIcon style={{ width: '40px', height: '40px' }} />\n                    </IconButton>\n                </div>\n                {value === 'Qoins' &&\n                    <QoinsCheers uid={user.uid}\n                        qoinsBalance={cheersQoins}\n                        cheers={qoinsCheers} />\n                }\n                {value === 'Bits' &&\n                    <PaidBits bitsBalance={estimatedBits}\n                        valueOfQoinsForStreamer={valueOfQoinsForStreamer}\n                        isPaidUser={user.premium || user.freeTrial}\n                        payments={paymentsHistory}\n                        onPeriodChange={loadPaymentsByTimestamp} />\n                }\n                {value === 'Messages' &&\n                    <QoinsCheers uid={user.uid}\n                        qoinsBalance={cheersQoins}\n                        messages={true}\n                        cheers={qoinsCheers}\n                        setPendingMessages={setPendingMessages}\n                    />\n                }\n            </DialogContent>\n        </Dialog>\n    );\n}\n\nfunction formatDate(timestamp) {\n    const paymentDate = new Date(timestamp);\n\n    const date = paymentDate.getDate() >= 10 ? paymentDate.getDate() : `0${paymentDate.getDate()}`;\n    const month = (paymentDate.getMonth() + 1) >= 10 ? (paymentDate.getMonth() + 1) : `0${(paymentDate.getMonth() + 1)}`;\n\n    return `${date}/${month}/${paymentDate.getFullYear().toString().substring(2)}`;\n}\n\nexport default CheersBitsRecordDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],["336","337"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["338","339","340","341","342","343","344","345","346","347","348"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["349"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx",["350"],"import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Dialog, makeStyles } from \"@material-ui/core\";\n\nimport style from \"./CasthQutDialog.module.css\";\nimport { ReactComponent as BitsIcon } from \"./../../assets/BitsIcon.svg\";\nimport { notifyCashOutToQaplaAdmin } from \"../../services/discord\";\nimport { saveStreamerCashOutRequest } from \"../../services/database\";\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n    backdropFilter: \"blur(20px)\",\n    },\n    dialogRoot: {},\n    paper: {\n    backgroundColor: \"#141833\",\n    color: \"#FFF\",\n    overflow: \"visible\",\n    borderRadius: \"35px\",\n    },\n}));\n\nconst CasthQutDialog = ({ user, setOpen, setOpenConfirm, setConfirmCashOut, amountBits, open, onClose }) => {\n    const [bits, setBits] = useState(0);\n    const [disableButton, setDisableButton] = useState(false);\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (amountBits > 0 && !bits) {\n        setBits(amountBits);\n        }\n    }, [amountBits]);\n\n  const confirmCashOut = async () => {\n        const qoinsCashOut = amountBits / 10 * 200;\n\n        setDisableButton(true);\n        await saveStreamerCashOutRequest(user.uid, qoinsCashOut, amountBits);\n        await notifyCashOutToQaplaAdmin(user.uid, user.displayName, qoinsCashOut, amountBits);\n        setOpenConfirm(true);\n        setConfirmCashOut(true);\n        setDisableButton(false);\n  }\n\n  return (\n    <Dialog\n          onClose={onClose}\n          open={open}\n          classes={{\n          container: classes.dialogContainer,\n          root: classes.dialogRoot,\n          paper: classes.paper,\n    }}>\n        <div className={style.container_Dialog}>\n            <div className={style.container}>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <BitsIcon style={{ width: \"35px\", height: \"35px\" }} />\n                <h1>\n                {bits.toLocaleString()}\n                </h1>\n            </div>\n            <p className={style.calculated_Bit}>200 Qoins = 10 Bits</p>\n            <p className={style.text}>\n                {t('StreamerProfile.BarProgressBit.confirmCashOut')}\n            </p>\n            <button disabled={disableButton} onClick={confirmCashOut} className={style.button_cash}>\n                {t('StreamerProfile.BarProgressBit.cashOut')}\n            </button>\n            <button onClick={() => setOpen(false)} className={style.button_cancel}>\n                {t('StreamerProfile.BarProgressBit.cancel')}\n            </button>\n            </div>\n        </div>\n    </Dialog>\n  );\n};\n\nexport default CasthQutDialog;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["351","352","353"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Button,\n    Hidden\n} from '@material-ui/core';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as QaplaGaming } from './../../assets/QaplaGamingLandingPage.svg';\nimport styles from './StreamersSignin.module.css';\nimport SignInImage from './../../assets/SignIn.png';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\nimport { getUserToken, subscribeStreamerToTwitchWebhook, subscribeStreamerToMailerLiteGroup } from '../../services/functions';\nimport { createStreamerProfile, getInteractionsRewardData, getNumberOfVisits, getStreamerDeepLink, setVisitsCounter, updateStreamerProfile, userHasPublicProfile } from '../../services/database';\nimport { webhookStreamOffline, webhookStreamOnline } from '../../utilities/Constants';\nimport { getTwitchUserData } from '../../services/twitch';\n\nvar utc = require('dayjs/plugin/utc');\ndayjs.extend(utc);\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst StreamersSignin = ({ user, title }) => {\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\n    const [openTermsAndConditionsDialog, setOpenTermsAndConditionsDialog] = useState(false);\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function checkIfUsersIsSigningIn() {\n            const twitchClientCode = query.get('code');\n\n            if (!isLoadingAuth && !user && twitchClientCode) {\n                setIsLoadingAuth(true);\n                const tokenData = await getUserToken(twitchClientCode);\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\n\n                    if (user.userData.isNewUser) {\n                        try {\n                            await subscribeStreamerToMailerLiteGroup(user.userData.email, user.userData.displayName);\n                        } catch (error) {\n                            console.error(error);\n                        }\n\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOnline.type, webhookStreamOnline.callback);\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOffline.type, webhookStreamOffline.callback);\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\n                    }\n\n                    try {\n                        await updateStreamerProfile(user.firebaseAuthUser.user.uid, {\n                            twitchAccessToken: tokenData.data.access_token,\n                            refreshToken: tokenData.data.refresh_token,\n                            displayName: user.userData.displayName,\n                            photoUrl: user.userData.photoUrl,\n                            broadcasterType: user.userData.broadcasterType\n                        });\n                    } catch (error) {\n                        console.log(error);\n                    }\n                } else {\n                    alert(t('StreamersSignin.alerts.errorSignIn'));\n                }\n            }\n        }\n        async function redirectUser(uid) {\n            const interactionsRewardData = await getInteractionsRewardData(uid);\n            if (interactionsRewardData.exists()) {\n                const userHasProfile = await userHasPublicProfile(uid);\n                const userHasLink = await getStreamerDeepLink(uid);\n\n                /**\n                 * This flag ensures that the next time the user enters after creating their interactions reward they will be redirected\n                 * to create their profile\n                 */\n                const userHasBeenRedirectedToCreateProfile = localStorage.getItem('userHasBeenRedirectedToCreateProfile');\n\n                // We use this to know if the user must be redirected again to create a profile\n                const numberOfTimesUserEnterDashboard = await getNumberOfVisits(uid);\n                await setVisitsCounter(uid, numberOfTimesUserEnterDashboard.val() < 2 ? numberOfTimesUserEnterDashboard.val() + 1 : 0);\n\n                if (userHasBeenRedirectedToCreateProfile && numberOfTimesUserEnterDashboard.val() < 2) {\n                    history.push('/profile');\n                } else {\n                    if ((userHasProfile && userHasLink.exists()) || numberOfTimesUserEnterDashboard.val() < 2) {\n                        history.push('/profile');\n                    } else {\n                        history.push('/editProfile');\n                        localStorage.setItem('userHasBeenRedirectedToCreateProfile', 'true');\n                    }\n                }\n            } else {\n                history.push('/profile');\n            }\n        }\n\n        checkIfUsersIsSigningIn();\n\n        if (user) {\n            redirectUser(user.uid);\n        }\n    }, [user, history, isLoadingAuth]);\n\n    const signIn = () => {\n        setIsLoadingAuth(true);\n        signInWithTwitch();\n        setIsLoadingAuth(false);\n    }\n\n    const closeTermsAndConditionsModal = () => setOpenTermsAndConditionsDialog(false);\n    if (user === undefined) {\n        return (\n            <StreamerDashboardContainer>\n                <Grid item md='1' />\n                <Grid item md='6' className={styles.mainContainer}>\n                    <QaplaGaming style={{ marginTop: '100px', marginBottom: '80px', transform: 'scale(0.9)' }} />\n                    <p className={styles.getStarted}>\n                        {title}\n                    </p>\n                    <div className={styles.formContainer}>\n                        <Button variant='contained'\n                            className={styles.continueButton}\n                            disabled={isLoadingAuth}\n                            startIcon={<TwitchIcon />}\n                            onClick={signIn}>\n                            {!isLoadingAuth ?\n                                t('StreamersSignin.signIn')\n                                :\n                                t('StreamersSignin.loading')\n                            }\n                        </Button>\n                        <p style={{ marginTop: '38px', color: '#FFF', fontSize: '.8rem' }}>\n                            {t('StreamersSignin.termsAndConditionsP1')}\n                            <a style={{ cursor: 'pointer', color: '#3B4BF9' }} href={t('Onboarding.termsOfUseUrl')} target='_blank' rel=\"noreferrer\">\n                                {t('StreamersSignin.termsAndConditionsP2')}\n                            </a>\n                        </p>\n                    </div>\n                    <Hidden smDown>\n                        <div className={styles.bottomImage} >\n                            <img src={SignInImage} alt='Sign In' />\n                        </div>\n                    </Hidden>\n                </Grid>\n                <Grid item md='1' />\n            </StreamerDashboardContainer>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamersSignin;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["354","355","356","357"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(6),\n        paddingRight: theme.spacing(6),\n        paddingTop: theme.spacing(6),\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CardsPayments/CardsPayments.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GridSelector/GridSelector.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/ChatbotCommandSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmCancellationDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/SuccessDialog/SuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/DialogOnlyQoins/DiealogOnlyQoins.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ErrorBoundary/ErrorBoundary.jsx",["358"],"import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    };\n\n    static getDerivedStateFromError(error) {\n        return { error: true };\n    }\n\n      componentDidCatch(error, errorInfo) {\n        this.props.onFail(error, errorInfo);\n    }\n\n\n    render() {\n        if (this.state.error) {\n            return null;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QlanProgressBar.jsx",[],{"ruleId":"359","replacedBy":"360"},{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","severity":1,"message":"364","line":74,"column":11,"nodeType":"365","messageId":"366","endLine":74,"endColumn":18},{"ruleId":"367","severity":1,"message":"368","line":201,"column":8,"nodeType":"369","endLine":201,"endColumn":14,"suggestions":"370"},{"ruleId":"371","severity":1,"message":"372","line":263,"column":25,"nodeType":"373","endLine":263,"endColumn":49},{"ruleId":"363","severity":1,"message":"374","line":126,"column":27,"nodeType":"365","messageId":"366","endLine":126,"endColumn":43},{"ruleId":"363","severity":1,"message":"375","line":127,"column":24,"nodeType":"365","messageId":"366","endLine":127,"endColumn":37},{"ruleId":"363","severity":1,"message":"376","line":199,"column":7,"nodeType":"365","messageId":"366","endLine":199,"endColumn":22},{"ruleId":"363","severity":1,"message":"377","line":232,"column":12,"nodeType":"365","messageId":"366","endLine":232,"endColumn":28},{"ruleId":"363","severity":1,"message":"378","line":232,"column":12,"nodeType":"365","messageId":"366","endLine":232,"endColumn":29},{"ruleId":"363","severity":1,"message":"379","line":241,"column":12,"nodeType":"365","messageId":"366","endLine":241,"endColumn":21},{"ruleId":"363","severity":1,"message":"380","line":241,"column":23,"nodeType":"365","messageId":"366","endLine":241,"endColumn":35},{"ruleId":"367","severity":1,"message":"381","line":299,"column":8,"nodeType":"369","endLine":299,"endColumn":14,"suggestions":"382"},{"ruleId":"363","severity":1,"message":"383","line":36,"column":55,"nodeType":"365","messageId":"366","endLine":36,"endColumn":72},{"ruleId":"384","severity":1,"message":"385","line":27,"column":1,"nodeType":"386","endLine":27,"endColumn":51},{"ruleId":"363","severity":1,"message":"387","line":68,"column":7,"nodeType":"365","messageId":"366","endLine":68,"endColumn":16},{"ruleId":"363","severity":1,"message":"388","line":7,"column":28,"nodeType":"365","messageId":"366","endLine":7,"endColumn":37},{"ruleId":"363","severity":1,"message":"364","line":22,"column":11,"nodeType":"365","messageId":"366","endLine":22,"endColumn":18},{"ruleId":"363","severity":1,"message":"389","line":2,"column":36,"nodeType":"365","messageId":"366","endLine":2,"endColumn":52},{"ruleId":"363","severity":1,"message":"390","line":2,"column":85,"nodeType":"365","messageId":"366","endLine":2,"endColumn":91},{"ruleId":"363","severity":1,"message":"391","line":8,"column":29,"nodeType":"365","messageId":"366","endLine":8,"endColumn":38},{"ruleId":"363","severity":1,"message":"392","line":17,"column":8,"nodeType":"365","messageId":"366","endLine":17,"endColumn":23},{"ruleId":"363","severity":1,"message":"393","line":89,"column":12,"nodeType":"365","messageId":"366","endLine":89,"endColumn":25},{"ruleId":"363","severity":1,"message":"394","line":90,"column":12,"nodeType":"365","messageId":"366","endLine":90,"endColumn":22},{"ruleId":"363","severity":1,"message":"395","line":91,"column":12,"nodeType":"365","messageId":"366","endLine":91,"endColumn":23},{"ruleId":"367","severity":1,"message":"396","line":128,"column":8,"nodeType":"369","endLine":128,"endColumn":46,"suggestions":"397"},{"ruleId":"363","severity":1,"message":"398","line":189,"column":11,"nodeType":"365","messageId":"366","endLine":189,"endColumn":28},{"ruleId":"363","severity":1,"message":"399","line":207,"column":11,"nodeType":"365","messageId":"366","endLine":207,"endColumn":31},{"ruleId":"363","severity":1,"message":"400","line":7,"column":28,"nodeType":"365","messageId":"366","endLine":7,"endColumn":38},{"ruleId":"363","severity":1,"message":"401","line":229,"column":27,"nodeType":"365","messageId":"366","endLine":229,"endColumn":43},{"ruleId":"367","severity":1,"message":"402","line":245,"column":8,"nodeType":"369","endLine":245,"endColumn":44,"suggestions":"403"},{"ruleId":"363","severity":1,"message":"404","line":4,"column":5,"nodeType":"365","messageId":"366","endLine":4,"endColumn":14},{"ruleId":"363","severity":1,"message":"405","line":5,"column":5,"nodeType":"365","messageId":"366","endLine":5,"endColumn":17},{"ruleId":"363","severity":1,"message":"406","line":6,"column":5,"nodeType":"365","messageId":"366","endLine":6,"endColumn":15},{"ruleId":"363","severity":1,"message":"407","line":273,"column":21,"nodeType":"365","messageId":"366","endLine":273,"endColumn":31},{"ruleId":"367","severity":1,"message":"408","line":457,"column":8,"nodeType":"369","endLine":457,"endColumn":14,"suggestions":"409"},{"ruleId":"359","replacedBy":"410"},{"ruleId":"361","replacedBy":"411"},{"ruleId":"363","severity":1,"message":"412","line":11,"column":8,"nodeType":"365","messageId":"366","endLine":11,"endColumn":14},{"ruleId":"363","severity":1,"message":"413","line":13,"column":526,"nodeType":"365","messageId":"366","endLine":13,"endColumn":558},{"ruleId":"367","severity":1,"message":"414","line":516,"column":8,"nodeType":"369","endLine":516,"endColumn":118,"suggestions":"415"},{"ruleId":"367","severity":1,"message":"416","line":717,"column":8,"nodeType":"369","endLine":717,"endColumn":42,"suggestions":"417"},{"ruleId":"371","severity":1,"message":"372","line":811,"column":17,"nodeType":"373","endLine":823,"endColumn":26},{"ruleId":"367","severity":1,"message":"418","line":950,"column":8,"nodeType":"369","endLine":950,"endColumn":10,"suggestions":"419"},{"ruleId":"367","severity":1,"message":"420","line":957,"column":8,"nodeType":"369","endLine":957,"endColumn":46,"suggestions":"421"},{"ruleId":"367","severity":1,"message":"422","line":981,"column":8,"nodeType":"369","endLine":981,"endColumn":37,"suggestions":"423"},{"ruleId":"367","severity":1,"message":"424","line":1076,"column":8,"nodeType":"369","endLine":1076,"endColumn":86,"suggestions":"425"},{"ruleId":"363","severity":1,"message":"426","line":1115,"column":12,"nodeType":"365","messageId":"366","endLine":1115,"endColumn":22},{"ruleId":"367","severity":1,"message":"427","line":1125,"column":8,"nodeType":"369","endLine":1125,"endColumn":52,"suggestions":"428"},{"ruleId":"384","severity":1,"message":"385","line":16,"column":1,"nodeType":"386","endLine":16,"endColumn":52},{"ruleId":"367","severity":1,"message":"429","line":33,"column":8,"nodeType":"369","endLine":33,"endColumn":20,"suggestions":"430"},{"ruleId":"363","severity":1,"message":"431","line":33,"column":12,"nodeType":"365","messageId":"366","endLine":33,"endColumn":40},{"ruleId":"367","severity":1,"message":"368","line":113,"column":8,"nodeType":"369","endLine":113,"endColumn":38,"suggestions":"432"},{"ruleId":"363","severity":1,"message":"433","line":121,"column":11,"nodeType":"365","messageId":"366","endLine":121,"endColumn":39},{"ruleId":"363","severity":1,"message":"434","line":4,"column":5,"nodeType":"365","messageId":"366","endLine":4,"endColumn":11},{"ruleId":"363","severity":1,"message":"435","line":5,"column":5,"nodeType":"365","messageId":"366","endLine":5,"endColumn":12},{"ruleId":"363","severity":1,"message":"436","line":6,"column":5,"nodeType":"365","messageId":"366","endLine":6,"endColumn":9},{"ruleId":"363","severity":1,"message":"437","line":7,"column":5,"nodeType":"365","messageId":"366","endLine":7,"endColumn":11},{"ruleId":"363","severity":1,"message":"438","line":1,"column":8,"nodeType":"365","messageId":"366","endLine":1,"endColumn":13},"no-native-reassign",["439"],"no-negated-in-lhs",["440"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.","ArrayExpression",["441"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","'TableCellStyled' is assigned a value but never used.","'participantsList' is assigned a value but never used.","'uploadImageStatus' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["442"],"'sendCustomMessage' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'QaplaDots' is assigned a value but never used.","'ArrowIcon' is defined but never used.","'FormControlLabel' is defined but never used.","'Dialog' is defined but never used.","'IconCheck' is defined but never used.","'DialogOnlyQoins' is defined but never used.","'qoinsReaction' is assigned a value but never used.","'openDialog' is assigned a value but never used.","'confiDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["443"],"'handleCloseDialog' is assigned a value but never used.","'handleQoinsReactions' is assigned a value but never used.","'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["444"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["445"],["439"],["440"],"'styles' is defined but never used.","'getStreamerDashboardUserLanguage' is defined but never used.","React Hook useEffect has missing dependencies: 'finishReaction', 'queueAnimation', and 't'. Either include them or remove the dependency array.",["446"],"React Hook useEffect has missing dependencies: 'displayDonation', 'donation.media', 'donation.message', and 'donation.messageExtraData'. Either include them or remove the dependency array.",["447"],"React Hook useEffect has missing dependencies: 'animationId', 't', and 'twitchUsername'. Either include them or remove the dependency array. If 'setTextOpts' needs the current value of 'twitchUsername', you can also switch to useReducer instead of useState and read 'twitchUsername' in the reducer.",["448"],"React Hook useEffect has a missing dependency: 'startGreeting'. Either include it or remove the dependency array. If 'startGreeting' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["449"],"React Hook useEffect has a missing dependency: 'onFail'. Either include it or remove the dependency array. If 'onFail' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["450"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["451"],"'text2Ready' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTextReady'. Either include it or remove the dependency array. If 'setTextReady' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["452"],"React Hook useEffect has a missing dependency: 'bits'. Either include it or remove the dependency array.",["453"],"'openTermsAndConditionsDialog' is assigned a value but never used.",["454"],"'closeTermsAndConditionsModal' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},"Update the dependencies array to be: [query, t, user]",{"range":"483","text":"484"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"485","text":"486"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"487","text":"488"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"489","text":"490"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"491","text":"492"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, greetingsQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, t, finishReaction]",{"range":"493","text":"494"},"Update the dependencies array to be: [clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",{"range":"495","text":"496"},"Update the dependencies array to be: [animationId, t, twitchUsername]",{"range":"497","text":"498"},"Update the dependencies array to be: [avatarReady, textReady, showGreeting, startGreeting]",{"range":"499","text":"500"},"Update the dependencies array to be: [showGreeting, renderTimeout, onFail]",{"range":"501","text":"502"},"Update the dependencies array to be: [animations, avatarMixer, cameraReady, scene, props.showGreeting, props]",{"range":"503","text":"504"},"Update the dependencies array to be: [text1Ready, showGreeting, setTextReady]",{"range":"505","text":"506"},"Update the dependencies array to be: [amountBits, bits]",{"range":"507","text":"508"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"509","text":"510"},[5289,5295],"[query, t, user]",[9311,9317],"[socialLinksInitialValue, twitchURL, user]",[5088,5126],"[user.uid, user.id, user.refreshToken, t, history]",[6830,6866],"[streamStarted, dots, enablingQoins, stream]",[17734,17740],"[setPendingMessages, user]",[25029,25139],"[streamerId, streamerUid, donationQueue, greetingsQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, t, finishReaction]",[33150,33184],"[clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",[43599,43601],"[animationId, t, twitchUsername]",[43765,43803],"[avatarReady, textReady, showGreeting, startGreeting]",[44474,44503],"[showGreeting, renderTimeout, onFail]",[48348,48426],"[animations, avatarMixer, cameraReady, scene, props.showGreeting, props]",[49892,49936],"[text1Ready, showGreeting, setTextReady]",[1065,1077],"[amountBits, bits]",[5435,5465],"[user, history, isLoadingAuth, query, t]"]
[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"43","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"44","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js":"45","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx":"46","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"47","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx":"48","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"49","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"50","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx":"51","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"52","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"53","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"54","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx":"55","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"56","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"57","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"58","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"59","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CardsPayments/CardsPayments.jsx":"60","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"61","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"62","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/branch.js":"63","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"64","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/ChatbotCommand.jsx":"65","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GridSelector/GridSelector.jsx":"66"},{"size":226,"mtime":1659480227124,"results":"67","hashOfConfig":"68"},{"size":3579,"mtime":1614731664824,"results":"69","hashOfConfig":"68"},{"size":7180,"mtime":1664288712194,"results":"70","hashOfConfig":"68"},{"size":9059,"mtime":1664228906376,"results":"71","hashOfConfig":"68"},{"size":21550,"mtime":1664288712193,"results":"72","hashOfConfig":"68"},{"size":8471,"mtime":1664543991000,"results":"73","hashOfConfig":"68"},{"size":1520,"mtime":1654019625276,"results":"74","hashOfConfig":"68"},{"size":1919,"mtime":1661972327646,"results":"75","hashOfConfig":"68"},{"size":5908,"mtime":1664571068317,"results":"76","hashOfConfig":"68"},{"size":5675,"mtime":1661974732629,"results":"77","hashOfConfig":"68"},{"size":6609,"mtime":1664228906380,"results":"78","hashOfConfig":"68"},{"size":23202,"mtime":1664288712191,"results":"79","hashOfConfig":"68"},{"size":5480,"mtime":1664288712184,"results":"80","hashOfConfig":"68"},{"size":362,"mtime":1614731664838,"results":"81","hashOfConfig":"68"},{"size":22974,"mtime":1664288712187,"results":"82","hashOfConfig":"68"},{"size":1288,"mtime":1648248621496,"results":"83","hashOfConfig":"68"},{"size":1074,"mtime":1664576383379,"results":"84","hashOfConfig":"68"},{"size":35109,"mtime":1664228906392,"results":"85","hashOfConfig":"68"},{"size":1083,"mtime":1664288712186,"results":"86","hashOfConfig":"68"},{"size":14552,"mtime":1664582782711,"results":"87","hashOfConfig":"68"},{"size":41225,"mtime":1664576055506,"results":"88","hashOfConfig":"68"},{"size":4314,"mtime":1664228906395,"results":"89","hashOfConfig":"68"},{"size":19783,"mtime":1664576055511,"results":"90","hashOfConfig":"68"},{"size":1390,"mtime":1661972327674,"results":"91","hashOfConfig":"68"},{"size":3326,"mtime":1661972327650,"results":"92","hashOfConfig":"68"},{"size":2093,"mtime":1664288712204,"results":"93","hashOfConfig":"68"},{"size":719,"mtime":1664576055500,"results":"94","hashOfConfig":"68"},{"size":19792,"mtime":1664228906394,"results":"95","hashOfConfig":"68"},{"size":2185,"mtime":1661972327672,"results":"96","hashOfConfig":"68"},{"size":2011,"mtime":1650310829999,"results":"97","hashOfConfig":"68"},{"size":43449,"mtime":1664576055514,"results":"98","hashOfConfig":"68"},{"size":2975,"mtime":1614731664830,"results":"99","hashOfConfig":"68"},{"size":1505,"mtime":1662223237485,"results":"100","hashOfConfig":"68"},{"size":13854,"mtime":1664576180682,"results":"101","hashOfConfig":"68"},{"size":503,"mtime":1664228906395,"results":"102","hashOfConfig":"68"},{"size":9889,"mtime":1664228906385,"results":"103","hashOfConfig":"68"},{"size":3170,"mtime":1661972327665,"results":"104","hashOfConfig":"68"},{"size":7301,"mtime":1664288712210,"results":"105","hashOfConfig":"68"},{"size":1897,"mtime":1664288712205,"results":"106","hashOfConfig":"68"},{"size":3844,"mtime":1650310830005,"results":"107","hashOfConfig":"68"},{"size":5706,"mtime":1664288712196,"results":"108","hashOfConfig":"68"},{"size":20857,"mtime":1664576055495,"results":"109","hashOfConfig":"68"},{"size":527,"mtime":1636998131402,"results":"110","hashOfConfig":"68"},{"size":7574,"mtime":1664228906374,"results":"111","hashOfConfig":"68"},{"size":2473,"mtime":1664228906410,"results":"112","hashOfConfig":"68"},{"size":3991,"mtime":1664228906374,"results":"113","hashOfConfig":"68"},{"size":629,"mtime":1635283796967,"results":"114","hashOfConfig":"68"},{"size":1637,"mtime":1664228906375,"results":"115","hashOfConfig":"68"},{"size":870,"mtime":1650310830028,"results":"116","hashOfConfig":"68"},{"size":28427,"mtime":1664576055497,"results":"117","hashOfConfig":"68"},{"size":1295,"mtime":1664288712188,"results":"118","hashOfConfig":"68"},{"size":3390,"mtime":1664228906407,"results":"119","hashOfConfig":"68"},{"size":383,"mtime":1650310830005,"results":"120","hashOfConfig":"68"},{"size":3416,"mtime":1650310830004,"results":"121","hashOfConfig":"68"},{"size":2668,"mtime":1664228906375,"results":"122","hashOfConfig":"68"},{"size":9052,"mtime":1664228906412,"results":"123","hashOfConfig":"68"},{"size":4014,"mtime":1664228906403,"results":"124","hashOfConfig":"68"},{"size":7571,"mtime":1664576143769,"results":"125","hashOfConfig":"68"},{"size":1624,"mtime":1664576199619,"results":"126","hashOfConfig":"68"},{"size":3838,"mtime":1664288712187,"results":"127","hashOfConfig":"68"},{"size":14683,"mtime":1664228906396,"results":"128","hashOfConfig":"68"},{"size":3339,"mtime":1650310830005,"results":"129","hashOfConfig":"68"},{"size":796,"mtime":1664228906403,"results":"130","hashOfConfig":"68"},{"size":3414,"mtime":1664228906384,"results":"131","hashOfConfig":"68"},{"size":3985,"mtime":1664576055501,"results":"132","hashOfConfig":"68"},{"size":2512,"mtime":1664582468543,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"ki7y9c",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"136"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"136"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"136"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"136"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"136"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"136"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"136"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"136"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["276","277"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",["278"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["279","280"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ESvg } from './../../assets/g.svg';\nimport {ReactComponent as Closeicon} from './../../assets/Closeicono.svg'\nimport HeartHands from './../../assets/HeartHands.png';\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        height: '100vh'\n    },\n    paymentInfoContainer: {\n        paddingLeft: 50,\n        paddingRight: 64,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    eImageContainer: {\n        display: 'flex',\n        width: 80,\n        height: 80,\n        borderRadius: 20,\n        backgroundColor: '#141833',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    subscriptionBought: {\n        marginTop: 48,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    subTerms: {\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    totalPaid: {\n        fontSize: 48,\n        fontWeight: '600',\n        color: 'rgba(255, 255, 255, .9)',\n        lineHeight:'58.09px'\n    },\n    interval: {\n        marginLeft: 6,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    paymentDetails: {\n        marginTop: 48,\n        display: 'flex',\n        justifyContent: 'space-between',\n        maxWidth:'750px'\n    },\n    subscriptionType: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentInterval: {\n        marginTop: 8,\n        fontSize: 14,\n        fontWeight: '400',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    itemCost: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentUntilTodayContainer: {\n        marginTop: 56,\n        color: '#FFF',\n        display: 'flex',\n        justifyContent: 'space-between',\n        maxWidth:'750px'\n    },\n    paymentUntilToday: {\n        fontSize: 24,\n        fontWeight: '500'\n    },\n    thanksCardContainer: {\n        width: '450px',\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    thanksCard: {\n        backgroundColor: '#141833',\n        display: 'inline-block',\n        color: '#FFF',\n        maxWidth: '80%',\n        borderRadius: 35\n    },\n    cardContentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: 30,\n        paddingRight: 30,\n        maxWidth:'450px'\n    },\n    thanksTitle: {\n        marginTop: 8,\n        fontSize: 18,\n        fontWeight: '700',\n        textAlign: 'center'\n    },\n    thanksDescription: {\n        marginTop: 24,\n        fontSize: 14,\n        fontWeight: '500',\n        lineHeight: '22px',\n        textAlign: 'center',\n        marginRight: 48,\n        marginLeft: 48\n    },\n    publishButton: {\n        marginTop: 64,\n        marginLeft: 30,\n        marginRight: 30,\n        backgroundColor: '#0AFFD2',\n        borderRadius: 10,\n        color: '#4E2D92',\n        fontSize: 16,\n        fontWeight: '700',\n        paddingTop: 19,\n        paddingBottom: 19,\n        '&:hover': {\n            backgroundColor: '#0AFFD2',\n            opacity: '.95'\n        }\n    },\n    backToDashboardButton: {\n        marginTop: 16,\n        marginBottom: 16,\n        fontSize: 16,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    buttonClose:{\n       position: 'absolute',\n       top:'0px',\n       left:'-10px',\n    },\n\n    paymentPolicy:{\n          marginTop:'80px'\n    },\n    textPaymentPolicy:{\n       color: '#FFFFFF',\n       opacity: '0.6',\n       fontWeight:'500',\n       fontSize: '12px',\n       lineHeight: '15px',\n       letterSpacing:'0.5px'\n    }\n}));\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst ChargeConfirmationPage = ({ user }) => {\n    const [totalPaid, setTotalPaid] = useState(0);\n    const [interval, setInterval] = useState('');\n    const [intervalText, setIntervalText] = useState('monthly');\n    const [plan, setPlan] = useState('');\n    const classes = useStyles();\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getDetails() {\n            const id = query.get('subscriptionId');\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\n            setTotalPaid(details.val().totalPaid);\n\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\n\n            setIntervalText(details.val().interval);\n\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\n        }\n\n        if (user && user.uid) {\n            getDetails();\n        }\n    }, [user]);\n\n    const onPublishStreamClick = () => {\n        history.push('/create');\n    }\n\n    const onBackToDashboardClick = () => {\n        history.push('/profile');\n    }\n\n    return (\n        <Grid container alignContent='center' className={classes.container}>\n            <Grid item md={6} className={classes.paymentInfoContainer}>\n                <Button className={classes.buttonClose}>\n                    <Closeicon />\n                    </Button>\n                <div className={classes.eImageContainer}>\n                    <ESvg />\n                </div>\n                <p className={classes.subscriptionBought}>\n                    {plan && intervalText &&\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                    }\n                </p>\n                <div className={classes.subTerms}>\n                    <p className={classes.totalPaid}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                    <p className={classes.interval}>\n                        {interval}\n                    </p>\n                </div>\n                <div className={classes.paymentDetails}>\n                    <div>\n                        <p className={classes.subscriptionType}>\n                            {plan}\n                        </p>\n                        <p className={classes.paymentInterval}>\n                            {intervalText &&\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                            }\n                        </p>\n                    </div>\n                    <p className={classes.itemCost}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentUntilTodayContainer}>\n                    <p className={classes.paymentUntilToday}>\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\n                    </p>\n                    <p className={classes.paymentUntilToday}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentPolicy}>\n                    <p className={classes.textPaymentPolicy}>Powered by Stripe | Terms Privacy</p>\n                </div>\n            </Grid>\n            <Grid item md={6} className={classes.thanksCardContainer}>\n                <Card className={classes.thanksCard}>\n                    <div className={classes.cardContentContainer}>\n                        <img src={HeartHands} />\n                        <CardContent>\n                            <p className={classes.thanksTitle}>\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\n                            </p>\n                            <p className={classes.thanksDescription}>\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\n                            </p>\n                        </CardContent>\n                        <Button fullWidth variant='contained'\n                            className={classes.publishButton}\n                            onClick={onPublishStreamClick}>\n                            {t('ChargeConfirmationPage.publishStream')}\n                        </Button>\n                        <Button className={classes.backToDashboardButton}\n                            onClick={onBackToDashboardClick}>\n                            {t('ChargeConfirmationPage.backToDashboard')}\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ChargeConfirmationPage;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["281","282"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["283"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["284","285","286","287"],"import React, { useEffect, useState } from 'react';\nimport { withStyles, makeStyles, Button, Chip, Switch, Tabs, Tab, Tooltip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport StreamerProfileEditorOnBoarding from '../StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding';\n\nimport styles from './StreamerProfileEditor.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getStreamerDeepLink, getStreamerLinks, listenStreamerPublicProfile, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { ReactComponent as EditIcon } from './../../assets/Edit.svg';\nimport { ReactComponent as CameraIcon } from './../../assets/Camera.svg';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport { uploadImage } from '../../services/storage';\nimport { MIN_TAGS, PROFILE_BACKGROUND_GRADIENTS } from '../../utilities/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    linkPlaceholder: {\n        '&::placeholder': {\n            color: 'rgba(108, 93, 211, 0.4)'\n        }\n    },\n    linkInput: {\n        backgroundColor: '#202750',\n        color: '#FFF',\n        '&.Mui-disabled': {\n            color: '#AAA'\n        }\n    }\n}));\n\nconst EditBioButton = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        justifyItems: 'center',\n        padding: '0.8rem 1rem',\n        borderRadius: '0.8rem',\n        maxHeight: '46px',\n        textTransform: 'capitalize',\n        fontSize: '14px',\n        fontWeight: 600,\n        '&:hover': {\n            backgroundColor: '#24456680'\n        },\n        '&:disabled': {\n            backgroundColor: '#272D5780',\n            color: '#FFFFFF99',\n        },\n        '&#cover': {\n            backgroundColor: '#272D5780'\n        }\n    },\n\n}))(Button);\n\nconst QaplaChip = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFFA6',\n        minHeight: '41px',\n        borderRadius: '100rem',\n        padding: '1.2rem 0.4rem',\n        fontWeight: 600,\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n            backgroundColor: '#4040FF4F',\n            opacity: 0.8\n        }\n    },\n    deletable: {\n        backgroundColor: '#4040FF4F',\n        color: '#FFFFFFA6',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n\n        }\n    },\n    deleteIcon: {\n        display: 'flex',\n        backgroundColor: '#FFFD',\n        borderRadius: '100px',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '&:hover': {\n            backgroundColor: '#F00D'\n        },\n        '&:active': {\n            backgroundColor: '#A00D'\n        }\n    }\n}))(Chip)\n\nconst QaplaSwitch = withStyles(() => ({\n    root: {\n\n    },\n    track: {\n        backgroundColor: '#202750'\n    },\n    checked: {\n        color: '#2CE9D2 !important',\n        '& + .MuiSwitch-track': {\n            backgroundColor: '#202750 !important'\n        }\n    },\n    thumb: {\n\n    }\n}))(Switch);\n\nconst QaplaTabs = withStyles({\n    root: {\n        minHeight: 0,\n        marginTop: '3rem'\n    },\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            // maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#0AFFD2',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        padding: '0 0.6rem',\n        minWidth: 0,\n        minHeight: 0,\n        textTransform: 'none',\n        color: '#fff',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n\nfunction TabPanel(props) {\n    const { children, value, index, className, ...other } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`profile-editor-tabpanel-${index}`}\n            aria-labelledby={`profile-editor-tab-${index}`}\n            {...other}\n            className={className}\n        >\n            {value === index && (\n                <>\n                    {children}\n                </>\n            )}\n        </div>\n    )\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst StreamerProfileEditor = ({ user }) => {\n    const socialLinksInitialValue = [\n        {\n            socialPage: 'Twitch',\n            value: ''\n        },\n        {\n            socialPage: 'Twitter',\n            value: ''\n        },\n        {\n            socialPage: 'Instagram',\n            value: ''\n        },\n        {\n            socialPage: 'Discord',\n            value: ''\n        },\n        {\n            socialPage: 'Youtube',\n            value: ''\n        },\n        /* {\n            socialPage: 'TikTok',\n            value: ''\n        } */\n    ];\n\n    const socialLinksPlaceholders = {\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\n        Discord: `https://discord.gg/inviteCode`,\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`,\n        tiktok: `https://www.tiktok.com/@${user ? user.displayName : ''}`\n    };\n\n    const classes = useStyles();\n    const [dataIsFetched, setDataIsFetched] = useState(false);\n    const [selectedTab, setSelectedTab] = useState(0);\n    const [editingBio, setEditingBio] = useState(false);\n    const [addingTag, setAddingTag] = useState(false);\n    const [streamerBio, setStreamerBio] = useState('');\n    const [backgroundUrl, setBackgroundUrl] = useState('');\n    const [backgroundGradient, setBackgroundGradient] = useState(null);\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\n    const [streamerTags, setStreamerTags] = useState([]);\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const [onBoardingDone, setOnBoardingDone] = useState(true);\n    const [onBoardingStep, setOnBoardingStep] = useState(0);\n    const [badge, setBadge] = useState(false);\n    const [qaplaLink, setQaplaLink] = useState('');\n    const [chipHover, setChipHover] = useState({});\n    const { t } = useTranslation();\n    const twitchURL = `https://www.twitch.tv/${user && user.login ? user.login : ''}`;\n\n    useEffect(() => {\n        async function getStreamerInfo() {\n            listenStreamerPublicProfile(user.uid, async (info) => {\n                if (info.exists()) {\n                    const { bio, tags, backgroundUrl, backgroundGradient, badge } = info.val();\n                    const link = await getStreamerDeepLink(user.uid);\n                    if (!link.exists()) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(0);\n                    }\n\n                    if (!tags || tags.length < MIN_TAGS) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(2);\n                    }\n\n                    if (!bio) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(1);\n                    }\n                    setStreamerBio(bio || '');\n                    setBackgroundGradient(backgroundGradient);\n                    setBackgroundUrl(backgroundUrl);\n                    setStreamerTags(tags || []);\n                    setBadge(badge);\n                } else {\n                    setOnBoardingDone(false);\n                }\n\n                const qaplaLink = await getStreamerDeepLink(user.uid);\n                if (qaplaLink.exists()) {\n                    setQaplaLink(qaplaLink.val());\n                }\n\n                const links = await getStreamerLinks(user.uid);\n                if (links.exists()) {\n                    setSocialLinks(links.val());\n                } else {\n                    /**\n                     * Set Twitch Link by default (we already know this link)\n                     */\n                    const socialLinksWithTwitchAdded = socialLinksInitialValue;\n                    socialLinksWithTwitchAdded[0].value = twitchURL;\n\n                    setSocialLinks(socialLinksInitialValue);\n                }\n\n                setDataIsFetched(true);\n            });\n        }\n\n        if (user && user.uid) {\n            getStreamerInfo();\n        }\n    }, [user]);\n\n    const onBoardingDoneByStreamer = async () => {\n        const min = 0;\n        const max = 4;\n        const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\n\n        const backgroundSelected = PROFILE_BACKGROUND_GRADIENTS[randomIndex];\n        setBackgroundGradient(backgroundSelected);\n\n        await updateStreamerPublicProfile(user.uid, {\n            backgroundGradient: backgroundSelected,\n            displayName: user.displayName,\n            photoUrl: user.photoUrl\n        });\n\n        window.analytics.track('Public profile onboarding done', {\n            uid: user.uid,\n            timestamp: (new Date()).getTime()\n        });\n        setOnBoardingDone(true);\n    }\n\n    const handleTabChange = (event, newValue) => {\n        setSelectedTab(newValue)\n    }\n\n    const handleTagDelete = async (indexToDelete) => {\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\n\n        try {\n            await updateStreamerPublicProfile(user.uid, { tags });\n            setStreamerTags(tags);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.deleteTag'));\n        }\n    }\n\n    const updateSocialLinks = (value, index) => {\n        setSocialLinksChanged(true);\n        let newArray = [...socialLinks];\n        newArray[index] = {\n            ...newArray[index],\n            value\n        };\n\n        setSocialLinks(newArray);\n    }\n\n    const saveLinks = async () => {\n        // Creates an array without the placeholder value\n        const objectToSave = {};\n        socialLinks.forEach((link, index) => {\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\n        });\n\n        try {\n            await saveStreamerLinks(user.uid, objectToSave);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.updateLinks'));\n        }\n        setSocialLinksChanged(false);\n    }\n\n    const addTag = async () => {\n        setOnBoardingStep(4);\n        setAddingTag(true);\n    }\n\n    const uploadBackgroundImage = (e) => {\n        if (e.target.files[0]) {\n            const newBackgroundImage = (e.target.files[0]);\n            uploadImage(\n                newBackgroundImage,\n                `/StreamersProfilesBackgroundImages/${user.uid}`,\n                (progressValue) => setUploadImageStatus(progressValue * 100),\n                (error) => { alert('Error al agregar imagen'); console.log(error); },\n                async (url) => {\n                    try {\n                        await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\n                        alert(t('StreamerProfileEditor.confirmations.saveImage'));\n                    } catch (error) {\n                        alert(t('StreamerProfileEditor.errors.saveImage'));\n                        console.log(error);\n                    }\n                }\n            );\n\n            const reader = new FileReader();\n            reader.addEventListener('load', () => {\n                setBackgroundUrl(reader.result);\n            });\n\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    }\n\n    const copyQaplaLink = () => {\n        navigator.clipboard.writeText(qaplaLink);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    const createLinearGradientCSS = () => {\n        if (backgroundGradient) {\n            let colorsString = '';\n            backgroundGradient.colors.forEach((color, index) => {\n                if (index !== backgroundGradient.colors.length - 1) {\n                    colorsString += `${color},`;\n                } else {\n                    colorsString += color;\n                }\n            });\n\n            return `linear-gradient(${backgroundGradient.angle}deg, ${colorsString})`;\n        }\n\n        return '';\n    }\n\n    const editBio = () => {\n        setOnBoardingStep(3);\n        setEditingBio(true);\n    }\n\n    const cancelEditing = () => {\n        setEditingBio(false);\n        setAddingTag(false);\n    }\n\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return\n        }\n        let source = result.source.index\n        let destination = result.destination.index\n\n        if (source === destination) {\n            return\n        }\n\n        const socialLinksCopy = [...socialLinks];\n        socialLinksCopy.splice(destination, 0, socialLinksCopy.splice(source, 1)[0]);\n\n        setSocialLinks(socialLinksCopy);\n        setSocialLinksChanged(true);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\n            {dataIsFetched &&\n                <>\n                    {onBoardingDone && !editingBio && !addingTag ?\n                        <>\n                            <div className={styles.coverContainer}>\n                                {backgroundUrl ?\n                                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\n                                    :\n                                    <div className={styles.cover} style={{ background: createLinearGradientCSS() }} />\n                                }\n                            </div>\n                            <div className={styles.editCoverButtonContainer}>\n                                <input\n                                    accept='image/*'\n                                    style={{ display: 'none' }}\n                                    type='file'\n                                    id='image-input'\n                                    onChange={uploadBackgroundImage} />\n                                <label htmlFor='image-input'>\n                                    <EditBioButton id='cover' component='span'>\n                                        <CameraIcon />\n                                        <div style={{ width: '0.4rem' }} />\n                                        {t('StreamerProfileEditor.editCover')}\n                                    </EditBioButton>\n                                </label>\n                            </div>\n                            <div className={styles.profileContainer}>\n                                <div className={styles.profilePicContainer}>\n                                    <img src={user.photoUrl} alt='User pfp' className={styles.profilePic} />\n                                </div>\n                                <div className={styles.streamerNameAndEditBioButtonContainer}>\n                                    <div className={styles.streamerNameContainer}>\n                                        <p className={styles.streamerName}>\n                                            {user.displayName}\n                                        </p>\n                                        <div className={styles.founderBadgeContainer}>\n                                            {badge &&\n                                                <FounderBadge className={styles.founderBadge} />\n                                            }\n                                        </div>\n                                    </div>\n                                    <div className={styles.editBioButtonContainer}>\n                                        <EditBioButton variant='contained'\n                                            onClick={editBio}>\n                                            {!editingBio ?\n                                                <>\n                                                    <EditIcon />\n                                                    <div style={{ width: '0.4rem' }} />\n                                                    {t('StreamerProfileEditor.editBio')}\n                                                </>\n                                                :\n                                                t('StreamerProfileEditor.saveChanges')\n                                            }\n                                        </EditBioButton>\n                                    </div>\n                                </div>\n                                <div className={styles.twitchURLContainer}>\n                                    <div className={styles.twitchURLSubContainer}>\n                                        <a href={qaplaLink} target='_blank' rel='noreferrer' className={styles.twitchURL}>\n                                            {qaplaLink}\n                                        </a>\n                                        <Tooltip placement='top' open={openTooltip} title='Copiado'>\n                                            <CopyIcon onClick={copyQaplaLink} className={styles.copyIcon} />\n                                        </Tooltip>\n                                    </div>\n                                </div>\n                                <div className={styles.bioContainer}>\n                                    <p className={styles.bioText} onClick={editBio}>\n                                        {streamerBio}\n                                    </p>\n                                </div>\n                                <ul className={styles.tagsList}>\n                                    {streamerTags.map((data, index) => {\n                                        return (\n                                            <li key={`chip-${data}-${index}`} className={styles.tag}>\n                                                <QaplaChip\n                                                    label={data}\n                                                    onDelete={() => handleTagDelete(index)}\n                                                />\n                                            </li>\n                                        )\n                                    })}\n                                    <li key='new' className={styles.tag}>\n                                        <QaplaChip onClick={addTag}\n                                            label={t('StreamerProfileEditor.addTag')}\n                                        />\n                                    </li>\n                                </ul>\n                                <div className={styles.showNextStreamsContainer}>\n                                    <p className={styles.showNextStreamsText}>\n                                        {t('StreamerProfileEditor.showUpcomingStreams')}\n                                    </p>\n                                    <QaplaSwitch\n                                        name='showNextStreams'\n                                    /** ToDo: Show streams in profile. Also show twitch status (online or offline) <= more of this on cloud function */\n                                    />\n                                </div>\n                                <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\n                                    <QaplaTab wid label={t('StreamerProfileEditor.social')} {...a11yProps(0)} />\n                                    {/* <QaplaTab label='Códigos de creador' {...a11yProps(1)} /> */}\n                                </QaplaTabs>\n                                <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\n                                    <DragDropContext onDragEnd={onDragEnd}>\n                                        <Droppable droppableId='links-droppable'>\n                                            {(provided, snapshot) => (\n                                                <div style={{ width: '100%' }}\n                                                    {...provided.droppableProps}\n                                                    ref={provided.innerRef}\n                                                >\n                                                    {socialLinks.map((data, index) => (\n                                                        <Draggable key={`draggable-link-${index}`} draggableId={`draggable-link-${index}`} index={index}>\n                                                            {(provided, snapshot) => (\n                                                                <div\n                                                                    ref={provided.innerRef}\n                                                                    {...provided.draggableProps}\n                                                                    {...provided.dragHandleProps}\n                                                                >\n                                                                    <div\n                                                                        style={{\n                                                                            display: 'flex',\n                                                                            flexDirection: 'row',\n                                                                            alignItems: 'center',\n                                                                            width: '100%'\n                                                                        }}>\n                                                                        <div style={{ display: 'flex', width: '100%' }}>\n                                                                            <StreamerTextInput\n                                                                                label={data.socialPage}\n                                                                                containerClassName={styles.socialLinkContainer}\n                                                                                labelClassName={styles.socialLinkLabel}\n                                                                                value={data.value}\n                                                                                disabled={data.socialPage.toLowerCase() === 'twitch'}\n                                                                                placeholder={socialLinksPlaceholders[data.socialPage]}\n                                                                                classes={{ input: classes.linkPlaceholder }}\n                                                                                textInputClassName={classes.linkInput}\n                                                                                fullWidth\n                                                                                onChange={(e) => updateSocialLinks(e.target.value, index)}\n                                                                            />\n                                                                        </div>\n                                                                        <div style={{\n                                                                            display: 'flex',\n                                                                            backgroundColor: '#141833',\n                                                                            width: '30px',\n                                                                            minWidth: '30px',\n                                                                            height: '45px',\n                                                                            marginBottom: '12px',\n                                                                            alignSelf: 'flex-end',\n                                                                            borderRadius: '8px'\n\n                                                                        }} >\n                                                                            <div style={{\n                                                                                display: 'flex',\n                                                                                flex: 1,\n                                                                                padding: '14px 10px',\n                                                                            }}>\n                                                                                <div style={{\n                                                                                    display: 'flex',\n                                                                                    flex: 1,\n                                                                                    flexDirection: 'column',\n                                                                                    justifyContent: 'space-between',\n                                                                                }}>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                </div>\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            )}\n                                                        </Draggable>\n                                                    ))}\n                                                    {provided.placeholder}\n                                                </div>\n                                            )}\n                                        </Droppable>\n                                    </DragDropContext>\n                                    <br />\n                                    {socialLinksChanged &&\n                                        <ContainedButton onClick={saveLinks}>\n                                            {t('StreamerProfileEditor.saveChanges')}\n                                        </ContainedButton>\n                                    }\n                                </TabPanel>\n                                <TabPanel value={selectedTab} index={1}>\n                                    <p>b</p>\n                                </TabPanel>\n                            </div>\n                        </>\n                        :\n                    <StreamerProfileEditorOnBoarding step={onBoardingStep}\n                        user={user}\n                        onBoardingDone={onBoardingDoneByStreamer}\n                        showOnlySpecificStep={editingBio || addingTag}\n                        streamerBio={streamerBio}\n                        streamerTags={streamerTags}\n                        closeOnBoarding={cancelEditing} />\n                    }\n                </>\n            }\n        </StreamerDashboardContainer>\n    )\n}\n\nexport default StreamerProfileEditor;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",["288","289","290"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["291"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",["292"],"import React, { useState } from 'react';\nimport { makeStyles, withStyles, Chip, Button, Tooltip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport styles from './StreamerProfileEditorOnBoarding.module.css';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { saveStreamerDeepLink, saveTags, updateStreamerPublicProfile } from '../../services/database';\nimport BioEditorTextArea from '../BioEditorTextArea/BioEditorTextArea';\nimport { MIN_BIO_LENGTH, MIN_TAGS } from '../../utilities/Constants';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { createLink } from '../../services/branch';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: '#00FFDD',\n        color: '#141833',\n        width: '390px',\n        height: '60px',\n        fontSize: '16px',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        textTransform: 'none',\n        borderRadius: '16px',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n    },\n}));\n\nconst QaplaChip = withStyles(() => ({\n    root: {\n        backgroundColor: 'rgba(64, 64, 255, 0.30859)',\n        color: '#FFFFFFA6',\n        fontWeight: '600',\n        fontSize: '14px',\n        padding: '10px 6px',\n        minWidth: '90px',\n        minHeight: '40px',\n        borderRadius: '100px',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n            backgroundColor: '#4040FF4F',\n            opacity: 0.8\n        }\n    },\n    deletable: {\n        backgroundColor: '#4040FF4F',\n        color: '#FFFFFFA6',\n        padding: '0 0.4rem',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        }\n    },\n    deleteIcon: {\n        color: '#FFFD',\n        '&:hover': {\n            color: '#F00D'\n        },\n        '&:active': {\n            color: '#A00D'\n        }\n    }\n}))(Chip)\n\nconst QaplaDots = ({ index, dots, activeWidth = '30px' }) => {\n\n    let dotsRender = []\n\n    for (let i = 0; i < dots; i++) {\n        dotsRender.push(\n            <div key={`dot-${i}`}\n                style={{\n                    backgroundColor: index === i ? '#00FEDF' : '#00FEDF8A',\n                    width: index === i ? activeWidth : '8px',\n                    height: '8px',\n                    margin: '0px 6.5px',\n                    borderRadius: '100px'\n                }}>\n            </div>\n        )\n    }\n\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'row'\n        }}>\n            {dotsRender}\n        </div>\n    )\n}\n\nconst createDefaultTag = (label) => ({ label, selected: false, isCustom: false });\n\nconst DEFUALT_TAGS = [\n    createDefaultTag('Just Chatting'),\n    createDefaultTag('Musica'),\n    createDefaultTag('IRL'),\n    createDefaultTag('Brawl Stars'),\n    createDefaultTag('Minecraft'),\n    createDefaultTag('CoD'),\n    createDefaultTag('KPop'),\n    createDefaultTag('Ajedrez'),\n    createDefaultTag('Valorant')\n];\n\nconst StreamerProfileEditorOnBoarding = ({ step, showOnlySpecificStep = false, user, onBoardingDone, streamerBio = '', streamerTags = [], closeOnBoarding = () => { } }) => {\n    const [currentStep, setCurrentStep] = useState(step)\n    const [tagSearch, setTagSearch] = useState('')\n    const [tagSearchLimit, setTagSearchLimit] = useState(false)\n    const [tags, setTags] = useState(streamerTags.length === 0 ? DEFUALT_TAGS : streamerTags.map((tag) => ({ label: tag, selected: true, isCustom: true })));\n    const [bio, setBio] = useState(streamerBio);\n    const [bioError, setBioError] = useState(false);\n    const [tagError, setTagError] = useState(false);\n    const [showTagHelper, setShowTagHelper] = useState(true);\n    const [qaplaLinkAlias, setQaplaLinkAlias] = useState('');\n    const [qaplaLink, setQaplaLink] = useState('');\n    const [linkError, setLinkError] = useState('');\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const { t } = useTranslation();\n    const classes = useStyles();\n\n    const onTagSearchChange = (e) => {\n        setTagError(false);\n        let input = e.target.value\n        if (input.length > 43) {\n            input = input.slice(0, 43)\n        }\n\n        setTagSearch(input)\n    }\n\n    const addNewTag = () => {\n        setShowTagHelper(false);\n        setTagError(false);\n        let tagsArr = [...tags]\n        tagsArr.push({\n            label: tagSearch,\n            selected: true,\n            isCustom: true\n        })\n        if (tagSearchLimit) {\n            setTagSearchLimit(false)\n        }\n        setTags(tagsArr)\n        setTagSearch('')\n    }\n\n    const tagClick = (data, index, e) => {\n        setShowTagHelper(false);\n        setTagError(false);\n        let tagsArr = [...tags]\n        tagsArr[index] = {\n            ...data,\n            selected: !data.selected\n        }\n        if (data.isCustom) {\n            tagsArr.splice(index, 1)\n        }\n        setTags(tagsArr)\n    }\n\n    const saveBio = async () => {\n        try {\n            await updateStreamerPublicProfile(user.uid, { bio });\n        } catch (error) {\n            console.log(error);\n            alert('Hubo un problema al actualizar la bio, intentalo mas tarde o contacta con soporte tecnico');\n        }\n    }\n\n    const updateBio = (bio) => {\n        setBioError(false);\n        setBio(bio);\n    }\n\n    const handleMainButton = async () => {\n        switch (currentStep) {\n            case 0:\n                const linkResponse = await createLink(user.uid, qaplaLinkAlias);\n\n                if (linkResponse.status === 200) {\n                    const linkData = await linkResponse.json();\n                    await saveStreamerDeepLink(user.uid, linkData.url);\n                    setQaplaLink(linkData.url);\n\n                    if (showOnlySpecificStep) {\n                        closeOnBoarding();\n                    }\n                } else if (linkResponse.status === 409) {\n                    return setLinkError(t('StreamerProfileEditor.OnBoarding.duplicatedLink'));\n                }\n                break;\n            case 1:\n                if (bio.replace(/\\s/g, '').length === 0) {\n                    setBioError(true);\n                    return;\n                } else {\n                    if (bio.length >= MIN_BIO_LENGTH) {\n                        if (showOnlySpecificStep) {\n                            closeOnBoarding();\n                        } else {\n                            setCurrentStep(currentStep + 1);\n                        }\n                        return await saveBio();\n                    }\n                }\n                break;\n            case 2:\n                const tagsSelected = tags.filter((tag) => tag.selected);\n                if (tagsSelected.length >= MIN_TAGS) {\n                    const tagsLabels = tagsSelected.map((tag) => tag.label);\n                    await updateStreamerPublicProfile(user.uid, { tags: tagsLabels });\n\n                    // We don´t know how we are going to use this information but we want to save it\n                    const tagObject = {};\n                    tagsLabels.forEach((tag) => {\n                        tagObject[tag] = true;\n                    });\n\n                    saveTags(tagObject);\n                    if (showOnlySpecificStep) {\n                        return closeOnBoarding();\n                    }\n                } else {\n                    return setTagError(true);\n                }\n                break;\n            case 3:\n                return onBoardingDone();\n            default:\n                break;\n        }\n\n        setCurrentStep(currentStep + 1);\n    }\n\n    const handleQaplaLinkAliasChange = (e) => {\n        setQaplaLinkAlias(e.target.value);\n    }\n\n    const copyTwitchURL = () => {\n        navigator.clipboard.writeText(qaplaLink);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    return (\n        <div className={styles.profileOnBoardingContainer}>\n            <div style={{\n                marginTop: 24,\n                position: 'relative',\n                display: 'flex',\n                backgroundColor: '#141833',\n                width: '450px',\n                height: currentStep >= 1 ? '450px' : '256px',\n                borderRadius: '35px',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column',\n                zIndex: 500,\n            }}>\n                {currentStep === 0 &&\n                <>\n                    <img src={`https://media.giphy.com/media/57WAs7bCG9o4lCzEX9/giphy.gif`} alt={`Whats up`}\n                        style={{\n                            zIndex: 10000,\n                            position: 'absolute',\n                            bottom: 236, // 256 - 20 (height of container - overlaped part of the image)\n                            width: '223px',\n                            height: '173px',\n                        }}\n                    />\n                </>\n                }\n                {currentStep === 1 &&\n                    <>\n                        <img src={`https://media.giphy.com/media/Ll3URGrGa6EAuibyel/giphy.gif`} alt={`Chill`}\n                            style={{\n                                zIndex: 10000,\n                                position: 'absolute',\n                                bottom: 400, // 450 - 50 (height of container - overlaped part of the image)\n                                width: '175px',\n                                height: '175px',\n                            }}\n                        />\n                    </>\n                }\n                {currentStep === 2 &&\n                    <>\n                        <img src={`https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2FIMB_SZ5VPc.gif?alt=media&token=3014ab22-4ab2-4c80-8694-14586d991b3b`} alt={`Umbrella`}\n                            style={{\n                                zIndex: -1,\n                                position: 'absolute',\n                                bottom: 450, // (height of container)\n                                width: '181px',\n                                height: '118px',\n                            }}\n                        />\n                    </>\n                }\n                {currentStep === 3 &&\n                    <>\n                        <img src={`https://media.giphy.com/media/lRRomMvhcT66FpTwlc/giphy.gif`} alt={`Victory`}\n                            style={{\n                                zIndex: -1,\n                                position: 'absolute',\n                                bottom: 400, // 450 - 50 (height of container - hidden part of the image)\n                                width: '142px',\n                                height: '175px',\n                            }}\n                        />\n                    </>\n                }\n\n                {currentStep === 0 &&\n                    <>\n                        <p className={styles.headerText}>\n                            {t('StreamerProfileEditor.OnBoarding.header1')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body1')}\n                        </p>\n                        <div className={styles.createLinkContainer}>\n                            <p style={{\n                                color: '#fff',\n                                fontSize: '14px',\n                                fontWeight: '600',\n                                lineHeight: '17px',\n                            }}>\n                                myqap.la/\n                            </p>\n                            <div className={styles.createLinkFieldContainer}>\n                                <div className={styles.createLinkFieldInnerConainer}>\n                                    <input\n                                        className={styles.createLinkText}\n                                        placeholder={t('StreamerProfileEditor.OnBoarding.typeToCreateLink')}\n                                        onChange={handleQaplaLinkAliasChange}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        <p style={{ color: '#FF0000', fontSize: 10 }}>\n                            {linkError}\n                        </p>\n                    </>\n                }\n                {currentStep === 1 &&\n                    <>\n                        <p className={styles.headerText} style={{ marginTop: '18px' }}>\n                            {t('StreamerProfileEditor.OnBoarding.header2')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body2')}\n                        </p>\n                        <BioEditorTextArea bio={bio}\n                            setBio={updateBio}\n                            error={bioError}\n                            minLength={MIN_BIO_LENGTH} />\n                    </>\n                }\n                {currentStep === 2 &&\n                    <div style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}>\n                        <p className={styles.headerText} style={{ marginTop: '18px' }}>\n                            {t('StreamerProfileEditor.OnBoarding.header3')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body3')}\n                        </p>\n                        <StreamerTextInput\n                            containerClassName={styles.modalTagSearchContainer}\n                            textInputStyle={{ backgroundColor: (tagSearch.length === 43 || tagError) ? '#802750' : '#202750' }}\n                            textInputClassName={styles.modalTagSearchTextInput}\n                            value={tagSearch}\n                            onChange={onTagSearchChange}\n                            placeholder={t('StreamerProfileEditor.addTagPlaceholder')}\n                            fullWidth />\n                        {tagError &&\n                            <p style={{ color: 'rgba(255, 255, 255, .65)', fontSize: 10 }}>\n                                {showTagHelper ?\n                                    t('StreamerProfileEditor.OnBoarding.tagErrorNotSelected')\n                                    :\n                                    t('StreamerProfileEditor.OnBoarding.minTags', { minTags: MIN_TAGS })\n                                }\n                            </p>\n                        }\n                        <ul className={styles.modalTagsList}\n                            style={{\n                                width: '100%',\n                                overflowY: 'auto',\n                                scrollBehavior: 'smooth',\n                            }}>\n                            {tags.map((data, index) => (\n                                <li key={index} className={styles.modalTag}>\n                                    <QaplaChip\n                                        label={data.label.length > 20 ? data.label.slice(0, 20) + '...' : data.label}\n                                        style={{ backgroundColor: data.selected ? '#4040FF' : 'rgba(64, 64, 255, 0.30859)' }}\n                                        onClick={(e) => tagClick(data, index, e)}\n                                    />\n                                </li>\n                            ))}\n                            {tagSearch !== '' &&\n                                <li className={styles.modalTag}>\n                                    <QaplaChip\n                                        label={tagSearch}\n                                        onClick={addNewTag}\n                                    />\n                                </li>\n                            }\n                        </ul>\n                    </div>\n                }\n                {currentStep === 3 &&\n                    <>\n                        <p className={styles.headerText} style={{ marginTop: '18px' }}>\n                            {t('StreamerProfileEditor.OnBoarding.header4')}\n                        </p>\n                        <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                            {t('StreamerProfileEditor.OnBoarding.body4')}\n                        </p>\n                        <div style={{\n                            marginTop: '35px',\n                        }}>\n                            <p className={`${styles.finalListText}`}>\n                                {t('StreamerProfileEditor.OnBoarding.waysOfSharing')}\n                            </p>\n                            <p className={`${styles.finalListText}`} style={{\n                                marginTop: '18px',\n                            }}>\n                                {t('StreamerProfileEditor.OnBoarding.addToYourBio')}\n                            </p>\n                            <p className={`${styles.finalListText}`} style={{\n                                marginTop: '18px',\n                            }}>\n                                {t('StreamerProfileEditor.OnBoarding.useItAsLinkInBio')}\n                            </p>\n                            <p className={`${styles.finalListText}`} style={{\n                                marginTop: '18px',\n                            }}>\n                                {t('StreamerProfileEditor.OnBoarding.addToNightbot')}\n                            </p>\n                        </div>\n                        <div className={styles.twitchURLContainer}>\n                            <Tooltip onClick={copyTwitchURL} style={{ cursor: 'pointer' }} placement='top' open={openTooltip} title='Copiado'>\n                                <div className={styles.twitchURLSubContainer}>\n                                    <p href={qaplaLink} target='_blank' rel='noreferrer' className={styles.twitchURL}>\n                                        {qaplaLink}\n                                    </p>\n                                    <CopyIcon className={styles.copyIcon} />\n                                </div>\n                            </Tooltip>\n                        </div>\n                    </>\n                }\n            </div>\n            <div\n                style={{\n                    marginTop: 24,\n                }}>\n                <Button\n                    disabled={qaplaLinkAlias === ''}\n                    onClick={handleMainButton}\n                    className={classes.button}\n                >\n                    {currentStep === 0 &&\n                        t('StreamerProfileEditor.OnBoarding.createProfileLink')\n                    }\n                    {currentStep === 1 &&\n                        t('StreamerProfileEditor.OnBoarding.confirmBio')\n                    }\n                    {currentStep === 2 &&\n                        t('StreamerProfileEditor.OnBoarding.finish')\n                    }\n                    {currentStep === 3 &&\n                        t('StreamerProfileEditor.OnBoarding.goToProfile')\n                    }\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default StreamerProfileEditorOnBoarding;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],["293","294"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["295","296"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\n\nconst useStyles = makeStyles(() => ({\n    languageLabel: {\n        color: '#FFF',\n        fontSize: 16,\n        fontWeight: 600\n    }\n}));\n\nconst LanguageSelect = () => {\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\n    const [langData, setLangData] = useState([])\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        let tempLangArr = []\n        getAvailableLanguages().map((languageCode) => (\n            tempLangArr.push({\n                value: languageCode,\n                label: t(`LanguageHandler.languages.${languageCode}`)\n            })\n        ))\n        setLangData(tempLangArr)\n    }, [t])\n\n    const onLanguageChanged = (languageCode) => {\n        changeLanguage(languageCode);\n        setCurrentLanguageCode(languageCode);\n    }\n\n    return (\n        <div style={{\n            display: 'flex'\n        }}>\n            <TranslateIcon style={{\n                display: 'flex'\n            }} />\n            {/* The style of this select needs to be implemented inline */}\n            <div style={{\n                marginTop: '-10px',\n            }}>\n                <StreamerSelect\n                    style={{ backgroundColor: '#141833' }}\n                    data={langData}\n                    value={currentLanguageCode}\n                    onChange={onLanguageChanged}\n                    overflowY='hidden'\n                    overflowX='hidden'\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LanguageSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx",["297","298","299","300"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileImgCoin/StreamerProfileImgCoin.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["301","302","303"],"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\n\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\nimport ModalQoinsDrops from '../ModalQoinsDrops/ModalQoinsDrops';\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n        backdropFilter: 'blur(50px)',\n        [theme.breakpoints.down('md')]: {\n            backgroundColor: '#141833',\n        }\n    },\n    dialogRoot: {\n    },\n    paper: {\n        backgroundColor: '#141833',\n        color: '#FFF',\n        overflow: 'visible',\n        borderRadius: '35px',\n        padding: '64px',\n        minWidth: 'min-content',\n        [theme.breakpoints.down('md')]: {\n            minWidth: '100%',\n            minHeight: '100%',\n        }\n    },\n    itemsContainer: {\n        display: 'flex',\n        [theme.breakpoints.down('md')]: {\n            padding: '184px 66px 20px 66px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            flexWrap: 'wrap',\n            gap: '50px 0px'\n        }\n    },\n    closeButtonContainer: {\n        position: 'absolute',\n        top: '24px',\n        right: '24px',\n        [theme.breakpoints.down('md')]: {\n            top: '118px',\n            right: '128px',\n        }\n    },\n    closeButton: {\n        '&:hover': {\n            cursor: 'pointer'\n        }\n    },\n    title: {\n        fontSize: '18px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '32px',\n        letterSpacing: '0px'\n    },\n    subtitle: {\n        color: '#FFFFFF9A',\n        fontSize: '12px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '18px',\n        letterSpacing: '0px',\n    },\n    startButtonRoot: {\n        backgroundColor: '#00FFDD',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    startText: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        borderRadius: '16px',\n        color: '#FFFFFF'\n    },\n    enabledRewardText: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        color: '#00FFDD'\n    },\n    qoinsButtonRoot: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    qoinsButtonRootDisabled: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF !important',\n        textTransform: 'none',\n        opacity: '0.2'\n    },\n    textInputContainer: {\n        backgroundColor: '#202750',\n        borderRadius: '16px',\n        paddingRight: '4px',\n        overflow: 'hidden'\n    },\n    sendContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        [theme.breakpoints.up('md')]: {\n            minWidth: '400px',\n        },\n    },\n    sendButtonRoot: {\n        backgroundColor: '#6C5DD3',\n        width: '165px',\n        height: '56px',\n        borderRadius: '16px',\n        alignSelf: 'flex-end',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.9'\n        },\n        '&:active': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.8'\n        }\n    },\n    eventNameContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        position: 'absolute',\n        right: '30px',\n        bottom: '-40px',\n        gap: '0px 5px',\n        [theme.breakpoints.down('md')]: {\n            top: '98px',\n            left: '128px',\n            bottom: 'auto',\n            width: '60%',\n            // right: 'auto',\n            paddingTop: '30px',\n            backgroundColor: '#141833'\n        },\n        [theme.breakpoints.down('xs')]: {\n            top: '148px',\n            left: '128px',\n            bottom: 'auto',\n            right: 'auto',\n            paddingTop: '30px',\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n        },\n\n        fontSize: '16px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '24px',\n        letterSpacing: '0px',\n    },\n    eventName: {\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\n        backgroundClip: 'text',\n        WebkitBackgroundClip: 'text',\n        WebkitTextFillColor: 'transparent'\n    },\n}));\n\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\n    const classes = useStyles();\n    const [message, setMessage] = useState('');\n    const [dots, setDots] = useState('')\n    const [enablingQoins, setEnablingQoins] = useState(false);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\n            setTimeout(() => {\n                if (dots.length > 2) {\n                    setDots('');\n                } else {\n                    setDots(dots + '.');\n                }\n            }, 500);\n        }\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\n            setDots('');\n        }\n    }, [streamStarted, dots, enablingQoins]);\n\n    const sendNotificationHandler = async () => {\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\n        await sendMessage(message);\n        setMessage('');\n    }\n\n    return (\n        <Dialog onClose={onClose} open={open} classes={{\n            container: classes.dialogContainer,\n            root: classes.dialogRoot,\n            paper: classes.paper\n        }}\n            maxWidth='sm'\n            fullWidth>\n            <DialogContent style={{ padding: '0px' }}>\n                <div className={classes.closeButtonContainer}>\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\n                </div>\n                <div className={classes.itemsContainer}>\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\n                        <ModalQoinsDrops\n                            stream={stream}\n                            streamStarted={streamStarted}\n                            closingStream={closingStream}\n                            startStream={startStream}\n                            enableQoins={enableQoins} />\n                    </div>\n                    <div className={classes.sendContainer}>\n                        <p className={classes.title}>\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\n                        </p>\n                        <p className={classes.subtitle}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\n                        </p>\n                        <div style={{ height: '20px' }} />\n                        <StreamerTextInput\n                            value={message}\n                            onChange={(e) => setMessage(e.target.value)}\n                            textInputStyle={{ marginTop: '0px' }}\n                            textInputClassName={classes.textInputContainer}\n                            fullWidth\n                            multiline\n                            rows={6}\n                            maxRows={6}\n                            rowsMax={6}\n                        />\n                        <div style={{ height: '12px' }} />\n                        <Button\n                            onClick={sendNotificationHandler}\n                            classes={{\n                                root: classes.sendButtonRoot\n                            }}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogContent>\n            <div className={classes.eventNameContainer}>\n                <p className={classes.eventName}>\n                    {`${streamTitle} `}\n                </p>\n                <p>\n                    {`/ ${date} / ${hour}`}\n                </p>\n            </div>\n\n        </Dialog>\n    )\n}\n\nexport default EventManagementDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["304","305","306"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n        if (initialLabel && value === undefined) {\n            setSelectedLabel(initialLabel);\n        }\n    }, [data, initialLabel, value])\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["307","308"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/interactionsQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BarProgressBit/BarProgressBit.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutConfirmDialog/CasthQutConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["309","310","311"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["312"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CasthQutDialog/CasthQutDialog.jsx",["313"],"import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Dialog, makeStyles } from \"@material-ui/core\";\n\nimport style from \"./CasthQutDialog.module.css\";\nimport { ReactComponent as BitsIcon } from \"./../../assets/BitsIcon.svg\";\nimport { notifyCashOutToQaplaAdmin } from \"../../services/discord\";\nimport { saveStreamerCashOutRequest } from \"../../services/database\";\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n    backdropFilter: \"blur(20px)\",\n    },\n    dialogRoot: {},\n    paper: {\n    backgroundColor: \"#141833\",\n    color: \"#FFF\",\n    overflow: \"visible\",\n    borderRadius: \"35px\",\n    },\n}));\n\nconst CasthQutDialog = ({ user, setOpen, setOpenConfirm, setConfirmCashOut, amountBits, open, onClose }) => {\n    const [bits, setBits] = useState(0);\n    const [disableButton, setDisableButton] = useState(false);\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (amountBits > 0 && !bits) {\n        setBits(amountBits);\n        }\n    }, [amountBits]);\n\n  const confirmCashOut = async () => {\n        const qoinsCashOut = amountBits / 10 * 200;\n\n        setDisableButton(true);\n        await saveStreamerCashOutRequest(user.uid, qoinsCashOut, amountBits);\n        await notifyCashOutToQaplaAdmin(user.uid, user.displayName, qoinsCashOut, amountBits);\n        setOpenConfirm(true);\n        setConfirmCashOut(true);\n        setDisableButton(false);\n  }\n\n  return (\n    <Dialog\n          onClose={onClose}\n          open={open}\n          classes={{\n          container: classes.dialogContainer,\n          root: classes.dialogRoot,\n          paper: classes.paper,\n    }}>\n        <div className={style.container_Dialog}>\n            <div className={style.container}>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <BitsIcon style={{ width: \"35px\", height: \"35px\" }} />\n                <h1>\n                {bits.toLocaleString()}\n                </h1>\n            </div>\n            <p className={style.calculated_Bit}>200 Qoins = 10 Bits</p>\n            <p className={style.text}>\n                {t('StreamerProfile.BarProgressBit.confirmCashOut')}\n            </p>\n            <button disabled={disableButton} onClick={confirmCashOut} className={style.button_cash}>\n                {t('StreamerProfile.BarProgressBit.cashOut')}\n            </button>\n            <button onClick={() => setOpen(false)} className={style.button_cancel}>\n                {t('StreamerProfile.BarProgressBit.cancel')}\n            </button>\n            </div>\n        </div>\n    </Dialog>\n  );\n};\n\nexport default CasthQutDialog;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["314","315","316"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["317","318","319","320","321"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CardsPayments/CardsPayments.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/branch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/ChatbotCommand.jsx",["322","323","324","325","326","327","328","329"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GridSelector/GridSelector.jsx",[],{"ruleId":"330","replacedBy":"331"},{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","severity":1,"message":"335","line":74,"column":11,"nodeType":"336","messageId":"337","endLine":74,"endColumn":18},{"ruleId":"338","severity":1,"message":"339","line":201,"column":8,"nodeType":"340","endLine":201,"endColumn":14,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":263,"column":25,"nodeType":"344","endLine":263,"endColumn":49},{"ruleId":"334","severity":1,"message":"345","line":126,"column":27,"nodeType":"336","messageId":"337","endLine":126,"endColumn":43},{"ruleId":"334","severity":1,"message":"346","line":127,"column":24,"nodeType":"336","messageId":"337","endLine":127,"endColumn":37},{"ruleId":"334","severity":1,"message":"347","line":13,"column":5,"nodeType":"336","messageId":"337","endLine":13,"endColumn":11},{"ruleId":"334","severity":1,"message":"348","line":232,"column":12,"nodeType":"336","messageId":"337","endLine":232,"endColumn":29},{"ruleId":"334","severity":1,"message":"349","line":241,"column":12,"nodeType":"336","messageId":"337","endLine":241,"endColumn":21},{"ruleId":"334","severity":1,"message":"350","line":241,"column":23,"nodeType":"336","messageId":"337","endLine":241,"endColumn":35},{"ruleId":"338","severity":1,"message":"351","line":299,"column":8,"nodeType":"340","endLine":299,"endColumn":14,"suggestions":"352"},{"ruleId":"334","severity":1,"message":"353","line":9,"column":5,"nodeType":"336","messageId":"337","endLine":9,"endColumn":9},{"ruleId":"334","severity":1,"message":"354","line":10,"column":5,"nodeType":"336","messageId":"337","endLine":10,"endColumn":10},{"ruleId":"334","severity":1,"message":"355","line":108,"column":7,"nodeType":"336","messageId":"337","endLine":108,"endColumn":25},{"ruleId":"356","severity":1,"message":"357","line":27,"column":1,"nodeType":"358","endLine":27,"endColumn":51},{"ruleId":"334","severity":1,"message":"359","line":68,"column":7,"nodeType":"336","messageId":"337","endLine":68,"endColumn":16},{"ruleId":"330","replacedBy":"360"},{"ruleId":"332","replacedBy":"361"},{"ruleId":"334","severity":1,"message":"362","line":7,"column":28,"nodeType":"336","messageId":"337","endLine":7,"endColumn":37},{"ruleId":"334","severity":1,"message":"335","line":21,"column":11,"nodeType":"336","messageId":"337","endLine":21,"endColumn":18},{"ruleId":"334","severity":1,"message":"363","line":2,"column":36,"nodeType":"336","messageId":"337","endLine":2,"endColumn":52},{"ruleId":"334","severity":1,"message":"364","line":49,"column":12,"nodeType":"336","messageId":"337","endLine":49,"endColumn":25},{"ruleId":"338","severity":1,"message":"365","line":86,"column":8,"nodeType":"340","endLine":86,"endColumn":46,"suggestions":"366"},{"ruleId":"334","severity":1,"message":"367","line":161,"column":11,"nodeType":"336","messageId":"337","endLine":161,"endColumn":31},{"ruleId":"334","severity":1,"message":"368","line":7,"column":28,"nodeType":"336","messageId":"337","endLine":7,"endColumn":38},{"ruleId":"334","severity":1,"message":"369","line":228,"column":27,"nodeType":"336","messageId":"337","endLine":228,"endColumn":43},{"ruleId":"338","severity":1,"message":"370","line":244,"column":8,"nodeType":"340","endLine":244,"endColumn":44,"suggestions":"371"},{"ruleId":"334","severity":1,"message":"372","line":4,"column":5,"nodeType":"336","messageId":"337","endLine":4,"endColumn":14},{"ruleId":"334","severity":1,"message":"373","line":5,"column":5,"nodeType":"336","messageId":"337","endLine":5,"endColumn":17},{"ruleId":"334","severity":1,"message":"374","line":6,"column":5,"nodeType":"336","messageId":"337","endLine":6,"endColumn":15},{"ruleId":"334","severity":1,"message":"375","line":273,"column":21,"nodeType":"336","messageId":"337","endLine":273,"endColumn":31},{"ruleId":"338","severity":1,"message":"376","line":453,"column":8,"nodeType":"340","endLine":453,"endColumn":14,"suggestions":"377"},{"ruleId":"334","severity":1,"message":"378","line":6,"column":8,"nodeType":"336","messageId":"337","endLine":6,"endColumn":14},{"ruleId":"338","severity":1,"message":"379","line":343,"column":8,"nodeType":"340","endLine":343,"endColumn":102,"suggestions":"380"},{"ruleId":"338","severity":1,"message":"381","line":485,"column":8,"nodeType":"340","endLine":485,"endColumn":42,"suggestions":"382"},{"ruleId":"356","severity":1,"message":"357","line":16,"column":1,"nodeType":"358","endLine":16,"endColumn":52},{"ruleId":"338","severity":1,"message":"383","line":33,"column":8,"nodeType":"340","endLine":33,"endColumn":20,"suggestions":"384"},{"ruleId":"334","severity":1,"message":"385","line":33,"column":12,"nodeType":"336","messageId":"337","endLine":33,"endColumn":40},{"ruleId":"338","severity":1,"message":"339","line":113,"column":8,"nodeType":"340","endLine":113,"endColumn":38,"suggestions":"386"},{"ruleId":"334","severity":1,"message":"387","line":121,"column":11,"nodeType":"336","messageId":"337","endLine":121,"endColumn":39},{"ruleId":"334","severity":1,"message":"388","line":4,"column":5,"nodeType":"336","messageId":"337","endLine":4,"endColumn":11},{"ruleId":"334","severity":1,"message":"389","line":5,"column":5,"nodeType":"336","messageId":"337","endLine":5,"endColumn":12},{"ruleId":"334","severity":1,"message":"390","line":6,"column":5,"nodeType":"336","messageId":"337","endLine":6,"endColumn":9},{"ruleId":"334","severity":1,"message":"391","line":7,"column":5,"nodeType":"336","messageId":"337","endLine":7,"endColumn":11},{"ruleId":"334","severity":1,"message":"392","line":14,"column":8,"nodeType":"336","messageId":"337","endLine":14,"endColumn":23},{"ruleId":"334","severity":1,"message":"393","line":1,"column":27,"nodeType":"336","messageId":"337","endLine":1,"endColumn":36},{"ruleId":"334","severity":1,"message":"394","line":2,"column":10,"nodeType":"336","messageId":"337","endLine":2,"endColumn":18},{"ruleId":"334","severity":1,"message":"395","line":2,"column":32,"nodeType":"336","messageId":"337","endLine":2,"endColumn":36},{"ruleId":"334","severity":1,"message":"396","line":2,"column":38,"nodeType":"336","messageId":"337","endLine":2,"endColumn":42},{"ruleId":"334","severity":1,"message":"397","line":2,"column":44,"nodeType":"336","messageId":"337","endLine":2,"endColumn":53},{"ruleId":"334","severity":1,"message":"363","line":2,"column":64,"nodeType":"336","messageId":"337","endLine":2,"endColumn":80},{"ruleId":"334","severity":1,"message":"391","line":2,"column":82,"nodeType":"336","messageId":"337","endLine":2,"endColumn":88},{"ruleId":"334","severity":1,"message":"398","line":3,"column":10,"nodeType":"336","messageId":"337","endLine":3,"endColumn":24},"no-native-reassign",["399"],"no-negated-in-lhs",["400"],"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.","ArrayExpression",["401"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","'Hidden' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["402"],"'LEFT' is defined but never used.","'RIGHT' is defined but never used.","'InstructionSection' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'QaplaDots' is assigned a value but never used.",["399"],["400"],"'ArrowIcon' is defined but never used.","'FormControlLabel' is defined but never used.","'qoinsReaction' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["403"],"'handleQoinsReactions' is assigned a value but never used.","'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["404"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["405"],"'styles' is defined but never used.","React Hook useEffect has missing dependencies: 'alertSideRight', 'finishReaction', and 'queueAnimation'. Either include them or remove the dependency array.",["406"],"React Hook useEffect has missing dependencies: 'displayDonation', 'donation.media', 'donation.message', and 'donation.messageExtraData'. Either include them or remove the dependency array.",["407"],"React Hook useEffect has a missing dependency: 'bits'. Either include it or remove the dependency array.",["408"],"'openTermsAndConditionsDialog' is assigned a value but never used.",["409"],"'closeTermsAndConditionsModal' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","'useEffect' is defined but never used.","'Checkbox' is defined but never used.","'Grid' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'useTranslation' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"426","fix":"427"},"Update the dependencies array to be: [query, t, user]",{"range":"428","text":"429"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"430","text":"431"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"432","text":"433"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"434","text":"435"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"436","text":"437"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",{"range":"438","text":"439"},"Update the dependencies array to be: [clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",{"range":"440","text":"441"},"Update the dependencies array to be: [amountBits, bits]",{"range":"442","text":"443"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"444","text":"445"},[5289,5295],"[query, t, user]",[9311,9317],"[socialLinksInitialValue, twitchURL, user]",[3938,3976],"[user.uid, user.id, user.refreshToken, t, history]",[6805,6841],"[streamStarted, dots, enablingQoins, stream]",[17494,17500],"[setPendingMessages, user]",[16351,16445],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",[21954,21988],"[clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",[1065,1077],"[amountBits, bits]",[5435,5465],"[user, history, isLoadingAuth, query, t]"]
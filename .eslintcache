[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/AddStreamerLinks/AddStreamerLinks.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CustomerPortal/CustomerPortal.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/SubscriptionCheckout/SubscriptionCheckout.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"25"},{"size":18410,"mtime":1639761236399,"results":"26","hashOfConfig":"27"},{"size":226,"mtime":1636068211199,"results":"28","hashOfConfig":"27"},{"size":2975,"mtime":1614731664830,"results":"29","hashOfConfig":"27"},{"size":24158,"mtime":1637808658714,"results":"30","hashOfConfig":"27"},{"size":2273,"mtime":1639761309869,"results":"31","hashOfConfig":"27"},{"size":6854,"mtime":1640102387708,"results":"32","hashOfConfig":"27"},{"size":3198,"mtime":1639694583108,"results":"33","hashOfConfig":"27"},{"size":962,"mtime":1637785151297,"results":"34","hashOfConfig":"27"},{"size":291,"mtime":1635283796969,"results":"35","hashOfConfig":"27"},{"size":1011,"mtime":1614731664821,"results":"36","hashOfConfig":"27"},{"size":1596,"mtime":1635283796967,"results":"37","hashOfConfig":"27"},{"size":3325,"mtime":1614731664825,"results":"38","hashOfConfig":"27"},{"size":3579,"mtime":1614731664824,"results":"39","hashOfConfig":"27"},{"size":20379,"mtime":1633450179136,"results":"40","hashOfConfig":"27"},{"size":1307,"mtime":1639694583108,"results":"41","hashOfConfig":"27"},{"size":5291,"mtime":1635283796969,"results":"42","hashOfConfig":"27"},{"size":4134,"mtime":1639761292611,"results":"43","hashOfConfig":"27"},{"size":12620,"mtime":1639761309869,"results":"44","hashOfConfig":"27"},{"size":6968,"mtime":1638029350636,"results":"45","hashOfConfig":"27"},{"size":27592,"mtime":1639436010967,"results":"46","hashOfConfig":"27"},{"size":1369,"mtime":1639761801332,"results":"47","hashOfConfig":"27"},{"size":1361,"mtime":1635283796971,"results":"48","hashOfConfig":"27"},{"size":1784,"mtime":1639761801331,"results":"49","hashOfConfig":"27"},{"size":695,"mtime":1635283796969,"results":"50","hashOfConfig":"27"},{"size":1288,"mtime":1637785151307,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rfo3np",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",["106"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["107","108"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["109","110"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, FormControlLabel, Radio, RadioGroup, Button, InputAdornment, InputLabel, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport DayJsUtils from '@date-io/dayjs';\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer } from './../../services/database';\n\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as CheckedIcon } from './../../assets/CheckedIcon.svg';\nimport { ReactComponent as UncheckedIcon } from './../../assets/UncheckedIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamDetailsDialog from '../NewStreamDetailsDialog/NewStreamDetailsDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    useEffect(() => {\n        if (user && !user.premium) {\n            history.push('/profile');\n        }\n    }, [user]);\n\n    const userLang = navigator.language || navigator.userLanguage;\n\n    const classes = useStyles();\n    const history = useHistory();\n    const [openDetailsDialog, setOpenDetailsDialog] = useState(false);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date.$d);\n    };\n    const handleGameChange = (game) => {\n        setSelectedGame(game.target.value);\n    };\n    const handleEventTypeChange = (event) => {\n        setSelectedEvent(event.target.value);\n    };\n\n    const handleStringDateChange = (event) => {\n        setStringDate(event.target.value);\n    }\n\n    const openConfirmationDialog = () => setOpenDetailsDialog(true);\n\n    const submitEvent = async () => {\n        if (selectedDate < minDate) {\n            alert('All requests must be sent at least 24 hours before the stream');\n            return;\n        }\n        if (!selectedGame) {\n            alert('Verify that all fields have been filled correctly');\n            return;\n        }\n\n        const { endDate } = user.currentPeriod;\n\n        /**\n         * Check if the selected date is valid to create the event based on the end of the streamer subscription\n         */\n        if (selectedDate.getTime() <= endDate) {\n\n            const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\n\n            let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\n\n            if (!userCanCreateStream) {\n                if (user.boughtStreams) {\n                    /**\n                     * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\n                     * the user can create the stream, this function will also remove expired packages or packages that has been already used\n                     */\n                     userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\n                        if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\n                            addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\n                            return true;\n                        } else {\n                            removeStreamPackageOfStreamer(user.uid, streamsPackageId);\n                        }\n                    });\n                }\n            } else {\n                addToStreamsRequestedOnSubscriptionDetails(user.uid);\n            }\n\n            /**\n             * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n             * is lower or equal to the user limit per month then we create the event\n             */\n            if (userCanCreateStream) {\n                const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                await createNewStreamRequest(user, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n                history.push('/success');\n            } else {\n                // Hacer un modal chido para convencerlos de mejorar su plan o comprar eventos aparte\n                alert('You have reached the limit of streams for your subscription');\n            }\n        } else {\n            alert('The selected date is not valid as your plan will expire before it');\n        }\n    }\n\n    let gameList = [];\n\n    if (games.allGames) {\n        gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] })).sort((a, b) => {\n            if (a.gameName < b.gameName) {\n                return -1;\n            }\n            if (a.gameName > b.gameName) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <BackButton onClick={history.goBack} />\n                </Grid>\n                <Grid item sm={8}>\n                    <h1 className={styles.title}>\n                        What are you playing?\n                    </h1>\n                    <StreamerSelect\n                        value={selectedGame}\n                        onChange={handleGameChange}\n                        Icon={ArrowIcon}\n                        label='Select your game'>\n                        <option style={{\n                            backgroundColor: '#141833',\n                            fontSize: '14px'\n                        }} value={null}></option>\n                        {games.allGames && gameList.map((game) => {\n                            if (!game.gameName.toLowerCase().includes('twitch')) {\n                                return <option style={{\n                                    backgroundColor: '#141833',\n                                    fontSize: '14px'\n                                }} value={game.gameKey}>{game.gameName}</option>\n                            }\n\n                            return null;\n                        })}\n                    </StreamerSelect>\n                    <h1 className={styles.title}>\n                        When?\n                    </h1>\n                    <MuiPickersUtilsProvider utils={DayJsUtils}>\n                        <Grid container spacing={4}>\n                            <Grid item sm={4}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    Date\n                                </InputLabel>\n                                <KeyboardDatePicker\n                                    clearable\n                                    disablePast\n                                    disableToolbar\n                                    autoOk\n                                    value={selectedDate}\n                                    placeholder='10-10-2021'\n                                    onChange={handleDateChange}\n                                    defaultValue={new Date()}\n                                    minDate={minDate}\n                                    minDateMessage='All requests must be sent at least 24 hours before the stream'\n                                    format='DD-MM-YY ddd'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <CalendarIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={4}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    Time\n                                </InputLabel>\n                                <KeyboardTimePicker\n                                    ampm={false}\n                                    disableToolbar\n                                    autoOk\n                                    error={selectedDate <= minDate}\n                                    helperText={selectedDate >= minDate ? '' : 'All requests must be sent at least 24 hours before the stream'}\n                                    value={selectedDate}\n                                    placeholder='08:00 AM'\n                                    onChange={handleDateChange}\n                                    min\n                                    mask='__:__'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <TimeIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={8}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    Confirm your date\n                                </InputLabel>\n                                <StreamerTextInput placeholder='Example: 15 de abril 16:00 Hora de Ciudad de México'\n                                    fullWidth\n                                    value={stringDate}\n                                    onChange={handleStringDateChange} />\n                            </Grid>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                    <h1 className={styles.title}>\n                        Stream type\n                    </h1>\n                    <RadioGroup name={'eventType'} value={selectedEvent} onChange={(event) => { handleEventTypeChange(event) }}>\n                        <Grid container>\n                            <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'exp'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio defaultChecked\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label='Casual (XQ)' />\n                            </Grid>\n                            {/* <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'tournament'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label='Tournament' />\n                            </Grid> */}\n                        </Grid>\n                    </RadioGroup>\n                    <Grid container className={classes.accordionContainer}>\n                        <Accordion\n                            className={classes.accordion}\n                        >\n                            <AccordionSummary\n                                expandIcon={<ArrowIcon />}\n                                id={\"moreOptions\"}\n                                aria-controls=\"panel1a-content\"\n                            >\n                                <InputLabel\n                                    className={classes.label}\n                                >\n                                    Advanced (optional)\n                            </InputLabel>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Grid container direction={'column'} className={classes.accordionGridRoot}>\n                                    <InputLabel className={classes.label}>\n                                        Feeling creative? Give your stream a cool name. Write it in Spanish! It's OK.\n                                    </InputLabel>\n                                    <Grid container>\n                                        <h1 className={styles.title}>\n                                            Stream title\n                                        </h1>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label='Stream Title'\n                                                    placeholder='i.e. Manqueando en Fall Guys'\n                                                    id='eventTitle'\n                                                    fullWidth={true}\n                                                    value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <h1 className={styles.title}>\n                                        Stream description\n                                    </h1>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label='Subtitle'\n                                                    id={'eventDescriptionTitle'}\n                                                    placeholder='Subtitle'\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptionsTitle ? userLang.toLowerCase().includes('es') ? optionalData.descriptionsTitle.es : optionalData.descriptionsTitle.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem} style={{ marginTop: '1rem' }}>\n                                                <StreamerTextInput\n                                                    id={'eventDescription'}\n                                                    label='Stream Description'\n                                                    placeholder='Share what your stream is going to be about.'\n                                                    multiline={true}\n                                                    rows={3}\n                                                    rowsMax={30}\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptions ? userLang.toLowerCase().includes('es') ? optionalData.descriptions.es : optionalData.descriptions.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n                        </Accordion>\n                    </Grid>\n                    <Button\n                        className={styles.button}\n                        onClick={openConfirmationDialog}>\n                        Submit\n                    </Button>\n                </Grid>\n            </Grid>\n            <NewStreamDetailsDialog\n                open={openDetailsDialog}\n                onClose={() => setOpenDetailsDialog(false)}\n                submitEvent={submitEvent}\n                game={selectedGame}\n                date={`${selectedDate.toLocaleDateString()} ${selectedDate.toLocaleTimeString()}`}\n                userName={user ? user.displayName : ''}\n                {...optionalData} />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/AddStreamerLinks/AddStreamerLinks.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["111","112"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],["113","114"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["115"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CustomerPortal/CustomerPortal.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/SubscriptionCheckout/SubscriptionCheckout.jsx",["116"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles, Dialog, DialogContent } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\n\nimport { saveSubscriptionInformation, updateSubscriptionDetails } from '../../services/database';\nimport ProcessingPaymentDialog from '../ProcessingPaymentDialog/ProcessingPaymentDialog';\n\nlet userIsTryingToSubscribe = false;\n\nconst useStyles = makeStyles(() => ({\n    paper: {\n        background: 'transparent',\n        boxShadow: 'none',\n        borderRadius: 20,\n        paddingLeft: 16,\n        paddingTop: 8\n    },\n    whiteColor: {\n        color: '#FFF'\n    }\n}));\n\nconst SubscriptionCheckout = ({ user, open, onClose, billingPageId, streamsIncluded, redemptionsPerStream }) => {\n    const [openProcessingPaymentDialog, setOpenProcessingPaymentDialog] = useState(false);\n    const [paymentProcessed, setPaymentProcessed] = useState(false);\n\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        if (user && user.uid && user.email && billingPageId) {\n            window.servicebotSettings = {\n                billing_page_id: billingPageId,\n                email: user.email,\n                handleResponse: async function(payload) {\n                    switch (payload.event) {\n                        case 'create_subscription':\n                            if (payload.response && payload.response.customer && payload.response.customer.id) {\n                                setOpenProcessingPaymentDialog(true);\n                                userIsTryingToSubscribe = true;\n                                await saveSubscriptionInformation(user.uid, payload.response.customer.id, payload.response.current_period_start * 1000, payload.response.current_period_end * 1000);\n                                await updateSubscriptionDetails(user.uid, { streamsIncluded, redemptionsPerStream });\n\n                                setPaymentProcessed(true);\n                            }\n                            break;\n                        case 'resubscribe':\n                            if (payload.response && payload.response.customer) {\n                                setOpenProcessingPaymentDialog(true);\n                                userIsTryingToSubscribe = true;\n                                await saveSubscriptionInformation(user.uid, payload.response.customer, payload.response.current_period_start * 1000, payload.response.current_period_end * 1000);\n                                await updateSubscriptionDetails(user.uid, { streamsIncluded, redemptionsPerStream });\n\n                                setPaymentProcessed(true);\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            };\n            (function () {\n                var s = document.createElement(\"script\")\n                s.src = 'https://js.billflow.io/billflow-embed.js';\n                s.async = true\n                s.type = \"text/javascript\"\n                var x = document.getElementsByTagName(\"script\")[0]\n                x.parentNode.insertBefore(s, x)\n            })();\n        }\n    }, [user, history, userIsTryingToSubscribe, billingPageId]);\n\n    return (\n        <>\n            {!paymentProcessed &&\n                <Dialog open={open}\n                    onClose={!openProcessingPaymentDialog ? onClose : () => {}}\n                    fullWidth\n                    maxWidth='md'\n                    classes={{\n                        scrollPaper: classes.scrollPaper,\n                        paper: classes.paper\n                    }}>\n                    <DialogContent>\n                        <div id=\"billflow-embed\"></div>\n                    </DialogContent>\n                </Dialog>\n            }\n            <ProcessingPaymentDialog open={openProcessingPaymentDialog}\n                finished={paymentProcessed}\n                onClose={() => { setOpenProcessingPaymentDialog(false); history.push('/profile') }} />\n        </>\n    );\n}\n\nexport default SubscriptionCheckout;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",["117"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx",["118"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["119"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],{"ruleId":"120","severity":1,"message":"121","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":20},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":111,"column":8,"nodeType":"130","endLine":111,"endColumn":14,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":228,"column":100,"nodeType":"134","messageId":"135","endLine":228,"endColumn":102},{"ruleId":"120","severity":1,"message":"136","line":14,"column":28,"nodeType":"122","messageId":"123","endLine":14,"endColumn":45},{"ruleId":"128","severity":1,"message":"137","line":90,"column":8,"nodeType":"130","endLine":90,"endColumn":68,"suggestions":"138"},{"ruleId":"124","replacedBy":"139"},{"ruleId":"126","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":13,"column":1,"nodeType":"143","endLine":13,"endColumn":52},{"ruleId":"128","severity":1,"message":"144","line":71,"column":8,"nodeType":"130","endLine":71,"endColumn":63,"suggestions":"145"},{"ruleId":"120","severity":1,"message":"146","line":40,"column":7,"nodeType":"122","messageId":"123","endLine":40,"endColumn":18},{"ruleId":"128","severity":1,"message":"147","line":211,"column":8,"nodeType":"130","endLine":211,"endColumn":81,"suggestions":"148"},{"ruleId":"141","severity":1,"message":"142","line":26,"column":1,"nodeType":"143","endLine":26,"endColumn":51},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["151"],"array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setAlertSideRight' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'alertSideRight'. Either include it or remove the dependency array.",["152"],["149"],["150"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'redemptionsPerStream' and 'streamsIncluded'. Either include them or remove the dependency array. Outer scope values like 'userIsTryingToSubscribe' aren't valid dependencies because mutating them doesn't re-render the component.",["153"],"'ProfileIcon' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onPong', 'rewardsAreCreated', and 't'. Either include them or remove the dependency array.",["154"],"no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [history, user]",{"range":"163","text":"164"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]",{"range":"165","text":"166"},"Update the dependencies array to be: [user, history, billingPageId, streamsIncluded, redemptionsPerStream]",{"range":"167","text":"168"},"Update the dependencies array to be: [streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",{"range":"169","text":"170"},[3801,3807],"[history, user]",[3582,3642],"[streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]",[3233,3288],"[user, history, billingPageId, streamsIncluded, redemptionsPerStream]",[7598,7671],"[streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]"]
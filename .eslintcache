[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStreamSuccessDialog.jsx":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QlanProgressBar\\QlanProgressBar.jsx":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx":"20","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx":"21","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js":"22","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js":"23","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx":"24","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTerms\\QaplaTerms.jsx":"25","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx":"26","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx":"27","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx":"28","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx":"29","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx":"30","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx":"31","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx":"32","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx":"33","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx":"34","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx":"35","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js":"36","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx":"37","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx":"38","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js":"39","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx":"40","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"41","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx":"42","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx":"43","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GoalProgressBar\\GoalProgressBar.jsx":"44","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js":"45","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js":"46","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx":"47","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js":"48","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QStore\\QStore.jsx":"49","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx":"50","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx":"51","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js":"52","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx":"53","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx":"54","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js":"55","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx":"56","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx":"57"},{"size":545,"mtime":1660938322012,"results":"58","hashOfConfig":"59"},{"size":899,"mtime":1660938322023,"results":"60","hashOfConfig":"59"},{"size":240,"mtime":1660938321776,"results":"61","hashOfConfig":"59"},{"size":17018,"mtime":1660938321975,"results":"62","hashOfConfig":"59"},{"size":35175,"mtime":1660938322000,"results":"63","hashOfConfig":"59"},{"size":1425,"mtime":1660938322018,"results":"64","hashOfConfig":"59"},{"size":3422,"mtime":1660938321980,"results":"65","hashOfConfig":"59"},{"size":20096,"mtime":1660938321994,"results":"66","hashOfConfig":"59"},{"size":3265,"mtime":1660938322004,"results":"67","hashOfConfig":"59"},{"size":12209,"mtime":1660938321991,"results":"68","hashOfConfig":"59"},{"size":2247,"mtime":1660938322016,"results":"69","hashOfConfig":"59"},{"size":3435,"mtime":1660938321986,"results":"70","hashOfConfig":"59"},{"size":5837,"mtime":1660938321985,"results":"71","hashOfConfig":"59"},{"size":3452,"mtime":1660938321983,"results":"72","hashOfConfig":"59"},{"size":657,"mtime":1660938321974,"results":"73","hashOfConfig":"59"},{"size":6504,"mtime":1660938321990,"results":"74","hashOfConfig":"59"},{"size":2074,"mtime":1660938321974,"results":"75","hashOfConfig":"59"},{"size":6746,"mtime":1660938322007,"results":"76","hashOfConfig":"59"},{"size":3682,"mtime":1660938321972,"results":"77","hashOfConfig":"59"},{"size":860,"mtime":1660938321993,"results":"78","hashOfConfig":"59"},{"size":8497,"mtime":1660938321968,"results":"79","hashOfConfig":"59"},{"size":8532,"mtime":1660938322021,"results":"80","hashOfConfig":"59"},{"size":2669,"mtime":1660938322016,"results":"81","hashOfConfig":"59"},{"size":1568,"mtime":1660938322011,"results":"82","hashOfConfig":"59"},{"size":29618,"mtime":1660938321989,"results":"83","hashOfConfig":"59"},{"size":2105,"mtime":1660938322006,"results":"84","hashOfConfig":"59"},{"size":15129,"mtime":1660938322002,"results":"85","hashOfConfig":"59"},{"size":3513,"mtime":1660938321984,"results":"86","hashOfConfig":"59"},{"size":18030,"mtime":1660938322005,"results":"87","hashOfConfig":"59"},{"size":19375,"mtime":1661271254719,"results":"88","hashOfConfig":"59"},{"size":3954,"mtime":1660938321987,"results":"89","hashOfConfig":"59"},{"size":3304,"mtime":1661435452719,"results":"90","hashOfConfig":"59"},{"size":13729,"mtime":1660938321985,"results":"91","hashOfConfig":"59"},{"size":21757,"mtime":1660938321969,"results":"92","hashOfConfig":"59"},{"size":2072,"mtime":1660938322009,"results":"93","hashOfConfig":"59"},{"size":35698,"mtime":1661204966373,"results":"94","hashOfConfig":"59"},{"size":23458,"mtime":1660938321971,"results":"95","hashOfConfig":"59"},{"size":1327,"mtime":1660938322010,"results":"96","hashOfConfig":"59"},{"size":1550,"mtime":1660938322017,"results":"97","hashOfConfig":"59"},{"size":720,"mtime":1660938321988,"results":"98","hashOfConfig":"59"},{"size":7758,"mtime":1660938321967,"results":"99","hashOfConfig":"59"},{"size":3046,"mtime":1660938321997,"results":"100","hashOfConfig":"59"},{"size":1128,"mtime":1660938321966,"results":"101","hashOfConfig":"59"},{"size":6568,"mtime":1660938321973,"results":"102","hashOfConfig":"59"},{"size":4712,"mtime":1661204912304,"results":"103","hashOfConfig":"59"},{"size":375,"mtime":1660938322013,"results":"104","hashOfConfig":"59"},{"size":1646,"mtime":1660938321995,"results":"105","hashOfConfig":"59"},{"size":7081,"mtime":1660938322019,"results":"106","hashOfConfig":"59"},{"size":6054,"mtime":1660938321982,"results":"107","hashOfConfig":"59"},{"size":31538,"mtime":1660938321978,"results":"108","hashOfConfig":"59"},{"size":1985,"mtime":1660938321970,"results":"109","hashOfConfig":"59"},{"size":6442,"mtime":1660938322018,"results":"110","hashOfConfig":"59"},{"size":9933,"mtime":1660938321992,"results":"111","hashOfConfig":"59"},{"size":1119,"mtime":1661365164651,"results":"112","hashOfConfig":"59"},{"size":4120,"mtime":1660938322014,"results":"113","hashOfConfig":"59"},{"size":880,"mtime":1661441742374,"results":"114","hashOfConfig":"59"},{"size":1806,"mtime":1661449017439,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"pa48sw",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"123"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"118"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"118"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"118"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"196"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"118"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js",[],["249","250"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js",[],["251","252"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx",["253","254","255","256"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport styles from './LiveDonations.module.css';\r\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\r\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation, getStreamerAlertsSettings, getStreamerMediaContent, listenQaplaChallengeXQProgress, getChallengeLevelGoal, getStreamerChallengeCategory, getChallengePreviousLevelGoal, listenToStreamerAlertsSettings, listenQaplaGoal, markOverlayAsActive, onLiveDonationsDisconnect } from '../../services/database';\r\nimport donationAudio from '../../assets/notification.wav';\r\nimport { speakCheerMessage } from '../../services/functions';\r\nimport { GIPHY_GIFS, GIPHY_STICKERS, MEME, TEST_MESSAGE_SPEECH_URL } from '../../utilities/Constants';\r\nimport QlanProgressBar from '../QlanProgressBar/QlanProgressBar';\r\nimport GoalProgressBar from '../GoalProgressBar/GoalProgressBar';\r\nimport QaplaOnLeft from '../../assets/Qapla-On-Overlay-Left.png';\r\nimport QaplaOnRight from '../../assets/Qapla-On-Overlay-Right.png';\r\nimport { getCheerVoiceMessage } from '../../services/storage';\r\n\r\nconst LiveDonations = () => {\r\n    const [streamerUid, setStreamerUid] = useState('');\r\n    const [donationQueue, setDonationQueue] = useState([]);\r\n    const [donationToShow, setDonationToShow] = useState(null);\r\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\r\n    const [alertSideRight, setAlertSideRight] = useState(false);\r\n    const [isPlayingAudio, setIsPlayingAudio] = useState(false);\r\n    const [mediaContent, setMediaContent] = useState({ videos: [], images: [] });\r\n    const [qaplaChallengeXQ, setQaplaChallengeXQ] = useState(0);\r\n    const [nextGoalXQ, setNextGoalXQ] = useState(0);\r\n    const [previousGoalXQ, setPreviousGoalXQ] = useState(0);\r\n    const [qoinsGoal, setQoinsGoal] = useState(null);\r\n    const [qoinsGoalProgress, setQoinsGoalProgress] = useState(null);\r\n    const [goalTitle, setGoalTitle] = useState('');\r\n    const [showQaplaChallengeProgress, setShowQaplaChallengeProgress] = useState(false);\r\n    const [qaplaOnOpacity, setQaplaOnOpacity] = useState(1);\r\n    const [playQaplaOnAnimation, setPlayQaplaOnAnimation] = useState(\"false\");\r\n    const { streamerId } = useParams();\r\n\r\n    useEffect(() => {\r\n        queueAnimation();\r\n        const pushDonation = (donation) => {\r\n            setDonationQueue((array) => [donation, ...array]);\r\n        }\r\n\r\n        const popDonation = () => {\r\n            const indexToPop = donationQueue.length - 1;\r\n            const donationToPop = donationQueue[indexToPop];\r\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\r\n\r\n            return donationToPop;\r\n        }\r\n\r\n        async function getStreamerUid() {\r\n            if (streamerId) {\r\n                const uid = await getStreamerUidWithTwitchId(streamerId);\r\n                setStreamerUid(uid);\r\n\r\n                listenToStreamerAlertsSettings(uid, (streamerSettings) => {\r\n                    if (streamerSettings.exists()) {\r\n                        setAlertSideRight(streamerSettings.val().alertSideRight);\r\n                        setShowQaplaChallengeProgress(streamerSettings.val().showQaplaChallengeProgress !== false);\r\n                    }\r\n                });\r\n\r\n                listenForTestCheers(uid, (donation) => {\r\n                    pushDonation({ ...donation.val(), id: donation.key });\r\n                });\r\n\r\n                const streamerMedia = await getStreamerMediaContent(uid);\r\n                setMediaContent(streamerMedia.val());\r\n            }\r\n        }\r\n\r\n        async function loadDonations() {\r\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\r\n                pushDonation({ ...donation.val(), id: donation.key });\r\n            });\r\n        }\r\n\r\n        if (streamerUid && !listenersAreSetted) {\r\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\r\n                setListenersAreSetted(true);\r\n                if (isStreaming.exists() && isStreaming.val()) {\r\n                    setTimeout(() => {\r\n                        loadDonations();\r\n                    }, 150000);\r\n                } else {\r\n                    removeListenerForUnreadStreamerCheers(streamerUid);\r\n                    setDonationQueue([]);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (donationQueue.length > 0 && !isPlayingAudio) {\r\n            setIsPlayingAudio(true);\r\n            const donation = popDonation();\r\n\r\n            async function showCheer() {\r\n                let audio = new Audio(donationAudio);\r\n                if (!donation.repeating) {\r\n                    if (donation.message) {\r\n                        if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\r\n                            audio = new Audio(TEST_MESSAGE_SPEECH_URL);\r\n                        } else {\r\n                            const messageToRead = `${donation.twitchUserName} te ha enviado ${donation.amountQoins} Coins y dice: ${donation.message}`;\r\n\r\n                            window.analytics.track('Cheer received', {\r\n                                user: donation.twitchUserName,\r\n                                containsMessage: true,\r\n                                message: messageToRead\r\n                            });\r\n                            const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\r\n                            audio = new Audio(cheerMessageUrl.data);\r\n                        }\r\n                    } else {\r\n                        const messageToRead = `${donation.twitchUserName} te ha enviado ${donation.amountQoins} Coins`;\r\n\r\n                        window.analytics.track('Cheer received', {\r\n                            user: donation.twitchUserName,\r\n                            containsMessage: false\r\n                        });\r\n                        const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\r\n                        audio = new Audio(cheerMessageUrl.data);\r\n                    }\r\n                } else {\r\n                    try {\r\n                        const cheerMessageUrl = await getCheerVoiceMessage(streamerUid, donation.id);\r\n\r\n                        if (cheerMessageUrl) {\r\n                            audio = new Audio(cheerMessageUrl);\r\n                        }\r\n                    } catch (error) {\r\n                        console.log('Message not found, what must be do here?');\r\n                    }\r\n                }\r\n\r\n                donation.isRightSide = alertSideRight;\r\n\r\n                setDonationToShow(donation);\r\n                audio.onended = () => {\r\n                    setTimeout(() => {\r\n                        setDonationToShow(null);\r\n                    }, 4000);\r\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\r\n                        removeTestDonation(streamerUid, donation.id);\r\n                    } else {\r\n                        markDonationAsRead(streamerUid, donation.id);\r\n                    }\r\n\r\n                    setTimeout(() => {\r\n                        setIsPlayingAudio(false);\r\n                    }, 6000);\r\n                }\r\n\r\n                audio.play();\r\n            }\r\n\r\n            showCheer();\r\n        }\r\n\r\n        if (!streamerUid) {\r\n            getStreamerUid();\r\n        }\r\n\r\n        if (streamerUid) {\r\n            async function listenToOverlayStatus() {\r\n                try {\r\n                    await markOverlayAsActive(streamerUid);\r\n                    onLiveDonationsDisconnect(streamerUid);\r\n                } catch (error) {\r\n                    console.log('Error mounting overlay listeners');\r\n                }\r\n            }\r\n\r\n            async function checkIfUserIsUserParticipantOfQaplaChallenge() {\r\n                async function getNextGoal(xq, category) {\r\n                    const neededXQ = await getChallengeLevelGoal(category, xq + 1);\r\n                    const previousGoalXQ = await getChallengePreviousLevelGoal(category, xq);\r\n\r\n                    if (neededXQ.exists()) {\r\n                        neededXQ.forEach((levelXQ) => {\r\n                            setNextGoalXQ(levelXQ.val());\r\n                        });\r\n\r\n                        previousGoalXQ.forEach((pastLevelXQ) => {\r\n                            setPreviousGoalXQ(pastLevelXQ.val());\r\n                        });\r\n\r\n                        setQaplaChallengeXQ(xq);\r\n                    } else {\r\n                        /**\r\n                         * Show some cool UI to let the streamer know he has achieved all the levels in the\r\n                         * Qapla Challenge\r\n                         */\r\n\r\n                        previousGoalXQ.forEach((pastLevelXQ) => {\r\n                            setNextGoalXQ(pastLevelXQ.val());\r\n                            setQaplaChallengeXQ(pastLevelXQ.val());\r\n                        });\r\n                    }\r\n                }\r\n\r\n                const userParticipation = await getStreamerChallengeCategory(streamerUid);\r\n                if (userParticipation.exists()) {\r\n                    listenQaplaChallengeXQProgress(streamerUid, (xqProgress) => {\r\n                        if (xqProgress.exists()) {\r\n                            getNextGoal(xqProgress.val(), userParticipation.val());\r\n                        }\r\n                    });\r\n                } else {\r\n                    setShowQaplaChallengeProgress(false);\r\n                }\r\n            }\r\n\r\n            listenToOverlayStatus();\r\n\r\n            listenQaplaGoal(streamerUid, (goal) => {\r\n                if (goal.exists()) {\r\n                    setQoinsGoal(goal.val().goal);\r\n                    setQoinsGoalProgress(goal.val().qoins);\r\n                    setGoalTitle(goal.val().title);\r\n                }\r\n            });\r\n\r\n            checkIfUserIsUserParticipantOfQaplaChallenge();\r\n        }\r\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio]);\r\n\r\n    const queueAnimation = () => {\r\n        if (qaplaOnOpacity !== 1){\r\n            setTimeout(() => {\r\n                setPlayQaplaOnAnimation(\"true\");\r\n            }, 10 * 1000)\r\n        } else {\r\n            setTimeout(() => {\r\n                setPlayQaplaOnAnimation(\"true\");\r\n            }, 60 * 1000)\r\n        }\r\n    }\r\n\r\n    document.body.style.backgroundColor = 'transparent';\r\n\r\n\r\n    const qaplaChallengeBarProgress = (qaplaChallengeXQ - previousGoalXQ) / (nextGoalXQ - previousGoalXQ);\r\n    return (\r\n        <div style={{ display: 'flex', backgroundColor: 'transparent', maxHeight: '100vh', width: '100%', placeItems: 'flex-end' }}>\r\n            <div\r\n                onAnimationEnd={() => {\r\n                    setPlayQaplaOnAnimation(\"false\");\r\n                    if (qaplaOnOpacity === 1)\r\n                        setQaplaOnOpacity(0)\r\n                    if (qaplaOnOpacity === 0)\r\n                        setQaplaOnOpacity(1)\r\n                    queueAnimation();\r\n                }}\r\n                style={{\r\n                    position: 'fixed',\r\n                    bottom: '-15px',\r\n                    left: alertSideRight ? 'auto' : '-12px',\r\n                    right: alertSideRight ? '-12px' : 'auto',\r\n                    width: '150px',\r\n                }}\r\n                className=\"qapla-logo-container\"\r\n                playAnimation={playQaplaOnAnimation}\r\n            >\r\n                <style>{`\r\n                @keyframes dissapear {\r\n                    from {\r\n                        opacity: ${qaplaOnOpacity === 1 ? 1 : 0};\r\n                    }\r\n                    to {\r\n                        opacity: ${qaplaOnOpacity === 1 ? 0 : 1};\r\n                    }\r\n                }\r\n                .qapla-logo-container{\r\n                    opacity: ${qaplaOnOpacity};\r\n                }\r\n                .qapla-logo-container[playAnimation=\"true\"] {\r\n                    animation-name: dissapear;\r\n                    animation-duration: 5s;\r\n                    animation-iteration-count: 1;\r\n                    animation-timing-function: ease-in-out;\r\n                }\r\n                `}</style>\r\n                <img src={alertSideRight ? QaplaOnRight : QaplaOnLeft} alt=\"qapla logo\" />\r\n            </div>\r\n            {donationToShow &&\r\n                <>\r\n                    <DonationHandler donationToShow={donationToShow} />\r\n                </>\r\n            }\r\n            {qoinsGoal && goalTitle &&\r\n                <GoalProgressBar\r\n                    percentage={qoinsGoalProgress / qoinsGoal}\r\n                    title={goalTitle}\r\n                    qoins={qoinsGoalProgress || 0}\r\n                />\r\n            }\r\n            {showQaplaChallengeProgress &&\r\n                <QlanProgressBar\r\n                    percentage={qaplaChallengeBarProgress}\r\n                    xq={qaplaChallengeXQ}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DonationHandler = (donationToShow) => {\r\n    const donation = donationToShow.donationToShow;\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n            backgroundColor: '#f0f0',\r\n            padding: '0px 40px',\r\n            marginBottom: '30px',\r\n            marginLeft: donation.isRightSide ? '0px' : '20px',\r\n            marginRight: donation.isRightSide ? '20px' : '0px'\r\n        }}>\r\n            {donation.media && (donation.media.type === MEME || donation.media.type === GIPHY_GIFS || donation.media.type === GIPHY_STICKERS) &&\r\n                <img src={donation.media.url} alt='' style={{\r\n                    aspectRatio: donation.media.width / donation.media.height,\r\n                    display: 'flex',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                    maxHeight: '250px',\r\n                    objectFit: 'scale-down'\r\n                }} />\r\n            }\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-around',\r\n                    marginTop: '20px',\r\n                    width: 'fit-content',\r\n                    backgroundColor: '#4D00FB',\r\n                    marginLeft: donation.isRightSide ? '0px' : '-30px',\r\n                    marginRight: donation.isRightSide ? '-30px' : '0px',\r\n                    borderRadius: '30px',\r\n                    padding: '24px 24px',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                    zIndex: 10\r\n                }}\r\n            >\r\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\r\n                    <p style={{\r\n                        display: 'flex',\r\n                        color: 'white',\r\n                        fontSize: '26px',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <b style={{ color: '#0AFFD2' }}>{donation.twitchUserName}</b>\r\n                        <div style={{ margin: '0 6px' }}>ha enviado</div>\r\n                        <b style={{ color: '#0AFFD2', fontWeight: '700', }}>{donation.amountQoins} Qoins</b>\r\n                    </p>\r\n                </div>\r\n                <div style={{ width: '10px' }}></div>\r\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\r\n                    <DonatedQoin style={{ display: 'flex', width: '38px', height: '38px' }} />\r\n                </div>\r\n            </div>\r\n            {donation.message !== '' &&\r\n                <>\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        width: 'fit-content',\r\n                        backgroundColor: '#FFFFFF',\r\n                        marginTop: '-20px',\r\n                        borderRadius: '30px',\r\n                        borderTopLeftRadius: donation.isRightSide ? '30px' : '0px',\r\n                        borderTopRightRadius: donation.isRightSide ? '0px' : '30px',\r\n                        padding: '30px',\r\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                    }}>\r\n                        <p style={{\r\n                            display: 'flex',\r\n                            color: '#0D1021',\r\n                            fontSize: '24px',\r\n                            fontWeight: '600',\r\n                            lineHeight: '36px',\r\n                            letterSpacing: '0.6px'\r\n                        }}>{donation.message}</p>\r\n                    </div>\r\n                </>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default LiveDonations;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx",["257","258","259","260","261","262","263","264","265"],"import React, { useEffect, useState } from 'react';\r\nimport { withStyles, makeStyles, Button, Chip, Switch, Tabs, Tab, Tooltip } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nimport StreamerProfileEditorOnBoarding from '../StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding';\r\n\r\nimport styles from './StreamerProfileEditor.module.css';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { getStreamerLinks, listenStreamerPublicProfile, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\r\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\r\nimport { ReactComponent as EditIcon } from './../../assets/Edit.svg';\r\nimport { ReactComponent as CameraIcon } from './../../assets/Camera.svg';\r\nimport { ReactComponent as XIcon } from './../../assets/xIcon.svg';\r\nimport ContainedButton from '../ContainedButton/ContainedButton';\r\nimport { uploadImage } from '../../services/storage';\r\nimport { MIN_TAGS, PROFILE_BACKGROUND_GRADIENTS } from '../../utilities/Constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridContainer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexWrap: 'nowrap'\r\n    },\r\n    linkPlaceholder: {\r\n        '&::placeholder': {\r\n            color: 'rgba(108, 93, 211, 0.4)'\r\n        }\r\n    },\r\n    linkInput: {\r\n        backgroundColor: '#202750',\r\n        color: '#FFF',\r\n        '&.Mui-disabled': {\r\n            color: '#AAA'\r\n        }\r\n    }\r\n}));\r\n\r\nconst EditBioButton = withStyles(() => ({\r\n    root: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        justifyItems: 'center',\r\n        padding: '0.8rem 1rem',\r\n        borderRadius: '0.8rem',\r\n        maxHeight: '46px',\r\n        textTransform: 'capitalize',\r\n        fontSize: '14px',\r\n        fontWeight: 600,\r\n        '&:hover': {\r\n            backgroundColor: '#24456680'\r\n        },\r\n        '&:disabled': {\r\n            backgroundColor: '#272D5780',\r\n            color: '#FFFFFF99',\r\n        },\r\n        '&#cover': {\r\n            backgroundColor: '#272D5780'\r\n        }\r\n    },\r\n\r\n}))(Button);\r\n\r\nconst QaplaChip = withStyles(() => ({\r\n    root: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFFA6',\r\n        minHeight: '41px',\r\n        borderRadius: '100rem',\r\n        padding: '1.2rem 0.4rem',\r\n        fontWeight: 600,\r\n        '&:focus': {\r\n            backgroundColor: '#4040FF4F',\r\n        },\r\n        '&:hover': {\r\n            backgroundColor: '#4040FF4F',\r\n            opacity: 0.8\r\n        }\r\n    },\r\n    deletable: {\r\n        backgroundColor: '#4040FF4F',\r\n        color: '#FFFFFFA6',\r\n        '&:focus': {\r\n            backgroundColor: '#4040FF4F',\r\n        },\r\n        '&:hover': {\r\n\r\n        }\r\n    },\r\n    deleteIcon: {\r\n        display: 'flex',\r\n        backgroundColor: '#FFFD',\r\n        borderRadius: '100px',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        '&:hover': {\r\n            backgroundColor: '#F00D'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#A00D'\r\n        }\r\n    }\r\n}))(Chip)\r\n\r\nconst QaplaSwitch = withStyles(() => ({\r\n    root: {\r\n\r\n    },\r\n    track: {\r\n        backgroundColor: '#202750'\r\n    },\r\n    checked: {\r\n        color: '#2CE9D2 !important',\r\n        '& + .MuiSwitch-track': {\r\n            backgroundColor: '#202750 !important'\r\n        }\r\n    },\r\n    thumb: {\r\n\r\n    }\r\n}))(Switch);\r\n\r\nconst QaplaTabs = withStyles({\r\n    root: {\r\n        minHeight: 0,\r\n        marginTop: '3rem'\r\n    },\r\n    indicator: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        backgroundColor: 'transparent',\r\n        '& > span': {\r\n            // maxWidth: 50,\r\n            width: '100%',\r\n            backgroundColor: '#0AFFD2',\r\n        },\r\n    },\r\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        padding: '0 0.6rem',\r\n        minWidth: 0,\r\n        minHeight: 0,\r\n        textTransform: 'none',\r\n        color: '#fff',\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        fontSize: theme.typography.pxToRem(15),\r\n        marginRight: theme.spacing(1),\r\n        '&:focus': {\r\n            opacity: 1,\r\n        },\r\n    },\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, className, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`profile-editor-tabpanel-${index}`}\r\n            aria-labelledby={`profile-editor-tab-${index}`}\r\n            {...other}\r\n            className={className}\r\n        >\r\n            {value === index && (\r\n                <>\r\n                    {children}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst StreamerProfileEditor = ({ user }) => {\r\n    const socialLinksInitialValue = [\r\n        {\r\n            socialPage: 'Twitch',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Twitter',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Instagram',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Discord',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Youtube',\r\n            value: ''\r\n        },\r\n        /* {\r\n            socialPage: 'TikTok',\r\n            value: ''\r\n        } */\r\n    ];\r\n\r\n    const socialLinksPlaceholders = {\r\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\r\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\r\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\r\n        Discord: `https://discord.gg/inviteCode`,\r\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`,\r\n        tiktok: `https://www.tiktok.com/@${user ? user.displayName : ''}`\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const [dataIsFetched, setDataIsFetched] = useState(false);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const [editingBio, setEditingBio] = useState(false);\r\n    const [addingTag, setAddingTag] = useState(false);\r\n    const [streamerBio, setStreamerBio] = useState('');\r\n    const [backgroundUrl, setBackgroundUrl] = useState('');\r\n    const [backgroundGradient, setBackgroundGradient] = useState(null);\r\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\r\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\r\n    const [streamerTags, setStreamerTags] = useState([]);\r\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\r\n    const [openTooltip, setOpenTooltip] = useState(false);\r\n    const [onBoardingDone, setOnBoardingDone] = useState(true);\r\n    const [onBoardingStep, setOnBoardingStep] = useState(0);\r\n    const [badge, setBadge] = useState(false);\r\n    const [chipHover, setChipHover] = useState({});\r\n    const { t } = useTranslation();\r\n    const twitchURL = `https://www.twitch.tv/${user && user.login ? user.login : ''}`;\r\n\r\n    useEffect(() => {\r\n        async function getStreamerInfo() {\r\n            listenStreamerPublicProfile(user.uid, async (info) => {\r\n                if (info.exists()) {\r\n                    const { bio, tags, backgroundUrl, backgroundGradient, badge } = info.val();\r\n                    if (!tags || tags.length < MIN_TAGS) {\r\n                        setOnBoardingDone(false);\r\n                        setOnBoardingStep(4);\r\n                    }\r\n\r\n                    if (!bio) {\r\n                        setOnBoardingDone(false);\r\n                        setOnBoardingStep(3);\r\n                    }\r\n                    setStreamerBio(bio || '');\r\n                    setBackgroundGradient(backgroundGradient);\r\n                    setBackgroundUrl(backgroundUrl);\r\n                    setStreamerTags(tags || []);\r\n                    setBadge(badge);\r\n                } else {\r\n                    setOnBoardingDone(false);\r\n                }\r\n\r\n                const links = await getStreamerLinks(user.uid);\r\n                if (links.exists()) {\r\n                    setSocialLinks(links.val());\r\n                } else {\r\n                    /**\r\n                     * Set Twitch Link by default (we already know this link)\r\n                     */\r\n                    const socialLinksWithTwitchAdded = socialLinksInitialValue;\r\n                    socialLinksWithTwitchAdded[0].value = twitchURL;\r\n\r\n                    setSocialLinks(socialLinksInitialValue);\r\n                }\r\n\r\n                setDataIsFetched(true);\r\n            });\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            getStreamerInfo();\r\n        }\r\n    }, [user]);\r\n\r\n    const onBoardingDoneByStreamer = async () => {\r\n        const min = 0;\r\n        const max = 4;\r\n        const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n        const backgroundSelected = PROFILE_BACKGROUND_GRADIENTS[randomIndex];\r\n        setBackgroundGradient(backgroundSelected);\r\n\r\n        await updateStreamerPublicProfile(user.uid, {\r\n            backgroundGradient: backgroundSelected,\r\n            displayName: user.displayName,\r\n            photoUrl: user.photoUrl\r\n        });\r\n\r\n        window.analytics.track('Public profile onboarding done', {\r\n            uid: user.uid,\r\n            timestamp: (new Date()).getTime()\r\n        });\r\n        setOnBoardingDone(true);\r\n    }\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue)\r\n    }\r\n\r\n    const handleTagDelete = async (indexToDelete) => {\r\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\r\n\r\n        try {\r\n            await updateStreamerPublicProfile(user.uid, { tags });\r\n            setStreamerTags(tags);\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(t('StreamerProfileEditor.errors.deleteTag'));\r\n        }\r\n    }\r\n\r\n    const updateSocialLinks = (value, index) => {\r\n        setSocialLinksChanged(true);\r\n        let newArray = [...socialLinks];\r\n        newArray[index] = {\r\n            ...newArray[index],\r\n            value\r\n        };\r\n\r\n        setSocialLinks(newArray);\r\n    }\r\n\r\n    const saveLinks = async () => {\r\n        // Creates an array without the placeholder value\r\n        const objectToSave = {};\r\n        socialLinks.forEach((link, index) => {\r\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\r\n        });\r\n\r\n        try {\r\n            await saveStreamerLinks(user.uid, objectToSave);\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(t('StreamerProfileEditor.errors.updateLinks'));\r\n        }\r\n        setSocialLinksChanged(false);\r\n    }\r\n\r\n    const addTag = async () => {\r\n        setOnBoardingStep(4);\r\n        setAddingTag(true);\r\n    }\r\n\r\n    const uploadBackgroundImage = (e) => {\r\n        if (e.target.files[0]) {\r\n            const newBackgroundImage = (e.target.files[0]);\r\n            uploadImage(\r\n                newBackgroundImage,\r\n                `/StreamersProfilesBackgroundImages/${user.uid}`,\r\n                (progressValue) => setUploadImageStatus(progressValue * 100),\r\n                (error) => { alert('Error al agregar imagen'); console.log(error); },\r\n                async (url) => {\r\n                    try {\r\n                        await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\r\n                        alert(t('StreamerProfileEditor.confirmations.saveImage'));\r\n                    } catch (error) {\r\n                        alert(t('StreamerProfileEditor.errors.saveImage'));\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            );\r\n\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () => {\r\n                setBackgroundUrl(reader.result);\r\n            });\r\n\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const copyTwitchURL = () => {\r\n        navigator.clipboard.writeText(twitchURL);\r\n        setOpenTooltip(true);\r\n        setTimeout(() => {\r\n            setOpenTooltip(false);\r\n        }, 1250);\r\n    }\r\n\r\n    const createLinearGradientCSS = () => {\r\n        if (backgroundGradient) {\r\n            let colorsString = '';\r\n            backgroundGradient.colors.forEach((color, index) => {\r\n                if (index !== backgroundGradient.colors.length - 1) {\r\n                    colorsString += `${color},`;\r\n                } else {\r\n                    colorsString += color;\r\n                }\r\n            });\r\n\r\n            return `linear-gradient(${backgroundGradient.angle}deg, ${colorsString})`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    const editBio = () => {\r\n        setOnBoardingStep(3);\r\n        setEditingBio(true);\r\n    }\r\n\r\n    const cancelEditing = () => {\r\n        setEditingBio(false);\r\n        setAddingTag(false);\r\n    }\r\n\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n        let source = result.source.index\r\n        let destination = result.destination.index\r\n\r\n        if (source === destination) {\r\n            return\r\n        }\r\n\r\n        const socialLinksCopy = [...socialLinks];\r\n        socialLinksCopy.splice(destination, 0, socialLinksCopy.splice(source, 1)[0]);\r\n\r\n        setSocialLinks(socialLinksCopy);\r\n        setSocialLinksChanged(true);\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\r\n            {dataIsFetched &&\r\n                <>\r\n                    {onBoardingDone && !editingBio && !addingTag ?\r\n                        <>\r\n                            <div className={styles.coverContainer}>\r\n                                {backgroundUrl ?\r\n                                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\r\n                                    :\r\n                                    <div className={styles.cover} style={{ background: createLinearGradientCSS() }} />\r\n                                }\r\n                            </div>\r\n                            <div className={styles.editCoverButtonContainer}>\r\n                                <input\r\n                                    accept='image/*'\r\n                                    style={{ display: 'none' }}\r\n                                    type='file'\r\n                                    id='image-input'\r\n                                    onChange={uploadBackgroundImage} />\r\n                                <label htmlFor='image-input'>\r\n                                    <EditBioButton id='cover' component='span'>\r\n                                        <CameraIcon />\r\n                                        <div style={{ width: '0.4rem' }} />\r\n                                        {t('StreamerProfileEditor.editCover')}\r\n                                    </EditBioButton>\r\n                                </label>\r\n                            </div>\r\n                            <div className={styles.profileContainer}>\r\n                                <div className={styles.profilePicContainer}>\r\n                                    <img src={user.photoUrl} alt='User pfp' className={styles.profilePic} />\r\n                                </div>\r\n                                <div className={styles.streamerNameAndEditBioButtonContainer}>\r\n                                    <div className={styles.streamerNameContainer}>\r\n                                        <p className={styles.streamerName}>\r\n                                            {user.displayName}\r\n                                        </p>\r\n                                        <div className={styles.founderBadgeContainer}>\r\n                                            {badge &&\r\n                                                <FounderBadge className={styles.founderBadge} />\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={styles.editBioButtonContainer}>\r\n                                        <EditBioButton variant='contained'\r\n                                            onClick={editBio}>\r\n                                            {!editingBio ?\r\n                                                <>\r\n                                                    <EditIcon />\r\n                                                    <div style={{ width: '0.4rem' }} />\r\n                                                    {t('StreamerProfileEditor.editBio')}\r\n                                                </>\r\n                                                :\r\n                                                t('StreamerProfileEditor.saveChanges')\r\n                                            }\r\n                                        </EditBioButton>\r\n                                    </div>\r\n                                </div>\r\n                                {/* <div className={styles.twitchURLContainer}>\r\n                                    <a href={twitchURL} target='_blank' rel='noreferrer' className={styles.twitchURL} >{twitchURL}</a>\r\n                                    <Tooltip placement='top' open={openTooltip} title='Copiado'>\r\n                                        <CopyIcon onClick={copyTwitchURL} />\r\n                                    </Tooltip>\r\n                                </div> */}\r\n                                <div className={styles.bioContainer}>\r\n                                    <p className={styles.bioText} onClick={editBio}>\r\n                                        {streamerBio}\r\n                                    </p>\r\n                                </div>\r\n                                <ul className={styles.tagsList}>\r\n                                    {streamerTags.map((data, index) => {\r\n                                        return (\r\n                                            <li key={`chip-${data}-${index}`} className={styles.tag}>\r\n                                                <QaplaChip\r\n                                                    label={data}\r\n                                                    onDelete={() => handleTagDelete(index)}\r\n                                                />\r\n                                            </li>\r\n                                        )\r\n                                    })}\r\n                                    <li key='new' className={styles.tag}>\r\n                                        <QaplaChip onClick={addTag}\r\n                                            label={t('StreamerProfileEditor.addTag')}\r\n                                        />\r\n                                    </li>\r\n                                </ul>\r\n                                <div className={styles.showNextStreamsContainer}>\r\n                                    <p className={styles.showNextStreamsText}>\r\n                                        {t('StreamerProfileEditor.showUpcomingStreams')}\r\n                                    </p>\r\n                                    <QaplaSwitch\r\n                                        name='showNextStreams'\r\n                                    /** ToDo: Show streams in profile. Also show twitch status (online or offline) <= more of this on cloud function */\r\n                                    />\r\n                                </div>\r\n                                <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\r\n                                    <QaplaTab wid label={t('StreamerProfileEditor.social')} {...a11yProps(0)} />\r\n                                    {/* <QaplaTab label='Códigos de creador' {...a11yProps(1)} /> */}\r\n                                </QaplaTabs>\r\n                                <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\r\n                                    <DragDropContext onDragEnd={onDragEnd}>\r\n                                        <Droppable droppableId='links-droppable'>\r\n                                            {(provided, snapshot) => (\r\n                                                <div style={{ width: '100%' }}\r\n                                                    {...provided.droppableProps}\r\n                                                    ref={provided.innerRef}\r\n                                                >\r\n                                                    {socialLinks.map((data, index) => (\r\n                                                        <Draggable key={`draggable-link-${index}`} draggableId={`draggable-link-${index}`} index={index}>\r\n                                                            {(provided, snapshot) => (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                >\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            flexDirection: 'row',\r\n                                                                            alignItems: 'center',\r\n                                                                            width: '100%'\r\n                                                                        }}>\r\n                                                                        <div style={{ display: 'flex', width: '100%' }}>\r\n                                                                            <StreamerTextInput\r\n                                                                                label={data.socialPage}\r\n                                                                                containerClassName={styles.socialLinkContainer}\r\n                                                                                labelClassName={styles.socialLinkLabel}\r\n                                                                                value={data.value}\r\n                                                                                disabled={data.socialPage.toLowerCase() === 'twitch'}\r\n                                                                                placeholder={socialLinksPlaceholders[data.socialPage]}\r\n                                                                                classes={{ input: classes.linkPlaceholder }}\r\n                                                                                textInputClassName={classes.linkInput}\r\n                                                                                fullWidth\r\n                                                                                onChange={(e) => updateSocialLinks(e.target.value, index)}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                        <div style={{\r\n                                                                            display: 'flex',\r\n                                                                            backgroundColor: '#141833',\r\n                                                                            width: '30px',\r\n                                                                            minWidth: '30px',\r\n                                                                            height: '45px',\r\n                                                                            marginBottom: '12px',\r\n                                                                            alignSelf: 'flex-end',\r\n                                                                            borderRadius: '8px'\r\n\r\n                                                                        }} >\r\n                                                                            <div style={{\r\n                                                                                display: 'flex',\r\n                                                                                flex: 1,\r\n                                                                                padding: '14px 10px',\r\n                                                                            }}>\r\n                                                                                <div style={{\r\n                                                                                    display: 'flex',\r\n                                                                                    flex: 1,\r\n                                                                                    flexDirection: 'column',\r\n                                                                                    justifyContent: 'space-between',\r\n                                                                                }}>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                </div>\r\n\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </Draggable>\r\n                                                    ))}\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </DragDropContext>\r\n                                    <br />\r\n                                    {socialLinksChanged &&\r\n                                        <ContainedButton onClick={saveLinks}>\r\n                                            {t('StreamerProfileEditor.saveChanges')}\r\n                                        </ContainedButton>\r\n                                    }\r\n                                </TabPanel>\r\n                                <TabPanel value={selectedTab} index={1}>\r\n                                    <p>b</p>\r\n                                </TabPanel>\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <StreamerProfileEditorOnBoarding step={onBoardingStep}\r\n                            user={user}\r\n                            onBoardingDone={onBoardingDoneByStreamer}\r\n                            showOnlySpecificStep={editingBio || addingTag}\r\n                            streamerBio={streamerBio}\r\n                            streamerTags={streamerTags}\r\n                            closeOnBoarding={cancelEditing} />\r\n                    }\r\n                </>\r\n            }\r\n        </StreamerDashboardContainer>\r\n    )\r\n}\r\n\r\nexport default StreamerProfileEditor;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStreamSuccessDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",["266"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button, CircularProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport {\r\n    streamsPlaceholderImages,\r\n    SCHEDULED_EVENT_TYPE,\r\n    PAST_STREAMS_EVENT_TYPE,\r\n    PENDING_APPROVAL_EVENT_TYPE,\r\n    HOUR_IN_MILISECONDS\r\n} from '../../utilities/Constants';\r\nimport {\r\n    cancelStreamRequest,\r\n    getStreamTitle,\r\n    getPastStreamTitle,\r\n    checkActiveCustomReward\r\n} from '../../services/database';\r\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\r\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\r\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\r\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\r\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\r\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\r\nimport { auth } from '../../services/firebase';\r\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\r\nimport { sendCustomMessage } from '../../services/functions';\r\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    eventCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '1.5rem',\r\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\r\n        height: '100%',\r\n        minWidth: '250px',\r\n        minHeight: '360px',\r\n    },\r\n    relativeContainer: {\r\n        position: 'relative'\r\n    },\r\n    hourContainer: {\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        top: '1rem',\r\n        background: '#1B1D2159',\r\n        borderRadius: '.5rem'\r\n    },\r\n    hourText: {\r\n        color: '#FFF',\r\n        padding: '2px 8px',\r\n        fontSize: '11px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        letterSpacing: '-0.5px',\r\n        textAlign: 'center'\r\n\r\n    },\r\n    dateContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        bottom: '1rem',\r\n        padding: '2px 10px',\r\n        background: '#1B1D21',\r\n        height: '32px',\r\n        borderRadius: '10px'\r\n    },\r\n    dateText: {\r\n        color: '#FFF',\r\n        fontSize: '13px',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        marginLeft: '10px'\r\n    },\r\n    eventImage: {\r\n        objectFit: 'cover',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        borderRadius: '24px'\r\n    },\r\n    eventCardContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '24px 16px',\r\n        height: '100%'\r\n    },\r\n    eventCardTitle: {\r\n        color: '#FFFFFF',\r\n        fontSize: '16px',\r\n        lineHeight: '24px',\r\n        fontWeight: '500',\r\n        height: '48px',\r\n\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    circle: {\r\n        borderRadius: '100%',\r\n        height: '.55rem',\r\n        width: '.55rem',\r\n        marginRight: '.5rem'\r\n    },\r\n    participantsNumber: {\r\n        fontSize: '12px',\r\n        textAlign: 'right',\r\n        lineHeight: '16px'\r\n    },\r\n    streamButton: {\r\n        backgroundColor: '#6C5DD3 !important',\r\n        color: '#FFF'\r\n    },\r\n    buttonsContainer: {\r\n        marginTop: 'auto'\r\n    },\r\n    startButton: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#0D1021',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    endButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#FFF',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    manageButton: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none'\r\n    }\r\n}));\r\n\r\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\r\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\r\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [stream, setStream] = useState(null);\r\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\r\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\r\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\r\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\r\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\r\n    const [startingStream, setStartingStream] = useState(false);\r\n    const [closingStream, setClosingStream] = useState(false);\r\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\r\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\r\n    const [loadingDots, setLoadingDots] = useState('');\r\n    const [hideStream, setHideStream] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getParticipantsNumber() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                /* const participants = await getStreamParticipantsNumber(streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getStreamTitle(streamId);\r\n                if (title.exists()) {\r\n                    setTitle(title.val());\r\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getPastStreamTitle(user.uid, streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\r\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            }\r\n        }\r\n\r\n        async function checkStreamStatus() {\r\n            const streamStatus = await checkActiveCustomReward(streamId);\r\n            if (streamStatus.exists()) {\r\n                setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                setShowRewardsOptions(true);\r\n                setHideStream(false);\r\n            } else {\r\n                setStream(null);\r\n            }\r\n        }\r\n\r\n\r\n        getParticipantsNumber();\r\n        checkStreamStatus();\r\n\r\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\r\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\r\n            const currentTimestamp = (new Date()).getTime();\r\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\r\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\r\n                    setHideStream(true);\r\n                } else {\r\n                    setShowRewardsOptions(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startingStream) {\r\n            setTimeout(() => {\r\n                if (loadingDots.length > 2) {\r\n                    setLoadingDots('');\r\n                } else {\r\n                    setLoadingDots(loadingDots + '.');\r\n                }\r\n            }, 500);\r\n        } else if (loadingDots !== '') {\r\n            setLoadingDots('');\r\n        }\r\n\r\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\r\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\r\n\r\n    const cancelStream = (e) => {\r\n        e.stopPropagation();\r\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\r\n            cancelStreamRequest(user.uid, streamId);\r\n            onRemoveStream(streamId);\r\n        }\r\n    }\r\n\r\n    const startStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setStartingStream(true);\r\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream);\r\n\r\n            window.analytics.track('Stream started', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream(streamData);\r\n            if (!openStreamDialog) {\r\n                setOpenStreamStartedDialog(true);\r\n            }\r\n            setStartingStream(false);\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const closeStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setClosingStream(true);\r\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.xqReward, stream.xqRewardWebhookId, stream.qoinsReward, stream.qoinsRewardWebhookId);\r\n\r\n            window.analytics.track('Stream finished', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setOpenRewardsRemovedDialog(true);\r\n\r\n            // Close the rest of Dialogs just in case\r\n            setOpenStreamStartedDialog(false);\r\n            setOpenQoinsWarningDialog(false);\r\n            setOpenStreamDialog(false);\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (stream.qoinsEnabled) {\r\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\r\n            if (dontShowCloseStreamWarning) {\r\n                closeStream();\r\n            } else {\r\n                setOpenEndStreamDialog(true);\r\n            }\r\n        } else {\r\n            setOpenQoinsWarningDialog(true);\r\n        }\r\n    }\r\n\r\n    const enableQoinsReward = async () => {\r\n        try {\r\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward);\r\n\r\n            window.analytics.track('Qoins enabled', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream({ ...stream, qoinsEnabled: true });\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\r\n\r\n    const closeDialogsAndOpenManageRewardsDialog = () => {\r\n        setOpenStreamStartedDialog(false);\r\n        setOpenQoinsWarningDialog(false);\r\n        setOpenStreamDialog(true);\r\n    }\r\n\r\n    const closeAndRemoveStream = () => {\r\n        setOpenRewardsRemovedDialog(false);\r\n        onRemoveStream(streamId);\r\n    }\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message) {\r\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\r\n\r\n            window.analytics.track('Custom Message sent', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime(),\r\n                message\r\n            });\r\n            setOpenCustomMessageSentDialog(true);\r\n        }\r\n    }\r\n\r\n    const shareStreamLink = async () => {\r\n        const link = await generateStreamDynamicLink(streamId, {\r\n            title: title && title['en'] ? title['en'] : '',\r\n            description: `Evento de ${user.displayName}`,\r\n            image: image ? image : ''\r\n        });\r\n\r\n        // This does not work on Safari for some reason\r\n        if (link) {\r\n            navigator.clipboard.writeText(link);\r\n        }\r\n    }\r\n\r\n    if (game && !hideStream) {\r\n        return (\r\n            <Card className={classes.eventCard} style={style}>\r\n                <div className={classes.relativeContainer}>\r\n                    <div className={classes.hourContainer}>\r\n                        <p className={classes.hourText}>\r\n                            {hour}\r\n                        </p>\r\n                    </div>\r\n                    <div className={classes.dateContainer}>\r\n                        <CalendarIcon />\r\n                        <p className={classes.dateText}>\r\n                            {date}\r\n                        </p>\r\n                    </div>\r\n                    <img\r\n                        alt='Game'\r\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\r\n                        width='100%'\r\n                        height='180'\r\n                        className={classes.eventImage} />\r\n                </div>\r\n                <div className={classes.eventCardContent}>\r\n                    <p className={classes.eventCardTitle}>\r\n                        {title && title['en'] ? title['en'] : ''}\r\n                    </p>\r\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\r\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\r\n                            <div style={{\r\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\r\n                                width: '8px',\r\n                                height: '8px',\r\n                                borderRadius: '50%'\r\n                            }} />\r\n                            <div style={{ width: '6px' }} />\r\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\r\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                    <div className={classes.buttonsContainer}>\r\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\r\n                            (!startingStream ?\r\n                                (stream ?\r\n                                    (!closingStream ?\r\n                                        <Button size='medium' className={classes.endButton}\r\n                                            disabled={closingStream}\r\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\r\n                                            {t('StreamCard.end')}\r\n                                        </Button>\r\n                                        :\r\n                                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                            <CircularProgress style={{ color: '#3B4BF9' }} />\r\n                                        </div>\r\n                                    )\r\n                                    :\r\n                                    <Button size='medium' className={classes.startButton}\r\n                                        onClick={startStream }>\r\n                                        {t('StreamCard.start')}\r\n                                    </Button>\r\n                                )\r\n                                :\r\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\r\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\r\n                                </p>\r\n                            )\r\n                        }\r\n                        <div style={{ height: '11px' }} />\r\n                        {streamType === SCHEDULED_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={showRewardsOptions ? setOpenStreamDialog : manageStream}>\r\n                                {showRewardsOptions ?\r\n                                    t('StreamCard.manageRewards')\r\n                                    :\r\n                                    t('StreamCard.manageStream')\r\n                                }\r\n                            </Button>\r\n                        }\r\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\r\n                                {t('StreamCard.cancelStreamRequest')}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <EventManagementDialog open={openStreamDialog}\r\n                    user={user}\r\n                    sendMessage={sendMessage}\r\n                    streamId={streamId}\r\n                    stream={stream}\r\n                    streamStarted={startingStream}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenStreamDialog(false)}\r\n                    startStream={startStream}\r\n                    enableQoins={enableQoinsReward}\r\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\r\n                    streamTitle={title && title['en'] ? title['en'] : ''}\r\n                    date={date}\r\n                    hour={hour} />\r\n                <EventConfirmStartDialog open={openStreamStartedDialog}\r\n                    onClose={() => setOpenStreamStartedDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\r\n                    onClose={() => setOpenQoinsWarningDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenEndStreamDialog(false)}\r\n                    closeStream={closeStream} />\r\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\r\n                    onClose={closeAndRemoveStream}  />\r\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\r\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamCard;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx",["267","268","269"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    makeStyles,\r\n    InputBase,\r\n    NativeSelect,\r\n    InputLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemText\r\n} from '@material-ui/core';\r\n\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\n\r\nconst useStyles = makeStyles({\r\n    label: {\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    input: {\r\n        display: 'flex',\r\n        position: 'absolute',\r\n        zIndex: 90,\r\n        overflow: 'hidden',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '16px',\r\n        color: '#FFF',\r\n        fontSize: '14px',\r\n    },\r\n    icon: {\r\n        color: 'transparent',\r\n        marginTop: 8,\r\n        marginRight: 8,\r\n        marginLeft: 8\r\n    }\r\n});\r\n\r\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false)\r\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            data.forEach(e => {\r\n                if (e.value === value) setSelectedLabel(e.label)\r\n            });\r\n        }\r\n        if (initialLabel && value === undefined) {\r\n            setSelectedLabel(initialLabel);\r\n        }\r\n    }, [data, initialLabel, value])\r\n\r\n    return (\r\n        <div className={classes.input} style={style}>\r\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\r\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\r\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\r\n                        style: {\r\n                            fontFamily: 'Inter'\r\n                        }\r\n                    }} />\r\n                    <div style={{ width: '10px' }} />\r\n                    <ArrowIcon style={{\r\n                        transform: open ? 'rotate(180deg)' : ''\r\n                    }} />\r\n                </ListItem>\r\n                <div style={{\r\n                    height: open ? maxHeightOpen || '' : '0px',\r\n                    overflowX: overflowX || 'scroll',\r\n                    overflowY: overflowY || 'scroll',\r\n                    marginTop: '-10px'\r\n                }}>\r\n                    <List style={{\r\n                        padding: '0px',\r\n                    }}>\r\n                        {data && data.map((dat) => {\r\n                            return (\r\n                                <>\r\n                                    {value !== dat.value &&\r\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\r\n                                            <ListItemText primary={dat.label} />\r\n                                        </ListItem>\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            </List>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default StreamerSelect;",["270","271"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx",["272"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport dayjs from 'dayjs';\r\n\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\r\nimport { notifyActivationWithReferralCode } from '../../services/discord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerStyle: {\r\n        padding: 0\r\n    },\r\n    background: {\r\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\r\n        display: 'flex',\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        minHeight: '100vh',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        backgroundColor: '#141833',\r\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\r\n        borderRadius: '35px',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingTop: 24,\r\n        paddingBottom: 0\r\n    },\r\n    title: {\r\n        fontWeight: '600',\r\n        fontSize: '18px',\r\n        lineHeight: '32px',\r\n        textAlign: 'center',\r\n        color: '#FFFFFF',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    instructions: {\r\n        marginTop: 15,\r\n        fontWeight: '400',\r\n        fontSize: '14px',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        color: '#8F9BBA',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    textInput: {\r\n        textAlign: 'center',\r\n        paddingTop: 12,\r\n        paddingBottom: 12\r\n    },\r\n    activeFreeTrialButton: {\r\n        marginTop: 32,\r\n        backgroundColor: '#3B4BF9',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        },\r\n        marginBottom: 60\r\n    },\r\n    noCode: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        marginTop: 32,\r\n        fontWeight: '600',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    referralProgram: {\r\n        textAlign: 'center',\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        marginTop: 32,\r\n        fontWeight: '400',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    subscribeButton: {\r\n        marginTop: 40,\r\n        backgroundColor: '#00FFDD',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    subscribeButtonCointainer: {\r\n        marginBottom: 24,\r\n        marginTop: 180\r\n    }\r\n}));\r\n\r\nconst RequestActivation = ({ user, onSuccessActivation }) => {\r\n    const [referralCode, setReferralCode] = useState('');\r\n    const [validatingCode, setValidatingCode] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const validateCode = async () => {\r\n        if (user.broadcasterType === '') {\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        setValidatingCode(true);\r\n        if (referralCode) {\r\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\r\n            if (referrerUid) {\r\n                if (referrerUid !== user.uid) {\r\n                    if (!user.referredBy) {\r\n                        activateFreeTrialWithReferralCode(referrerUid, {\r\n                            redemptionsPerStream: 40,\r\n                            streamsIncluded: 2\r\n                        });\r\n                    } else {\r\n                        setValidatingCode(false);\r\n                        alert('Ya usaste un código de referido antes');\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('No puedes usar tu propio código');\r\n                }\r\n            } else {\r\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\r\n                if (invitationCodeSnap.exists()) {\r\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\r\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('Código invalido');\r\n                }\r\n            }\r\n        } else {\r\n            setValidatingCode(false);\r\n        }\r\n    }\r\n\r\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n        await updateStreamerProfile(user.uid, {\r\n            referredBy: referrerUid,\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\r\n\r\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\r\n\r\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\r\n\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n         await updateStreamerProfile(user.uid, {\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await removeInvitationCode(code);\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\r\n            <div className={classes.background}>\r\n                <div>\r\n                <Card className={classes.card}>\r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\r\n                    </div>\r\n                    <CardContent>\r\n                        <p className={classes.title}>\r\n                            {t('RequestActivation.title')} 🚀\r\n                        </p>\r\n                        <p className={classes.instructions}>\r\n                            {validatingCode || !user.referredBy ?\r\n                                <>\r\n                                    {t('RequestActivation.descriptionP1')}\r\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\r\n                                    {t('RequestActivation.descriptionP2')}\r\n                                </>\r\n                                :\r\n                                t('RequestActivation.buyAMembership')\r\n                            }\r\n                        </p>\r\n                        {validatingCode || !user.referredBy ?\r\n                            <>\r\n                                <StreamerTextInput\r\n                                    placeholder={t('RequestActivation.referralCode')}\r\n                                    fullWidth\r\n                                    containerStyle={{ marginTop: 24 }}\r\n                                    classes={{ input: classes.textInput }}\r\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\r\n                                    value={referralCode}\r\n                                    onChange={(e) => setReferralCode(e.target.value)} />\r\n                                {validatingCode ?\r\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\r\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\r\n                                    </div>\r\n                                    :\r\n                                    <Button\r\n                                        onClick={validateCode}\r\n                                        fullWidth\r\n                                        classes={{\r\n                                            root: classes.activeFreeTrialButton\r\n                                        }}>\r\n                                        {t('RequestActivation.startFreeTrial')}\r\n                                    </Button>\r\n                                }\r\n                            </>\r\n                            :\r\n                            <div className={classes.subscribeButtonCointainer}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    onClick={() => history.push('/membership')}\r\n                                    classes={{ root: classes.subscribeButton }}>\r\n                                    {t('RequestActivation.subscribe')}\r\n                                </Button>\r\n                            </div>\r\n                        }\r\n                    </CardContent>\r\n                </Card>\r\n                {validatingCode || !user.referredBy ?\r\n                    <>\r\n                        <p className={classes.noCode}>\r\n                            {t('RequestActivation.dontHaveACode')}\r\n                        </p>\r\n                        <Button\r\n                            fullWidth\r\n                            onClick={() => history.push('/membership')}\r\n                            classes={{ root: classes.subscribeButton }}>\r\n                            {t('RequestActivation.subscribe')}\r\n                        </Button>\r\n                    </>\r\n                    :\r\n                    <p className={classes.referralProgram}>\r\n                        {t('RequestActivation.referralProgramP1')}\r\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\r\n                        {t('RequestActivation.referralProgramP2')}\r\n                    </p>\r\n                }\r\n                </div>\r\n            </div>\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default RequestActivation;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx",[],["273","274"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QlanProgressBar\\QlanProgressBar.jsx",[],["275","276"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx",["277","278"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\r\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    languageLabel: {\r\n        color: '#FFF',\r\n        fontSize: 16,\r\n        fontWeight: 600\r\n    }\r\n}));\r\n\r\nconst LanguageSelect = () => {\r\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\r\n    const [langData, setLangData] = useState([])\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        let tempLangArr = []\r\n        getAvailableLanguages().map((languageCode) => (\r\n            tempLangArr.push({\r\n                value: languageCode,\r\n                label: t(`LanguageHandler.languages.${languageCode}`)\r\n            })\r\n        ))\r\n        setLangData(tempLangArr)\r\n    }, [t])\r\n\r\n    const onLanguageChanged = (languageCode) => {\r\n        changeLanguage(languageCode);\r\n        setCurrentLanguageCode(languageCode);\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex'\r\n        }}>\r\n            <TranslateIcon style={{\r\n                display: 'flex'\r\n            }} />\r\n            {/* The style of this select needs to be implemented inline */}\r\n            <div style={{\r\n                marginTop: '-10px',\r\n            }}>\r\n                <StreamerSelect\r\n                    style={{ backgroundColor: '#141833' }}\r\n                    data={langData}\r\n                    value={currentLanguageCode}\r\n                    onChange={onLanguageChanged}\r\n                    overflowY='hidden'\r\n                    overflowX='hidden'\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageSelect;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx",["279"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx",["280","281"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as ESvg } from './../../assets/e.svg';\r\nimport HeartHands from './../../assets/HeartHands.png';\r\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        height: '100vh'\r\n    },\r\n    paymentInfoContainer: {\r\n        paddingLeft: 32,\r\n        paddingRight: 64,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    },\r\n    eImageContainer: {\r\n        display: 'flex',\r\n        width: 80,\r\n        height: 80,\r\n        borderRadius: 20,\r\n        backgroundColor: '#141833',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    subscriptionBought: {\r\n        marginTop: 48,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    subTerms: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    },\r\n    totalPaid: {\r\n        fontSize: 48,\r\n        fontWeight: '600',\r\n        color: 'rgba(255, 255, 255, .9)'\r\n    },\r\n    interval: {\r\n        marginLeft: 6,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    paymentDetails: {\r\n        marginTop: 48,\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    subscriptionType: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentInterval: {\r\n        marginTop: 8,\r\n        fontSize: 14,\r\n        fontWeight: '400',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    itemCost: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentUntilTodayContainer: {\r\n        marginTop: 56,\r\n        color: '#FFF',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    paymentUntilToday: {\r\n        fontSize: 24,\r\n        fontWeight: '500'\r\n    },\r\n    thanksCardContainer: {\r\n        width: '450px',\r\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    thanksCard: {\r\n        backgroundColor: '#141833',\r\n        display: 'inline-block',\r\n        color: '#FFF',\r\n        maxWidth: '80%',\r\n        borderRadius: 35\r\n    },\r\n    cardContentContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingLeft: 30,\r\n        paddingRight: 30\r\n    },\r\n    thanksTitle: {\r\n        marginTop: 8,\r\n        fontSize: 18,\r\n        fontWeight: '700',\r\n        textAlign: 'center'\r\n    },\r\n    thanksDescription: {\r\n        marginTop: 24,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        marginRight: 48,\r\n        marginLeft: 48\r\n    },\r\n    publishButton: {\r\n        marginTop: 64,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        backgroundColor: '#0AFFD2',\r\n        borderRadius: 10,\r\n        color: '#4E2D92',\r\n        fontSize: 16,\r\n        fontWeight: '700',\r\n        paddingTop: 19,\r\n        paddingBottom: 19,\r\n        '&:hover': {\r\n            backgroundColor: '#0AFFD2',\r\n            opacity: '.95'\r\n        }\r\n    },\r\n    backToDashboardButton: {\r\n        marginTop: 16,\r\n        marginBottom: 16,\r\n        fontSize: 16,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    }\r\n}));\r\n\r\nfunction useQuery() {\r\n    const { search } = useLocation();\r\n\r\n    return useMemo(() => new URLSearchParams(search), [search]);\r\n}\r\n\r\nconst ChargeConfirmationPage = ({ user }) => {\r\n    const [totalPaid, setTotalPaid] = useState(0);\r\n    const [interval, setInterval] = useState('');\r\n    const [intervalText, setIntervalText] = useState('');\r\n    const [plan, setPlan] = useState('');\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const query = useQuery();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getDetails() {\r\n            const id = query.get('subscriptionId');\r\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\r\n            setTotalPaid(details.val().totalPaid);\r\n\r\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\r\n\r\n            setIntervalText(details.val().interval);\r\n\r\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            getDetails();\r\n        }\r\n    }, [user]);\r\n\r\n    const onPublishStreamClick = () => {\r\n        history.push('/create');\r\n    }\r\n\r\n    const onBackToDashboardClick = () => {\r\n        history.push('/profile');\r\n    }\r\n\r\n    return (\r\n        <Grid container alignContent='center' className={classes.container}>\r\n            <Grid item md={6} className={classes.paymentInfoContainer}>\r\n                <div className={classes.eImageContainer}>\r\n                    <ESvg />\r\n                </div>\r\n                <p className={classes.subscriptionBought}>\r\n                    {plan && intervalText &&\r\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                    }\r\n                </p>\r\n                <div className={classes.subTerms}>\r\n                    <p className={classes.totalPaid}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                    <p className={classes.interval}>\r\n                        {interval}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentDetails}>\r\n                    <div>\r\n                        <p className={classes.subscriptionType}>\r\n                            {plan}\r\n                        </p>\r\n                        <p className={classes.paymentInterval}>\r\n                            {intervalText &&\r\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <p className={classes.itemCost}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentUntilTodayContainer}>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\r\n                    </p>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            </Grid>\r\n            <Grid item md={6} className={classes.thanksCardContainer}>\r\n                <Card className={classes.thanksCard}>\r\n                    <div className={classes.cardContentContainer}>\r\n                        <img src={HeartHands} />\r\n                        <CardContent>\r\n                            <p className={classes.thanksTitle}>\r\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\r\n                            </p>\r\n                            <p className={classes.thanksDescription}>\r\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\r\n                            </p>\r\n                        </CardContent>\r\n                        <Button fullWidth variant='contained'\r\n                            className={classes.publishButton}\r\n                            onClick={onPublishStreamClick}>\r\n                            {t('ChargeConfirmationPage.publishStream')}\r\n                        </Button>\r\n                        <Button className={classes.backToDashboardButton}\r\n                            onClick={onBackToDashboardClick}>\r\n                            {t('ChargeConfirmationPage.backToDashboard')}\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ChargeConfirmationPage;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTerms\\QaplaTerms.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx",["282"],"import React, { useState } from \"react\";\r\n\r\nimport imgStreameCoin from \"../../assets/streamerProfileCoin.jpg\";\r\nimport iconEdit from \"../../assets/Edit.svg\";\r\n\r\nimport style from \"./StreamerProfileEditCoin.module.css\";\r\n\r\nimport StreamerProfileModalDisableInteractions from \"../StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions\";\r\nimport  StreamerProfileImgCoin from '../StreamerProfileImgCoin/StreamerProfileImgCoin'\r\n\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nconst StreamerProfileEditCoin = () => {\r\n  const [ActiveEditTitle, setActiveEditTitle] = useState(false);\r\n  const [ActiveEditCoins, setActiveEditCoins] = useState(false);\r\n  const [modal, setModal] = useState(false);\r\n  const [titleCheckbox, setTitleCheckbox] = useState(\"enabled\");\r\n  const [checked, setChecked] = useState(true);\r\n  const [inputTitle, setInputTitle] = useState('Qapla Reaction')\r\n  const [inputCoint, setinputCoint] = useState('2.000')\r\n\r\n  const handleCheckbox = (e) => {\r\n\r\n    if (!e.target.checked) {\r\n      setModal(true);\r\n    } else {\r\n      setChecked(true);\r\n      setTitleCheckbox(\"enabled\");\r\n    }\r\n  };\r\n\r\n  const cerrarModal = (e) => {\r\n    setModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className={style.containerItereractions}>\r\n      <h1 className={style.Titulo}>Reactions</h1>\r\n      <StreamerProfileImgCoin inputCoint={inputCoint}/>\r\n     \r\n      <div className={style.content_input}>\r\n        <div className={style.input}>\r\n          <p className={style.p}>Qapla Reaction</p>\r\n          <input\r\n            className={\r\n              ActiveEditTitle ? style.Visibility_input : style.Desabilite_input\r\n            }\r\n            type=\"text\"\r\n            maxlength=\"18\"\r\n            value={inputTitle}\r\n            autoFocus\r\n            onChange={(e) => setInputTitle(e.target.value)}\r\n          />\r\n          <button onClick={() => setActiveEditTitle(!ActiveEditTitle)}>\r\n            <img src={iconEdit} alt=\"icons-edit\" />\r\n          </button>\r\n        </div>\r\n        <div className={style.input}>\r\n          <p className={style.p}>2.000</p>\r\n          <input\r\n            className={\r\n              ActiveEditCoins ? style.Visibility_input : style.Desabilite_input\r\n            }\r\n            type=\"number\"\r\n            maxlength=\"10\"\r\n            value={inputCoint}\r\n            autoFocus\r\n            onChange={(e) => setinputCoint(e.target.value)}\r\n          />\r\n          <button onClick={() => setActiveEditCoins(!ActiveEditCoins)}>\r\n            <img src={iconEdit} alt=\"icons-edit\" />\r\n          </button>\r\n        </div>\r\n        <div className={style.disableInteractions}>\r\n          <p className={style.p}>Reactions {titleCheckbox}</p>\r\n          <input\r\n            className={style.input_checkbox}\r\n            type=\"checkbox\"\r\n            id=\"boton\"\r\n            checked={checked}\r\n            onChange={(e) => handleCheckbox(e)}\r\n          />\r\n          <label for=\"boton\"></label>\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        className={style.modalContainer}\r\n        open={modal}\r\n        onClose={cerrarModal}\r\n      >\r\n        <StreamerProfileModalDisableInteractions cerrarModal={cerrarModal}  setChecked={setChecked} setTitleCheckbox={setTitleCheckbox}/>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StreamerProfileEditCoin;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx",["283"],"import React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\r\n\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dialogContainer: {\r\n        backdropFilter: 'blur(50px)',\r\n        [theme.breakpoints.down('md')]: {\r\n            backgroundColor: '#141833',\r\n        }\r\n    },\r\n    dialogRoot: {\r\n    },\r\n    paper: {\r\n        backgroundColor: '#141833',\r\n        color: '#FFF',\r\n        overflow: 'visible',\r\n        borderRadius: '35px',\r\n        padding: '64px',\r\n        minWidth: 'min-content',\r\n        [theme.breakpoints.down('md')]: {\r\n            minWidth: '100%',\r\n            minHeight: '100%',\r\n        }\r\n    },\r\n    itemsContainer: {\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            padding: '184px 66px 20px 66px',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexWrap: 'wrap',\r\n            gap: '50px 0px'\r\n        }\r\n    },\r\n    closeButtonContainer: {\r\n        position: 'absolute',\r\n        top: '24px',\r\n        right: '24px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '118px',\r\n            right: '128px',\r\n        }\r\n    },\r\n    closeButton: {\r\n        '&:hover': {\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    title: {\r\n        fontSize: '18px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '32px',\r\n        letterSpacing: '0px'\r\n    },\r\n    subtitle: {\r\n        color: '#FFFFFF9A',\r\n        fontSize: '12px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '18px',\r\n        letterSpacing: '0px',\r\n        marginTop: '8px',\r\n    },\r\n    startButtonRoot: {\r\n        backgroundColor: '#00FFDD',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    startText: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        color: '#FFFFFF'\r\n    },\r\n    enabledXQText: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        color: '#00FFDD'\r\n    },\r\n    qoinsButtonRoot: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    qoinsButtonRootDisabled: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF !important',\r\n        textTransform: 'none',\r\n        opacity: '0.2'\r\n    },\r\n    textInputContainer: {\r\n        backgroundColor: '#202750',\r\n        borderRadius: '16px',\r\n        paddingRight: '4px',\r\n        overflow: 'hidden'\r\n    },\r\n    sendContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        [theme.breakpoints.up('md')]: {\r\n            minWidth: '400px',\r\n        },\r\n    },\r\n    sendButtonRoot: {\r\n        backgroundColor: '#6C5DD3',\r\n        width: '165px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        alignSelf: 'flex-end',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.9'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.8'\r\n        }\r\n    },\r\n    eventNameContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        position: 'absolute',\r\n        right: '30px',\r\n        bottom: '-40px',\r\n        gap: '0px 5px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '98px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            width: '60%',\r\n            // right: 'auto',\r\n            paddingTop: '30px',\r\n            backgroundColor: '#141833'\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            top: '148px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            right: 'auto',\r\n            paddingTop: '30px',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'column',\r\n        },\r\n\r\n        fontSize: '16px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '24px',\r\n        letterSpacing: '0px',\r\n    },\r\n    eventName: {\r\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\r\n        backgroundClip: 'text',\r\n        WebkitBackgroundClip: 'text',\r\n        WebkitTextFillColor: 'transparent'\r\n    },\r\n}));\r\n\r\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n    const [dots, setDots] = useState('')\r\n    const [enablingQoins, setEnablingQoins] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\r\n            setTimeout(() => {\r\n                if (dots.length > 2) {\r\n                    setDots('');\r\n                } else {\r\n                    setDots(dots + '.');\r\n                }\r\n            }, 500);\r\n        }\r\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\r\n            setDots('');\r\n        }\r\n    }, [streamStarted, dots, enablingQoins]);\r\n\r\n    const startStreamHandler = async () => {\r\n        await startStream();\r\n    }\r\n\r\n    const enableQoinsHandler = async () => {\r\n        setEnablingQoins(true);\r\n        await enableQoins();\r\n        setEnablingQoins(false);\r\n    }\r\n\r\n    const closeStreamHandler = async () => {\r\n        closeStream();\r\n    }\r\n\r\n    const sendNotificationHandler = async () => {\r\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\r\n        await sendMessage(message);\r\n        setMessage('');\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open} classes={{\r\n            container: classes.dialogContainer,\r\n            root: classes.dialogRoot,\r\n            paper: classes.paper\r\n        }}\r\n            maxWidth='sm'\r\n            fullWidth>\r\n            <DialogContent style={{ padding: '0px' }}>\r\n                <div className={classes.closeButtonContainer}>\r\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\r\n                </div>\r\n                <div className={classes.itemsContainer}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\r\n                        <p className={classes.title}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.streamActions')}\r\n                        </p>\r\n                        <p className={classes.subtitle}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.manageRewards')}\r\n                        </p>\r\n                        <div style={{ height: '20px' }} />\r\n                        {(!stream && !streamStarted) &&\r\n                            <Button\r\n                                style={{ boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)' }}\r\n                                onClick={startStreamHandler}\r\n                                classes={{ root: classes.startButtonRoot }}>\r\n                                {t('QaplaStreamDialogs.EventManagementDialog.start')}\r\n                            </Button>\r\n                        }\r\n\r\n                        {!stream && streamStarted &&\r\n                            <p className={classes.startText}>\r\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.creatingRewards')}${dots}`}\r\n                            </p>\r\n                        }\r\n\r\n                        {stream && !stream.qoinsEnabled &&\r\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\r\n                                <TickSquare style={{ marginTop: '7.5px' }} />\r\n                                <p className={classes.enabledXQText}>\r\n                                    {t('QaplaStreamDialogs.EventManagementDialog.xqEnabled')}\r\n                                </p>\r\n                            </div>\r\n                        }\r\n\r\n                        {stream && enablingQoins &&\r\n                            <p className={classes.startText}>\r\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.enablingQoins')}${dots}`}\r\n                            </p>\r\n                        }\r\n\r\n                        {stream && stream.qoinsEnabled &&\r\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\r\n                                <TickSquare style={{ marginTop: '7.5px' }} />\r\n                                <p className={classes.enabledXQText}>\r\n                                    {t('QaplaStreamDialogs.EventManagementDialog.qoinsEnabled')}\r\n                                </p>\r\n                            </div>\r\n                        }\r\n                        <div style={{ height: '6px' }} />\r\n                        {!enablingQoins &&\r\n                            <Button\r\n                                onClick={(stream && stream.qoinsEnabled) ? closeStreamHandler : enableQoinsHandler}\r\n                                classes={{\r\n                                    root: classes.qoinsButtonRoot,\r\n                                    disabled: classes.qoinsButtonRootDisabled\r\n                                }}\r\n                                style={!stream ? { backgroundColor: '#0000' } : { boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)' }}\r\n                                disabled={!stream || (stream && enablingQoins) || closingStream}>\r\n                                {(stream && stream.qoinsEnabled) ?\r\n                                    t('QaplaStreamDialogs.EventManagementDialog.end')\r\n                                    :\r\n                                    t('QaplaStreamDialogs.EventManagementDialog.enableQoins')\r\n                                }\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                    <div className={classes.sendContainer}>\r\n                        <p className={classes.title}>\r\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\r\n                        </p>\r\n                        <p className={classes.subtitle}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\r\n                        </p>\r\n                        <div style={{ height: '20px' }} />\r\n                        <StreamerTextInput\r\n                            value={message}\r\n                            onChange={(e) => setMessage(e.target.value)}\r\n                            textInputStyle={{ marginTop: '0px' }}\r\n                            textInputClassName={classes.textInputContainer}\r\n                            fullWidth\r\n                            multiline\r\n                            rows={6}\r\n                            maxRows={6}\r\n                            rowsMax={6}\r\n                        />\r\n                        <div style={{ height: '12px' }} />\r\n                        <Button\r\n                            onClick={sendNotificationHandler}\r\n                            classes={{\r\n                                root: classes.sendButtonRoot\r\n                            }}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <div className={classes.eventNameContainer}>\r\n                <p className={classes.eventName}>\r\n                    {`${streamTitle} `}\r\n                </p>\r\n                <p>\r\n                    {`/ ${date} / ${hour}`}\r\n                </p>\r\n            </div>\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default EventManagementDialog;",["284","285"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx",["286","287"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx",["288"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n    makeStyles,\r\n    Grid,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    withStyles,\r\n    Avatar,\r\n    Hidden,\r\n    InputLabel,\r\n    InputAdornment\r\n} from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams, useLocation } from 'react-router';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\r\nimport DayJsUtils from '@date-io/dayjs';\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\r\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\r\nimport { ReactComponent as EyeIcon } from './../../assets/EyeIcon.svg';\r\nimport { ReactComponent as DownloadIcon } from './../../assets/DownloadIcon.svg';\r\n\r\nimport ContainedButton from '../ContainedButton/ContainedButton';\r\nimport BackButton from '../BackButton/BackButton';\r\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\r\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate } from '../../services/database';\r\nimport { sednPushNotificationToTopic } from '../../services/functions';\r\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        fontSize: '24px',\r\n        color: '#FFF'\r\n    },\r\n    description: {\r\n        fontSize: '12px',\r\n        color: 'rgba(255,255,255,0.60)',\r\n        lineHeight: '18px',\r\n        paddingRight: '16px',\r\n        marginTop: '16px'\r\n    },\r\n    datePickerLabel: {\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    button: {\r\n        marginTop: '32px'\r\n    },\r\n    containerTextArea: {\r\n        marginRight: '2.5rem'\r\n    },\r\n    textArea: {\r\n        paddingTop: '1rem'\r\n    },\r\n    tableHead: {\r\n        fontSize: '16px !important',\r\n        color: '#808191 !important',\r\n        fontWeight: 'bold'\r\n    },\r\n    participantsColumn: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center'\r\n    },\r\n    tableRow: {\r\n        backgroundColor: 'rgba(20, 24, 51, .5)'\r\n    },\r\n    tableRowOdd: {\r\n        backgroundColor: 'transparent'\r\n    },\r\n    firstCell: {\r\n        borderRadius: '1rem 0 0 1rem',\r\n    },\r\n    lastCell: {\r\n        borderRadius: '0 1rem 1rem 0',\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3),\r\n        marginLeft: '.25rem'\r\n    },\r\n    tableContainer: {\r\n        marginBottom: 16\r\n    },\r\n    dateInput: {\r\n        color: '#FFF',\r\n        marginTop: theme.spacing(1),\r\n        paddingLeft: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '.5rem',\r\n        fontSize: '14px',\r\n        '& .MuiInputAdornment-root': {\r\n            width: '20px',\r\n            marginLeft: '-6px',\r\n            marginRight: '18px',\r\n            zIndex: '10'\r\n        }\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n        '& .MuiPickersToolbar-toolbar': {\r\n            borderRadius: '20px'\r\n        },\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n}));\r\n\r\nconst TableCellStyled = withStyles(() => ({\r\n    root: {\r\n        borderColor: 'transparent',\r\n        paddingTop: '1rem',\r\n        paddingBottom: '1rem',\r\n        fontSize: '14px',\r\n        color: '#FFFFFF'\r\n    }\r\n}))(TableCell);\r\n\r\nconst SectionHeader = ({ title, description }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div style={{ marginTop: '48px' }}>\r\n            <p className={classes.title}>\r\n                {title}\r\n            </p>\r\n            <p className={classes.description}>\r\n                {description}\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EditStreamerEvent = ({ user }) => {\r\n    const { streamType } = useLocation().state;\r\n    const { streamId } = useParams();\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\r\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\r\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\r\n    const [notificationBody, setNotificationBody] = useState('');\r\n    const [participantsList, setParticipantsList] = useState({});\r\n    const [clockOpen, setClockOpen] = useState(false);\r\n    const [calendarOpen, setCalendarOpen] = useState(false);\r\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        async function setStreamData() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\r\n                if (timeStamp.exists()) {\r\n                    setSelectedDate(new Date(timeStamp.val()));\r\n                    setDisplayDate(new Date(timeStamp.val()));\r\n                    setFirstTimestamp(new Date(timeStamp.val()));\r\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\r\n                }\r\n            }\r\n        }\r\n\r\n        async function setStreamParticipantsList() {\r\n            const participantsList = await getStreamParticipantsList(streamId);\r\n            if (participantsList.exists()) {\r\n                setParticipantsList(participantsList.val());\r\n            }\r\n        }\r\n\r\n        async function setStreamTitle() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                const title = await getStreamTitle(streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                if (user.uid) {\r\n                    const title = await getPastStreamTitle(user.uid, streamId);\r\n                    setTitle(title.val());\r\n                }\r\n            }\r\n        }\r\n\r\n        setStreamData();\r\n        setStreamParticipantsList();\r\n        setStreamTitle();\r\n    }, [streamId, streamType, user]);\r\n\r\n    const sendNotification = async () => {\r\n        const bodys = {\r\n            es: notificationBody,\r\n            en: notificationBody\r\n        };\r\n\r\n        const titles = {\r\n            es: title['en'],\r\n            en: title['en']\r\n        };\r\n\r\n        try {\r\n            sednPushNotificationToTopic(streamId, titles, bodys);\r\n            alert(t('EditStream.alerts.sent'));\r\n            setNotificationBody('');\r\n        } catch (error) {\r\n            alert(t('EditStream.alerts.errorSent'));\r\n        }\r\n    }\r\n\r\n    const onChangeNotificationBody = (e) => {\r\n        const body = e.target.value;\r\n        if (body.length <= 140) {\r\n            setNotificationBody(body);\r\n        }\r\n    }\r\n\r\n    const saveDate = async () => {\r\n        if (selectedDate) {\r\n            const minValidDate = new Date().getTime() + 300000;\r\n            if (selectedDate.getTime() >= minValidDate) {\r\n                const dateRef = new Date(selectedDate);\r\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\r\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\r\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\r\n\r\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\r\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\r\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\r\n\r\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\r\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\r\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\r\n\r\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\r\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\r\n                let localHour = `${localHours}:${localMinutes}`;\r\n\r\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\r\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\r\n                alert(t('EditStream.alerts.updated'));\r\n            } else {\r\n                alert(t('EditStream.alerts.errorDate'))\r\n            }\r\n        } else {\r\n            alert(t('EditStream.alerts.errorDate'));\r\n        }\r\n    }\r\n\r\n    const handleDateChange = (date) => {\r\n        try {\r\n            setSelectedDate(date.$d);\r\n\r\n        } catch (e) { console.log(e) }\r\n\r\n        setDisplayDate(date)\r\n    };\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user}>\r\n            <Grid container>\r\n                <Grid xs={12}>\r\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\r\n                        onClick={history.goBack} />\r\n                </Grid>\r\n                {streamType === SCHEDULED_EVENT_TYPE &&\r\n                    <>\r\n                        <Grid xs={6}>\r\n                            <SectionHeader\r\n                                title={t('EditStream.change')}\r\n                                description={t('EditStream.changeDesc')} />\r\n                            <Grid item sm={12}>\r\n                                <Grid container>\r\n                                    {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\r\n                                        <></>\r\n                                        :\r\n                                        <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                                            <Grid container style={{\r\n                                                marginTop: '24px'\r\n                                            }}>\r\n                                                <Grid item sm={7} md={4} spacing={4}>\r\n                                                    <InputLabel className={classes.datePickerLabel}>\r\n                                                        {t('NewStream.date')}\r\n                                                    </InputLabel>\r\n                                                    <KeyboardDatePicker\r\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\r\n                                                        open={calendarOpen}\r\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\r\n                                                        onClose={() => setCalendarOpen(false)}\r\n                                                        clearable\r\n                                                        disablePast\r\n                                                        disableToolbar\r\n                                                        autoOk\r\n                                                        value={displayDate}\r\n                                                        placeholder='10-10-2021'\r\n                                                        onChange={handleDateChange}\r\n                                                        minDate={new Date()}\r\n                                                        format='DD-MM-YY ddd'\r\n                                                        keyboardIcon={\r\n                                                            <InputAdornment position='end' >\r\n                                                                <CalendarIcon />\r\n                                                            </InputAdornment>\r\n                                                        }\r\n                                                        InputProps={{\r\n                                                            disableUnderline: true,\r\n                                                            className: classes.dateInput\r\n                                                        }}\r\n                                                        variant={'inline'}\r\n                                                        PopoverProps={{\r\n                                                            PaperProps: {\r\n                                                                className: classes.popover,\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <div style={{ minWidth: '16px' }} />\r\n                                                <Grid item sm={7} md={4}>\r\n                                                    <InputLabel className={classes.datePickerLabel}>\r\n                                                        {t('NewStream.time')}\r\n                                                    </InputLabel>\r\n                                                    <KeyboardTimePicker\r\n                                                        open={clockOpen}\r\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\r\n                                                        onOpen={() => { }}\r\n                                                        onClose={() => setClockOpen(false)}\r\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\r\n                                                        autoOk\r\n                                                        error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\r\n                                                        helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\r\n                                                        value={displayDate}\r\n                                                        placeholder='08:00 AM'\r\n                                                        onChange={handleDateChange}\r\n                                                        // mask='__:__ _M'\r\n                                                        keyboardIcon={\r\n                                                            <InputAdornment position='end' >\r\n                                                                <TimeIcon />\r\n                                                            </InputAdornment>\r\n                                                        }\r\n                                                        InputProps={{\r\n                                                            disableUnderline: true,\r\n                                                            className: classes.dateInput\r\n                                                        }}\r\n                                                        variant={'inline'}\r\n                                                        PopoverProps={{\r\n                                                            PaperProps: {\r\n                                                                className: classes.popover,\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </MuiPickersUtilsProvider>\r\n                                    }\r\n                                    <ContainedButton className={classes.button}\r\n                                        onClick={saveDate}\r\n                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime()}>\r\n                                        {t('EditStream.save')}\r\n                                    </ContainedButton>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <SectionHeader title={t('EditStream.sendMessage')}\r\n                                description={t('EditStream.sendMessageDesc')} />\r\n                            <Grid item md={12} style={{\r\n                                marginTop: '24px'\r\n                            }}>\r\n                                <StreamerTextInput placeholder={t('EditStream.limit')}\r\n                                    multiline\r\n                                    rows={3}\r\n                                    fullWidth\r\n                                    textInputClassName={classes.textArea}\r\n                                    containerClassName={classes.containerTextArea}\r\n                                    value={notificationBody}\r\n                                    onChange={onChangeNotificationBody} />\r\n                                <ContainedButton className={classes.button}\r\n                                    onClick={sendNotification}>\r\n                                    {t('QaplaStreamDialogs.EventManagementDialog.send')}\r\n                                </ContainedButton>\r\n                            </Grid>\r\n                        </Grid>\r\n                        {/** To define how this section is going to work\r\n                            <Grid xs={6}>\r\n                                <SectionHeader title='Private Rooms'\r\n                                    description='If you are hosting a private room and want to give access to the participants of the event, you can share the ID with them directly in the Qapla app. Participants will get a notification to see the ID.' />\r\n                                <StreamerTextInput label='ID'\r\n                                    placeholder='ID' />\r\n                                <br/>\r\n                                <ContainedButton className={classes.button}>\r\n                                    Send\r\n                                </ContainedButton>\r\n                            </Grid>\r\n                        */}\r\n                    </>\r\n                }\r\n                <Grid xs={12}>\r\n                    <SectionHeader title={t('EditStream.participants')} />\r\n                    <TableContainer className={classes.tableContainer}>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCellStyled align='center' padding='checkbox'>\r\n                                        <ProfileIcon />\r\n                                    </TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.twitch')}</TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.game')}</TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.qapla')}</TableCellStyled>\r\n                                    <TableCellStyled className={classes.participantsColumn}>\r\n                                        <EyeIcon /> <p>{Object.keys(participantsList).length}</p>\r\n                                    </TableCellStyled>\r\n                                    <TableCellStyled className={classes.tableHead}>\r\n                                        <ContainedButton\r\n                                            startIcon={<DownloadIcon />}>\r\n                                            {t('EditStream.table.download')}\r\n                                        </ContainedButton>\r\n                                    </TableCellStyled>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {Object.keys(participantsList).map((participantUid, index) => (\r\n                                    <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\r\n                                        key={`Participant-${participantUid}`}>\r\n                                        <TableCellStyled align='center' className={classes.firstCell}>\r\n                                            <Avatar className={classes.avatar} />\r\n                                        </TableCellStyled>\r\n                                        <TableCellStyled>\r\n                                            {participantsList[participantUid].userName}\r\n                                        </TableCellStyled>\r\n                                        <TableCellStyled>\r\n                                            {participantsList[participantUid].userName}\r\n                                        </TableCellStyled>\r\n                                        <TableCellStyled className={classes.lastCell}>\r\n                                            {participantsList[participantUid].userName}\r\n                                        </TableCellStyled>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default EditStreamerEvent;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx",["289"],"import React from 'react';\r\nimport { withStyles, Tab } from '@material-ui/core';\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(4),\r\n        fontSize: 18,\r\n        '&:hover': {\r\n            color: '#FFF',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#FFF',\r\n            fontWeight: '500',\r\n        },\r\n        '&:focus': {\r\n            color: '#FFF',\r\n        },\r\n    },\r\n    selected: {},\r\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nexport default (props) => <QaplaTab {...props} />;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GoalProgressBar\\GoalProgressBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx",["290","291","292","293","294"],"import React from 'react';\r\nimport {\r\n    Grid,\r\n    AppBar,\r\n    Toolbar,\r\n    Link,\r\n    Button\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport styles from './StreamerDashboardContainer.module.css';\r\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\r\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridContainer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexWrap: 'nowrap'\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(4) + 1,\r\n        paddingTop: theme.spacing(4) + 1,\r\n    }\r\n}));\r\n\r\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\r\n            {!user && user === undefined ?\r\n                <>\r\n                    {children}\r\n                </>\r\n                :\r\n                <>\r\n                    {history.location.pathname !== '/welcome' &&\r\n                        <StreamerSideBar user={user} />\r\n                    }\r\n                    <div className={`${classes.content} ${containerStyle}`}>\r\n                        {children}\r\n                    </div>\r\n                </>\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default StreamerDashboardContainer;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QStore\\QStore.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx",["295","296","297","298"],"import React, { useState, useReducer, useEffect } from 'react';\r\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, Accordion, AccordionSummary, AccordionDetails, CircularProgress } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport DayJsUtils from '@date-io/dayjs';\r\n\r\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer, updateStreamerProfile } from './../../services/database';\r\nimport styles from './NewStream.module.css';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\r\nimport BackButton from '../BackButton/BackButton';\r\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\r\nimport RequestActivation from '../RequestActivation/RequestActivation';\r\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    label: {\r\n        color: '#FFF',\r\n        fontSize: '14px'\r\n    },\r\n    datePickerLabel: {\r\n        marginBottom: theme.spacing(1),\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    button: {\r\n        color: '#FFF',\r\n        backgroundColor: '#6C5DD3',\r\n        borderRadius: '1rem',\r\n        padding: '1rem 3rem 1rem 3rem'\r\n    },\r\n    dateInput: {\r\n        color: '#FFF',\r\n        paddingLeft: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '.5rem',\r\n        fontSize: '14px',\r\n        height: '56px',\r\n        '& .MuiInputAdornment-root': {\r\n            width: '20px',\r\n            marginLeft: '-6px',\r\n            marginRight: '18px',\r\n            zIndex: '10'\r\n        }\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n        '& .MuiPickersToolbar-toolbar': {\r\n            borderRadius: '20px'\r\n        },\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n    accordionContainer: {\r\n        marginTop: '3%',\r\n    },\r\n    accordion: {\r\n        backgroundColor: '#0D1021',\r\n        width: '66%',\r\n    },\r\n    accordionGridRoot: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n    accordionGridItem: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n}));\r\n\r\nconst NewStream = ({ user, games }) => {\r\n    const userLang = navigator.language || navigator.userLanguage;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\r\n    const [selectedGame, setSelectedGame] = useState();\r\n    const [selectedEvent, setSelectedEvent] = useState('exp');\r\n    const [stringDate, setStringDate] = useState('');\r\n    const [clockOpen, setClockOpen] = useState(false);\r\n    const [calendarOpen, setCalendarOpen] = useState(false);\r\n    const [gamesData, setGamesData] = useState([]);\r\n    const [showAccountActviation, setShowAccountActviation] = useState(false);\r\n    const [lockSendButton, setLockSendButton] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let gameList = [];\r\n\r\n        if (games.allGames) {\r\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\r\n\r\n            let tempGamesData = [];\r\n            gameList.forEach((game) => {\r\n                tempGamesData.push({\r\n                    id: game.gameKey,\r\n                    name: game.gameName\r\n                })\r\n            });\r\n\r\n            setGamesData(tempGamesData);\r\n        }\r\n    }, [games.allGames, user]);\r\n\r\n    const optionalDataReducer = (state, action) => {\r\n        switch (action.target.id) {\r\n            case 'eventTitle':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        title: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        title: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            case 'eventDescriptionTitle':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        descriptionsTitle: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        descriptionsTitle: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            case 'eventDescription':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        descriptions: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        descriptions: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\r\n\r\n    // Minimum valid date is 24 hours since the current date\r\n    const minDate = new Date((new Date()).getTime() + 86400000);\r\n\r\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\r\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\r\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\r\n\r\n    const handleDateChange = (date) => {\r\n        try {\r\n            setSelectedDate(date.$d);\r\n\r\n        } catch (e) { console.log(e) }\r\n\r\n        setDisplayDate(date)\r\n    };\r\n\r\n    const openSuccessWindow = () => {\r\n        submitEvent();\r\n    };\r\n\r\n    const submitEvent = async () => {\r\n        setLockSendButton(true);\r\n        if (user.broadcasterType === '') {\r\n            setLockSendButton(false);\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        if (!user.premium && !user.freeTrial) {\r\n            setLockSendButton(false);\r\n            return setShowAccountActviation(true);\r\n        }\r\n\r\n        if (selectedDate < minDate) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.before24h'));\r\n            return;\r\n        }\r\n        if (!selectedGame) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.missingData'));\r\n            return;\r\n        }\r\n\r\n        if (user.currentPeriod) {\r\n            const { endDate } = user.currentPeriod;\r\n\r\n            /**\r\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\r\n             */\r\n            if (selectedDate.getTime() <= endDate) {\r\n\r\n                const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\r\n\r\n                let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\r\n\r\n                if (!userCanCreateStream) {\r\n                    if (user.boughtStreams) {\r\n                        /**\r\n                         * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\r\n                         * the user can create the stream, this function will also remove expired packages or packages that has been already used\r\n                         */\r\n                        userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\r\n                            if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\r\n                                addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\r\n                                return true;\r\n                            } else {\r\n                                removeStreamPackageOfStreamer(user.uid, streamsPackageId);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    addToStreamsRequestedOnSubscriptionDetails(user.uid);\r\n                }\r\n\r\n                /**\r\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\r\n                 * is lower or equal to the user limit per month then we create the event\r\n                 */\r\n                if (userCanCreateStream) {\r\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\r\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\r\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\r\n\r\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\r\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\r\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\r\n\r\n                    let streamerData = {\r\n                        displayName: user.displayName,\r\n                        login: user.login,\r\n                        photoUrl: user.photoUrl\r\n                    };\r\n\r\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\r\n                    if (userData && userData.data) {\r\n                        streamerData = {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url\r\n                        };\r\n\r\n                        await updateStreamerProfile(user.uid, {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url,\r\n                            broadcasterType: userData.data.broadcaster_type\r\n                        });\r\n                    }\r\n\r\n                    await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\r\n\r\n                    window.analytics.track('Stream requested', {\r\n                        selectedGame,\r\n                        selectedDate: selectedDate.getTime(),\r\n                        uid: user.uid\r\n                    });\r\n                    setOpenSuccessDialog(true);\r\n                } else {\r\n                    setShowAccountActviation(true);\r\n                }\r\n            } else {\r\n                alert(t('NewStream.alerts.beforePlanExpiration'));\r\n            }\r\n        } else {\r\n            setShowAccountActviation(true);\r\n        }\r\n    }\r\n\r\n    const successActivation = async () => {\r\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\r\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\r\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\r\n\r\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\r\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\r\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\r\n\r\n        let streamerData = {\r\n            displayName: user.displayName,\r\n            login: user.login,\r\n            photoUrl: user.photoUrl\r\n        };\r\n\r\n        const userData = await getTwitchUserDataCloudFunction(user.id);\r\n        if (userData && userData.data) {\r\n            streamerData = {\r\n                displayName: userData.data.display_name,\r\n                login: userData.data.login,\r\n                photoUrl: userData.data.profile_image_url\r\n            };\r\n\r\n            await updateStreamerProfile(user.uid, {\r\n                displayName: userData.data.display_name,\r\n                login: userData.data.login,\r\n                photoUrl: userData.data.profile_image_url,\r\n                broadcasterType: userData.data.broadcaster_type\r\n            });\r\n        }\r\n\r\n        await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\r\n        await addToStreamsRequestedOnSubscriptionDetails(user.uid);\r\n\r\n        updateStreamerProfile(user.uid, streamerData);\r\n\r\n        window.analytics.track('Free trial started', {\r\n            uid: user.uid\r\n        });\r\n        setOpenSuccessDialog(true);\r\n    }\r\n\r\n    if (!showAccountActviation) {\r\n        return (\r\n            <StreamerDashboardContainer user={user}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <BackButton onClick={history.goBack} />\r\n                    </Grid>\r\n                    <Grid item sm={8}>\r\n                        <h1 className={styles.title}>\r\n                            {t('NewStream.whatAreYouPlaying')}\r\n                        </h1>\r\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                            <Grid item sm={5} style={{ width: '274px', maxWidth: '274px', }}>\r\n                                <InputLabel className={classes.datePickerLabel}>\r\n                                    {t('NewStream.pickACategory')}\r\n                                </InputLabel>\r\n                                <ReactSearchAutocomplete\r\n                                    items={gamesData}\r\n                                    autofocus\r\n                                    placeholder={t('NewStream.categoryPickerPlaceholder')}\r\n                                    showItemsOnFocus\r\n                                    maxResults={5}\r\n                                    onSelect={(game) => setSelectedGame(game.id)}\r\n                                    onClear={() => setSelectedGame(null)}\r\n                                    styling={{\r\n                                        zIndex: 999,\r\n                                        height: '56px',\r\n                                        color: '#FFF',\r\n                                        hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\r\n                                        fontSize: '1rem',\r\n                                        fontWeight: 'bold',\r\n                                        backgroundColor: '#141833',\r\n                                        border: 'none',\r\n                                        borderRadius: '8px',\r\n                                        placeholderColor: 'rgba(255, 255, 255, 0.5)',\r\n                                        fontFamily: 'Inter',\r\n                                        lineColor: 'transparent'\r\n                                    }}\r\n                                    showIcon={false}\r\n                                    formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <h1 className={styles.title}>\r\n                            {t('NewStream.when')}\r\n                        </h1>\r\n                        <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                            <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                    <InputLabel className={classes.datePickerLabel} >\r\n                                        {t('NewStream.date')}\r\n                                    </InputLabel>\r\n                                    <KeyboardDatePicker\r\n                                        open={calendarOpen}\r\n                                        onClick={() => setCalendarOpen(true)}\r\n                                        onOpen={() => { }}\r\n                                        onClose={() => setCalendarOpen(false)}\r\n                                        clearable\r\n                                        disablePast\r\n                                        disableToolbar\r\n                                        autoOk\r\n                                        value={displayDate}\r\n                                        placeholder='10-10-2021'\r\n                                        onChange={handleDateChange}\r\n                                        defaultValue={new Date()}\r\n                                        minDate={minDate}\r\n                                        minDateMessage={t('NewStream.alerts.before24h')}\r\n                                        format='DD-MM-YY ddd'\r\n                                        keyboardIcon={\r\n                                            <InputAdornment position='end' >\r\n                                                <CalendarIcon />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        InputProps={{\r\n                                            disableUnderline: true,\r\n                                            className: classes.dateInput\r\n                                        }}\r\n                                        variant={'inline'}\r\n                                        PopoverProps={{\r\n                                            PaperProps: {\r\n                                                className: classes.popover,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                    <InputLabel className={classes.datePickerLabel}>\r\n                                        {t('NewStream.time')}\r\n                                    </InputLabel>\r\n                                    <KeyboardTimePicker\r\n                                        open={clockOpen}\r\n                                        onClick={() => setClockOpen(true)}\r\n                                        onOpen={() => { }}\r\n                                        onClose={() => setClockOpen(false)}\r\n                                        autoOk\r\n                                        error={selectedDate <= minDate}\r\n                                        helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\r\n                                        value={displayDate}\r\n                                        placeholder='08:00 AM'\r\n                                        onChange={handleDateChange}\r\n                                        // mask='__:__ _M'\r\n                                        keyboardIcon={\r\n                                            <InputAdornment position='end' >\r\n                                                <TimeIcon />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        InputProps={{\r\n                                            disableUnderline: true,\r\n                                            className: classes.dateInput\r\n                                        }}\r\n                                        variant={'inline'}\r\n                                        PopoverProps={{\r\n                                            PaperProps: {\r\n                                                className: classes.popover,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                {/* <Grid item sm={8} style={{ width: '90%', minWidth: '330px' }}>\r\n                                    <InputLabel className={classes.datePickerLabel}>\r\n                                        {t('NewStream.confirmDate')}\r\n                                    </InputLabel>\r\n                                    <StreamerTextInput placeholder={t('NewStream.confirmDatePlaceholder')}\r\n                                        fullWidth\r\n                                        value={stringDate}\r\n                                        onChange={handleStringDateChange} />\r\n                                </Grid> */}\r\n                            </Grid>\r\n                        </MuiPickersUtilsProvider>\r\n                        {/* <h1 className={styles.title}>\r\n                            {t('NewStream.streamType')}\r\n                        </h1> */}\r\n                        {/* <RadioGroup name={'eventType'} value={selectedEvent} onChange={(event) => { handleEventTypeChange(event) }}>\r\n                            <Grid container>\r\n                                <Grid item sm={2}>\r\n                                    <FormControlLabel\r\n                                        value={'exp'}\r\n                                        classes={{ label: classes.label }}\r\n                                        control={\r\n                                            <Radio defaultChecked\r\n                                                checkedIcon={<CheckedIcon />}\r\n                                                icon={<UncheckedIcon />}\r\n                                                style={{ backgroundColor: 'transparent' }} />\r\n                                        }\r\n                                        label={t('NewStream.streamTypes.casual')} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </RadioGroup> */}\r\n                        <Grid container className={classes.accordionContainer}>\r\n                            <Accordion\r\n                                className={classes.accordion}\r\n                            >\r\n                                <AccordionSummary\r\n                                    expandIcon={<ArrowIcon />}\r\n                                    id={\"moreOptions\"}\r\n                                    aria-controls=\"panel1a-content\"\r\n                                >\r\n                                    <InputLabel\r\n                                        className={classes.label}\r\n                                    >\r\n                                        {t('NewStream.advanced')}\r\n                                    </InputLabel>\r\n                                </AccordionSummary>\r\n                                <AccordionDetails>\r\n                                    <Grid container direction={'column'} className={classes.accordionGridRoot}>\r\n                                        <InputLabel className={classes.label}>\r\n                                            {t('NewStream.feelingCreative')}\r\n                                        </InputLabel>\r\n                                        <Grid container>\r\n                                            <h1 className={styles.title}>\r\n                                                {t('NewStream.streamTitle')}\r\n                                            </h1>\r\n                                            <Grid container spacing={4}>\r\n                                                <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\r\n                                                    <StreamerTextInput\r\n                                                        label={t('NewStream.streamTitle')}\r\n                                                        placeholder={t('NewStream.streamTitlePlaceholder')}\r\n                                                        id='eventTitle'\r\n                                                        fullWidth={true}\r\n                                                        value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\r\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <h1 className={styles.title}>\r\n                                            {t('NewStream.streamDescription')}\r\n                                        </h1>\r\n                                        {/* <Grid>\r\n                                            <Grid container spacing={4}>\r\n                                                <Grid item className={classes.accordionGridItem}>\r\n                                                    <StreamerTextInput\r\n                                                        label={t('NewStream.subtitle')}\r\n                                                        id={'eventDescriptionTitle'}\r\n                                                        placeholder={t('NewStream.subtitle')}\r\n                                                        fullWidth={true}\r\n                                                        value={optionalData.descriptionsTitle ? userLang.toLowerCase().includes('es') ? optionalData.descriptionsTitle.es : optionalData.descriptionsTitle.en : ''}\r\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid> */}\r\n                                        <Grid>\r\n                                            <Grid container spacing={4}>\r\n                                                <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\r\n                                                    <StreamerTextInput\r\n                                                        id={'eventDescription'}\r\n                                                        label={t('NewStream.streamDescription')}\r\n                                                        placeholder={t('NewStream.descriptionPlaceholder')}\r\n                                                        multiline={true}\r\n                                                        rows={3}\r\n                                                        rowsMax={30}\r\n                                                        fullWidth={true}\r\n                                                        value={optionalData.descriptions ? userLang.toLowerCase().includes('es') ? optionalData.descriptions.es : optionalData.descriptions.en : ''}\r\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AccordionDetails>\r\n                            </Accordion>\r\n                        </Grid>\r\n                        <Button\r\n                            disabled={lockSendButton}\r\n                            className={styles.button}\r\n                            onClick={openSuccessWindow}>\r\n                            {lockSendButton ?\r\n                                <CircularProgress\r\n                                    style={{\r\n                                        color: '#fff7',\r\n                                        alignSelf: 'center'\r\n                                    }}\r\n                                    size={25} />\r\n                                :\r\n                                t('NewStream.submit')\r\n                            }\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <NewStreamSuccessDialog\r\n                    open={openSuccessDialog}\r\n                    onClose={() => history.push('/profile')}\r\n                    mainPage={() => history.push('/profile')}\r\n                />\r\n            </StreamerDashboardContainer>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <RequestActivation user={user} onSuccessActivation={successActivation} />\r\n                <NewStreamSuccessDialog\r\n                    open={openSuccessDialog}\r\n                    onClose={() => history.push('/profile')}\r\n                    mainPage={() => history.push('/profile')}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewStream;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx",["299"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx",[],{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","replacedBy":"303"},{"ruleId":"300","replacedBy":"304"},{"ruleId":"302","replacedBy":"305"},{"ruleId":"306","severity":1,"message":"307","line":4,"column":8,"nodeType":"308","messageId":"309","endLine":4,"endColumn":14},{"ruleId":"306","severity":1,"message":"310","line":6,"column":198,"nodeType":"308","messageId":"309","endLine":6,"endColumn":223},{"ruleId":"306","severity":1,"message":"311","line":23,"column":12,"nodeType":"308","messageId":"309","endLine":23,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":223,"column":8,"nodeType":"314","endLine":223,"endColumn":84,"suggestions":"315"},{"ruleId":"306","severity":1,"message":"316","line":2,"column":67,"nodeType":"308","messageId":"309","endLine":2,"endColumn":74},{"ruleId":"306","severity":1,"message":"317","line":13,"column":28,"nodeType":"308","messageId":"309","endLine":13,"endColumn":36},{"ruleId":"306","severity":1,"message":"318","line":16,"column":28,"nodeType":"308","messageId":"309","endLine":16,"endColumn":33},{"ruleId":"306","severity":1,"message":"319","line":233,"column":12,"nodeType":"308","messageId":"309","endLine":233,"endColumn":29},{"ruleId":"306","severity":1,"message":"320","line":237,"column":12,"nodeType":"308","messageId":"309","endLine":237,"endColumn":23},{"ruleId":"306","severity":1,"message":"321","line":241,"column":12,"nodeType":"308","messageId":"309","endLine":241,"endColumn":21},{"ruleId":"306","severity":1,"message":"322","line":241,"column":23,"nodeType":"308","messageId":"309","endLine":241,"endColumn":35},{"ruleId":"312","severity":1,"message":"323","line":288,"column":8,"nodeType":"314","endLine":288,"endColumn":14,"suggestions":"324"},{"ruleId":"306","severity":1,"message":"325","line":387,"column":11,"nodeType":"308","messageId":"309","endLine":387,"endColumn":24},{"ruleId":"306","severity":1,"message":"326","line":373,"column":11,"nodeType":"308","messageId":"309","endLine":373,"endColumn":26},{"ruleId":"306","severity":1,"message":"327","line":4,"column":5,"nodeType":"308","messageId":"309","endLine":4,"endColumn":14},{"ruleId":"306","severity":1,"message":"328","line":5,"column":5,"nodeType":"308","messageId":"309","endLine":5,"endColumn":17},{"ruleId":"306","severity":1,"message":"329","line":6,"column":5,"nodeType":"308","messageId":"309","endLine":6,"endColumn":15},{"ruleId":"300","replacedBy":"330"},{"ruleId":"302","replacedBy":"331"},{"ruleId":"306","severity":1,"message":"332","line":1,"column":17,"nodeType":"308","messageId":"309","endLine":1,"endColumn":26},{"ruleId":"300","replacedBy":"333"},{"ruleId":"302","replacedBy":"334"},{"ruleId":"300","replacedBy":"335"},{"ruleId":"302","replacedBy":"336"},{"ruleId":"306","severity":1,"message":"337","line":7,"column":28,"nodeType":"308","messageId":"309","endLine":7,"endColumn":37},{"ruleId":"306","severity":1,"message":"338","line":21,"column":11,"nodeType":"308","messageId":"309","endLine":21,"endColumn":18},{"ruleId":"312","severity":1,"message":"339","line":98,"column":8,"nodeType":"314","endLine":98,"endColumn":38,"suggestions":"340"},{"ruleId":"312","severity":1,"message":"339","line":179,"column":8,"nodeType":"314","endLine":179,"endColumn":14,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":235,"column":25,"nodeType":"344","endLine":235,"endColumn":49},{"ruleId":"306","severity":1,"message":"345","line":3,"column":8,"nodeType":"308","messageId":"309","endLine":3,"endColumn":22},{"ruleId":"312","severity":1,"message":"346","line":243,"column":8,"nodeType":"314","endLine":243,"endColumn":44,"suggestions":"347"},{"ruleId":"300","replacedBy":"348"},{"ruleId":"302","replacedBy":"349"},{"ruleId":"306","severity":1,"message":"350","line":273,"column":21,"nodeType":"308","messageId":"309","endLine":273,"endColumn":31},{"ruleId":"312","severity":1,"message":"351","line":457,"column":8,"nodeType":"314","endLine":457,"endColumn":14,"suggestions":"352"},{"ruleId":"306","severity":1,"message":"353","line":13,"column":5,"nodeType":"308","messageId":"309","endLine":13,"endColumn":11},{"ruleId":"354","severity":1,"message":"355","line":26,"column":1,"nodeType":"356","endLine":26,"endColumn":51},{"ruleId":"306","severity":1,"message":"357","line":4,"column":5,"nodeType":"308","messageId":"309","endLine":4,"endColumn":11},{"ruleId":"306","severity":1,"message":"358","line":5,"column":5,"nodeType":"308","messageId":"309","endLine":5,"endColumn":12},{"ruleId":"306","severity":1,"message":"359","line":6,"column":5,"nodeType":"308","messageId":"309","endLine":6,"endColumn":9},{"ruleId":"306","severity":1,"message":"360","line":7,"column":5,"nodeType":"308","messageId":"309","endLine":7,"endColumn":11},{"ruleId":"306","severity":1,"message":"361","line":14,"column":8,"nodeType":"308","messageId":"309","endLine":14,"endColumn":23},{"ruleId":"306","severity":1,"message":"362","line":11,"column":8,"nodeType":"308","messageId":"309","endLine":11,"endColumn":22},{"ruleId":"306","severity":1,"message":"363","line":124,"column":27,"nodeType":"308","messageId":"309","endLine":124,"endColumn":43},{"ruleId":"306","severity":1,"message":"364","line":125,"column":24,"nodeType":"308","messageId":"309","endLine":125,"endColumn":37},{"ruleId":"365","severity":1,"message":"366","line":268,"column":103,"nodeType":"367","messageId":"368","endLine":268,"endColumn":105},{"ruleId":null,"fatal":true,"severity":2,"message":"369","line":24,"column":12},"no-native-reassign",["370"],"no-negated-in-lhs",["371"],["370"],["371"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'getStreamerAlertsSettings' is defined but never used.","'mediaContent' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alertSideRight' and 'queueAnimation'. Either include them or remove the dependency array.","ArrayExpression",["372"],"'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["373"],"'copyTwitchURL' is assigned a value but never used.","'shareStreamLink' is assigned a value but never used.","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.",["370"],["371"],"'useEffect' is defined but never used.",["370"],["371"],["370"],["371"],"'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["374"],["375"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'imgStreameCoin' is defined but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["376"],["370"],["371"],"'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["377"],"'Hidden' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","'StreamerSelect' is defined but never used.","'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Parsing error: Unexpected token\n\n  22 |            <Modal className={style.modal} open={modal} onClose={abrirCerrarModal}>\n  23 |               <M\n> 24 |            </Modal>\n     |            ^\n  25 |         </div>\n  26 |        )\n  27 |     }","no-global-assign","no-unsafe-negation",{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",{"range":"390","text":"391"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"392","text":"393"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"394","text":"395"},"Update the dependencies array to be: [query, t, user]",{"range":"396","text":"397"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"398","text":"399"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"400","text":"401"},[10257,10333],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",[9179,9185],"[socialLinksInitialValue, twitchURL, user]",[4466,4496],"[user, history, isLoadingAuth, query, t]",[4945,4951],"[query, t, user]",[6962,6998],"[streamStarted, dots, enablingQoins, stream]",[18267,18273],"[setPendingMessages, user]"]
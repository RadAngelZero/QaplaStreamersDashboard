[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\interactionsQapla.js":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx":"20","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx":"21","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStreamSuccessDialog.jsx":"22","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx":"23","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx":"24","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js":"25","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx":"26","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js":"27","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"28","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx":"29","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js":"30","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx":"31","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx":"32","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx":"33","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx":"34","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx":"35","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx":"36","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx":"37","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx":"38","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx":"39","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx":"40","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js":"41","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js":"42","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"43","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx":"44","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"45"},{"size":545,"mtime":1660938322012,"results":"46","hashOfConfig":"47"},{"size":899,"mtime":1660938322023,"results":"48","hashOfConfig":"47"},{"size":240,"mtime":1660938321776,"results":"49","hashOfConfig":"47"},{"size":23895,"mtime":1662754843673,"results":"50","hashOfConfig":"47"},{"size":21997,"mtime":1662754843680,"results":"51","hashOfConfig":"47"},{"size":20631,"mtime":1663277569931,"results":"52","hashOfConfig":"47"},{"size":2669,"mtime":1663096431212,"results":"53","hashOfConfig":"47"},{"size":2520,"mtime":1662754843733,"results":"54","hashOfConfig":"47"},{"size":1646,"mtime":1663277569929,"results":"55","hashOfConfig":"47"},{"size":2158,"mtime":1663595262616,"results":"56","hashOfConfig":"47"},{"size":398,"mtime":1660938321988,"results":"57","hashOfConfig":"47"},{"size":21757,"mtime":1663096431194,"results":"58","hashOfConfig":"47"},{"size":2601,"mtime":1663277569939,"results":"59","hashOfConfig":"47"},{"size":2247,"mtime":1660938322016,"results":"60","hashOfConfig":"47"},{"size":14923,"mtime":1662754843722,"results":"61","hashOfConfig":"47"},{"size":3954,"mtime":1660938321987,"results":"62","hashOfConfig":"47"},{"size":3510,"mtime":1662754843683,"results":"63","hashOfConfig":"47"},{"size":5837,"mtime":1660938321985,"results":"64","hashOfConfig":"47"},{"size":2074,"mtime":1660938321974,"results":"65","hashOfConfig":"47"},{"size":6876,"mtime":1663278072894,"results":"66","hashOfConfig":"47"},{"size":13115,"mtime":1663278211812,"results":"67","hashOfConfig":"47"},{"size":3422,"mtime":1663278751285,"results":"68","hashOfConfig":"47"},{"size":27706,"mtime":1663610487433,"results":"69","hashOfConfig":"47"},{"size":12209,"mtime":1660938321991,"results":"70","hashOfConfig":"47"},{"size":375,"mtime":1660938322013,"results":"71","hashOfConfig":"47"},{"size":35175,"mtime":1660938322000,"results":"72","hashOfConfig":"47"},{"size":8655,"mtime":1663096431213,"results":"73","hashOfConfig":"47"},{"size":22105,"mtime":1663277569927,"results":"74","hashOfConfig":"47"},{"size":720,"mtime":1660938321988,"results":"75","hashOfConfig":"47"},{"size":5532,"mtime":1662754843734,"results":"76","hashOfConfig":"47"},{"size":4435,"mtime":1662754843720,"results":"77","hashOfConfig":"47"},{"size":3435,"mtime":1660938321986,"results":"78","hashOfConfig":"47"},{"size":3265,"mtime":1660938322004,"results":"79","hashOfConfig":"47"},{"size":6780,"mtime":1662754843674,"results":"80","hashOfConfig":"47"},{"size":1128,"mtime":1663595486167,"results":"81","hashOfConfig":"47"},{"size":16799,"mtime":1663277569926,"results":"82","hashOfConfig":"47"},{"size":9933,"mtime":1663181868863,"results":"83","hashOfConfig":"47"},{"size":657,"mtime":1660938321974,"results":"84","hashOfConfig":"47"},{"size":3513,"mtime":1660938321984,"results":"85","hashOfConfig":"47"},{"size":10204,"mtime":1662754843701,"results":"86","hashOfConfig":"47"},{"size":37993,"mtime":1663277569941,"results":"87","hashOfConfig":"47"},{"size":1550,"mtime":1660938322017,"results":"88","hashOfConfig":"47"},{"size":1425,"mtime":1660938322018,"results":"89","hashOfConfig":"47"},{"size":15129,"mtime":1660938322002,"results":"90","hashOfConfig":"47"},{"size":7758,"mtime":1660938321967,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1i113oo",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"103"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"103"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"103"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"99"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"99"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"99"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"99"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js",[],["196","197"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js",[],["198","199"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx",["200","201","202"],"import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { GiphyFetch } from '@giphy/js-fetch-api';\r\nimport { Video } from '@giphy/react-components';\r\n\r\nimport styles from './LiveDonations.module.css';\r\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\r\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation, listenToStreamerAlertsSettings, markOverlayAsActive, onLiveDonationsDisconnect } from '../../services/database';\r\nimport channelPointReactionAudio from '../../assets/channelPointReactionAudio.mp3';\r\nimport qoinsReactionAudio from '../../assets/qoinsReactionAudio.mp3';\r\nimport { speakCheerMessage } from '../../services/functions';\r\nimport { GIPHY_CLIP, GIPHY_GIF, GIPHY_GIFS, GIPHY_STICKER, GIPHY_STICKERS, MEME, MEMES, TEST_MESSAGE_SPEECH_URL } from '../../utilities/Constants';\r\nimport QaplaOnLeft from '../../assets/Qapla-On-Overlay-Left.png';\r\nimport QaplaOnRight from '../../assets/Qapla-On-Overlay-Right.png';\r\nimport { getCheerVoiceMessage } from '../../services/storage';\r\n\r\nconst gf = new GiphyFetch('1WgsSOSfrTXTN4IGMMuhajM7WsfxoSdq');\r\n\r\nlet audioAlert = new Audio(channelPointReactionAudio);\r\nlet voiceBotMessage = new Audio(channelPointReactionAudio);\r\n\r\nconst LiveDonations = () => {\r\n    const [streamerUid, setStreamerUid] = useState('');\r\n    const [donationQueue, setDonationQueue] = useState([]);\r\n    const [donationToShow, setDonationToShow] = useState(null);\r\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\r\n    const [alertSideRight, setAlertSideRight] = useState(false);\r\n    const [isPlayingAudio, setIsPlayingAudio] = useState(false);\r\n    const [qaplaOnOpacity, setQaplaOnOpacity] = useState(1);\r\n    const [playQaplaOnAnimation, setPlayQaplaOnAnimation] = useState(\"false\");\r\n    const [showEmojiRain, setShowEmojiRain] = useState(false);\r\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\r\n    const { streamerId } = useParams();\r\n\r\n    useEffect(() => {\r\n        queueAnimation();\r\n        const pushDonation = (donation) => {\r\n            setDonationQueue((array) => [donation, ...array]);\r\n        }\r\n\r\n        const popDonation = () => {\r\n            const indexToPop = donationQueue.length - 1;\r\n            const donationToPop = donationQueue[indexToPop];\r\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\r\n\r\n            return donationToPop;\r\n        }\r\n\r\n        async function getStreamerUid() {\r\n            if (streamerId) {\r\n                const uid = await getStreamerUidWithTwitchId(streamerId);\r\n                setStreamerUid(uid);\r\n\r\n                listenToStreamerAlertsSettings(uid, (streamerSettings) => {\r\n                    if (streamerSettings.exists()) {\r\n                        setReactionsEnabled(streamerSettings.val().reactionsEnabled !== false);\r\n                        setAlertSideRight(streamerSettings.val().alertSideRight);\r\n                    }\r\n                });\r\n\r\n                listenForTestCheers(uid, (donation) => {\r\n                    pushDonation({ ...donation.val(), id: donation.key });\r\n                });\r\n            }\r\n        }\r\n\r\n        async function loadDonations() {\r\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\r\n                pushDonation({ ...donation.val(), id: donation.key });\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Emoji rain functions\r\n         */\r\n         let circles = [];\r\n\r\n         function addCircle(delay, range, color) {\r\n             setTimeout(function () {\r\n                let c = new Circle(range[0] + Math.random() * range[1], 80 + Math.random() * 4, color, {\r\n                    x: -0.15 + Math.random() * 0.3,\r\n                    y: 1 + Math.random() * 10\r\n                }, range);\r\n\r\n                circles.push(c);\r\n            }, delay);\r\n         }\r\n\r\n         class Circle {\r\n            constructor(x, y, color, velocity, range) {\r\n                let _this = this;\r\n                this.x = x;\r\n                this.y = y;\r\n                this.color = color;\r\n                this.velocity = velocity;\r\n                this.range = range;\r\n                this.element = document.createElement('span');\r\n                /*this.element.style.display = 'block';*/\r\n                this.element.style.opacity = 0;\r\n                this.element.style.position = 'absolute';\r\n                this.element.style.fontSize = '26px';\r\n                this.element.style.color = 'hsl(' + (Math.random() * 360 | 0) + ',80%,50%)';\r\n                this.element.innerHTML = color;\r\n                const container = document.getElementById('animate');\r\n                if (container) {\r\n                    container.appendChild(this.element);\r\n                }\r\n\r\n                this.update = function () {\r\n                    if (_this.y > 800) {\r\n                        _this.y = 80 + Math.random() * 4;\r\n                        _this.x = _this.range[0] + Math.random() * _this.range[1];\r\n                    }\r\n                    _this.y += _this.velocity.y;\r\n                    _this.x += _this.velocity.x;\r\n                    this.element.style.opacity = 1;\r\n                    this.element.style.transform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                    this.element.style.webkitTransform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                    this.element.style.mozTransform = 'translate3d(' + _this.x + 'px, ' + _this.y + 'px, 0px)';\r\n                };\r\n            }\r\n        }\r\n\r\n         function animate() {\r\n            for (let i in circles) {\r\n                circles[i].update();\r\n            }\r\n\r\n            return requestAnimationFrame(animate);\r\n         }\r\n\r\n        function executeEmojiRain(emoji) {\r\n            setShowEmojiRain(true);\r\n            for (let i = 0; i < 10; i++) {\r\n                addCircle(i * 350, [10 + 0, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 0, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 - 200, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 200, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 - 400, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 400, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 - 600, -300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 600, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 600, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n                addCircle(i * 350, [10 + 600, 300], emoji[Math.floor(Math.random() * emoji.length)]);\r\n            }\r\n\r\n            animate();\r\n        }\r\n\r\n        if (streamerUid && !listenersAreSetted) {\r\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\r\n                setListenersAreSetted(true);\r\n                if (isStreaming.exists() && isStreaming.val()) {\r\n                    setTimeout(() => {\r\n                        loadDonations();\r\n                    }, 150);\r\n                } else {\r\n                    removeListenerForUnreadStreamerCheers(streamerUid);\r\n                    setDonationQueue([]);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (donationQueue.length > 0 && !isPlayingAudio && reactionsEnabled) {\r\n            setIsPlayingAudio(true);\r\n            const donation = popDonation();\r\n\r\n            async function showCheer() {\r\n                const qoinsDonation = donation.amountQoins && donation.amountQoins >= 100;\r\n                const bigQoinsDonation = Boolean(qoinsDonation && donation.amountQoins >= 1000).valueOf();\r\n                audioAlert = new Audio(qoinsDonation ? qoinsReactionAudio : channelPointReactionAudio);\r\n                if (!donation.repeating) {\r\n                    const voiceToUse = donation.messageExtraData && donation.messageExtraData.voiceAPIName ? donation.messageExtraData.voiceAPIName : 'en-US-Standard-C';\r\n\r\n                    if (donation.message) {\r\n                        if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\r\n                            voiceBotMessage = new Audio(TEST_MESSAGE_SPEECH_URL);\r\n                        } else {\r\n                            const messageToRead = bigQoinsDonation ? `${donation.twitchUserName} has sent you ${donation.amountQoins} coins and says: ${donation.message}` : `${donation.twitchUserName} say: ${donation.message}`;\r\n\r\n                            window.analytics.track('Cheer received', {\r\n                                user: donation.twitchUserName,\r\n                                containsMessage: true,\r\n                                message: messageToRead\r\n                            });\r\n                            const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, voiceToUse, 'en-US');\r\n                            voiceBotMessage = new Audio(cheerMessageUrl.data);\r\n                        }\r\n                    } else if (bigQoinsDonation) {\r\n                        const messageToRead = `${donation.twitchUserName} has sent you ${donation.amountQoins} Coins`;\r\n\r\n                        window.analytics.track('Cheer received', {\r\n                            user: donation.twitchUserName,\r\n                            containsMessage: false\r\n                        });\r\n                        const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, voiceToUse, 'en-US');\r\n                        voiceBotMessage = new Audio(cheerMessageUrl.data);\r\n                    }\r\n                } else {\r\n                    try {\r\n                        const cheerMessageUrl = await getCheerVoiceMessage(streamerUid, donation.id);\r\n\r\n                        if (cheerMessageUrl) {\r\n                            voiceBotMessage = new Audio(cheerMessageUrl);\r\n                        }\r\n                    } catch (error) {\r\n                        console.log('Message not found, what must be do here?');\r\n                    }\r\n                }\r\n\r\n                donation.isRightSide = alertSideRight;\r\n\r\n                setDonationToShow(donation);\r\n\r\n                if (donation.emojiRain && donation.emojiRain.emojis) {\r\n                    executeEmojiRain(donation.emojiRain.emojis);\r\n                }\r\n\r\n                if (!donation.message && !bigQoinsDonation) {\r\n                    audioAlert.onended = () => {\r\n                        setTimeout(() => {\r\n                            finishReaction(donation);\r\n                        }, 4000);\r\n                    }\r\n                } else {\r\n                    voiceBotMessage.onended = () => {\r\n                        setTimeout(() => {\r\n                            finishReaction(donation);\r\n                        }, 4000);\r\n                    }\r\n                }\r\n            }\r\n\r\n            showCheer();\r\n        }\r\n\r\n        if (!streamerUid) {\r\n            getStreamerUid();\r\n        }\r\n\r\n        if (streamerUid) {\r\n            async function listenToOverlayStatus() {\r\n                try {\r\n                    await markOverlayAsActive(streamerUid);\r\n                    onLiveDonationsDisconnect(streamerUid);\r\n                } catch (error) {\r\n                    console.log('Error mounting overlay listeners');\r\n                }\r\n            }\r\n\r\n            listenToOverlayStatus();\r\n        }\r\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled]);\r\n\r\n    function finishReaction(donation) {\r\n        setDonationToShow(null);\r\n        setShowEmojiRain(false);\r\n        if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\r\n            removeTestDonation(streamerUid, donation.id);\r\n        } else {\r\n            markDonationAsRead(streamerUid, donation.id);\r\n        }\r\n        setTimeout(() => {\r\n            setIsPlayingAudio(false);\r\n        }, 2000);\r\n    }\r\n\r\n    const queueAnimation = () => {\r\n        if (qaplaOnOpacity !== 1) {\r\n            setTimeout(() => {\r\n                setPlayQaplaOnAnimation(\"true\");\r\n            }, 10 * 1000)\r\n        } else {\r\n            setTimeout(() => {\r\n                setPlayQaplaOnAnimation(\"true\");\r\n            }, 60 * 1000)\r\n        }\r\n    }\r\n\r\n    const startDonation = () => {\r\n        const qoinsDonation = donationToShow.amountQoins && donationToShow.amountQoins >= 100;\r\n        const bigQoinsDonation = Boolean(qoinsDonation && donationToShow.amountQoins >= 1000).valueOf();\r\n        if (bigQoinsDonation) {\r\n            voiceBotMessage.play();\r\n        } else if ((!donationToShow.media || donationToShow.media.type !== GIPHY_CLIP)) {\r\n            audioAlert.play();\r\n            if (donationToShow.message) {\r\n                audioAlert.onended = () => {\r\n                    setTimeout(() => {\r\n                        voiceBotMessage.play();\r\n                    }, 750);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    document.body.style.backgroundColor = 'transparent';\r\n    return (\r\n        <div style={{ display: 'flex', backgroundColor: 'transparent', maxHeight: '100vh', width: '100%', placeItems: 'flex-end' }}>\r\n            {reactionsEnabled &&\r\n                <div\r\n                    onAnimationEnd={() => {\r\n                        setPlayQaplaOnAnimation(\"false\");\r\n                        if (qaplaOnOpacity === 1)\r\n                            setQaplaOnOpacity(0)\r\n                        if (qaplaOnOpacity === 0)\r\n                            setQaplaOnOpacity(1)\r\n                        queueAnimation();\r\n                    }}\r\n                    style={{\r\n                        position: 'fixed',\r\n                        bottom: '-15px',\r\n                        left: alertSideRight ? 'auto' : '-12px',\r\n                        right: alertSideRight ? '-12px' : 'auto',\r\n                        width: '150px',\r\n                    }}\r\n                    className=\"qapla-logo-container\"\r\n                    playAnimation={playQaplaOnAnimation}\r\n                >\r\n                    <style>{`\r\n                    @keyframes dissapear {\r\n                        from {\r\n                            opacity: ${qaplaOnOpacity === 1 ? 1 : 0};\r\n                        }\r\n                        to {\r\n                            opacity: ${qaplaOnOpacity === 1 ? 0 : 1};\r\n                        }\r\n                    }\r\n                    .qapla-logo-container{\r\n                        opacity: ${qaplaOnOpacity};\r\n                    }\r\n                    .qapla-logo-container[playAnimation=\"true\"] {\r\n                        animation-name: dissapear;\r\n                        animation-duration: 5s;\r\n                        animation-iteration-count: 1;\r\n                        animation-timing-function: ease-in-out;\r\n                    }\r\n                    `}</style>\r\n                    <img src={alertSideRight ? QaplaOnRight : QaplaOnLeft} alt=\"qapla logo\" />\r\n                </div>\r\n            }\r\n            {showEmojiRain &&\r\n                <div id=\"animate\" style={{\r\n                    position: 'fixed',\r\n                    top: 100,\r\n                    bottom: 0,\r\n                    left: '800px',\r\n                    right: 0,\r\n                    transform: 'scale(1.5)',\r\n                }}></div>\r\n            }\r\n            {donationToShow &&\r\n                <>\r\n                    <DonationHandler donationToShow={donationToShow} finishReaction={finishReaction} startDonation={startDonation} />\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst DonationHandler = ({ donationToShow, finishReaction, startDonation }) => {\r\n    const [clip, setClip] = useState(null);\r\n    const [mediaReady, setMediaReady] = useState(false);\r\n    const [giphyTextReady, setGiphyTextReady] = useState(false);\r\n    const [showDonation, setShowDonation] = useState(false);\r\n    const donation = donationToShow;\r\n\r\n    useEffect(() => {\r\n        const getClip = async () => {\r\n            const { data } = await gf.gif(donation.media.id);\r\n            setClip(data);\r\n            setShowDonation(true);\r\n        }\r\n\r\n        if ((donation.media && donation.media.type === GIPHY_CLIP && donation.media.id) && !clip) {\r\n            getClip();\r\n        } else {\r\n            if (donation.media && donation.messageExtraData && donation.messageExtraData.giphyText && mediaReady && giphyTextReady) {\r\n                displayDonation();\r\n            }\r\n\r\n            if (!(donation.messageExtraData && donation.messageExtraData.giphyText) && donation.media && mediaReady) {\r\n                displayDonation();\r\n            }\r\n\r\n            if ((!donation.media) && donation.messageExtraData && donation.messageExtraData.giphyText && giphyTextReady) {\r\n                displayDonation();\r\n            }\r\n\r\n            if (donation.message && !donation.media && !(donation.messageExtraData && donation.messageExtraData.giphyText)) {\r\n                displayDonation();\r\n            }\r\n        }\r\n    }, [clip, mediaReady, giphyTextReady]);\r\n\r\n    const displayDonation = () => {\r\n        setShowDonation(true);\r\n        startDonation();\r\n    }\r\n\r\n    const onClipEnded = () => {\r\n        const qoinsDonation = donation.amountQoins && donation.amountQoins >= 100;\r\n        const bigQoinsDonation = Boolean(qoinsDonation && donation.amountQoins >= 1000).valueOf();\r\n\r\n        if (bigQoinsDonation) {\r\n            setTimeout(() => {\r\n                startDonation(donation);\r\n            }, 100);\r\n        } else {\r\n            finishReaction(donation);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            opacity: showDonation ? 1 : 0,\r\n            display: 'flex',\r\n            flex: 1,\r\n            flexDirection: 'column',\r\n            backgroundColor: '#f0f0',\r\n            padding: '0px 40px',\r\n            marginBottom: '30px',\r\n            marginLeft: donation.isRightSide ? '0px' : '20px',\r\n            marginRight: donation.isRightSide ? '20px' : '0px'\r\n        }}>\r\n            {donation.media &&\r\n                <>\r\n                {donation.media && (donation.media.type === MEME || donation.media.type === GIPHY_GIF || donation.media.type === GIPHY_STICKER || donation.media.type === MEMES || donation.media.type === GIPHY_GIFS || donation.media.type === GIPHY_STICKERS) ?\r\n                    <img src={donation.media.url} alt='' style={{\r\n                        aspectRatio: donation.media.width / donation.media.height,\r\n                        display: 'flex',\r\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                        maxHeight: '250px',\r\n                        objectFit: 'scale-down'\r\n                    }}\r\n                    onLoad={() => setMediaReady(true)} />\r\n                    :\r\n                    donation.media && donation.media.type === GIPHY_CLIP && clip ?\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            aspectRatio: donation.media.width / donation.media.height,\r\n                            alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                            maxHeight: '250px',\r\n                            objectFit: 'scale-down'\r\n                        }}>\r\n                            <Video hideAttribution gif={clip} height={250} muted={false} loop={false} onEnded={onClipEnded} />\r\n                        </div>\r\n                    :\r\n                    null\r\n                }\r\n                </>\r\n            }\r\n            {donation.messageExtraData && donation.messageExtraData.giphyText &&\r\n                <img src={donation.messageExtraData.giphyText.url} alt='' style={{\r\n                    aspectRatio: donation.messageExtraData.giphyText.width / donation.messageExtraData.giphyText.height,\r\n                    display: 'flex',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                    maxHeight: '250px',\r\n                    objectFit: 'scale-down'\r\n                }}\r\n                onLoad={() => setGiphyTextReady(true)} />\r\n            }\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-around',\r\n                    marginTop: '20px',\r\n                    width: 'fit-content',\r\n                    backgroundColor: '#4D00FB',\r\n                    marginLeft: donation.isRightSide ? '0px' : '-30px',\r\n                    marginRight: donation.isRightSide ? '-30px' : '0px',\r\n                    borderRadius: '30px',\r\n                    padding: '24px 24px',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                    zIndex: 10\r\n                }}\r\n            >\r\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\r\n                    <p style={{\r\n                        display: 'flex',\r\n                        color: 'white',\r\n                        fontSize: '26px',\r\n                        textAlign: 'center'\r\n                    }}>\r\n                        <b style={{ color: '#0AFFD2' }}>{`${donation.twitchUserName} `}</b>\r\n                        {donation.amountQoins ?\r\n                            <>\r\n                            <div style={{ margin: '0 6px' }}>has sent you</div>\r\n                            <b style={{ color: '#0AFFD2', fontWeight: '700', }}>\r\n                                {`${donation.amountQoins.toLocaleString()} Qoins`}\r\n                            </b>\r\n                            </>\r\n                            :\r\n                            <b style={{ color: '#FFF', fontWeight: '700', margin: '0 6px' }}>\r\n                                reacted\r\n                            </b>\r\n                        }\r\n                    </p>\r\n                </div>\r\n                {donation.amountQoins ?\r\n                    <>\r\n                    <div style={{ width: '10px' }}></div>\r\n                    <div style={{ display: 'flex', alignSelf: 'center' }}>\r\n                        <DonatedQoin style={{ display: 'flex', width: '38px', height: '38px' }} />\r\n                    </div>\r\n                    </>\r\n                    :\r\n                    null\r\n                }\r\n            </div>\r\n            {(donation.message && !(donation.messageExtraData && donation.messageExtraData.giphyText)) &&\r\n                <div style={{\r\n                    display: 'flex',\r\n                    width: 'fit-content',\r\n                    backgroundColor: '#FFFFFF',\r\n                    marginTop: '-20px',\r\n                    borderRadius: '30px',\r\n                    borderTopLeftRadius: donation.isRightSide ? '30px' : '0px',\r\n                    borderTopRightRadius: donation.isRightSide ? '0px' : '30px',\r\n                    padding: '30px',\r\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\r\n                }}>\r\n                    <p style={{\r\n                        display: 'flex',\r\n                        color: '#0D1021',\r\n                        fontSize: '24px',\r\n                        fontWeight: '600',\r\n                        lineHeight: '36px',\r\n                        letterSpacing: '0.6px'\r\n                    }}>{donation.message}</p>\r\n                </div>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default LiveDonations;",["203","204"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx",["205","206"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\interactionsQapla.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx",["207","208","209","210","211"],"import React from 'react';\r\nimport {\r\n    Grid,\r\n    AppBar,\r\n    Toolbar,\r\n    Link,\r\n    Button\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport styles from './StreamerDashboardContainer.module.css';\r\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\r\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridContainer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexWrap: 'nowrap'\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(4) + 1,\r\n        paddingTop: theme.spacing(4) + 1,\r\n    }\r\n}));\r\n\r\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\r\n            {!user && user === undefined ?\r\n                <>\r\n                    {children}\r\n                </>\r\n                :\r\n                <>\r\n                    {history.location.pathname !== '/welcome' &&\r\n                        <StreamerSideBar user={user} />\r\n                    }\r\n                    <div className={`${classes.content} ${containerStyle}`}>\r\n                        {children}\r\n                    </div>\r\n                </>\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default StreamerDashboardContainer;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx",["212"],"import React from 'react';\r\nimport { withStyles, Tabs } from '@material-ui/core';\r\n\r\nconst QaplaTabs = withStyles((theme) => ({\r\n    root: {\r\n        borderBottom: 'transparent',\r\n        [theme.breakpoints.down('md')]: {\r\n            paddingLeft: 45\r\n        }\r\n    },\r\n    indicator: {\r\n        backgroundColor: '#0AFFD2',\r\n    }\r\n}))(Tabs);\r\n\r\nexport default (props) => <QaplaTabs {...props} />;",["213","214"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx",["215","216"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx",["217","218"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\r\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    languageLabel: {\r\n        color: '#FFF',\r\n        fontSize: 16,\r\n        fontWeight: 600\r\n    }\r\n}));\r\n\r\nconst LanguageSelect = () => {\r\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\r\n    const [langData, setLangData] = useState([])\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        let tempLangArr = []\r\n        getAvailableLanguages().map((languageCode) => (\r\n            tempLangArr.push({\r\n                value: languageCode,\r\n                label: t(`LanguageHandler.languages.${languageCode}`)\r\n            })\r\n        ))\r\n        setLangData(tempLangArr)\r\n    }, [t])\r\n\r\n    const onLanguageChanged = (languageCode) => {\r\n        changeLanguage(languageCode);\r\n        setCurrentLanguageCode(languageCode);\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex'\r\n        }}>\r\n            <TranslateIcon style={{\r\n                display: 'flex'\r\n            }} />\r\n            {/* The style of this select needs to be implemented inline */}\r\n            <div style={{\r\n                marginTop: '-10px',\r\n            }}>\r\n                <StreamerSelect\r\n                    style={{ backgroundColor: '#141833' }}\r\n                    data={langData}\r\n                    value={currentLanguageCode}\r\n                    onChange={onLanguageChanged}\r\n                    overflowY='hidden'\r\n                    overflowX='hidden'\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageSelect;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx",["219","220","221","222"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx",["223"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nimport iconEdit from \"../../assets/Edit.svg\";\r\nimport { getCustomReward, updateCustomReward } from \"../../services/twitch\";\r\nimport { getInteractionsRewardData, setAlertSetting, updateStreamerProfile } from \"../../services/database\";\r\nimport { refreshUserAccessToken } from \"../../services/functions\";\r\nimport { auth } from \"../../services/firebase\";\r\nimport { ReactComponent as ConfirmChange } from './../../assets/ConfirmChange.svg';\r\nimport StreamerProfileModalDisableInteractions from \"../StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions\";\r\nimport StreamerProfileImgCoin from '../StreamerProfileImgCoin/StreamerProfileImgCoin';\r\nimport style from \"./StreamerProfileEditCoin.module.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    circularProgress: {\r\n        color: '#0AFFD2',\r\n        alignSelf: 'center'\r\n    }\r\n}));\r\n\r\nconst StreamerProfileEditCoin = ({ user }) => {\r\n    const [ActiveEditTitle, setActiveEditTitle] = useState(false);\r\n    const [ActiveEditCoins, setActiveEditCoins] = useState(false);\r\n    const [rewardId, setRewardId] = useState('');\r\n    const [rewardName, setRewardName] = useState('');\r\n    const [rewardCost, setRewardCost] = useState('');\r\n    const [savingChanges, setSavingChanges] = useState(false);\r\n    const [rewardBackgroundColor, setRewardBackgroundColor] = useState('');\r\n    const [modal, setModal] = useState(false);\r\n    const [titleCheckbox, setTitleCheckbox] = useState('');\r\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        async function getRewardData() {\r\n            try {\r\n                const rewardData = await getInteractionsRewardData(user.uid);\r\n                if (rewardData.exists()) {\r\n                    const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\r\n                    if (userTokensUpdated.data.status === 200) {\r\n                        const userCredentialsUpdated = userTokensUpdated.data;\r\n                        updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\r\n                        const reward = await getCustomReward(rewardData.val().rewardId, user.id, userCredentialsUpdated.access_token);\r\n                        if (reward && reward.id) {\r\n                            setRewardName(reward.title);\r\n                            setRewardCost(reward.cost);\r\n                            setRewardBackgroundColor(reward.background_color);\r\n                            setReactionsEnabled(!reward.is_paused);\r\n                            setTitleCheckbox(t(!reward.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'));\r\n                            setRewardId(reward.id);\r\n                        } else if (reward === 404) {\r\n                            history.push('/onboarding');\r\n                        }\r\n                    }\r\n                } else {\r\n                    // history.push('/onboarding');\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        if (user.uid) {\r\n            getRewardData();\r\n        }\r\n    }, [user.uid, user.id, user.refreshToken]);\r\n\r\n    const saveData = async (event) => {\r\n        if (event.key === 'Enter' || event.type === 'click') {\r\n            setSavingChanges(true);\r\n            const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\r\n\r\n            if (userTokensUpdated.data.status === 200) {\r\n                const userCredentialsUpdated = userTokensUpdated.data;\r\n                updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\r\n                const rewardUpdated = await updateCustomReward(\r\n                    user.id,\r\n                    userCredentialsUpdated.access_token,\r\n                    rewardId,\r\n                    {\r\n                        title: rewardName,\r\n                        cost: rewardCost\r\n                    }\r\n                );\r\n\r\n                if (rewardUpdated.status === 200) {\r\n                    setRewardName(rewardUpdated.title);\r\n                    setRewardCost(rewardUpdated.cost);\r\n                    setRewardBackgroundColor(rewardUpdated.background_color);\r\n                    setActiveEditCoins(false);\r\n                    setActiveEditTitle(false);\r\n                } else {\r\n                    switch (rewardUpdated.status) {\r\n                        case 404:\r\n                            // Not found (maybe the reward was removed from Twitch)\r\n                            break;\r\n                        case 500:\r\n                            // Twitch internal server error (could not update because of Twitch)\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                setSavingChanges(false);\r\n            } else {\r\n                switch (userTokensUpdated.data.status) {\r\n                    case 401:\r\n                        // Invalid refresh token (need to sign in again)\r\n                        handleExpiredSession();\r\n                        break;\r\n                    case 500:\r\n                        // Twitch internal server error\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const handleCheckbox = (e) => {\r\n        if (!e.target.checked) {\r\n            const dontShowDialog = localStorage.getItem('dontShowCloseDisableReactionsDialog');\r\n            if (!dontShowDialog) {\r\n                setModal(true);\r\n            } else {\r\n                toggleReward();\r\n            }\r\n        } else {\r\n            setTitleCheckbox(t('StreamerProfile.StreamerProfileEditCoin.enabled'));\r\n            toggleReward();\r\n        }\r\n    }\r\n\r\n    const toggleReward = async () => {\r\n        setSavingChanges(true);\r\n        const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\r\n\r\n        if (userTokensUpdated.data.status === 200) {\r\n            const userCredentialsUpdated = userTokensUpdated.data;\r\n            updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\r\n            const rewardUpdated = await updateCustomReward(\r\n                user.id,\r\n                userCredentialsUpdated.access_token,\r\n                rewardId,\r\n                {\r\n                    is_paused: reactionsEnabled\r\n                }\r\n            );\r\n\r\n            if (rewardUpdated.status === 200) {\r\n                setAlertSetting(user.uid, 'reactionsEnabled', !rewardUpdated.is_paused);\r\n                setReactionsEnabled(!rewardUpdated.is_paused);\r\n                setTitleCheckbox(t(!rewardUpdated.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'))\r\n            } else {\r\n                switch (rewardUpdated.status) {\r\n                    case 404:\r\n                        // Not found (maybe the reward was removed from Twitch)\r\n                        break;\r\n                    case 500:\r\n                        // Twitch internal server error (could not update because of Twitch)\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            setSavingChanges(false);\r\n        } else {\r\n            switch (userTokensUpdated.data.status) {\r\n                case 401:\r\n                    // Invalid refresh token (need to sign in again)\r\n                    handleExpiredSession();\r\n                    break;\r\n                case 500:\r\n                    // Twitch internal server error\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.containerItereractions}>\r\n            <h1 className={style.Titulo}>\r\n                {t('StreamerProfile.StreamerProfileEditCoin.reactions')}\r\n            </h1>\r\n            {rewardId !== '' && !savingChanges ?\r\n                <>\r\n                <StreamerProfileImgCoin rewardCost={rewardCost} backgroundColor={rewardBackgroundColor} />\r\n                <div className={style.content_input}>\r\n                    <div className={style.input}>\r\n                        {ActiveEditTitle ?\r\n                            <>\r\n                            <input\r\n                                className={style.Visibility_input}\r\n                                type=\"text\"\r\n                                maxLength={18}\r\n                                autoFocus\r\n                                value={rewardName}\r\n                                onChange={(event) => setRewardName(event.target.value)}\r\n                                onKeyPress={saveData} />\r\n                            <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                <ConfirmChange />\r\n                            </Button>\r\n                            </>\r\n                            :\r\n                            <>\r\n                            <p className={style.p}>\r\n                                {rewardName}\r\n                            </p>\r\n                            <Button onClick={() => setActiveEditTitle(!ActiveEditTitle)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                <img src={iconEdit} alt=\"icons-edit\" />\r\n                            </Button>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                    <div className={style.input}>\r\n                        {ActiveEditCoins ?\r\n                            <>\r\n                            <input\r\n                                className={style.Visibility_input}\r\n                                type=\"number\"\r\n                                autoFocus\r\n                                value={rewardCost}\r\n                                onChange={(event) => setRewardCost(event.target.value || 0)}\r\n                                onKeyPress={saveData} />\r\n                                <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                    <ConfirmChange />\r\n                                </Button>\r\n                            </>\r\n                            :\r\n                            <>\r\n                            <p className={style.p}>\r\n                                {rewardCost.toLocaleString()}\r\n                            </p>\r\n                            <Button onClick={() => setActiveEditCoins(!ActiveEditCoins)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                <img src={iconEdit} alt=\"icons-edit\" />\r\n                            </Button>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                    <div className={style.disableInteractions}>\r\n                        <p className={style.p}>{t('StreamerProfile.StreamerProfileEditCoin.reactions')} {titleCheckbox}</p>\r\n                        <input\r\n                            className={style.input_checkbox}\r\n                            type=\"checkbox\"\r\n                            id=\"boton\"\r\n                            checked={reactionsEnabled}\r\n                            onChange={(e) => handleCheckbox(e)}\r\n                        />\r\n                        <label for=\"boton\"></label>\r\n                    </div>\r\n                </div>\r\n                </>\r\n            :\r\n                <div style={{ display: 'flex', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n                    <CircularProgress className={classes.circularProgress} size={25} />\r\n                </div>\r\n            }\r\n            <Modal className={style.modalContainer}\r\n                open={modal}\r\n                onClose={() => setModal(false)}>\r\n                <StreamerProfileModalDisableInteractions closeDialog={() => setModal(false)}\r\n                    disableReward={toggleReward}\r\n                    setReactionsEnabled={setReactionsEnabled}\r\n                    setTitleCheckbox={setTitleCheckbox} />\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StreamerProfileEditCoin;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStreamSuccessDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx",["224","225","226","227"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx",["228"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport dayjs from 'dayjs';\r\n\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\r\nimport { notifyActivationWithReferralCode } from '../../services/discord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerStyle: {\r\n        padding: 0\r\n    },\r\n    background: {\r\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\r\n        display: 'flex',\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        minHeight: '100vh',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        backgroundColor: '#141833',\r\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\r\n        borderRadius: '35px',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingTop: 24,\r\n        paddingBottom: 0\r\n    },\r\n    title: {\r\n        fontWeight: '600',\r\n        fontSize: '18px',\r\n        lineHeight: '32px',\r\n        textAlign: 'center',\r\n        color: '#FFFFFF',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    instructions: {\r\n        marginTop: 15,\r\n        fontWeight: '400',\r\n        fontSize: '14px',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        color: '#8F9BBA',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    textInput: {\r\n        textAlign: 'center',\r\n        paddingTop: 12,\r\n        paddingBottom: 12\r\n    },\r\n    activeFreeTrialButton: {\r\n        marginTop: 32,\r\n        backgroundColor: '#3B4BF9',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        },\r\n        marginBottom: 60\r\n    },\r\n    noCode: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        marginTop: 32,\r\n        fontWeight: '600',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    referralProgram: {\r\n        textAlign: 'center',\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        marginTop: 32,\r\n        fontWeight: '400',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    subscribeButton: {\r\n        marginTop: 40,\r\n        backgroundColor: '#00FFDD',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    subscribeButtonCointainer: {\r\n        marginBottom: 24,\r\n        marginTop: 180\r\n    }\r\n}));\r\n\r\nconst RequestActivation = ({ user, onSuccessActivation }) => {\r\n    const [referralCode, setReferralCode] = useState('');\r\n    const [validatingCode, setValidatingCode] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const validateCode = async () => {\r\n        if (user.broadcasterType === '') {\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        setValidatingCode(true);\r\n        if (referralCode) {\r\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\r\n            if (referrerUid) {\r\n                if (referrerUid !== user.uid) {\r\n                    if (!user.referredBy) {\r\n                        activateFreeTrialWithReferralCode(referrerUid, {\r\n                            redemptionsPerStream: 40,\r\n                            streamsIncluded: 2\r\n                        });\r\n                    } else {\r\n                        setValidatingCode(false);\r\n                        alert('Ya usaste un código de referido antes');\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('No puedes usar tu propio código');\r\n                }\r\n            } else {\r\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\r\n                if (invitationCodeSnap.exists()) {\r\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\r\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('Código invalido');\r\n                }\r\n            }\r\n        } else {\r\n            setValidatingCode(false);\r\n        }\r\n    }\r\n\r\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n        await updateStreamerProfile(user.uid, {\r\n            referredBy: referrerUid,\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\r\n\r\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\r\n\r\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\r\n\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n         await updateStreamerProfile(user.uid, {\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await removeInvitationCode(code);\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\r\n            <div className={classes.background}>\r\n                <div>\r\n                <Card className={classes.card}>\r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\r\n                    </div>\r\n                    <CardContent>\r\n                        <p className={classes.title}>\r\n                            {t('RequestActivation.title')} 🚀\r\n                        </p>\r\n                        <p className={classes.instructions}>\r\n                            {validatingCode || !user.referredBy ?\r\n                                <>\r\n                                    {t('RequestActivation.descriptionP1')}\r\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\r\n                                    {t('RequestActivation.descriptionP2')}\r\n                                </>\r\n                                :\r\n                                t('RequestActivation.buyAMembership')\r\n                            }\r\n                        </p>\r\n                        {validatingCode || !user.referredBy ?\r\n                            <>\r\n                                <StreamerTextInput\r\n                                    placeholder={t('RequestActivation.referralCode')}\r\n                                    fullWidth\r\n                                    containerStyle={{ marginTop: 24 }}\r\n                                    classes={{ input: classes.textInput }}\r\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\r\n                                    value={referralCode}\r\n                                    onChange={(e) => setReferralCode(e.target.value)} />\r\n                                {validatingCode ?\r\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\r\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\r\n                                    </div>\r\n                                    :\r\n                                    <Button\r\n                                        onClick={validateCode}\r\n                                        fullWidth\r\n                                        classes={{\r\n                                            root: classes.activeFreeTrialButton\r\n                                        }}>\r\n                                        {t('RequestActivation.startFreeTrial')}\r\n                                    </Button>\r\n                                }\r\n                            </>\r\n                            :\r\n                            <div className={classes.subscribeButtonCointainer}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    onClick={() => history.push('/membership')}\r\n                                    classes={{ root: classes.subscribeButton }}>\r\n                                    {t('RequestActivation.subscribe')}\r\n                                </Button>\r\n                            </div>\r\n                        }\r\n                    </CardContent>\r\n                </Card>\r\n                {validatingCode || !user.referredBy ?\r\n                    <>\r\n                        <p className={classes.noCode}>\r\n                            {t('RequestActivation.dontHaveACode')}\r\n                        </p>\r\n                        <Button\r\n                            fullWidth\r\n                            onClick={() => history.push('/membership')}\r\n                            classes={{ root: classes.subscribeButton }}>\r\n                            {t('RequestActivation.subscribe')}\r\n                        </Button>\r\n                    </>\r\n                    :\r\n                    <p className={classes.referralProgram}>\r\n                        {t('RequestActivation.referralProgramP1')}\r\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\r\n                        {t('RequestActivation.referralProgramP2')}\r\n                    </p>\r\n                }\r\n                </div>\r\n            </div>\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default RequestActivation;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx",["229","230","231","232","233","234","235","236","237"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",["238"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\r\nimport {\r\n    streamsPlaceholderImages,\r\n    SCHEDULED_EVENT_TYPE,\r\n    PAST_STREAMS_EVENT_TYPE,\r\n    PENDING_APPROVAL_EVENT_TYPE,\r\n    HOUR_IN_MILISECONDS\r\n} from '../../utilities/Constants';\r\nimport {\r\n    cancelStreamRequest,\r\n    getStreamTitle,\r\n    getPastStreamTitle,\r\n    checkActiveCustomReward,\r\n    listenToQoinsEnabled,\r\n    removeQoinsEnabledListener,\r\n    getStreamerDropsLeft\r\n} from '../../services/database';\r\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\r\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\r\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\r\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\r\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\r\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\r\nimport { auth } from '../../services/firebase';\r\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\r\nimport { sendCustomMessage } from '../../services/functions';\r\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    eventCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '1.5rem',\r\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\r\n        height: '100%',\r\n        minWidth: '250px',\r\n        minHeight: '360px',\r\n    },\r\n    relativeContainer: {\r\n        position: 'relative'\r\n    },\r\n    hourContainer: {\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        top: '1rem',\r\n        background: '#1B1D2159',\r\n        borderRadius: '.5rem'\r\n    },\r\n    hourText: {\r\n        color: '#FFF',\r\n        padding: '2px 8px',\r\n        fontSize: '11px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        letterSpacing: '-0.5px',\r\n        textAlign: 'center'\r\n\r\n    },\r\n    dateContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        bottom: '1rem',\r\n        padding: '2px 10px',\r\n        background: '#1B1D21',\r\n        height: '32px',\r\n        borderRadius: '10px'\r\n    },\r\n    dateText: {\r\n        color: '#FFF',\r\n        fontSize: '13px',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        marginLeft: '10px'\r\n    },\r\n    eventImage: {\r\n        objectFit: 'cover',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        borderRadius: '24px'\r\n    },\r\n    eventCardContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '24px 16px',\r\n        height: '100%'\r\n    },\r\n    eventCardTitle: {\r\n        color: '#FFFFFF',\r\n        fontSize: '16px',\r\n        lineHeight: '24px',\r\n        fontWeight: '500',\r\n        height: '48px',\r\n\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    circle: {\r\n        borderRadius: '100%',\r\n        height: '.55rem',\r\n        width: '.55rem',\r\n        marginRight: '.5rem'\r\n    },\r\n    participantsNumber: {\r\n        fontSize: '12px',\r\n        textAlign: 'right',\r\n        lineHeight: '16px'\r\n    },\r\n    streamButton: {\r\n        backgroundColor: '#6C5DD3 !important',\r\n        color: '#FFF'\r\n    },\r\n    buttonsContainer: {\r\n        marginTop: 'auto'\r\n    },\r\n    startButton: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#0D1021',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    endButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#FFF',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    manageButton: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none'\r\n    }\r\n}));\r\n\r\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\r\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\r\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [stream, setStream] = useState(null);\r\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\r\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\r\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\r\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\r\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\r\n    const [startingStream, setStartingStream] = useState(false);\r\n    const [closingStream, setClosingStream] = useState(false);\r\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\r\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\r\n    const [loadingDots, setLoadingDots] = useState('');\r\n    const [hideStream, setHideStream] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getParticipantsNumber() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                /* const participants = await getStreamParticipantsNumber(streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getStreamTitle(streamId);\r\n                if (title.exists()) {\r\n                    setTitle(title.val());\r\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getPastStreamTitle(user.uid, streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\r\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            }\r\n        }\r\n\r\n        async function checkStreamStatus() {\r\n            const streamStatus = await checkActiveCustomReward(streamId);\r\n            if (streamStatus.exists()) {\r\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\r\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                        if (qoinsEnabled.val()) {\r\n                            setStream({\r\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\r\n                                qoinsEnabled: qoinsEnabled.val()\r\n                            });\r\n\r\n                            removeQoinsEnabledListener(streamId);\r\n                        } else {\r\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                        }\r\n                    });\r\n                } else {\r\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                }\r\n\r\n                setShowRewardsOptions(true);\r\n                setHideStream(false);\r\n            } else {\r\n                setStream(null);\r\n            }\r\n        }\r\n\r\n\r\n        getParticipantsNumber();\r\n        checkStreamStatus();\r\n\r\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\r\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\r\n            const currentTimestamp = (new Date()).getTime();\r\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\r\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\r\n                    setHideStream(true);\r\n                } else {\r\n                    setShowRewardsOptions(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startingStream) {\r\n            setTimeout(() => {\r\n                if (loadingDots.length > 2) {\r\n                    setLoadingDots('');\r\n                } else {\r\n                    setLoadingDots(loadingDots + '.');\r\n                }\r\n            }, 500);\r\n        } else if (loadingDots !== '') {\r\n            setLoadingDots('');\r\n        }\r\n\r\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\r\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\r\n\r\n    const cancelStream = (e) => {\r\n        e.stopPropagation();\r\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\r\n            cancelStreamRequest(user.uid, streamId);\r\n            onRemoveStream(streamId);\r\n        }\r\n    }\r\n\r\n    const startStream = async (enableIn) => {\r\n        try {\r\n            setStartingStream(true);\r\n            const dropsLeft = await getStreamerDropsLeft(user.uid);\r\n            if (dropsLeft.exists()) {\r\n                // If the user has 50 or more drops just allow 50 drops as maximum value, otherwise set the number of remaining drops (for example: 40) as the maximum\r\n                const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, dropsLeft.val() < 50 ? dropsLeft.val() : 50, enableIn);\r\n\r\n                if (enableIn) {\r\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                        if (qoinsEnabled.val()) {\r\n                            setStream({\r\n                                ...stream,\r\n                                qoinsEnabled: qoinsEnabled.val()\r\n                            });\r\n\r\n                            removeQoinsEnabledListener(streamId);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                window.analytics.track('Stream started', {\r\n                    streamId,\r\n                    uid: user.uid,\r\n                    timestamp: (new Date()).getTime()\r\n                });\r\n                setStream(streamData);\r\n                if (!openStreamDialog) {\r\n                    setOpenStreamStartedDialog(true);\r\n                }\r\n                setStartingStream(false);\r\n\r\n                return streamData;\r\n            }\r\n        } catch (error) {\r\n            if (error && error.status === 401) {\r\n                handleExpiredSession();\r\n            } else {\r\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setClosingStream(true);\r\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId);\r\n\r\n            window.analytics.track('Stream finished', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setOpenRewardsRemovedDialog(true);\r\n\r\n            // Close the rest of Dialogs just in case\r\n            setOpenStreamStartedDialog(false);\r\n            setOpenQoinsWarningDialog(false);\r\n            setOpenStreamDialog(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (stream.qoinsEnabled) {\r\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\r\n            if (dontShowCloseStreamWarning) {\r\n                closeStream();\r\n            } else {\r\n                setOpenEndStreamDialog(true);\r\n            }\r\n        } else {\r\n            setOpenQoinsWarningDialog(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\r\n     * have streamObject as parameter with a default value of stream state\r\n     */\r\n    const enableQoinsReward = async (streamObject = stream) => {\r\n        try {\r\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\r\n\r\n            window.analytics.track('Qoins enabled', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream({ ...streamObject, qoinsEnabled: true });\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\r\n\r\n    const closeDialogsAndOpenManageRewardsDialog = () => {\r\n        setOpenStreamStartedDialog(false);\r\n        setOpenQoinsWarningDialog(false);\r\n        setOpenStreamDialog(true);\r\n    }\r\n\r\n    const closeAndRemoveStream = () => {\r\n        setOpenRewardsRemovedDialog(false);\r\n        onRemoveStream(streamId);\r\n    }\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message) {\r\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\r\n\r\n            window.analytics.track('Custom Message sent', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime(),\r\n                message\r\n            });\r\n            setOpenCustomMessageSentDialog(true);\r\n        }\r\n    }\r\n\r\n    const shareStreamLink = async () => {\r\n        const link = await generateStreamDynamicLink(streamId, {\r\n            title: title && title['en'] ? title['en'] : '',\r\n            description: `Evento de ${user.displayName}`,\r\n            image: image ? image : ''\r\n        });\r\n\r\n        // This does not work on Safari for some reason\r\n        if (link) {\r\n            navigator.clipboard.writeText(link);\r\n        }\r\n    }\r\n\r\n    if (game && !hideStream) {\r\n        return (\r\n            <Card className={classes.eventCard} style={style}>\r\n                <div className={classes.relativeContainer}>\r\n                    <div className={classes.hourContainer}>\r\n                        <p className={classes.hourText}>\r\n                            {hour}\r\n                        </p>\r\n                    </div>\r\n                    <div className={classes.dateContainer}>\r\n                        <CalendarIcon />\r\n                        <p className={classes.dateText}>\r\n                            {date}\r\n                        </p>\r\n                    </div>\r\n                    <img\r\n                        alt='Game'\r\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\r\n                        width='100%'\r\n                        height='180'\r\n                        className={classes.eventImage} />\r\n                </div>\r\n                <div className={classes.eventCardContent}>\r\n                    <p className={classes.eventCardTitle}>\r\n                        {title && title['en'] ? title['en'] : ''}\r\n                    </p>\r\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\r\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\r\n                            <div style={{\r\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\r\n                                width: '8px',\r\n                                height: '8px',\r\n                                borderRadius: '50%'\r\n                            }} />\r\n                            <div style={{ width: '6px' }} />\r\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\r\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                    <div className={classes.buttonsContainer}>\r\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\r\n                            (!startingStream ?\r\n                                (stream ?\r\n                                    (!closingStream && stream.qoinsEnabled ?\r\n                                        <Button size='medium' className={classes.endButton}\r\n                                            disabled={closingStream}\r\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\r\n                                            {t('StreamCard.end')}\r\n                                        </Button>\r\n                                        :\r\n                                        <p style={{ color: '#FFF', textAlign: 'center' }}>\r\n                                            {t('StreamCard.dropsScheduled')}\r\n                                        </p>\r\n                                    )\r\n                                    :\r\n                                    <Button size='medium' className={classes.startButton}\r\n                                        startIcon={<TimerIcon />}\r\n                                        onClick={() => setOpenStreamDialog(true)}>\r\n                                        {t('StreamCard.enableDrops')}\r\n                                    </Button>\r\n                                )\r\n                                :\r\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\r\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\r\n                                </p>\r\n                            )\r\n                        }\r\n                        <div style={{ height: '11px' }} />\r\n                        {streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={manageStream}>\r\n                                {t('StreamCard.manageStream')}\r\n                            </Button>\r\n                        }\r\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\r\n                                {t('StreamCard.cancelStreamRequest')}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <EventManagementDialog open={openStreamDialog}\r\n                    user={user}\r\n                    sendMessage={sendMessage}\r\n                    streamId={streamId}\r\n                    stream={stream}\r\n                    streamStarted={startingStream}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenStreamDialog(false)}\r\n                    startStream={startStream}\r\n                    enableQoins={enableQoinsReward}\r\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\r\n                    streamTitle={title && title['en'] ? title['en'] : ''}\r\n                    date={date}\r\n                    hour={hour} />\r\n                <EventConfirmStartDialog open={openStreamStartedDialog}\r\n                    onClose={() => setOpenStreamStartedDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\r\n                    onClose={() => setOpenQoinsWarningDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenEndStreamDialog(false)}\r\n                    closeStream={closeStream} />\r\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\r\n                    onClose={closeAndRemoveStream}  />\r\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\r\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamCard;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx",["239"],"import React from 'react';\r\nimport { withStyles, Tab } from '@material-ui/core';\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(4),\r\n        fontSize: 18,\r\n        '&:hover': {\r\n            color: '#FFF',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#FFF',\r\n            fontWeight: '500',\r\n        },\r\n        '&:focus': {\r\n            color: '#FFF',\r\n        },\r\n    },\r\n    selected: {},\r\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nexport default (props) => <QaplaTab {...props} />;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx",["240","241","242"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    makeStyles,\r\n    InputBase,\r\n    NativeSelect,\r\n    InputLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemText\r\n} from '@material-ui/core';\r\n\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\n\r\nconst useStyles = makeStyles({\r\n    label: {\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    input: {\r\n        display: 'flex',\r\n        position: 'absolute',\r\n        zIndex: 90,\r\n        overflow: 'hidden',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '16px',\r\n        color: '#FFF',\r\n        fontSize: '14px',\r\n    },\r\n    icon: {\r\n        color: 'transparent',\r\n        marginTop: 8,\r\n        marginRight: 8,\r\n        marginLeft: 8\r\n    }\r\n});\r\n\r\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false)\r\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            data.forEach(e => {\r\n                if (e.value === value) setSelectedLabel(e.label)\r\n            });\r\n        }\r\n        if (initialLabel && value === undefined) {\r\n            setSelectedLabel(initialLabel);\r\n        }\r\n    }, [data, initialLabel, value])\r\n\r\n    return (\r\n        <div className={classes.input} style={style}>\r\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\r\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\r\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\r\n                        style: {\r\n                            fontFamily: 'Inter'\r\n                        }\r\n                    }} />\r\n                    <div style={{ width: '10px' }} />\r\n                    <ArrowIcon style={{\r\n                        transform: open ? 'rotate(180deg)' : ''\r\n                    }} />\r\n                </ListItem>\r\n                <div style={{\r\n                    height: open ? maxHeightOpen || '' : '0px',\r\n                    overflowX: overflowX || 'scroll',\r\n                    overflowY: overflowY || 'scroll',\r\n                    marginTop: '-10px'\r\n                }}>\r\n                    <List style={{\r\n                        padding: '0px',\r\n                    }}>\r\n                        {data && data.map((dat) => {\r\n                            return (\r\n                                <>\r\n                                    {value !== dat.value &&\r\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\r\n                                            <ListItemText primary={dat.label} />\r\n                                        </ListItem>\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            </List>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default StreamerSelect;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx",["243","244","245"],"import React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\r\n\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\r\nimport ModalQoinsDrops from '../ModalQoinsDrops/ModalQoinsDrops';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dialogContainer: {\r\n        backdropFilter: 'blur(50px)',\r\n        [theme.breakpoints.down('md')]: {\r\n            backgroundColor: '#141833',\r\n        }\r\n    },\r\n    dialogRoot: {\r\n    },\r\n    paper: {\r\n        backgroundColor: '#141833',\r\n        color: '#FFF',\r\n        overflow: 'visible',\r\n        borderRadius: '35px',\r\n        padding: '64px',\r\n        minWidth: 'min-content',\r\n        [theme.breakpoints.down('md')]: {\r\n            minWidth: '100%',\r\n            minHeight: '100%',\r\n        }\r\n    },\r\n    itemsContainer: {\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            padding: '184px 66px 20px 66px',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexWrap: 'wrap',\r\n            gap: '50px 0px'\r\n        }\r\n    },\r\n    closeButtonContainer: {\r\n        position: 'absolute',\r\n        top: '24px',\r\n        right: '24px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '118px',\r\n            right: '128px',\r\n        }\r\n    },\r\n    closeButton: {\r\n        '&:hover': {\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    title: {\r\n        fontSize: '18px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '32px',\r\n        letterSpacing: '0px'\r\n    },\r\n    subtitle: {\r\n        color: '#FFFFFF9A',\r\n        fontSize: '12px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '18px',\r\n        letterSpacing: '0px',\r\n    },\r\n    startButtonRoot: {\r\n        backgroundColor: '#00FFDD',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    startText: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        color: '#FFFFFF'\r\n    },\r\n    enabledRewardText: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        color: '#00FFDD'\r\n    },\r\n    qoinsButtonRoot: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    qoinsButtonRootDisabled: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF !important',\r\n        textTransform: 'none',\r\n        opacity: '0.2'\r\n    },\r\n    textInputContainer: {\r\n        backgroundColor: '#202750',\r\n        borderRadius: '16px',\r\n        paddingRight: '4px',\r\n        overflow: 'hidden'\r\n    },\r\n    sendContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        [theme.breakpoints.up('md')]: {\r\n            minWidth: '400px',\r\n        },\r\n    },\r\n    sendButtonRoot: {\r\n        backgroundColor: '#6C5DD3',\r\n        width: '165px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        alignSelf: 'flex-end',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.9'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.8'\r\n        }\r\n    },\r\n    eventNameContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        position: 'absolute',\r\n        right: '30px',\r\n        bottom: '-40px',\r\n        gap: '0px 5px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '98px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            width: '60%',\r\n            // right: 'auto',\r\n            paddingTop: '30px',\r\n            backgroundColor: '#141833'\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            top: '148px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            right: 'auto',\r\n            paddingTop: '30px',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'column',\r\n        },\r\n\r\n        fontSize: '16px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '24px',\r\n        letterSpacing: '0px',\r\n    },\r\n    eventName: {\r\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\r\n        backgroundClip: 'text',\r\n        WebkitBackgroundClip: 'text',\r\n        WebkitTextFillColor: 'transparent'\r\n    },\r\n}));\r\n\r\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n    const [dots, setDots] = useState('')\r\n    const [enablingQoins, setEnablingQoins] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\r\n            setTimeout(() => {\r\n                if (dots.length > 2) {\r\n                    setDots('');\r\n                } else {\r\n                    setDots(dots + '.');\r\n                }\r\n            }, 500);\r\n        }\r\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\r\n            setDots('');\r\n        }\r\n    }, [streamStarted, dots, enablingQoins]);\r\n\r\n    const sendNotificationHandler = async () => {\r\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\r\n        await sendMessage(message);\r\n        setMessage('');\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open} classes={{\r\n            container: classes.dialogContainer,\r\n            root: classes.dialogRoot,\r\n            paper: classes.paper\r\n        }}\r\n            maxWidth='sm'\r\n            fullWidth>\r\n            <DialogContent style={{ padding: '0px' }}>\r\n                <div className={classes.closeButtonContainer}>\r\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\r\n                </div>\r\n                <div className={classes.itemsContainer}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\r\n                        <ModalQoinsDrops\r\n                            stream={stream}\r\n                            streamStarted={streamStarted}\r\n                            closingStream={closingStream}\r\n                            startStream={startStream}\r\n                            enableQoins={enableQoins} />\r\n                    </div>\r\n                    <div className={classes.sendContainer}>\r\n                        <p className={classes.title}>\r\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\r\n                        </p>\r\n                        <p className={classes.subtitle}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\r\n                        </p>\r\n                        <div style={{ height: '20px' }} />\r\n                        <StreamerTextInput\r\n                            value={message}\r\n                            onChange={(e) => setMessage(e.target.value)}\r\n                            textInputStyle={{ marginTop: '0px' }}\r\n                            textInputClassName={classes.textInputContainer}\r\n                            fullWidth\r\n                            multiline\r\n                            rows={6}\r\n                            maxRows={6}\r\n                            rowsMax={6}\r\n                        />\r\n                        <div style={{ height: '12px' }} />\r\n                        <Button\r\n                            onClick={sendNotificationHandler}\r\n                            classes={{\r\n                                root: classes.sendButtonRoot\r\n                            }}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <div className={classes.eventNameContainer}>\r\n                <p className={classes.eventName}>\r\n                    {`${streamTitle} `}\r\n                </p>\r\n                <p>\r\n                    {`/ ${date} / ${hour}`}\r\n                </p>\r\n            </div>\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default EventManagementDialog;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],{"ruleId":"246","replacedBy":"247"},{"ruleId":"248","replacedBy":"249"},{"ruleId":"246","replacedBy":"250"},{"ruleId":"248","replacedBy":"251"},{"ruleId":"252","severity":1,"message":"253","line":6,"column":8,"nodeType":"254","messageId":"255","endLine":6,"endColumn":14},{"ruleId":"256","severity":1,"message":"257","line":253,"column":8,"nodeType":"258","endLine":253,"endColumn":102,"suggestions":"259"},{"ruleId":"256","severity":1,"message":"260","line":394,"column":8,"nodeType":"258","endLine":394,"endColumn":42,"suggestions":"261"},{"ruleId":"246","replacedBy":"262"},{"ruleId":"248","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":520,"column":65,"nodeType":"266","endLine":520,"endColumn":80},{"ruleId":"264","severity":1,"message":"265","line":526,"column":29,"nodeType":"266","endLine":526,"endColumn":44},{"ruleId":"252","severity":1,"message":"267","line":4,"column":5,"nodeType":"254","messageId":"255","endLine":4,"endColumn":11},{"ruleId":"252","severity":1,"message":"268","line":5,"column":5,"nodeType":"254","messageId":"255","endLine":5,"endColumn":12},{"ruleId":"252","severity":1,"message":"269","line":6,"column":5,"nodeType":"254","messageId":"255","endLine":6,"endColumn":9},{"ruleId":"252","severity":1,"message":"270","line":7,"column":5,"nodeType":"254","messageId":"255","endLine":7,"endColumn":11},{"ruleId":"252","severity":1,"message":"271","line":14,"column":8,"nodeType":"254","messageId":"255","endLine":14,"endColumn":23},{"ruleId":"272","severity":1,"message":"273","line":16,"column":1,"nodeType":"274","endLine":16,"endColumn":52},{"ruleId":"246","replacedBy":"275"},{"ruleId":"248","replacedBy":"276"},{"ruleId":"252","severity":1,"message":"277","line":273,"column":21,"nodeType":"254","messageId":"255","endLine":273,"endColumn":31},{"ruleId":"256","severity":1,"message":"278","line":457,"column":8,"nodeType":"258","endLine":457,"endColumn":14,"suggestions":"279"},{"ruleId":"252","severity":1,"message":"280","line":7,"column":28,"nodeType":"254","messageId":"255","endLine":7,"endColumn":37},{"ruleId":"252","severity":1,"message":"281","line":21,"column":11,"nodeType":"254","messageId":"255","endLine":21,"endColumn":18},{"ruleId":"252","severity":1,"message":"282","line":33,"column":12,"nodeType":"254","messageId":"255","endLine":33,"endColumn":40},{"ruleId":"256","severity":1,"message":"283","line":102,"column":8,"nodeType":"258","endLine":102,"endColumn":38,"suggestions":"284"},{"ruleId":"252","severity":1,"message":"285","line":110,"column":11,"nodeType":"254","messageId":"255","endLine":110,"endColumn":39},{"ruleId":"264","severity":1,"message":"265","line":135,"column":117,"nodeType":"266","endLine":135,"endColumn":132},{"ruleId":"256","severity":1,"message":"286","line":71,"column":8,"nodeType":"258","endLine":71,"endColumn":46,"suggestions":"287"},{"ruleId":"252","severity":1,"message":"288","line":127,"column":27,"nodeType":"254","messageId":"255","endLine":127,"endColumn":43},{"ruleId":"252","severity":1,"message":"289","line":128,"column":24,"nodeType":"254","messageId":"255","endLine":128,"endColumn":37},{"ruleId":"252","severity":1,"message":"290","line":133,"column":28,"nodeType":"254","messageId":"255","endLine":133,"endColumn":45},{"ruleId":"291","severity":1,"message":"292","line":272,"column":103,"nodeType":"293","messageId":"294","endLine":272,"endColumn":105},{"ruleId":"252","severity":1,"message":"295","line":1,"column":17,"nodeType":"254","messageId":"255","endLine":1,"endColumn":26},{"ruleId":"252","severity":1,"message":"296","line":2,"column":67,"nodeType":"254","messageId":"255","endLine":2,"endColumn":74},{"ruleId":"252","severity":1,"message":"297","line":13,"column":28,"nodeType":"254","messageId":"255","endLine":13,"endColumn":36},{"ruleId":"252","severity":1,"message":"298","line":16,"column":28,"nodeType":"254","messageId":"255","endLine":16,"endColumn":33},{"ruleId":"252","severity":1,"message":"299","line":233,"column":12,"nodeType":"254","messageId":"255","endLine":233,"endColumn":29},{"ruleId":"252","severity":1,"message":"300","line":237,"column":12,"nodeType":"254","messageId":"255","endLine":237,"endColumn":23},{"ruleId":"252","severity":1,"message":"301","line":241,"column":12,"nodeType":"254","messageId":"255","endLine":241,"endColumn":21},{"ruleId":"252","severity":1,"message":"302","line":241,"column":23,"nodeType":"254","messageId":"255","endLine":241,"endColumn":35},{"ruleId":"256","severity":1,"message":"303","line":288,"column":8,"nodeType":"258","endLine":288,"endColumn":14,"suggestions":"304"},{"ruleId":"252","severity":1,"message":"305","line":387,"column":11,"nodeType":"254","messageId":"255","endLine":387,"endColumn":24},{"ruleId":"252","severity":1,"message":"306","line":418,"column":11,"nodeType":"254","messageId":"255","endLine":418,"endColumn":26},{"ruleId":"272","severity":1,"message":"273","line":26,"column":1,"nodeType":"274","endLine":26,"endColumn":51},{"ruleId":"252","severity":1,"message":"307","line":4,"column":5,"nodeType":"254","messageId":"255","endLine":4,"endColumn":14},{"ruleId":"252","severity":1,"message":"308","line":5,"column":5,"nodeType":"254","messageId":"255","endLine":5,"endColumn":17},{"ruleId":"252","severity":1,"message":"309","line":6,"column":5,"nodeType":"254","messageId":"255","endLine":6,"endColumn":15},{"ruleId":"252","severity":1,"message":"310","line":7,"column":28,"nodeType":"254","messageId":"255","endLine":7,"endColumn":38},{"ruleId":"252","severity":1,"message":"311","line":228,"column":27,"nodeType":"254","messageId":"255","endLine":228,"endColumn":43},{"ruleId":"256","severity":1,"message":"312","line":244,"column":8,"nodeType":"258","endLine":244,"endColumn":44,"suggestions":"313"},"no-native-reassign",["314"],"no-negated-in-lhs",["315"],["314"],["315"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alertSideRight', 'finishReaction', and 'queueAnimation'. Either include them or remove the dependency array.","ArrayExpression",["316"],"React Hook useEffect has missing dependencies: 'displayDonation', 'donation.media', 'donation.message', and 'donation.messageExtraData'. Either include them or remove the dependency array.",["317"],["314"],["315"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["314"],["315"],"'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["318"],"'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","'openTermsAndConditionsDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["319"],"'closeTermsAndConditionsModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["320"],"'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","'setDropsForStream' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["321"],"'copyTwitchURL' is assigned a value but never used.","'shareStreamLink' is assigned a value but never used.","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["322"],"no-global-assign","no-unsafe-negation",{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",{"range":"337","text":"338"},"Update the dependencies array to be: [clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",{"range":"339","text":"340"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"341","text":"342"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"343","text":"344"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"345","text":"346"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"347","text":"348"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"349","text":"350"},[11881,11975],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",[17487,17521],"[clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",[18267,18273],"[setPendingMessages, user]",[4704,4734],"[user, history, isLoadingAuth, query, t]",[3636,3674],"[user.uid, user.id, user.refreshToken, t, history]",[9179,9185],"[socialLinksInitialValue, twitchURL, user]",[7048,7084],"[streamStarted, dots, enablingQoins, stream]"]
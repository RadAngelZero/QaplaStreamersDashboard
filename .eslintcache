[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js":"20","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx":"21","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx":"22","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx":"23","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"24","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx":"25","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"26","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx":"27","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js":"28","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx":"29","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx":"30","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx":"31","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx":"32","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx":"33","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx":"34","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx":"35","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CardsPayments\\CardsPayments.jsx":"36"},{"size":545,"mtime":1660938322012,"results":"37","hashOfConfig":"38"},{"size":899,"mtime":1660938322023,"results":"39","hashOfConfig":"38"},{"size":4958,"mtime":1662559722562,"results":"40","hashOfConfig":"38"},{"size":4120,"mtime":1660938322014,"results":"41","hashOfConfig":"38"},{"size":36241,"mtime":1662560524552,"results":"42","hashOfConfig":"38"},{"size":6876,"mtime":1662561274018,"results":"43","hashOfConfig":"38"},{"size":3046,"mtime":1660938321997,"results":"44","hashOfConfig":"38"},{"size":25563,"mtime":1662559722621,"results":"45","hashOfConfig":"38"},{"size":23458,"mtime":1660938321971,"results":"46","hashOfConfig":"38"},{"size":18338,"mtime":1662577830979,"results":"47","hashOfConfig":"38"},{"size":35175,"mtime":1660938322000,"results":"48","hashOfConfig":"38"},{"size":8497,"mtime":1662560524542,"results":"49","hashOfConfig":"38"},{"size":6442,"mtime":1660938322018,"results":"50","hashOfConfig":"38"},{"size":9312,"mtime":1662559722649,"results":"51","hashOfConfig":"38"},{"size":1425,"mtime":1660938322018,"results":"52","hashOfConfig":"38"},{"size":1646,"mtime":1660938321995,"results":"53","hashOfConfig":"38"},{"size":1128,"mtime":1660938321966,"results":"54","hashOfConfig":"38"},{"size":13115,"mtime":1662561303779,"results":"55","hashOfConfig":"38"},{"size":21697,"mtime":1662559722630,"results":"56","hashOfConfig":"38"},{"size":5532,"mtime":1662559722648,"results":"57","hashOfConfig":"38"},{"size":657,"mtime":1660938321974,"results":"58","hashOfConfig":"38"},{"size":720,"mtime":1660938321988,"results":"59","hashOfConfig":"38"},{"size":398,"mtime":1660938321988,"results":"60","hashOfConfig":"38"},{"size":3510,"mtime":1662559722628,"results":"61","hashOfConfig":"38"},{"size":3954,"mtime":1660938321987,"results":"62","hashOfConfig":"38"},{"size":7758,"mtime":1660938321967,"results":"63","hashOfConfig":"38"},{"size":6780,"mtime":1662559722619,"results":"64","hashOfConfig":"38"},{"size":375,"mtime":1660938322013,"results":"65","hashOfConfig":"38"},{"size":1327,"mtime":1660938322010,"results":"66","hashOfConfig":"38"},{"size":21997,"mtime":1662559722623,"results":"67","hashOfConfig":"38"},{"size":1985,"mtime":1660938321970,"results":"68","hashOfConfig":"38"},{"size":15129,"mtime":1660938322002,"results":"69","hashOfConfig":"38"},{"size":517,"mtime":1662559722637,"results":"70","hashOfConfig":"38"},{"size":3435,"mtime":1660938321986,"results":"71","hashOfConfig":"38"},{"size":10204,"mtime":1662559722628,"results":"72","hashOfConfig":"38"},{"size":2727,"mtime":1662578015780,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pa48sw",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"91"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"91"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"91"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"91"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js",["152","153"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx",["154","155","156","157"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx",["158","159","160"],"import React, { useState, useReducer, useEffect } from 'react';\r\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, CircularProgress } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport DayJsUtils from '@date-io/dayjs';\r\n\r\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer, updateStreamerProfile } from './../../services/database';\r\nimport styles from './NewStream.module.css';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\r\nimport BackButton from '../BackButton/BackButton';\r\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\r\nimport RequestActivation from '../RequestActivation/RequestActivation';\r\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    label: {\r\n        color: '#FFF',\r\n        fontSize: '14px'\r\n    },\r\n    titleLabel: {\r\n        marginBottom: 8\r\n    },\r\n    datePickerLabel: {\r\n        marginBottom: theme.spacing(1),\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    button: {\r\n        color: '#FFF',\r\n        backgroundColor: '#6C5DD3',\r\n        borderRadius: '1rem',\r\n        padding: '1rem 3rem 1rem 3rem'\r\n    },\r\n    dateInput: {\r\n        color: '#FFF',\r\n        paddingLeft: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '.5rem',\r\n        fontSize: '14px',\r\n        height: '56px',\r\n        '& .MuiInputAdornment-root': {\r\n            width: '20px',\r\n            marginLeft: '-6px',\r\n            marginRight: '18px',\r\n            zIndex: '10'\r\n        }\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n        '& .MuiPickersToolbar-toolbar': {\r\n            borderRadius: '20px'\r\n        },\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n    accordionContainer: {\r\n        marginTop: '3%',\r\n    },\r\n    accordion: {\r\n        backgroundColor: '#0D1021',\r\n        width: '66%',\r\n    },\r\n    accordionGridRoot: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n    accordionGridItem: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n}));\r\n\r\nconst NewStream = ({ user, games }) => {\r\n    const userLang = navigator.language || navigator.userLanguage;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\r\n    const [selectedGame, setSelectedGame] = useState();\r\n    const [selectedEvent, setSelectedEvent] = useState('exp');\r\n    const [stringDate, setStringDate] = useState('');\r\n    const [clockOpen, setClockOpen] = useState(false);\r\n    const [calendarOpen, setCalendarOpen] = useState(false);\r\n    const [gamesData, setGamesData] = useState([]);\r\n    const [showAccountActviation, setShowAccountActviation] = useState(false);\r\n    const [lockSendButton, setLockSendButton] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let gameList = [];\r\n\r\n        if (games.allGames) {\r\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\r\n\r\n            let tempGamesData = [];\r\n            gameList.forEach((game) => {\r\n                tempGamesData.push({\r\n                    id: game.gameKey,\r\n                    name: game.gameName\r\n                })\r\n            });\r\n\r\n            setGamesData(tempGamesData);\r\n        }\r\n    }, [games.allGames, user]);\r\n\r\n    const optionalDataReducer = (state, action) => {\r\n        switch (action.target.id) {\r\n            case 'eventTitle':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        title: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        title: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            case 'eventDescriptionTitle':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        descriptionsTitle: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        descriptionsTitle: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            case 'eventDescription':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        descriptions: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        descriptions: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\r\n\r\n    // Minimum valid date is 24 hours since the current date\r\n    const minDate = new Date((new Date()).getTime() + 86400000);\r\n\r\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\r\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\r\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\r\n\r\n    const handleDateChange = (date) => {\r\n        try {\r\n            setSelectedDate(date.$d);\r\n\r\n        } catch (e) { console.log(e) }\r\n\r\n        setDisplayDate(date)\r\n    };\r\n\r\n    const openSuccessWindow = () => {\r\n        submitEvent();\r\n    };\r\n\r\n    const submitEvent = async () => {\r\n        setLockSendButton(true);\r\n        if (user.broadcasterType === '') {\r\n            setLockSendButton(false);\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        if (!user.premium && !user.freeTrial) {\r\n            setLockSendButton(false);\r\n            return setShowAccountActviation(true);\r\n        }\r\n\r\n        if (selectedDate < minDate) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.before24h'));\r\n            return;\r\n        }\r\n        if (!selectedGame) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.missingData'));\r\n            return;\r\n        }\r\n\r\n        if (user.currentPeriod) {\r\n            const { endDate } = user.currentPeriod;\r\n\r\n            /**\r\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\r\n             */\r\n            if (selectedDate.getTime() <= endDate) {\r\n\r\n                const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\r\n\r\n                let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\r\n\r\n                if (!userCanCreateStream) {\r\n                    if (user.boughtStreams) {\r\n                        /**\r\n                         * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\r\n                         * the user can create the stream, this function will also remove expired packages or packages that has been already used\r\n                         */\r\n                        userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\r\n                            if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\r\n                                addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\r\n                                return true;\r\n                            } else {\r\n                                removeStreamPackageOfStreamer(user.uid, streamsPackageId);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    addToStreamsRequestedOnSubscriptionDetails(user.uid);\r\n                }\r\n\r\n                /**\r\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\r\n                 * is lower or equal to the user limit per month then we create the event\r\n                 */\r\n                if (userCanCreateStream) {\r\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\r\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\r\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\r\n\r\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\r\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\r\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\r\n\r\n                    let streamerData = {\r\n                        displayName: user.displayName,\r\n                        login: user.login,\r\n                        photoUrl: user.photoUrl\r\n                    };\r\n\r\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\r\n                    if (userData && userData.data) {\r\n                        streamerData = {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url\r\n                        };\r\n\r\n                        await updateStreamerProfile(user.uid, {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url,\r\n                            broadcasterType: userData.data.broadcaster_type\r\n                        });\r\n                    }\r\n\r\n                    await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\r\n\r\n                    window.analytics.track('Stream requested', {\r\n                        selectedGame,\r\n                        selectedDate: selectedDate.getTime(),\r\n                        uid: user.uid\r\n                    });\r\n                    setOpenSuccessDialog(true);\r\n                } else {\r\n                    setShowAccountActviation(true);\r\n                }\r\n            } else {\r\n                alert(t('NewStream.alerts.beforePlanExpiration'));\r\n            }\r\n        } else {\r\n            setShowAccountActviation(true);\r\n        }\r\n    }\r\n\r\n    const successActivation = async () => {\r\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\r\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\r\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\r\n\r\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\r\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\r\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\r\n\r\n        let streamerData = {\r\n            displayName: user.displayName,\r\n            login: user.login,\r\n            photoUrl: user.photoUrl\r\n        };\r\n\r\n        const userData = await getTwitchUserDataCloudFunction(user.id);\r\n        if (userData && userData.data) {\r\n            streamerData = {\r\n                displayName: userData.data.display_name,\r\n                login: userData.data.login,\r\n                photoUrl: userData.data.profile_image_url\r\n            };\r\n\r\n            await updateStreamerProfile(user.uid, {\r\n                displayName: userData.data.display_name,\r\n                login: userData.data.login,\r\n                photoUrl: userData.data.profile_image_url,\r\n                broadcasterType: userData.data.broadcaster_type\r\n            });\r\n        }\r\n\r\n        await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\r\n        await addToStreamsRequestedOnSubscriptionDetails(user.uid);\r\n\r\n        updateStreamerProfile(user.uid, streamerData);\r\n\r\n        window.analytics.track('Free trial started', {\r\n            uid: user.uid\r\n        });\r\n        setOpenSuccessDialog(true);\r\n    }\r\n\r\n    if (!showAccountActviation) {\r\n        return (\r\n            <StreamerDashboardContainer user={user}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <BackButton onClick={history.goBack} />\r\n                    </Grid>\r\n                    <Grid item sm={8}>\r\n                        <h1 className={styles.title}>\r\n                            {t('NewStream.whatAreYouPlaying')}\r\n                        </h1>\r\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                            <Grid item sm={5} style={{ width: '274px', maxWidth: '274px', }}>\r\n                                <InputLabel className={classes.datePickerLabel}>\r\n                                    {t('NewStream.pickACategory')}\r\n                                </InputLabel>\r\n                                <ReactSearchAutocomplete\r\n                                    items={gamesData}\r\n                                    autofocus\r\n                                    placeholder={t('NewStream.categoryPickerPlaceholder')}\r\n                                    showItemsOnFocus\r\n                                    maxResults={5}\r\n                                    onSelect={(game) => setSelectedGame(game.id)}\r\n                                    onClear={() => setSelectedGame(null)}\r\n                                    styling={{\r\n                                        zIndex: 999,\r\n                                        height: '56px',\r\n                                        color: '#FFF',\r\n                                        hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\r\n                                        fontSize: '1rem',\r\n                                        fontWeight: 'bold',\r\n                                        backgroundColor: '#141833',\r\n                                        border: 'none',\r\n                                        borderRadius: '8px',\r\n                                        placeholderColor: 'rgba(255, 255, 255, 0.5)',\r\n                                        fontFamily: 'Inter',\r\n                                        lineColor: 'transparent'\r\n                                    }}\r\n                                    showIcon={false}\r\n                                    formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <h1 className={styles.title}>\r\n                            {t('NewStream.when')}\r\n                        </h1>\r\n                        <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                            <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                    <InputLabel className={classes.datePickerLabel} >\r\n                                        {t('NewStream.date')}\r\n                                    </InputLabel>\r\n                                    <KeyboardDatePicker\r\n                                        open={calendarOpen}\r\n                                        onClick={() => setCalendarOpen(true)}\r\n                                        onOpen={() => { }}\r\n                                        onClose={() => setCalendarOpen(false)}\r\n                                        clearable\r\n                                        disablePast\r\n                                        disableToolbar\r\n                                        autoOk\r\n                                        value={displayDate}\r\n                                        placeholder='10-10-2021'\r\n                                        onChange={handleDateChange}\r\n                                        defaultValue={new Date()}\r\n                                        minDate={minDate}\r\n                                        minDateMessage={t('NewStream.alerts.before24h')}\r\n                                        format='DD-MM-YY ddd'\r\n                                        keyboardIcon={\r\n                                            <InputAdornment position='end' >\r\n                                                <CalendarIcon />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        InputProps={{\r\n                                            disableUnderline: true,\r\n                                            className: classes.dateInput\r\n                                        }}\r\n                                        variant={'inline'}\r\n                                        PopoverProps={{\r\n                                            PaperProps: {\r\n                                                className: classes.popover,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                    <InputLabel className={classes.datePickerLabel}>\r\n                                        {t('NewStream.time')}\r\n                                    </InputLabel>\r\n                                    <KeyboardTimePicker\r\n                                        open={clockOpen}\r\n                                        onClick={() => setClockOpen(true)}\r\n                                        onOpen={() => { }}\r\n                                        onClose={() => setClockOpen(false)}\r\n                                        autoOk\r\n                                        error={selectedDate <= minDate}\r\n                                        helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\r\n                                        value={displayDate}\r\n                                        placeholder='08:00 AM'\r\n                                        onChange={handleDateChange}\r\n                                        // mask='__:__ _M'\r\n                                        keyboardIcon={\r\n                                            <InputAdornment position='end' >\r\n                                                <TimeIcon />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        InputProps={{\r\n                                            disableUnderline: true,\r\n                                            className: classes.dateInput\r\n                                        }}\r\n                                        variant={'inline'}\r\n                                        PopoverProps={{\r\n                                            PaperProps: {\r\n                                                className: classes.popover,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </MuiPickersUtilsProvider>\r\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                            <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                <Grid container>\r\n                                    <h1 className={styles.title}>\r\n                                        {t('NewStream.streamTitle')}\r\n                                    </h1>\r\n                                    <Grid container spacing={4}>\r\n                                        <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\r\n                                            <StreamerTextInput\r\n                                                labelClassName={classes.titleLabel}\r\n                                                label={t('NewStream.streamTitle')}\r\n                                                placeholder={t('NewStream.streamTitlePlaceholder')}\r\n                                                id='eventTitle'\r\n                                                fullWidth={true}\r\n                                                value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\r\n                                                onChange={(e) => optionalDataDispatcher({ target: e.target })}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            disabled={lockSendButton}\r\n                            className={styles.button}\r\n                            onClick={openSuccessWindow}>\r\n                            {lockSendButton ?\r\n                                <CircularProgress\r\n                                    style={{\r\n                                        color: '#fff7',\r\n                                        alignSelf: 'center'\r\n                                    }}\r\n                                    size={25} />\r\n                                :\r\n                                t('NewStream.submit')\r\n                            }\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <NewStreamSuccessDialog\r\n                    open={openSuccessDialog}\r\n                    onClose={() => history.push('/profile')}\r\n                    mainPage={() => history.push('/profile')}\r\n                />\r\n            </StreamerDashboardContainer>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <RequestActivation user={user} onSuccessActivation={successActivation} />\r\n                <NewStreamSuccessDialog\r\n                    open={openSuccessDialog}\r\n                    onClose={() => history.push('/profile')}\r\n                    mainPage={() => history.push('/profile')}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewStream;",["161","162"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx",["163"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx",["164","165","166","167","168","169"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx",["170","171","172","173","174","175","176","177","178"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx",["179","180"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as ESvg } from './../../assets/e.svg';\r\nimport HeartHands from './../../assets/HeartHands.png';\r\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        height: '100vh'\r\n    },\r\n    paymentInfoContainer: {\r\n        paddingLeft: 32,\r\n        paddingRight: 64,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    },\r\n    eImageContainer: {\r\n        display: 'flex',\r\n        width: 80,\r\n        height: 80,\r\n        borderRadius: 20,\r\n        backgroundColor: '#141833',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    subscriptionBought: {\r\n        marginTop: 48,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    subTerms: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    },\r\n    totalPaid: {\r\n        fontSize: 48,\r\n        fontWeight: '600',\r\n        color: 'rgba(255, 255, 255, .9)'\r\n    },\r\n    interval: {\r\n        marginLeft: 6,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    paymentDetails: {\r\n        marginTop: 48,\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    subscriptionType: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentInterval: {\r\n        marginTop: 8,\r\n        fontSize: 14,\r\n        fontWeight: '400',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    itemCost: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentUntilTodayContainer: {\r\n        marginTop: 56,\r\n        color: '#FFF',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    paymentUntilToday: {\r\n        fontSize: 24,\r\n        fontWeight: '500'\r\n    },\r\n    thanksCardContainer: {\r\n        width: '450px',\r\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    thanksCard: {\r\n        backgroundColor: '#141833',\r\n        display: 'inline-block',\r\n        color: '#FFF',\r\n        maxWidth: '80%',\r\n        borderRadius: 35\r\n    },\r\n    cardContentContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingLeft: 30,\r\n        paddingRight: 30\r\n    },\r\n    thanksTitle: {\r\n        marginTop: 8,\r\n        fontSize: 18,\r\n        fontWeight: '700',\r\n        textAlign: 'center'\r\n    },\r\n    thanksDescription: {\r\n        marginTop: 24,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        marginRight: 48,\r\n        marginLeft: 48\r\n    },\r\n    publishButton: {\r\n        marginTop: 64,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        backgroundColor: '#0AFFD2',\r\n        borderRadius: 10,\r\n        color: '#4E2D92',\r\n        fontSize: 16,\r\n        fontWeight: '700',\r\n        paddingTop: 19,\r\n        paddingBottom: 19,\r\n        '&:hover': {\r\n            backgroundColor: '#0AFFD2',\r\n            opacity: '.95'\r\n        }\r\n    },\r\n    backToDashboardButton: {\r\n        marginTop: 16,\r\n        marginBottom: 16,\r\n        fontSize: 16,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    }\r\n}));\r\n\r\nfunction useQuery() {\r\n    const { search } = useLocation();\r\n\r\n    return useMemo(() => new URLSearchParams(search), [search]);\r\n}\r\n\r\nconst ChargeConfirmationPage = ({ user }) => {\r\n    const [totalPaid, setTotalPaid] = useState(0);\r\n    const [interval, setInterval] = useState('');\r\n    const [intervalText, setIntervalText] = useState('');\r\n    const [plan, setPlan] = useState('');\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const query = useQuery();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getDetails() {\r\n            const id = query.get('subscriptionId');\r\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\r\n            setTotalPaid(details.val().totalPaid);\r\n\r\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\r\n\r\n            setIntervalText(details.val().interval);\r\n\r\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            getDetails();\r\n        }\r\n    }, [user]);\r\n\r\n    const onPublishStreamClick = () => {\r\n        history.push('/create');\r\n    }\r\n\r\n    const onBackToDashboardClick = () => {\r\n        history.push('/profile');\r\n    }\r\n\r\n    return (\r\n        <Grid container alignContent='center' className={classes.container}>\r\n            <Grid item md={6} className={classes.paymentInfoContainer}>\r\n                <div className={classes.eImageContainer}>\r\n                    <ESvg />\r\n                </div>\r\n                <p className={classes.subscriptionBought}>\r\n                    {plan && intervalText &&\r\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                    }\r\n                </p>\r\n                <div className={classes.subTerms}>\r\n                    <p className={classes.totalPaid}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                    <p className={classes.interval}>\r\n                        {interval}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentDetails}>\r\n                    <div>\r\n                        <p className={classes.subscriptionType}>\r\n                            {plan}\r\n                        </p>\r\n                        <p className={classes.paymentInterval}>\r\n                            {intervalText &&\r\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <p className={classes.itemCost}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentUntilTodayContainer}>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\r\n                    </p>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            </Grid>\r\n            <Grid item md={6} className={classes.thanksCardContainer}>\r\n                <Card className={classes.thanksCard}>\r\n                    <div className={classes.cardContentContainer}>\r\n                        <img src={HeartHands} />\r\n                        <CardContent>\r\n                            <p className={classes.thanksTitle}>\r\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\r\n                            </p>\r\n                            <p className={classes.thanksDescription}>\r\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\r\n                            </p>\r\n                        </CardContent>\r\n                        <Button fullWidth variant='contained'\r\n                            className={classes.publishButton}\r\n                            onClick={onPublishStreamClick}>\r\n                            {t('ChargeConfirmationPage.publishStream')}\r\n                        </Button>\r\n                        <Button className={classes.backToDashboardButton}\r\n                            onClick={onBackToDashboardClick}>\r\n                            {t('ChargeConfirmationPage.backToDashboard')}\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ChargeConfirmationPage;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx",["181","182","183","184","185"],"import React from 'react';\r\nimport {\r\n    Grid,\r\n    AppBar,\r\n    Toolbar,\r\n    Link,\r\n    Button\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport styles from './StreamerDashboardContainer.module.css';\r\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\r\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridContainer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexWrap: 'nowrap'\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(4) + 1,\r\n        paddingTop: theme.spacing(4) + 1,\r\n    }\r\n}));\r\n\r\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\r\n            {!user && user === undefined ?\r\n                <>\r\n                    {children}\r\n                </>\r\n                :\r\n                <>\r\n                    {history.location.pathname !== '/welcome' &&\r\n                        <StreamerSideBar user={user} />\r\n                    }\r\n                    <div className={`${classes.content} ${containerStyle}`}>\r\n                        {children}\r\n                    </div>\r\n                </>\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default StreamerDashboardContainer;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx",["186"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",["187"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\r\nimport {\r\n    streamsPlaceholderImages,\r\n    SCHEDULED_EVENT_TYPE,\r\n    PAST_STREAMS_EVENT_TYPE,\r\n    PENDING_APPROVAL_EVENT_TYPE,\r\n    HOUR_IN_MILISECONDS\r\n} from '../../utilities/Constants';\r\nimport {\r\n    cancelStreamRequest,\r\n    getStreamTitle,\r\n    getPastStreamTitle,\r\n    checkActiveCustomReward,\r\n    listenToQoinsEnabled,\r\n    removeQoinsEnabledListener\r\n} from '../../services/database';\r\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\r\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\r\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\r\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\r\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\r\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\r\nimport { auth } from '../../services/firebase';\r\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\r\nimport { sendCustomMessage } from '../../services/functions';\r\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    eventCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '1.5rem',\r\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\r\n        height: '100%',\r\n        minWidth: '250px',\r\n        minHeight: '360px',\r\n    },\r\n    relativeContainer: {\r\n        position: 'relative'\r\n    },\r\n    hourContainer: {\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        top: '1rem',\r\n        background: '#1B1D2159',\r\n        borderRadius: '.5rem'\r\n    },\r\n    hourText: {\r\n        color: '#FFF',\r\n        padding: '2px 8px',\r\n        fontSize: '11px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        letterSpacing: '-0.5px',\r\n        textAlign: 'center'\r\n\r\n    },\r\n    dateContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        bottom: '1rem',\r\n        padding: '2px 10px',\r\n        background: '#1B1D21',\r\n        height: '32px',\r\n        borderRadius: '10px'\r\n    },\r\n    dateText: {\r\n        color: '#FFF',\r\n        fontSize: '13px',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        marginLeft: '10px'\r\n    },\r\n    eventImage: {\r\n        objectFit: 'cover',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        borderRadius: '24px'\r\n    },\r\n    eventCardContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '24px 16px',\r\n        height: '100%'\r\n    },\r\n    eventCardTitle: {\r\n        color: '#FFFFFF',\r\n        fontSize: '16px',\r\n        lineHeight: '24px',\r\n        fontWeight: '500',\r\n        height: '48px',\r\n\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    circle: {\r\n        borderRadius: '100%',\r\n        height: '.55rem',\r\n        width: '.55rem',\r\n        marginRight: '.5rem'\r\n    },\r\n    participantsNumber: {\r\n        fontSize: '12px',\r\n        textAlign: 'right',\r\n        lineHeight: '16px'\r\n    },\r\n    streamButton: {\r\n        backgroundColor: '#6C5DD3 !important',\r\n        color: '#FFF'\r\n    },\r\n    buttonsContainer: {\r\n        marginTop: 'auto'\r\n    },\r\n    startButton: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#0D1021',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    endButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#FFF',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    manageButton: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none'\r\n    }\r\n}));\r\n\r\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\r\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\r\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [stream, setStream] = useState(null);\r\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\r\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\r\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\r\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\r\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\r\n    const [startingStream, setStartingStream] = useState(false);\r\n    const [closingStream, setClosingStream] = useState(false);\r\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\r\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\r\n    const [loadingDots, setLoadingDots] = useState('');\r\n    const [hideStream, setHideStream] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getParticipantsNumber() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                /* const participants = await getStreamParticipantsNumber(streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getStreamTitle(streamId);\r\n                if (title.exists()) {\r\n                    setTitle(title.val());\r\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getPastStreamTitle(user.uid, streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\r\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            }\r\n        }\r\n\r\n        async function checkStreamStatus() {\r\n            const streamStatus = await checkActiveCustomReward(streamId);\r\n            if (streamStatus.exists()) {\r\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\r\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                        if (qoinsEnabled.val()) {\r\n                            setStream({\r\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\r\n                                qoinsEnabled: qoinsEnabled.val()\r\n                            });\r\n\r\n                            removeQoinsEnabledListener(streamId);\r\n                        } else {\r\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                        }\r\n                    });\r\n                } else {\r\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                }\r\n\r\n                setShowRewardsOptions(true);\r\n                setHideStream(false);\r\n            } else {\r\n                setStream(null);\r\n            }\r\n        }\r\n\r\n\r\n        getParticipantsNumber();\r\n        checkStreamStatus();\r\n\r\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\r\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\r\n            const currentTimestamp = (new Date()).getTime();\r\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\r\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\r\n                    setHideStream(true);\r\n                } else {\r\n                    setShowRewardsOptions(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startingStream) {\r\n            setTimeout(() => {\r\n                if (loadingDots.length > 2) {\r\n                    setLoadingDots('');\r\n                } else {\r\n                    setLoadingDots(loadingDots + '.');\r\n                }\r\n            }, 500);\r\n        } else if (loadingDots !== '') {\r\n            setLoadingDots('');\r\n        }\r\n\r\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\r\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\r\n\r\n    const cancelStream = (e) => {\r\n        e.stopPropagation();\r\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\r\n            cancelStreamRequest(user.uid, streamId);\r\n            onRemoveStream(streamId);\r\n        }\r\n    }\r\n\r\n    const startStream = async (enableIn) => {\r\n        try {\r\n            setStartingStream(true);\r\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream, enableIn);\r\n\r\n            if (enableIn) {\r\n                listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                    if (qoinsEnabled.val()) {\r\n                        setStream({\r\n                            ...stream,\r\n                            qoinsEnabled: qoinsEnabled.val()\r\n                        });\r\n\r\n                        removeQoinsEnabledListener(streamId);\r\n                    }\r\n                });\r\n            }\r\n\r\n            window.analytics.track('Stream started', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream(streamData);\r\n            if (!openStreamDialog) {\r\n                setOpenStreamStartedDialog(true);\r\n            }\r\n            setStartingStream(false);\r\n\r\n            return streamData;\r\n        } catch (error) {\r\n            if (error && error.status === 401) {\r\n                handleExpiredSession();\r\n            } else {\r\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setClosingStream(true);\r\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId);\r\n\r\n            window.analytics.track('Stream finished', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setOpenRewardsRemovedDialog(true);\r\n\r\n            // Close the rest of Dialogs just in case\r\n            setOpenStreamStartedDialog(false);\r\n            setOpenQoinsWarningDialog(false);\r\n            setOpenStreamDialog(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (stream.qoinsEnabled) {\r\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\r\n            if (dontShowCloseStreamWarning) {\r\n                closeStream();\r\n            } else {\r\n                setOpenEndStreamDialog(true);\r\n            }\r\n        } else {\r\n            setOpenQoinsWarningDialog(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\r\n     * have streamObject as parameter with a default value of stream state\r\n     */\r\n    const enableQoinsReward = async (streamObject = stream) => {\r\n        try {\r\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\r\n\r\n            window.analytics.track('Qoins enabled', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream({ ...streamObject, qoinsEnabled: true });\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\r\n\r\n    const closeDialogsAndOpenManageRewardsDialog = () => {\r\n        setOpenStreamStartedDialog(false);\r\n        setOpenQoinsWarningDialog(false);\r\n        setOpenStreamDialog(true);\r\n    }\r\n\r\n    const closeAndRemoveStream = () => {\r\n        setOpenRewardsRemovedDialog(false);\r\n        onRemoveStream(streamId);\r\n    }\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message) {\r\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\r\n\r\n            window.analytics.track('Custom Message sent', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime(),\r\n                message\r\n            });\r\n            setOpenCustomMessageSentDialog(true);\r\n        }\r\n    }\r\n\r\n    const shareStreamLink = async () => {\r\n        const link = await generateStreamDynamicLink(streamId, {\r\n            title: title && title['en'] ? title['en'] : '',\r\n            description: `Evento de ${user.displayName}`,\r\n            image: image ? image : ''\r\n        });\r\n\r\n        // This does not work on Safari for some reason\r\n        if (link) {\r\n            navigator.clipboard.writeText(link);\r\n        }\r\n    }\r\n\r\n    if (game && !hideStream) {\r\n        return (\r\n            <Card className={classes.eventCard} style={style}>\r\n                <div className={classes.relativeContainer}>\r\n                    <div className={classes.hourContainer}>\r\n                        <p className={classes.hourText}>\r\n                            {hour}\r\n                        </p>\r\n                    </div>\r\n                    <div className={classes.dateContainer}>\r\n                        <CalendarIcon />\r\n                        <p className={classes.dateText}>\r\n                            {date}\r\n                        </p>\r\n                    </div>\r\n                    <img\r\n                        alt='Game'\r\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\r\n                        width='100%'\r\n                        height='180'\r\n                        className={classes.eventImage} />\r\n                </div>\r\n                <div className={classes.eventCardContent}>\r\n                    <p className={classes.eventCardTitle}>\r\n                        {title && title['en'] ? title['en'] : ''}\r\n                    </p>\r\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\r\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\r\n                            <div style={{\r\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\r\n                                width: '8px',\r\n                                height: '8px',\r\n                                borderRadius: '50%'\r\n                            }} />\r\n                            <div style={{ width: '6px' }} />\r\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\r\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                    <div className={classes.buttonsContainer}>\r\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\r\n                            (!startingStream ?\r\n                                (stream ?\r\n                                    (!closingStream && stream.qoinsEnabled ?\r\n                                        <Button size='medium' className={classes.endButton}\r\n                                            disabled={closingStream}\r\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\r\n                                            {t('StreamCard.end')}\r\n                                        </Button>\r\n                                        :\r\n                                        <p style={{ color: '#FFF', textAlign: 'center' }}>\r\n                                            {t('StreamCard.dropsScheduled')}\r\n                                        </p>\r\n                                    )\r\n                                    :\r\n                                    <Button size='medium' className={classes.startButton}\r\n                                        startIcon={<TimerIcon />}\r\n                                        onClick={() => setOpenStreamDialog(true)}>\r\n                                        {t('StreamCard.enableDrops')}\r\n                                    </Button>\r\n                                )\r\n                                :\r\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\r\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\r\n                                </p>\r\n                            )\r\n                        }\r\n                        <div style={{ height: '11px' }} />\r\n                        {streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={manageStream}>\r\n                                {t('StreamCard.manageStream')}\r\n                            </Button>\r\n                        }\r\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\r\n                                {t('StreamCard.cancelStreamRequest')}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <EventManagementDialog open={openStreamDialog}\r\n                    user={user}\r\n                    sendMessage={sendMessage}\r\n                    streamId={streamId}\r\n                    stream={stream}\r\n                    streamStarted={startingStream}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenStreamDialog(false)}\r\n                    startStream={startStream}\r\n                    enableQoins={enableQoinsReward}\r\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\r\n                    streamTitle={title && title['en'] ? title['en'] : ''}\r\n                    date={date}\r\n                    hour={hour} />\r\n                <EventConfirmStartDialog open={openStreamStartedDialog}\r\n                    onClose={() => setOpenStreamStartedDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\r\n                    onClose={() => setOpenQoinsWarningDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenEndStreamDialog(false)}\r\n                    closeStream={closeStream} />\r\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\r\n                    onClose={closeAndRemoveStream}  />\r\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\r\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamCard;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx",["188"],"import React from 'react';\r\nimport { withStyles, Tab } from '@material-ui/core';\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(4),\r\n        fontSize: 18,\r\n        '&:hover': {\r\n            color: '#FFF',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#FFF',\r\n            fontWeight: '500',\r\n        },\r\n        '&:focus': {\r\n            color: '#FFF',\r\n        },\r\n    },\r\n    selected: {},\r\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nexport default (props) => <QaplaTab {...props} />;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx",["189"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx",["190","191"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx",["192","193","194"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CardsPayments\\CardsPayments.jsx",["195","196","197","198","199"],{"ruleId":"200","severity":1,"message":"201","line":26,"column":7,"nodeType":"202","messageId":"203","endLine":26,"endColumn":35},{"ruleId":"204","severity":1,"message":"205","line":564,"column":9,"nodeType":"206","messageId":"207","endLine":564,"endColumn":14},{"ruleId":"200","severity":1,"message":"208","line":33,"column":12,"nodeType":"202","messageId":"203","endLine":33,"endColumn":40},{"ruleId":"209","severity":1,"message":"210","line":102,"column":8,"nodeType":"211","endLine":102,"endColumn":38,"suggestions":"212"},{"ruleId":"200","severity":1,"message":"213","line":110,"column":11,"nodeType":"202","messageId":"203","endLine":110,"endColumn":39},{"ruleId":"214","severity":1,"message":"215","line":135,"column":117,"nodeType":"216","endLine":135,"endColumn":132},{"ruleId":"200","severity":1,"message":"217","line":125,"column":27,"nodeType":"202","messageId":"203","endLine":125,"endColumn":43},{"ruleId":"200","severity":1,"message":"218","line":126,"column":24,"nodeType":"202","messageId":"203","endLine":126,"endColumn":37},{"ruleId":"219","severity":1,"message":"220","line":269,"column":103,"nodeType":"221","messageId":"222","endLine":269,"endColumn":105},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"200","severity":1,"message":"227","line":13,"column":5,"nodeType":"202","messageId":"203","endLine":13,"endColumn":11},{"ruleId":"200","severity":1,"message":"228","line":2,"column":41,"nodeType":"202","messageId":"203","endLine":2,"endColumn":45},{"ruleId":"200","severity":1,"message":"229","line":2,"column":47,"nodeType":"202","messageId":"203","endLine":2,"endColumn":58},{"ruleId":"200","severity":1,"message":"230","line":2,"column":60,"nodeType":"202","messageId":"203","endLine":2,"endColumn":71},{"ruleId":"200","severity":1,"message":"231","line":8,"column":8,"nodeType":"202","messageId":"203","endLine":8,"endColumn":23},{"ruleId":"200","severity":1,"message":"232","line":74,"column":11,"nodeType":"202","messageId":"203","endLine":74,"endColumn":18},{"ruleId":"200","severity":1,"message":"233","line":90,"column":11,"nodeType":"202","messageId":"203","endLine":90,"endColumn":29},{"ruleId":"200","severity":1,"message":"234","line":2,"column":67,"nodeType":"202","messageId":"203","endLine":2,"endColumn":74},{"ruleId":"200","severity":1,"message":"235","line":13,"column":28,"nodeType":"202","messageId":"203","endLine":13,"endColumn":36},{"ruleId":"200","severity":1,"message":"236","line":16,"column":28,"nodeType":"202","messageId":"203","endLine":16,"endColumn":33},{"ruleId":"200","severity":1,"message":"237","line":233,"column":12,"nodeType":"202","messageId":"203","endLine":233,"endColumn":29},{"ruleId":"200","severity":1,"message":"238","line":237,"column":12,"nodeType":"202","messageId":"203","endLine":237,"endColumn":23},{"ruleId":"200","severity":1,"message":"239","line":241,"column":12,"nodeType":"202","messageId":"203","endLine":241,"endColumn":21},{"ruleId":"200","severity":1,"message":"240","line":241,"column":23,"nodeType":"202","messageId":"203","endLine":241,"endColumn":35},{"ruleId":"209","severity":1,"message":"241","line":288,"column":8,"nodeType":"211","endLine":288,"endColumn":14,"suggestions":"242"},{"ruleId":"200","severity":1,"message":"243","line":387,"column":11,"nodeType":"202","messageId":"203","endLine":387,"endColumn":24},{"ruleId":"209","severity":1,"message":"210","line":179,"column":8,"nodeType":"211","endLine":179,"endColumn":14,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":235,"column":25,"nodeType":"247","endLine":235,"endColumn":49},{"ruleId":"200","severity":1,"message":"248","line":4,"column":5,"nodeType":"202","messageId":"203","endLine":4,"endColumn":11},{"ruleId":"200","severity":1,"message":"249","line":5,"column":5,"nodeType":"202","messageId":"203","endLine":5,"endColumn":12},{"ruleId":"200","severity":1,"message":"250","line":6,"column":5,"nodeType":"202","messageId":"203","endLine":6,"endColumn":9},{"ruleId":"200","severity":1,"message":"251","line":7,"column":5,"nodeType":"202","messageId":"203","endLine":7,"endColumn":11},{"ruleId":"200","severity":1,"message":"252","line":14,"column":8,"nodeType":"202","messageId":"203","endLine":14,"endColumn":23},{"ruleId":"209","severity":1,"message":"253","line":71,"column":8,"nodeType":"211","endLine":71,"endColumn":46,"suggestions":"254"},{"ruleId":"200","severity":1,"message":"255","line":413,"column":11,"nodeType":"202","messageId":"203","endLine":413,"endColumn":26},{"ruleId":"256","severity":1,"message":"257","line":26,"column":1,"nodeType":"258","endLine":26,"endColumn":51},{"ruleId":"256","severity":1,"message":"257","line":16,"column":1,"nodeType":"258","endLine":16,"endColumn":52},{"ruleId":"214","severity":1,"message":"215","line":520,"column":65,"nodeType":"216","endLine":520,"endColumn":80},{"ruleId":"214","severity":1,"message":"215","line":526,"column":29,"nodeType":"216","endLine":526,"endColumn":44},{"ruleId":"200","severity":1,"message":"259","line":7,"column":28,"nodeType":"202","messageId":"203","endLine":7,"endColumn":38},{"ruleId":"200","severity":1,"message":"260","line":228,"column":27,"nodeType":"202","messageId":"203","endLine":228,"endColumn":43},{"ruleId":"209","severity":1,"message":"261","line":244,"column":8,"nodeType":"211","endLine":244,"endColumn":44,"suggestions":"262"},{"ruleId":"200","severity":1,"message":"263","line":3,"column":34,"nodeType":"202","messageId":"203","endLine":3,"endColumn":37},{"ruleId":"200","severity":1,"message":"264","line":3,"column":39,"nodeType":"202","messageId":"203","endLine":3,"endColumn":43},{"ruleId":"200","severity":1,"message":"228","line":3,"column":45,"nodeType":"202","messageId":"203","endLine":3,"endColumn":49},{"ruleId":"200","severity":1,"message":"229","line":3,"column":51,"nodeType":"202","messageId":"203","endLine":3,"endColumn":62},{"ruleId":"200","severity":1,"message":"230","line":3,"column":64,"nodeType":"202","messageId":"203","endLine":3,"endColumn":75},"no-unused-vars","'streamerCustomMediaForCheers' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'media'.","ObjectExpression","unexpected","'openTermsAndConditionsDialog' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.","ArrayExpression",["265"],"'closeTermsAndConditionsModal' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["266"],"no-negated-in-lhs",["267"],"'Hidden' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'ContainedButton' is defined but never used.","'classes' is assigned a value but never used.","'renderTotalPayment' is assigned a value but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["268"],"'copyTwitchURL' is assigned a value but never used.",["269"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["270"],"'shareStreamLink' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["271"],"'Box' is defined but never used.","'Grid' is defined but never used.",{"desc":"272","fix":"273"},"no-global-assign","no-unsafe-negation",{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"282","text":"283"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"284","text":"285"},"Update the dependencies array to be: [query, t, user]",{"range":"286","text":"287"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"288","text":"289"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"290","text":"291"},[4704,4734],"[user, history, isLoadingAuth, query, t]",[9179,9185],"[socialLinksInitialValue, twitchURL, user]",[4945,4951],"[query, t, user]",[3636,3674],"[user.uid, user.id, user.refreshToken, t, history]",[7048,7084],"[streamStarted, dots, enablingQoins, stream]"]
[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"32"},{"size":383,"mtime":1642779984899,"results":"33","hashOfConfig":"34"},{"size":1023,"mtime":1642779984868,"results":"35","hashOfConfig":"34"},{"size":30341,"mtime":1642712203293,"results":"36","hashOfConfig":"34"},{"size":7505,"mtime":1642779984867,"results":"37","hashOfConfig":"34"},{"size":14385,"mtime":1642779819761,"results":"38","hashOfConfig":"34"},{"size":362,"mtime":1614731664838,"results":"39","hashOfConfig":"34"},{"size":7276,"mtime":1642712880333,"results":"40","hashOfConfig":"34"},{"size":2975,"mtime":1614731664830,"results":"41","hashOfConfig":"34"},{"size":16381,"mtime":1642779984896,"results":"42","hashOfConfig":"34"},{"size":20379,"mtime":1633450179136,"results":"43","hashOfConfig":"34"},{"size":6950,"mtime":1642779984909,"results":"44","hashOfConfig":"34"},{"size":23026,"mtime":1639435811614,"results":"45","hashOfConfig":"34"},{"size":1361,"mtime":1635283796971,"results":"46","hashOfConfig":"34"},{"size":3415,"mtime":1642779984870,"results":"47","hashOfConfig":"34"},{"size":629,"mtime":1635283796967,"results":"48","hashOfConfig":"34"},{"size":1596,"mtime":1641919402812,"results":"49","hashOfConfig":"34"},{"size":226,"mtime":1636068211199,"results":"50","hashOfConfig":"34"},{"size":25277,"mtime":1642779984869,"results":"51","hashOfConfig":"34"},{"size":3579,"mtime":1614731664824,"results":"52","hashOfConfig":"34"},{"size":27592,"mtime":1640968859961,"results":"53","hashOfConfig":"34"},{"size":2751,"mtime":1642779984908,"results":"54","hashOfConfig":"34"},{"size":1799,"mtime":1638029350636,"results":"55","hashOfConfig":"34"},{"size":2422,"mtime":1642779984900,"results":"56","hashOfConfig":"34"},{"size":695,"mtime":1635283796969,"results":"57","hashOfConfig":"34"},{"size":9171,"mtime":1638029350635,"results":"58","hashOfConfig":"34"},{"size":870,"mtime":1642782331952,"results":"59","hashOfConfig":"34"},{"size":3325,"mtime":1641919402812,"results":"60","hashOfConfig":"34"},{"size":1439,"mtime":1642779984907,"results":"61","hashOfConfig":"34"},{"size":527,"mtime":1636998131402,"results":"62","hashOfConfig":"34"},{"size":6897,"mtime":1642712880330,"results":"63","hashOfConfig":"34"},{"size":34080,"mtime":1642779984903,"results":"64","hashOfConfig":"34"},{"size":8238,"mtime":1642779984868,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rfo3np",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"83"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"102"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["135"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",[],["136","137"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],["138","139"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["140","141"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["142","143"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, FormControlLabel, Radio, RadioGroup, Button, InputAdornment, InputLabel, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer } from './../../services/database';\n\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as CheckedIcon } from './../../assets/CheckedIcon.svg';\nimport { ReactComponent as UncheckedIcon } from './../../assets/UncheckedIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamDetailsDialog from '../NewStreamDetailsDialog/NewStreamDetailsDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    useEffect(() => {\n        if (user && !user.premium) {\n            history.push('/profile');\n        }\n    }, [user]);\n\n    const userLang = navigator.language || navigator.userLanguage;\n\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openDetailsDialog, setOpenDetailsDialog] = useState(false);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n    const handleGameChange = (game) => {\n        setSelectedGame(game.target.value);\n    };\n    const handleEventTypeChange = (event) => {\n        setSelectedEvent(event.target.value);\n    };\n\n    const handleStringDateChange = (event) => {\n        setStringDate(event.target.value);\n    }\n\n    const openConfirmationDialog = () => setOpenDetailsDialog(true);\n\n    const submitEvent = async () => {\n        if (selectedDate < minDate) {\n            alert(t('NewStream.alerts.before24h'));\n            return;\n        }\n        if (!selectedGame) {\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        const { endDate } = user.currentPeriod;\n\n        /**\n         * Check if the selected date is valid to create the event based on the end of the streamer subscription\n         */\n        if (selectedDate.getTime() <= endDate) {\n\n            const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\n\n            let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\n\n            if (!userCanCreateStream) {\n                if (user.boughtStreams) {\n                    /**\n                     * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\n                     * the user can create the stream, this function will also remove expired packages or packages that has been already used\n                     */\n                    userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\n                        if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\n                            addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\n                            return true;\n                        } else {\n                            removeStreamPackageOfStreamer(user.uid, streamsPackageId);\n                        }\n                    });\n                }\n            } else {\n                addToStreamsRequestedOnSubscriptionDetails(user.uid);\n            }\n\n            /**\n             * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n             * is lower or equal to the user limit per month then we create the event\n             */\n            if (userCanCreateStream) {\n                const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                await createNewStreamRequest(user, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n                history.push('/success');\n            } else {\n                // Hacer un modal chido para convencerlos de mejorar su plan o comprar eventos aparte\n                alert(t('NewStream.alerts.streamsLimit'));\n            }\n        } else {\n            alert(t('NewStream.alerts.beforePlanExpiration'));\n        }\n    }\n\n    let gameList = [];\n\n    if (games.allGames) {\n        gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] })).sort((a, b) => {\n            if (a.gameName < b.gameName) {\n                return -1;\n            }\n            if (a.gameName > b.gameName) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <BackButton onClick={history.goBack} />\n                </Grid>\n                <Grid item sm={8}>\n                    <h1 className={styles.title}>\n                        {t('NewStream.whatAreYouPlaying')}\n                    </h1>\n                    <StreamerSelect\n                        value={selectedGame}\n                        onChange={handleGameChange}\n                        Icon={ArrowIcon}\n                        label={t('NewStream.selectYourGame')}>\n                        <option style={{\n                            backgroundColor: '#141833',\n                            fontSize: '14px'\n                        }} value={null}></option>\n                        {games.allGames && gameList.map((game) => {\n                            if (!game.gameName.toLowerCase().includes('twitch')) {\n                                return <option style={{\n                                    backgroundColor: '#141833',\n                                    fontSize: '14px'\n                                }} value={game.gameKey}>{game.gameName}</option>\n                            }\n\n                            return null;\n                        })}\n                    </StreamerSelect>\n                    <h1 className={styles.title}>\n                        {t('NewStream.when')}\n                    </h1>\n                    <MuiPickersUtilsProvider utils={DayJsUtils}>\n                        <Grid container spacing={4}>\n                            <Grid item sm={4} style={{minWidth: '175px'}}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.date')}\n                                </InputLabel>\n                                <KeyboardDatePicker\n                                    open={calendarOpen}\n                                    onClick={() => setCalendarOpen(true)}\n                                    onOpen={() => {}}\n                                    onClose={() => setCalendarOpen(false)}\n                                    clearable\n                                    disablePast\n                                    disableToolbar\n                                    autoOk\n                                    value={displayDate}\n                                    placeholder='10-10-2021'\n                                    onChange={handleDateChange}\n                                    defaultValue={new Date()}\n                                    minDate={minDate}\n                                    minDateMessage={t('NewStream.alerts.before24h')}\n                                    format='DD-MM-YY ddd'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <CalendarIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={4} style={{minWidth: '175px'}}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.time')}\n                                </InputLabel>\n                                <KeyboardTimePicker\n                                    open={clockOpen}\n                                    onClick={() => setClockOpen(true)}\n                                    onOpen={() => {}}\n                                    onClose={() => setClockOpen(false)}\n                                    autoOk\n                                    error={selectedDate <= minDate}\n                                    helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\n                                    value={displayDate}\n                                    placeholder='08:00 AM'\n                                    onChange={handleDateChange}\n                                    // mask='__:__ _M'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <TimeIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={8} style={{width: '90%', minWidth: '330px'}}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.confirmDate')}\n                                </InputLabel>\n                                <StreamerTextInput placeholder={t('NewStream.confirmDatePlaceholder')}\n                                    fullWidth\n                                    value={stringDate}\n                                    onChange={handleStringDateChange} />\n                            </Grid>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                    <h1 className={styles.title}>\n                        {t('NewStream.streamType')}\n                    </h1>\n                    <RadioGroup name={'eventType'} value={selectedEvent} onChange={(event) => { handleEventTypeChange(event) }}>\n                        <Grid container>\n                            <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'exp'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio defaultChecked\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label={t('NewStream.streamTypes.casual')} />\n                            </Grid>\n                            {/* <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'tournament'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label='Tournament' />\n                            </Grid> */}\n                        </Grid>\n                    </RadioGroup>\n                    <Grid container className={classes.accordionContainer}>\n                        <Accordion\n                            className={classes.accordion}\n                        >\n                            <AccordionSummary\n                                expandIcon={<ArrowIcon />}\n                                id={\"moreOptions\"}\n                                aria-controls=\"panel1a-content\"\n                            >\n                                <InputLabel\n                                    className={classes.label}\n                                >\n                                    {t('NewStream.advanced')}\n                                </InputLabel>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Grid container direction={'column'} className={classes.accordionGridRoot}>\n                                    <InputLabel className={classes.label}>\n                                        {t('NewStream.feelingCreative')}\n                                    </InputLabel>\n                                    <Grid container>\n                                        <h1 className={styles.title}>\n                                            {t('NewStream.streamTitle')}\n                                        </h1>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label={t('NewStream.streamTitle')}\n                                                    placeholder={t('NewStream.streamTitlePlaceholder')}\n                                                    id='eventTitle'\n                                                    fullWidth={true}\n                                                    value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <h1 className={styles.title}>\n                                        {t('NewStream.streamDescription')}\n                                    </h1>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label={t('NewStream.subtitle')}\n                                                    id={'eventDescriptionTitle'}\n                                                    placeholder={t('NewStream.subtitle')}\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptionsTitle ? userLang.toLowerCase().includes('es') ? optionalData.descriptionsTitle.es : optionalData.descriptionsTitle.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem} style={{ marginTop: '1rem' }}>\n                                                <StreamerTextInput\n                                                    id={'eventDescription'}\n                                                    label={t('NewStream.streamDescription')}\n                                                    placeholder={t('NewStream.descriptionPlaceholder')}\n                                                    multiline={true}\n                                                    rows={3}\n                                                    rowsMax={30}\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptions ? userLang.toLowerCase().includes('es') ? optionalData.descriptions.es : optionalData.descriptions.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n                        </Accordion>\n                    </Grid>\n                    <Button\n                        className={styles.button}\n                        onClick={openConfirmationDialog}>\n                        {t('NewStream.submit')}\n                    </Button>\n                </Grid>\n            </Grid>\n            <NewStreamDetailsDialog\n                open={openDetailsDialog}\n                onClose={() => setOpenDetailsDialog(false)}\n                submitEvent={submitEvent}\n                game={selectedGame}\n                date={`${selectedDate.toLocaleDateString()} ${selectedDate.toLocaleTimeString()}`}\n                userName={user ? user.displayName : ''}\n                {...optionalData} />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx",["144"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["145"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(4) + 1,\n        paddingTop: theme.spacing(4) + 1,\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    <AppBar className={styles.appBar}>\n                        <Toolbar>\n                            <div style={{ flexGrow: 1 }}></div>\n                            <p className={styles.alreadyAUser}>\n                                Already a user?\n                            </p>\n                            <Link to='/' className={`Margin-Right ${styles.buttonContainer}`}>\n                                <Button variant='outlined'\n                                    color='#5F75EE'\n                                    className={styles.button}\n                                    onClick={() => history.push('/signin')}>\n                                    Sign in\n                                </Button>\n                            </Link>\n                        </Toolbar>\n                    </AppBar>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["146"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["147","148"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["149","150","151","152","153","154","155","156","157","158"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["159","160"],{"ruleId":"161","severity":1,"message":"162","line":16,"column":1,"nodeType":"163","endLine":16,"endColumn":52},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"164","replacedBy":"168"},{"ruleId":"166","replacedBy":"169"},{"ruleId":"164","replacedBy":"170"},{"ruleId":"166","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":120,"column":8,"nodeType":"174","endLine":120,"endColumn":14,"suggestions":"175"},{"ruleId":"176","severity":1,"message":"177","line":246,"column":99,"nodeType":"178","messageId":"179","endLine":246,"endColumn":101},{"ruleId":"172","severity":1,"message":"180","line":211,"column":8,"nodeType":"174","endLine":211,"endColumn":81,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":14,"column":8,"nodeType":"184","messageId":"185","endLine":14,"endColumn":23},{"ruleId":"161","severity":1,"message":"162","line":26,"column":1,"nodeType":"163","endLine":26,"endColumn":51},{"ruleId":"182","severity":1,"message":"186","line":14,"column":28,"nodeType":"184","messageId":"185","endLine":14,"endColumn":45},{"ruleId":"172","severity":1,"message":"187","line":91,"column":8,"nodeType":"174","endLine":91,"endColumn":68,"suggestions":"188"},{"ruleId":"182","severity":1,"message":"189","line":2,"column":67,"nodeType":"184","messageId":"185","endLine":2,"endColumn":74},{"ruleId":"182","severity":1,"message":"190","line":13,"column":28,"nodeType":"184","messageId":"185","endLine":13,"endColumn":36},{"ruleId":"182","severity":1,"message":"191","line":16,"column":28,"nodeType":"184","messageId":"185","endLine":16,"endColumn":33},{"ruleId":"182","severity":1,"message":"192","line":233,"column":12,"nodeType":"184","messageId":"185","endLine":233,"endColumn":29},{"ruleId":"182","severity":1,"message":"193","line":237,"column":12,"nodeType":"184","messageId":"185","endLine":237,"endColumn":23},{"ruleId":"182","severity":1,"message":"194","line":240,"column":12,"nodeType":"184","messageId":"185","endLine":240,"endColumn":21},{"ruleId":"182","severity":1,"message":"195","line":240,"column":23,"nodeType":"184","messageId":"185","endLine":240,"endColumn":35},{"ruleId":"182","severity":1,"message":"196","line":243,"column":11,"nodeType":"184","messageId":"185","endLine":243,"endColumn":25},{"ruleId":"172","severity":1,"message":"197","line":281,"column":8,"nodeType":"174","endLine":281,"endColumn":14,"suggestions":"198"},{"ruleId":"182","severity":1,"message":"199","line":376,"column":11,"nodeType":"184","messageId":"185","endLine":376,"endColumn":24},{"ruleId":"172","severity":1,"message":"200","line":179,"column":8,"nodeType":"174","endLine":179,"endColumn":14,"suggestions":"201"},{"ruleId":"202","severity":1,"message":"203","line":235,"column":25,"nodeType":"204","endLine":235,"endColumn":49},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["205"],"no-negated-in-lhs",["206"],["205"],["206"],["205"],["206"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["207"],"array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'onPong', 'rewardsAreCreated', and 't'. Either include them or remove the dependency array.",["208"],"no-unused-vars","'LanguageHandler' is defined but never used.","Identifier","unusedVar","'setAlertSideRight' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'alertSideRight'. Either include it or remove the dependency array.",["209"],"'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","'shortTwitchURL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'socialLinksInitialValue'. Either include it or remove the dependency array.",["210"],"'copyTwitchURL' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["211"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},"Update the dependencies array to be: [history, user]",{"range":"222","text":"223"},"Update the dependencies array to be: [streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",{"range":"224","text":"225"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]",{"range":"226","text":"227"},"Update the dependencies array to be: [socialLinksInitialValue, user]",{"range":"228","text":"229"},"Update the dependencies array to be: [query, t, user]",{"range":"230","text":"231"},[4100,4106],"[history, user]",[7598,7671],"[streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",[3625,3685],"[streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]",[8605,8611],"[socialLinksInitialValue, user]",[4767,4773],"[query, t, user]"]
[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Lottery/Lottery.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/AddStreamerLinks/AddStreamerLinks.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"35"},{"size":28273,"mtime":1637097653420,"results":"36","hashOfConfig":"37"},{"size":24681,"mtime":1635179774361,"results":"38","hashOfConfig":"37"},{"size":24451,"mtime":1637096783168,"results":"39","hashOfConfig":"37"},{"size":226,"mtime":1636068211199,"results":"40","hashOfConfig":"37"},{"size":2975,"mtime":1614731664830,"results":"41","hashOfConfig":"37"},{"size":21620,"mtime":1636998275742,"results":"42","hashOfConfig":"37"},{"size":9802,"mtime":1635283796968,"results":"43","hashOfConfig":"37"},{"size":6392,"mtime":1636998427694,"results":"44","hashOfConfig":"37"},{"size":9130,"mtime":1631819220686,"results":"45","hashOfConfig":"37"},{"size":1596,"mtime":1635283796967,"results":"46","hashOfConfig":"37"},{"size":13427,"mtime":1635283796966,"results":"47","hashOfConfig":"37"},{"size":3325,"mtime":1614731664825,"results":"48","hashOfConfig":"37"},{"size":1113,"mtime":1625936949695,"results":"49","hashOfConfig":"37"},{"size":921,"mtime":1625936949691,"results":"50","hashOfConfig":"37"},{"size":291,"mtime":1627071614509,"results":"51","hashOfConfig":"37"},{"size":14559,"mtime":1633553900896,"results":"52","hashOfConfig":"37"},{"size":1369,"mtime":1625590018867,"results":"53","hashOfConfig":"37"},{"size":3205,"mtime":1625936949693,"results":"54","hashOfConfig":"37"},{"size":1784,"mtime":1631819220690,"results":"55","hashOfConfig":"37"},{"size":5291,"mtime":1633469091748,"results":"56","hashOfConfig":"37"},{"size":3579,"mtime":1614731664824,"results":"57","hashOfConfig":"37"},{"size":1361,"mtime":1635283796971,"results":"58","hashOfConfig":"37"},{"size":6221,"mtime":1635284019981,"results":"59","hashOfConfig":"37"},{"size":362,"mtime":1614731664838,"results":"60","hashOfConfig":"37"},{"size":835,"mtime":1633469091749,"results":"61","hashOfConfig":"37"},{"size":2273,"mtime":1631819220680,"results":"62","hashOfConfig":"37"},{"size":1967,"mtime":1631730376992,"results":"63","hashOfConfig":"37"},{"size":9922,"mtime":1631819220689,"results":"64","hashOfConfig":"37"},{"size":2410,"mtime":1635976864059,"results":"65","hashOfConfig":"37"},{"size":695,"mtime":1627071614509,"results":"66","hashOfConfig":"37"},{"size":527,"mtime":1627071614512,"results":"67","hashOfConfig":"37"},{"size":6114,"mtime":1635283796972,"results":"68","hashOfConfig":"37"},{"size":20379,"mtime":1633450179136,"results":"69","hashOfConfig":"37"},{"size":1011,"mtime":1614731664821,"results":"70","hashOfConfig":"37"},{"size":710,"mtime":1635976864067,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rfo3np",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx",["155"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["156","157"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["158"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, FormControlLabel, Radio, RadioGroup, Button, InputAdornment, InputLabel, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport DayJsUtils from '@date-io/dayjs';\nimport { createNewStreamRequest } from './../../services/database';\n\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as CheckedIcon } from './../../assets/CheckedIcon.svg';\nimport { ReactComponent as UncheckedIcon } from './../../assets/UncheckedIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamDetailsDialog from '../NewStreamDetailsDialog/NewStreamDetailsDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    useEffect(() => {\n        if (user && !user.premium) {\n            history.push('/profile');\n        }\n    }, [user]);\n\n    const userLang = navigator.language || navigator.userLanguage;\n\n    const classes = useStyles();\n    const history = useHistory();\n    const [openDetailsDialog, setOpenDetailsDialog] = useState(false);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n\n    const handleDateChange = (date) => {\n        setSelectedDate(date.$d);\n    };\n    const handleGameChange = (game) => {\n        setSelectedGame(game.target.value);\n    };\n    const handleEventTypeChange = (event) => {\n        setSelectedEvent(event.target.value);\n    };\n\n    const handleStringDateChange = (event) => {\n        setStringDate(event.target.value);\n    }\n\n    const openConfirmationDialog = () => setOpenDetailsDialog(true);\n\n    const submitEvent = () => {\n        if (selectedDate < minDate) {\n            alert('All requests must be sent at least 24 hours before the stream');\n            return;\n        }\n        if (!selectedGame) {\n            alert('Verify that all fields have been filled correctly');\n            return;\n        }\n\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n        createNewStreamRequest(user, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n        history.push('/success');\n    }\n\n    let gameList = [];\n\n    if (games.allGames) {\n        gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] })).sort((a, b) => {\n            if (a.gameName < b.gameName) {\n                return -1;\n            }\n            if (a.gameName > b.gameName) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <BackButton onClick={history.goBack} />\n                </Grid>\n                <Grid item sm={8}>\n                    <h1 className={styles.title}>\n                        What are you playing?\n                    </h1>\n                    <StreamerSelect\n                        value={selectedGame}\n                        onChange={handleGameChange}\n                        Icon={ArrowIcon}\n                        label='Select your game'>\n                        <option style={{\n                            backgroundColor: '#141833',\n                            fontSize: '14px'\n                        }} value={null}></option>\n                        {games.allGames && gameList.map((game) => {\n                            if (!game.gameName.toLowerCase().includes('twitch')) {\n                                return <option style={{\n                                    backgroundColor: '#141833',\n                                    fontSize: '14px'\n                                }} value={game.gameKey}>{game.gameName}</option>\n                            }\n\n                            return null;\n                        })}\n                    </StreamerSelect>\n                    <h1 className={styles.title}>\n                        When?\n                    </h1>\n                    <MuiPickersUtilsProvider utils={DayJsUtils}>\n                        <Grid container spacing={4}>\n                            <Grid item sm={4}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    Date\n                                </InputLabel>\n                                <KeyboardDatePicker\n                                    clearable\n                                    disablePast\n                                    disableToolbar\n                                    autoOk\n                                    value={selectedDate}\n                                    placeholder='10-10-2021'\n                                    onChange={handleDateChange}\n                                    defaultValue={new Date()}\n                                    minDate={minDate}\n                                    minDateMessage='All requests must be sent at least 24 hours before the stream'\n                                    format='DD-MM-YY ddd'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <CalendarIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={4}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    Time\n                                </InputLabel>\n                                <KeyboardTimePicker\n                                    ampm={false}\n                                    disableToolbar\n                                    autoOk\n                                    error={selectedDate <= minDate}\n                                    helperText={selectedDate >= minDate ? '' : 'All requests must be sent at least 24 hours before the stream'}\n                                    value={selectedDate}\n                                    placeholder='08:00 AM'\n                                    onChange={handleDateChange}\n                                    min\n                                    mask='__:__'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <TimeIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={8}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    Confirm your date\n                                </InputLabel>\n                                <StreamerTextInput placeholder='Example: 15 de abril 16:00 Hora de Ciudad de México'\n                                    fullWidth\n                                    value={stringDate}\n                                    onChange={handleStringDateChange} />\n                            </Grid>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                    <h1 className={styles.title}>\n                        Stream type\n                    </h1>\n                    <RadioGroup name={'eventType'} value={selectedEvent} onChange={(event) => { handleEventTypeChange(event) }}>\n                        <Grid container>\n                            <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'exp'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio defaultChecked\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label='Casual (XQ)' />\n                            </Grid>\n                            {/* <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'tournament'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label='Tournament' />\n                            </Grid> */}\n                        </Grid>\n                    </RadioGroup>\n                    <Grid container className={classes.accordionContainer}>\n                        <Accordion\n                            className={classes.accordion}\n                        >\n                            <AccordionSummary\n                                expandIcon={<ArrowIcon />}\n                                id={\"moreOptions\"}\n                                aria-controls=\"panel1a-content\"\n                            >\n                                <InputLabel\n                                    className={classes.label}\n                                >\n                                    Advanced (optional)\n                            </InputLabel>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Grid container direction={'column'} className={classes.accordionGridRoot}>\n                                    <InputLabel className={classes.label}>\n                                        Feeling creative? Give your stream a cool name. Write it in Spanish! It's OK.\n                                    </InputLabel>\n                                    <Grid container>\n                                        <h1 className={styles.title}>\n                                            Stream title\n                                        </h1>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label='Stream Title'\n                                                    placeholder='i.e. Manqueando en Fall Guys'\n                                                    id='eventTitle'\n                                                    fullWidth={true}\n                                                    value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <h1 className={styles.title}>\n                                        Stream description\n                                    </h1>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label='Subtitle'\n                                                    id={'eventDescriptionTitle'}\n                                                    placeholder='Subtitle'\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptionsTitle ? userLang.toLowerCase().includes('es') ? optionalData.descriptionsTitle.es : optionalData.descriptionsTitle.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem} style={{ marginTop: '1rem' }}>\n                                                <StreamerTextInput\n                                                    id={'eventDescription'}\n                                                    label='Stream Description'\n                                                    placeholder='Share what your stream is going to be about.'\n                                                    multiline={true}\n                                                    rows={3}\n                                                    rowsMax={30}\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptions ? userLang.toLowerCase().includes('es') ? optionalData.descriptions.es : optionalData.descriptions.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n                        </Accordion>\n                    </Grid>\n                    <Button\n                        className={styles.button}\n                        onClick={openConfirmationDialog}>\n                        Submit\n                    </Button>\n                </Grid>\n            </Grid>\n            <NewStreamDetailsDialog\n                open={openDetailsDialog}\n                onClose={() => setOpenDetailsDialog(false)}\n                submitEvent={submitEvent}\n                game={selectedGame}\n                date={`${selectedDate.toLocaleDateString()} ${selectedDate.toLocaleTimeString()}`}\n                userName={user ? user.displayName : ''}\n                {...optionalData} />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Lottery/Lottery.jsx",["159","160","161","162","163","164"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",[],["165","166"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",[],["167","168"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx",[],["169","170"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["171"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles({\n    root: {\n        borderBottom: 'transparent',\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    },\n})(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;",["172","173"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],["174","175"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],["176","177"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["178","179"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport styles from './LiveDonations.module.css';\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation } from '../../services/database';\nimport donationAudio from '../../assets/notification.wav';\n\nconst LiveDonations = () => {\n    const [streamerUid, setStreamerUid] = useState('');\n    const [donationQueue, setDonationQueue] = useState([]);\n    const [donationToShow, setDonationToShow] = useState(null);\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\n    const [alertSideRight, setAlertSideRight] = useState(false)\n    const { streamerId } = useParams();\n\n    useEffect(() => {\n        const pushDonation = (donation) => {\n            setDonationQueue((array) => [donation, ...array]);\n        }\n\n        const popDonation = () => {\n            const indexToPop = donationQueue.length - 1;\n            const donationToPop = donationQueue[indexToPop];\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\n\n            return donationToPop;\n        }\n\n        async function getStreamerUid() {\n            if (streamerId) {\n                const uid = await getStreamerUidWithTwitchId(streamerId);\n                setStreamerUid(uid);\n                listenForTestCheers(uid, (donation) => {\n                    pushDonation({ ...donation.val(), id: donation.key });\n                });\n            }\n        }\n\n        async function loadDonations() {\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\n                pushDonation({ ...donation.val(), id: donation.key });\n            });\n        }\n\n        if (streamerUid && !listenersAreSetted) {\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\n                setListenersAreSetted(true);\n                if (isStreaming.exists() && isStreaming.val()) {\n                    setTimeout(() => {\n                        loadDonations();\n                    }, 150000);\n                } else {\n                    removeListenerForUnreadStreamerCheers(streamerUid);\n                    setDonationQueue([]);\n                }\n            });\n        }\n\n        if (donationQueue.length > 0) {\n            setTimeout(() => {\n                const donation = popDonation();\n                if (donation) {\n                    const audio = new Audio(donationAudio);\n                    audio.play();\n                    donation.isRightSide = alertSideRight\n                    setDonationToShow(donation);\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                        removeTestDonation(streamerUid, donation.id);\n                    } else {\n                        markDonationAsRead(streamerUid, donation.id);\n                    }\n                }\n            }, 10000);\n        } else {\n            if (listenersAreSetted) {\n                setTimeout(() => {\n                    setDonationToShow(null);\n                }, 10000);\n            }\n        }\n\n        if (!streamerUid) {\n            getStreamerUid();\n        }\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted]);\n\n    document.body.style.backgroundColor = 'transparent';\n\n    return (\n        <div style={{ backgroundColor: 'transparent', height: '200px', width: '400px', flex: 1 }}>\n            {donationToShow &&\n                <>\n                    <DonationHandler donationToShow={donationToShow} />\n                </>\n            }\n        </div>\n    );\n}\n\nconst DonationHandler = (donationToShow) => {\n    const donation = donationToShow.donationToShow;\n    return (\n        <div style={{ display: 'flex', flex: 1, flexDirection: 'column', fontFamily: 'Montserrat', backgroundColor: '#f0f0' }}>\n            <div\n                className={styles.donationBubble}\n                style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-around',\n                    width: 'fit-content',\n                    minWidth: '340px',\n                    height: '60px',\n                    borderRadius: '18px',\n                    padding: '0 18px',\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start'\n                }}\n            >\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <p style={{ display: 'flex', color: 'white', fontSize: '1.05rem', textAlign: 'center' }}>\n                        <b style={{ color: '#09ffd2' }}>{donation.twitchUserName}</b>\n                        <div style={{ margin: '0 6px' }}>ha enviado</div>\n                        <b style={{ color: '#09ffd2' }}>{donation.amountQoins} Qoins</b>\n                    </p>\n                </div>\n                <div style={{ width: '10px' }}></div>\n                <div style={{ display: 'flex', flex: 1, alignSelf: 'center' }}>\n                    <DonatedQoin style={{ display: 'flex', flex: 1 }} />\n                </div>\n            </div>\n            {donation.message !== '' &&\n                <>\n                    <div style={{ display: 'flex', height: '6px' }}></div>\n                    <div style={{\n                        display: 'flex',\n                        width: 'fit-content',\n                        backgroundColor: '#4D00FB',\n                        borderRadius: '18px',\n                        borderBottomLeftRadius: donation.isRightSide ? '18px' : '4px',\n                        borderBottomRightRadius: donation.isRightSide ? '4px' : '18px',\n                        padding: '16.3px 20.4px',\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start'\n                    }}>\n                        <p style={{ display: 'flex', color: 'white', fontSize: '1rem' }}>{donation.message}</p>\n                    </div>\n                </>\n            }\n        </div >\n    )\n}\n\nexport default LiveDonations;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],["180","181"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],["182","183"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/AddStreamerLinks/AddStreamerLinks.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",["184"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["185"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],{"ruleId":"186","severity":1,"message":"187","line":167,"column":8,"nodeType":"188","endLine":167,"endColumn":81,"suggestions":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"186","severity":1,"message":"194","line":111,"column":8,"nodeType":"188","endLine":111,"endColumn":14,"suggestions":"195"},{"ruleId":"196","severity":1,"message":"197","line":2,"column":61,"nodeType":"198","messageId":"199","endLine":2,"endColumn":67},{"ruleId":"196","severity":1,"message":"200","line":2,"column":69,"nodeType":"198","messageId":"199","endLine":2,"endColumn":83},{"ruleId":"196","severity":1,"message":"201","line":2,"column":85,"nodeType":"198","messageId":"199","endLine":2,"endColumn":95},{"ruleId":"196","severity":1,"message":"202","line":2,"column":97,"nodeType":"198","messageId":"199","endLine":2,"endColumn":106},{"ruleId":"196","severity":1,"message":"203","line":2,"column":108,"nodeType":"198","messageId":"199","endLine":2,"endColumn":124},{"ruleId":"196","severity":1,"message":"204","line":2,"column":126,"nodeType":"198","messageId":"199","endLine":2,"endColumn":142},{"ruleId":"190","replacedBy":"205"},{"ruleId":"192","replacedBy":"206"},{"ruleId":"190","replacedBy":"207"},{"ruleId":"192","replacedBy":"208"},{"ruleId":"190","replacedBy":"209"},{"ruleId":"192","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":13,"column":1,"nodeType":"213","endLine":13,"endColumn":52},{"ruleId":"190","replacedBy":"214"},{"ruleId":"192","replacedBy":"215"},{"ruleId":"190","replacedBy":"216"},{"ruleId":"192","replacedBy":"217"},{"ruleId":"190","replacedBy":"218"},{"ruleId":"192","replacedBy":"219"},{"ruleId":"196","severity":1,"message":"220","line":14,"column":28,"nodeType":"198","messageId":"199","endLine":14,"endColumn":45},{"ruleId":"186","severity":1,"message":"221","line":86,"column":8,"nodeType":"188","endLine":86,"endColumn":68,"suggestions":"222"},{"ruleId":"190","replacedBy":"223"},{"ruleId":"192","replacedBy":"224"},{"ruleId":"190","replacedBy":"225"},{"ruleId":"192","replacedBy":"226"},{"ruleId":"196","severity":1,"message":"227","line":35,"column":7,"nodeType":"198","messageId":"199","endLine":35,"endColumn":18},{"ruleId":"211","severity":1,"message":"212","line":26,"column":1,"nodeType":"213","endLine":26,"endColumn":51},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onPong', 'rewardsAreCreated', and 't'. Either include them or remove the dependency array.","ArrayExpression",["228"],"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["231"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'InputAdornment' is defined but never used.","'InputLabel' is defined but never used.","'Accordion' is defined but never used.","'AccordionSummary' is defined but never used.","'AccordionDetails' is defined but never used.",["229"],["230"],["229"],["230"],["229"],["230"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["229"],["230"],["229"],["230"],["229"],["230"],"'setAlertSideRight' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'alertSideRight'. Either include it or remove the dependency array.",["232"],["229"],["230"],["229"],["230"],"'ProfileIcon' is assigned a value but never used.",{"desc":"233","fix":"234"},"no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},"Update the dependencies array to be: [streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",{"range":"239","text":"240"},"Update the dependencies array to be: [history, user]",{"range":"241","text":"242"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]",{"range":"243","text":"244"},[5903,5976],"[streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",[3687,3693],"[history, user]",[3393,3453],"[streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]"]
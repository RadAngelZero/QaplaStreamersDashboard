[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"43","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"44","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"45","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"46","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/branch.js":"47","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"48","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"49"},{"size":4817,"mtime":1663019390370,"results":"50","hashOfConfig":"51"},{"size":9052,"mtime":1663016164640,"results":"52","hashOfConfig":"51"},{"size":21222,"mtime":1661972327645,"results":"53","hashOfConfig":"51"},{"size":21156,"mtime":1661975099553,"results":"54","hashOfConfig":"51"},{"size":7574,"mtime":1663027577058,"results":"55","hashOfConfig":"51"},{"size":3414,"mtime":1661972887780,"results":"56","hashOfConfig":"51"},{"size":6609,"mtime":1661974982586,"results":"57","hashOfConfig":"51"},{"size":20318,"mtime":1663027577062,"results":"58","hashOfConfig":"51"},{"size":5675,"mtime":1661974732629,"results":"59","hashOfConfig":"51"},{"size":12826,"mtime":1662044241478,"results":"60","hashOfConfig":"51"},{"size":4314,"mtime":1661975942806,"results":"61","hashOfConfig":"51"},{"size":21460,"mtime":1663016164628,"results":"62","hashOfConfig":"51"},{"size":22154,"mtime":1663032998674,"results":"63","hashOfConfig":"51"},{"size":2185,"mtime":1661972327672,"results":"64","hashOfConfig":"51"},{"size":3416,"mtime":1650310830004,"results":"65","hashOfConfig":"51"},{"size":383,"mtime":1650310830005,"results":"66","hashOfConfig":"51"},{"size":11901,"mtime":1661972327656,"results":"67","hashOfConfig":"51"},{"size":6726,"mtime":1662044244293,"results":"68","hashOfConfig":"51"},{"size":14683,"mtime":1663016164638,"results":"69","hashOfConfig":"51"},{"size":226,"mtime":1659480227124,"results":"70","hashOfConfig":"51"},{"size":25007,"mtime":1663016164628,"results":"71","hashOfConfig":"51"},{"size":1288,"mtime":1648248621496,"results":"72","hashOfConfig":"51"},{"size":1291,"mtime":1663016164626,"results":"73","hashOfConfig":"51"},{"size":8238,"mtime":1650310829995,"results":"74","hashOfConfig":"51"},{"size":8409,"mtime":1663031862665,"results":"75","hashOfConfig":"51"},{"size":1592,"mtime":1650310830008,"results":"76","hashOfConfig":"51"},{"size":1919,"mtime":1661972327646,"results":"77","hashOfConfig":"51"},{"size":3579,"mtime":1614731664824,"results":"78","hashOfConfig":"51"},{"size":835,"mtime":1642711713952,"results":"79","hashOfConfig":"51"},{"size":22970,"mtime":1661972327647,"results":"80","hashOfConfig":"51"},{"size":9694,"mtime":1661972327657,"results":"81","hashOfConfig":"51"},{"size":629,"mtime":1635283796967,"results":"82","hashOfConfig":"51"},{"size":695,"mtime":1635283796969,"results":"83","hashOfConfig":"51"},{"size":362,"mtime":1614731664838,"results":"84","hashOfConfig":"51"},{"size":16521,"mtime":1661972327653,"results":"85","hashOfConfig":"51"},{"size":6280,"mtime":1661972327673,"results":"86","hashOfConfig":"51"},{"size":3844,"mtime":1650310830005,"results":"87","hashOfConfig":"51"},{"size":2975,"mtime":1614731664830,"results":"88","hashOfConfig":"51"},{"size":3170,"mtime":1661972327665,"results":"89","hashOfConfig":"51"},{"size":3326,"mtime":1661972327650,"results":"90","hashOfConfig":"51"},{"size":2042,"mtime":1661972327667,"results":"91","hashOfConfig":"51"},{"size":3339,"mtime":1650310830005,"results":"92","hashOfConfig":"51"},{"size":2011,"mtime":1650310829999,"results":"93","hashOfConfig":"51"},{"size":1505,"mtime":1662223237485,"results":"94","hashOfConfig":"51"},{"size":1520,"mtime":1654019625276,"results":"95","hashOfConfig":"51"},{"size":2029,"mtime":1663016164638,"results":"96","hashOfConfig":"51"},{"size":811,"mtime":1663033264173,"results":"97","hashOfConfig":"51"},{"size":870,"mtime":1650310830028,"results":"98","hashOfConfig":"51"},{"size":35747,"mtime":1663033488538,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rfo3np",{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"104"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"152"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"147"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"131"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"124"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"147"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],["216","217"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["218","219"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",["220"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\nimport {\n    streamsPlaceholderImages,\n    SCHEDULED_EVENT_TYPE,\n    PAST_STREAMS_EVENT_TYPE,\n    PENDING_APPROVAL_EVENT_TYPE,\n    HOUR_IN_MILISECONDS\n} from '../../utilities/Constants';\nimport {\n    cancelStreamRequest,\n    getStreamTitle,\n    getPastStreamTitle,\n    checkActiveCustomReward,\n    listenToQoinsEnabled,\n    removeQoinsEnabledListener\n} from '../../services/database';\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\nimport { auth } from '../../services/firebase';\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\nimport { sendCustomMessage } from '../../services/functions';\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\n\nconst useStyles = makeStyles(() => ({\n    eventCard: {\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: '#141833',\n        borderRadius: '1.5rem',\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\n        height: '100%',\n        minWidth: '250px',\n        minHeight: '360px',\n    },\n    relativeContainer: {\n        position: 'relative'\n    },\n    hourContainer: {\n        position: 'absolute',\n        right: '1rem',\n        top: '1rem',\n        background: '#1B1D2159',\n        borderRadius: '.5rem'\n    },\n    hourText: {\n        color: '#FFF',\n        padding: '2px 8px',\n        fontSize: '11px',\n        fontStyle: 'normal',\n        fontWeight: '700',\n        lineHeight: '20px',\n        letterSpacing: '-0.5px',\n        textAlign: 'center'\n\n    },\n    dateContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        position: 'absolute',\n        right: '1rem',\n        bottom: '1rem',\n        padding: '2px 10px',\n        background: '#1B1D21',\n        height: '32px',\n        borderRadius: '10px'\n    },\n    dateText: {\n        color: '#FFF',\n        fontSize: '13px',\n        fontWeight: '700',\n        lineHeight: '20px',\n        marginLeft: '10px'\n    },\n    eventImage: {\n        objectFit: 'cover',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        borderRadius: '24px'\n    },\n    eventCardContent: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '24px 16px',\n        height: '100%'\n    },\n    eventCardTitle: {\n        color: '#FFFFFF',\n        fontSize: '16px',\n        lineHeight: '24px',\n        fontWeight: '500',\n        height: '48px',\n\n    },\n    rowContainer: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    circle: {\n        borderRadius: '100%',\n        height: '.55rem',\n        width: '.55rem',\n        marginRight: '.5rem'\n    },\n    participantsNumber: {\n        fontSize: '12px',\n        textAlign: 'right',\n        lineHeight: '16px'\n    },\n    streamButton: {\n        backgroundColor: '#6C5DD3 !important',\n        color: '#FFF'\n    },\n    buttonsContainer: {\n        marginTop: 'auto'\n    },\n    startButton: {\n        backgroundColor: '#00FFDD',\n        color: '#0D1021',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    endButton: {\n        backgroundColor: '#3B4BF9',\n        color: '#FFF',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    manageButton: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none'\n    }\n}));\n\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [stream, setStream] = useState(null);\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\n    const [startingStream, setStartingStream] = useState(false);\n    const [closingStream, setClosingStream] = useState(false);\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\n    const [loadingDots, setLoadingDots] = useState('');\n    const [hideStream, setHideStream] = useState(false);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getParticipantsNumber() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                /* const participants = await getStreamParticipantsNumber(streamId);\n                let participantsNumber = participants.exists() ? participants.val() : 0;\n                setParticipantsNumber(participantsNumber); */\n\n                const title = await getStreamTitle(streamId);\n                if (title.exists()) {\n                    setTitle(title.val());\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName });\n                }\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\n                let participantsNumber = participants.exists() ? participants.val() : 0;\n                setParticipantsNumber(participantsNumber); */\n\n                const title = await getPastStreamTitle(user.uid, streamId);\n                setTitle(title.val());\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName });\n                }\n            }\n        }\n\n        async function checkStreamStatus() {\n            const streamStatus = await checkActiveCustomReward(streamId);\n            if (streamStatus.exists()) {\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                        if (qoinsEnabled.val()) {\n                            setStream({\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\n                                qoinsEnabled: qoinsEnabled.val()\n                            });\n\n                            removeQoinsEnabledListener(streamId);\n                        } else {\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\n                        }\n                    });\n                } else {\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\n                }\n\n                setShowRewardsOptions(true);\n                setHideStream(false);\n            } else {\n                setStream(null);\n            }\n        }\n\n\n        getParticipantsNumber();\n        checkStreamStatus();\n\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\n            const currentTimestamp = (new Date()).getTime();\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\n                    setHideStream(true);\n                } else {\n                    setShowRewardsOptions(true);\n                }\n            }\n        }\n\n        if (startingStream) {\n            setTimeout(() => {\n                if (loadingDots.length > 2) {\n                    setLoadingDots('');\n                } else {\n                    setLoadingDots(loadingDots + '.');\n                }\n            }, 500);\n        } else if (loadingDots !== '') {\n            setLoadingDots('');\n        }\n\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\n\n    const cancelStream = (e) => {\n        e.stopPropagation();\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\n            cancelStreamRequest(user.uid, streamId);\n            onRemoveStream(streamId);\n        }\n    }\n\n    const startStream = async (enableIn) => {\n        try {\n            setStartingStream(true);\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream, enableIn);\n\n            if (enableIn) {\n                listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                    if (qoinsEnabled.val()) {\n                        setStream({\n                            ...stream,\n                            qoinsEnabled: qoinsEnabled.val()\n                        });\n\n                        removeQoinsEnabledListener(streamId);\n                    }\n                });\n            }\n\n            window.analytics.track('Stream started', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setStream(streamData);\n            if (!openStreamDialog) {\n                setOpenStreamStartedDialog(true);\n            }\n            setStartingStream(false);\n\n            return streamData;\n        } catch (error) {\n            if (error && error.status === 401) {\n                handleExpiredSession();\n            } else {\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\n            }\n        }\n    }\n\n    const closeStream = async (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        try {\n            setClosingStream(true);\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId);\n\n            window.analytics.track('Stream finished', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setOpenRewardsRemovedDialog(true);\n\n            // Close the rest of Dialogs just in case\n            setOpenStreamStartedDialog(false);\n            setOpenQoinsWarningDialog(false);\n            setOpenStreamDialog(false);\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        if (stream.qoinsEnabled) {\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\n            if (dontShowCloseStreamWarning) {\n                closeStream();\n            } else {\n                setOpenEndStreamDialog(true);\n            }\n        } else {\n            setOpenQoinsWarningDialog(true);\n        }\n    }\n\n    /**\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\n     * have streamObject as parameter with a default value of stream state\n     */\n    const enableQoinsReward = async (streamObject = stream) => {\n        try {\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\n\n            window.analytics.track('Qoins enabled', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setStream({ ...streamObject, qoinsEnabled: true });\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\n\n    const closeDialogsAndOpenManageRewardsDialog = () => {\n        setOpenStreamStartedDialog(false);\n        setOpenQoinsWarningDialog(false);\n        setOpenStreamDialog(true);\n    }\n\n    const closeAndRemoveStream = () => {\n        setOpenRewardsRemovedDialog(false);\n        onRemoveStream(streamId);\n    }\n\n    const sendMessage = async (message) => {\n        if (message) {\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\n\n            window.analytics.track('Custom Message sent', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime(),\n                message\n            });\n            setOpenCustomMessageSentDialog(true);\n        }\n    }\n\n    const shareStreamLink = async () => {\n        const link = await generateStreamDynamicLink(streamId, {\n            title: title && title['en'] ? title['en'] : '',\n            description: `Evento de ${user.displayName}`,\n            image: image ? image : ''\n        });\n\n        // This does not work on Safari for some reason\n        if (link) {\n            navigator.clipboard.writeText(link);\n        }\n    }\n\n    if (game && !hideStream) {\n        return (\n            <Card className={classes.eventCard} style={style}>\n                <div className={classes.relativeContainer}>\n                    <div className={classes.hourContainer}>\n                        <p className={classes.hourText}>\n                            {hour}\n                        </p>\n                    </div>\n                    <div className={classes.dateContainer}>\n                        <CalendarIcon />\n                        <p className={classes.dateText}>\n                            {date}\n                        </p>\n                    </div>\n                    <img\n                        alt='Game'\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\n                        width='100%'\n                        height='180'\n                        className={classes.eventImage} />\n                </div>\n                <div className={classes.eventCardContent}>\n                    <p className={classes.eventCardTitle}>\n                        {title && title['en'] ? title['en'] : ''}\n                    </p>\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\n                            <div style={{\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\n                                width: '8px',\n                                height: '8px',\n                                borderRadius: '50%'\n                            }} />\n                            <div style={{ width: '6px' }} />\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\n                            </p>\n                        </div>\n                    }\n                    <div className={classes.buttonsContainer}>\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\n                            (!startingStream ?\n                                (stream ?\n                                    (!closingStream && stream.qoinsEnabled ?\n                                        <Button size='medium' className={classes.endButton}\n                                            disabled={closingStream}\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\n                                            {t('StreamCard.end')}\n                                        </Button>\n                                        :\n                                        <p style={{ color: '#FFF', textAlign: 'center' }}>\n                                            {t('StreamCard.dropsScheduled')}\n                                        </p>\n                                    )\n                                    :\n                                    <Button size='medium' className={classes.startButton}\n                                        startIcon={<TimerIcon />}\n                                        onClick={() => setOpenStreamDialog(true)}>\n                                        {t('StreamCard.enableDrops')}\n                                    </Button>\n                                )\n                                :\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\n                                </p>\n                            )\n                        }\n                        <div style={{ height: '11px' }} />\n                        {streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions &&\n                            <Button size='medium' className={classes.manageButton} onClick={manageStream}>\n                                {t('StreamCard.manageStream')}\n                            </Button>\n                        }\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\n                                {t('StreamCard.cancelStreamRequest')}\n                            </Button>\n                        }\n                    </div>\n                </div>\n                <EventManagementDialog open={openStreamDialog}\n                    user={user}\n                    sendMessage={sendMessage}\n                    streamId={streamId}\n                    stream={stream}\n                    streamStarted={startingStream}\n                    closingStream={closingStream}\n                    onClose={() => setOpenStreamDialog(false)}\n                    startStream={startStream}\n                    enableQoins={enableQoinsReward}\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\n                    streamTitle={title && title['en'] ? title['en'] : ''}\n                    date={date}\n                    hour={hour} />\n                <EventConfirmStartDialog open={openStreamStartedDialog}\n                    onClose={() => setOpenStreamStartedDialog(false)}\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\n                    onClose={() => setOpenQoinsWarningDialog(false)}\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\n                    closingStream={closingStream}\n                    onClose={() => setOpenEndStreamDialog(false)}\n                    closeStream={closeStream} />\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\n                    onClose={closeAndRemoveStream}  />\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\n            </Card>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamCard;",["221","222"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx",["223"],"import React, { useState, useEffect } from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from \"@material-ui/core\";\n\nimport iconEdit from \"../../assets/Edit.svg\";\nimport { getCustomReward, updateCustomReward } from \"../../services/twitch\";\nimport { getInteractionsRewardData, setAlertSetting, updateStreamerProfile } from \"../../services/database\";\nimport { refreshUserAccessToken } from \"../../services/functions\";\nimport { auth } from \"../../services/firebase\";\nimport { ReactComponent as ConfirmChange } from './../../assets/ConfirmChange.svg';\nimport StreamerProfileModalDisableInteractions from \"../StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions\";\nimport StreamerProfileImgCoin from '../StreamerProfileImgCoin/StreamerProfileImgCoin';\nimport style from \"./StreamerProfileEditCoin.module.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    circularProgress: {\n        color: '#0AFFD2',\n        alignSelf: 'center'\n    }\n}));\n\nconst StreamerProfileEditCoin = ({ user }) => {\n    const [ActiveEditTitle, setActiveEditTitle] = useState(false);\n    const [ActiveEditCoins, setActiveEditCoins] = useState(false);\n    const [rewardId, setRewardId] = useState('');\n    const [rewardName, setRewardName] = useState('');\n    const [rewardCost, setRewardCost] = useState('');\n    const [savingChanges, setSavingChanges] = useState(false);\n    const [rewardBackgroundColor, setRewardBackgroundColor] = useState('');\n    const [modal, setModal] = useState(false);\n    const [titleCheckbox, setTitleCheckbox] = useState('');\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function getRewardData() {\n            try {\n                const rewardData = await getInteractionsRewardData(user.uid);\n                if (rewardData.exists()) {\n                    const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n                    if (userTokensUpdated.data.status === 200) {\n                        const userCredentialsUpdated = userTokensUpdated.data;\n                        updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                        const reward = await getCustomReward(rewardData.val().rewardId, user.id, userCredentialsUpdated.access_token);\n                        if (reward && reward.id) {\n                            setRewardName(reward.title);\n                            setRewardCost(reward.cost);\n                            setRewardBackgroundColor(reward.background_color);\n                            setReactionsEnabled(!reward.is_paused);\n                            setTitleCheckbox(t(!reward.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'));\n                            setRewardId(reward.id);\n                        } else if (reward === 404) {\n                            history.push('/onboarding');\n                        }\n                    }\n                } else {\n                    history.push('/onboarding');\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        if (user.uid) {\n            getRewardData();\n        }\n    }, [user.uid, user.id, user.refreshToken]);\n\n    const saveData = async (event) => {\n        if (event.key === 'Enter' || event.type === 'click') {\n            setSavingChanges(true);\n            const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n            if (userTokensUpdated.data.status === 200) {\n                const userCredentialsUpdated = userTokensUpdated.data;\n                updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                const rewardUpdated = await updateCustomReward(\n                    user.id,\n                    userCredentialsUpdated.access_token,\n                    rewardId,\n                    {\n                        title: rewardName,\n                        cost: rewardCost\n                    }\n                );\n\n                if (rewardUpdated.status === 200) {\n                    setRewardName(rewardUpdated.title);\n                    setRewardCost(rewardUpdated.cost);\n                    setRewardBackgroundColor(rewardUpdated.background_color);\n                    setActiveEditCoins(false);\n                    setActiveEditTitle(false);\n                } else {\n                    switch (rewardUpdated.status) {\n                        case 404:\n                            // Not found (maybe the reward was removed from Twitch)\n                            break;\n                        case 500:\n                            // Twitch internal server error (could not update because of Twitch)\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                setSavingChanges(false);\n            } else {\n                switch (userTokensUpdated.data.status) {\n                    case 401:\n                        // Invalid refresh token (need to sign in again)\n                        handleExpiredSession();\n                        break;\n                    case 500:\n                        // Twitch internal server error\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n\n    const handleCheckbox = (e) => {\n        if (!e.target.checked) {\n            const dontShowDialog = localStorage.getItem('dontShowCloseDisableReactionsDialog');\n            if (!dontShowDialog) {\n                setModal(true);\n            } else {\n                toggleReward();\n            }\n        } else {\n            setTitleCheckbox(t('StreamerProfile.StreamerProfileEditCoin.enabled'));\n            toggleReward();\n        }\n    }\n\n    const toggleReward = async () => {\n        setSavingChanges(true);\n        const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n        if (userTokensUpdated.data.status === 200) {\n            const userCredentialsUpdated = userTokensUpdated.data;\n            updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n            const rewardUpdated = await updateCustomReward(\n                user.id,\n                userCredentialsUpdated.access_token,\n                rewardId,\n                {\n                    is_paused: reactionsEnabled\n                }\n            );\n\n            if (rewardUpdated.status === 200) {\n                setAlertSetting(user.uid, 'reactionsEnabled', !rewardUpdated.is_paused);\n                setReactionsEnabled(!rewardUpdated.is_paused);\n                setTitleCheckbox(t(!rewardUpdated.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'))\n            } else {\n                switch (rewardUpdated.status) {\n                    case 404:\n                        // Not found (maybe the reward was removed from Twitch)\n                        break;\n                    case 500:\n                        // Twitch internal server error (could not update because of Twitch)\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            setSavingChanges(false);\n        } else {\n            switch (userTokensUpdated.data.status) {\n                case 401:\n                    // Invalid refresh token (need to sign in again)\n                    handleExpiredSession();\n                    break;\n                case 500:\n                    // Twitch internal server error\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    return (\n        <div className={style.containerItereractions}>\n            <h1 className={style.Titulo}>\n                {t('StreamerProfile.StreamerProfileEditCoin.reactions')}\n            </h1>\n            {rewardId !== '' && !savingChanges ?\n                <>\n                <StreamerProfileImgCoin rewardCost={rewardCost} backgroundColor={rewardBackgroundColor} />\n                <div className={style.content_input}>\n                    <div className={style.input}>\n                        {ActiveEditTitle ?\n                            <>\n                            <input\n                                className={style.Visibility_input}\n                                type=\"text\"\n                                maxLength={18}\n                                autoFocus\n                                value={rewardName}\n                                onChange={(event) => setRewardName(event.target.value)}\n                                onKeyPress={saveData} />\n                            <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <ConfirmChange />\n                            </Button>\n                            </>\n                            :\n                            <>\n                            <p className={style.p}>\n                                {rewardName}\n                            </p>\n                            <Button onClick={() => setActiveEditTitle(!ActiveEditTitle)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <img src={iconEdit} alt=\"icons-edit\" />\n                            </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.input}>\n                        {ActiveEditCoins ?\n                            <>\n                            <input\n                                className={style.Visibility_input}\n                                type=\"number\"\n                                autoFocus\n                                value={rewardCost}\n                                onChange={(event) => setRewardCost(event.target.value || 0)}\n                                onKeyPress={saveData} />\n                                <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                    <ConfirmChange />\n                                </Button>\n                            </>\n                            :\n                            <>\n                            <p className={style.p}>\n                                {rewardCost.toLocaleString()}\n                            </p>\n                            <Button onClick={() => setActiveEditCoins(!ActiveEditCoins)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <img src={iconEdit} alt=\"icons-edit\" />\n                            </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.disableInteractions}>\n                        <p className={style.p}>{t('StreamerProfile.StreamerProfileEditCoin.reactions')} {titleCheckbox}</p>\n                        <input\n                            className={style.input_checkbox}\n                            type=\"checkbox\"\n                            id=\"boton\"\n                            checked={reactionsEnabled}\n                            onChange={(e) => handleCheckbox(e)}\n                        />\n                        <label for=\"boton\"></label>\n                    </div>\n                </div>\n                </>\n            :\n                <div style={{ display: 'flex', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n                    <CircularProgress className={classes.circularProgress} size={25} />\n                </div>\n            }\n            <Modal className={style.modalContainer}\n                open={modal}\n                onClose={() => setModal(false)}>\n                <StreamerProfileModalDisableInteractions closeDialog={() => setModal(false)}\n                    disableReward={toggleReward}\n                    setReactionsEnabled={setReactionsEnabled}\n                    setTitleCheckbox={setTitleCheckbox} />\n            </Modal>\n        </div>\n    );\n};\n\nexport default StreamerProfileEditCoin;\n",["224","225"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],["226","227"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx",["228","229"],"import React, { useState, useEffect } from \"react\";\nimport { makeStyles, Button, Checkbox } from \"@material-ui/core\";\nimport { useTranslation } from 'react-i18next';\n\nimport styles from './OnBoarding.module.css';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { useHistory } from \"react-router-dom\";\nimport { createInteractionsReward } from \"../../services/interactionsQapla\";\nimport { writeTestCheer } from \"../../services/database\";\nimport { CHEERS_URI } from \"../../utilities/Constants\";\nimport { notifyBugToDevelopTeam } from \"../../services/discord\";\n\nimport { ReactComponent as Unchecked } from './../../assets/Unchecked.svg';\nimport { ReactComponent as Checked } from './../../assets/Checked.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        backgroundColor: '#00FFDD',\n        color: '#141833',\n        width: '390px',\n        height: '60px',\n        fontSize: '16px',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        textTransform: 'none',\n        borderRadius: '16px',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n    },\n    copyOverlayLinkButton: {\n        backgroundColor: '#202750',\n        display: 'flex',\n        marginTop: '32px',\n        borderRadius: '8px',\n        width: '346px',\n        height: '45px',\n        alignItems: 'center',\n        padding: '0',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#202750'\n        },\n    },\n    testButton: {\n        backgroundColor: '#3B4BF9',\n        color: '#fff',\n        width: '346px',\n        height: '60px',\n        fontsize: '16px',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        textTransform: 'none',\n        borderRadius: '16px',\n        '&:hover': {\n            backgroundColor: '#2E3BC9'\n        },\n    },\n}));\n\nconst OnBoarding = ({ user }) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const [step, setStep] = useState(0);\n    const [channelPointsRewardCost, setChannelPointsRewardCost] = useState(2000);\n    const [errorCode, setErrorCode] = useState(0);\n    const [overlayLinkCopied, setOverlayLinkCopied] = useState(false);\n    const [streamerOverlayLink, setStreamerOverlayLink] = useState(CHEERS_URI);\n    const [stepIndicator, setStepIndicator] = useState(0);\n    const [acceptPolicies, setAcceptPolicies] = useState(true);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if (user && user.id) {\n            setStreamerOverlayLink(`${CHEERS_URI}/${user.id}`);\n        }\n    }, [user]);\n\n    const handleMainButton = () => {\n        if (step === -1) {\n            return openDiscordSupport();\n        }\n        if (step === 0) { // Welcome\n            setStepIndicator(1);\n        }\n        if (step === 1) { // Set channel points cost and create reward\n            return createChannelPointsRewards();\n        }\n        if (step === 3) {\n            setStepIndicator(2);\n        }\n        if (step === 5) {\n            return history.push('/profile');\n        }\n\n        setStep(step + 1);\n    }\n\n    const openDiscordSupport = () => {\n        window.open('https://discord.gg/2UMQ6ZXPkq', '_blank');\n    }\n\n    const createChannelPointsRewards = async () => {\n        setStep(step + 1);\n\n        const result = await createInteractionsReward(user.uid, user.id, user.refreshToken, 'Qapla Reaction', channelPointsRewardCost);\n        if (result.reward.status === 200) {\n            if (result.webhookSubscription) {\n                onSuccessfullChannelPointsCreation();\n            } else {\n                notifyBugToDevelopTeam(`${user.uid} Reward webhook creation error`);\n                onErrorChannelPointsCreation(500);\n            }\n        } else {\n            notifyBugToDevelopTeam(`${user.uid} Reactions reward creation error: ` + JSON.stringify(result.reward));\n            onErrorChannelPointsCreation(result.reward.status);\n        }\n    }\n\n    const onSuccessfullChannelPointsCreation = () => {\n        setStep(step + 2);\n    }\n\n    const onErrorChannelPointsCreation = (eC) => {\n        setErrorCode(eC);\n        setStep(-1);\n    }\n\n    const handleChannePointsRewardCostChange = (e) => {\n        setChannelPointsRewardCost(e.target.value);\n    }\n\n    const handleCopyOverlayLink = () => {\n        copyCheersURL();\n        setOverlayLinkCopied(true);\n    }\n\n    const handleTestOverlay = () => {\n        writeTestCheer(user.uid);\n    }\n\n    const copyCheersURL = () => {\n        navigator.clipboard.writeText(streamerOverlayLink);\n    }\n\n    const handlePoliciesCheckbox = () => setAcceptPolicies(!acceptPolicies);\n\n    return (\n        <div style={{\n            background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), rgba(3, 7, 34, 0.95)',\n            height: '100vh',\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            flexDirection: 'column',\n        }}>\n            <div style={{\n                marginTop: 24,\n                position: 'relative',\n                display: 'flex',\n                backgroundColor: '#141833',\n                width: '450px',\n                height: step === 4 ? '402px' : '256px',\n                borderRadius: '35px',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column',\n                zIndex: 500,\n            }}>\n                {step === -1 &&\n                <>\n                    <img src={`https://media.giphy.com/media/51Uiuy5QBZNkoF3b2Z/giphy.gif`} alt={`Scared Dog`}\n                        style={{\n                            position: 'absolute',\n                            bottom: 190, // 256 - 23 (height of container - hidden part of the image)\n                            width: '238px',\n                            height: '239px',\n                            zIndex: '1000',\n                        }}\n                    />\n                </>\n                }\n                {step === 0 &&\n                <>\n                    <img src={`https://media.giphy.com/media/yQssIXdTQlbN3EEPYj/giphy.gif`} alt={`Barnaby on PC`}\n                        style={{\n                            zIndex: -1,\n                            position: 'absolute',\n                            bottom: 256, // 256 - 23 (height of container - hidden part of the image)\n                            width: '334px',\n                            height: '179px',\n                            resize: ''\n                        }}\n                    />\n                </>\n                }\n                {step === 1 &&\n                <>\n                    <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Fchannelpoints-pink.gif?alt=media&token=f5ca8128-99cc-4d03-9257-e5e6f960cac4'\n                        alt='channel points'\n                        style={{\n                            position: 'absolute',\n                            width: '269px',\n                            height: '134px',\n                            transform: 'rotate(-15deg)',\n                            bottom: 256, // 256 (height of container)\n                        }}\n                    />\n                    <img src={`https://media.giphy.com/media/3oFzlW8dht4DdvwBqg/giphy.gif`} alt={`Barnaby Looking`}\n                        style={{\n                            position: 'absolute',\n                            width: '162px',\n                            height: '151px',\n                            zIndex: '1000',\n                            transform: 'rotate(-3.45deg)',\n                            bottom: 244, // 256 - 12 (height of container - hidden part of the image)\n                        }}\n                    />\n                </>\n                }\n                {step === 2 &&\n                <>\n                    <img src='https://media.giphy.com/media/3o752nnUPE7OzLeSVW/giphy.gif' alt={`Barnaby Working`}\n                        style={{\n                            position: 'absolute',\n                            bottom: 256, // 256 - 8 (height of container - hidden part of the image)\n                            width: '206px',\n                            height: '135px',\n                            zIndex: '1',\n                        }}\n                    />\n                </>\n                }\n                {step === 3 &&\n                <>\n                    <img src='https://media.giphy.com/media/xULW8v7LtZrgcaGvC0/giphy.gif' alt={`Barnaby Says Thanks`}\n                        style={{\n                            position: 'absolute',\n                            bottom: 190, // 256 - 66 (height of container - visible part of the image over the card)\n                            width: '239px',\n                            height: '239px',\n                            zIndex: '1000',\n                        }}\n                    />\n                </>\n                }\n                {step === 4 &&\n                <>\n                    <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Foverlay.gif?alt=media&token=178044eb-f697-44ad-860c-81e93741d276'\n                        alt='overlay'\n                        style={{\n                            position: 'absolute',\n                            bottom: 402, // 402 - 66 (height of container)\n                            width: '300px',\n                            height: '150px',\n                        }}\n                    />\n                    <img src={`https://media.giphy.com/media/3oFzlW8dht4DdvwBqg/giphy.gif`} alt={`Barnaby Looking`}\n                        style={{\n                            position: 'absolute',\n                            bottom: 390, // 256 - 12 (height of container - hidden part of the image)\n                            width: '162px',\n                            height: '151px',\n                            zIndex: '1000',\n                            transform: 'rotate(-3.45deg)',\n                        }}\n                    />\n                </>\n                }\n                {step === -1 &&\n                <>\n                    <p style={{ marginTop: '20px' }} className={styles.headerText}>\n                        {t('Onboarding.errorTitle', { errorCode })}\n                    </p>\n                    <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                        {t('Onboarding.errorDescription')}\n                    </p>\n                </>\n                }\n                {step === 0 &&\n                <>\n                    <p className={styles.headerText}>\n                        {t('Onboarding.letsSetUp')}\n                    </p>\n                    <ul>\n                        <li className={styles.subText}>\n                            {t('Onboarding.processDescriptionP1')}\n                        </li>\n                        <li className={`${styles.subText} ${styles.liMargin}`}>\n                            {t('Onboarding.processDescriptionP2')}\n                        </li>\n                    </ul>\n                </>\n                }\n                {step === 1 &&\n                <>\n                    <p className={styles.headerText}>\n                        {t('Onboarding.setRewardCost')}\n                    </p>\n                    <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                        {t('Onboarding.setRewardCostDescription')}\n                    </p>\n                    <div className={styles.qoinsMainContainer}>\n                        <div className={styles.qoinsSubContainer}>\n                            <input\n                                className={styles.qoins}\n                                value={channelPointsRewardCost}\n                                onChange={handleChannePointsRewardCostChange}\n\n                            />\n                        </div>\n                    </div>\n                </>\n                }\n                {step === 2 &&\n                <>\n                    <h1 className={styles.gradientText}>\n                        {t('Onboarding.workingOnRequest')}\n                    </h1>\n                </>\n                }\n                {step === 3 &&\n                <>\n                    <h1 className={styles.gradientText}>\n                        {t('Onboarding.rewardCreated')}\n                    </h1>\n                </>\n                }\n                {step === 4 &&\n                    <>\n                    <h1 className={styles.headerText}>\n                        {t('Onboarding.addReactionsToOverlay')}\n                    </h1>\n                    <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\n                        {t('Onboarding.copyLink')}\n                    </p>\n                    <div style={{\n                        marginTop: '32px',\n                        display: 'flex',\n                    }}>\n                        <div style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            flexDirection: 'row',\n                        }}>\n                            <p className={styles.overlayResText}>\n                                {t('Onboarding.width')}\n                            </p>\n                            <div className={styles.overlayResNumbContainer}>\n                                <p className={styles.overlayResNumb}>\n                                    1920\n                                </p>\n                            </div>\n                        </div>\n                        <div style={{\n                            marginLeft: '10px',\n                            display: 'flex',\n                            alignItems: 'center',\n                            flexDirection: 'row',\n                        }}>\n                            <p className={styles.overlayResText}>\n                                {t('Onboarding.height')}\n                            </p>\n                            <div className={styles.overlayResNumbContainer}>\n                                <p className={styles.overlayResNumb}>\n                                    1080\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <Button\n                        disableRipple\n                        onClick={handleCopyOverlayLink}\n                        className={classes.copyOverlayLinkButton}>\n                        <p style={{\n                            color: '#6C5DD3',\n                            fontSize: '12px',\n                            fontWeight: '500',\n                            lineHeight: '24px',\n                            textAlign: 'center',\n                            flexGrow: 1,\n                        }}>\n                            {streamerOverlayLink}\n                        </p>\n                        <CopyIcon style={{\n                            justifySelf: 'flex-end',\n                        }} />\n                    </Button>\n                    <div style={{\n                        marginTop: '32px',\n                    }}>\n                        {overlayLinkCopied ?\n                            <Button\n                                onClick={handleTestOverlay}\n                                className={classes.testButton}>\n                                {t('Onboarding.testOverlay')}\n                            </Button>\n                            :\n                            <div style={{ height: '60px' }} />\n                        }\n                    </div>\n                </>\n                }\n                {step === 5 &&\n                    <>\n                        <img src={`https://media.giphy.com/media/3o751SMzZ5TjLWInoQ/giphy.gif`} alt={`Barnaby Thats Rad`}\n                            style={{\n                                position: 'absolute',\n                                bottom: 135, // 256 - 121\n                                width: '351px',\n                                height: '220px',\n                                marginTop: '-100px',\n                            }}\n                        />\n                        <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Fyou%2520are%2520set.gif?alt=media&token=0c285185-9be1-4f56-ae8e-efd67a7e2099'\n                            alt={`you're set`}\n                            style={{\n                                position: 'absolute',\n                                bottom: 24, // 256 - 121\n                                width: '400px',\n                                height: '107px',\n                            }}\n                        />\n                    </>\n                }\n            </div>\n            <div\n                style={{\n                    marginTop: 24,\n                }}>\n                <Button\n                    disabled={step === 2 || (step === 4 && !overlayLinkCopied) || (step === 0 && !acceptPolicies)}\n                    onClick={handleMainButton}\n                    className={classes.button}\n                >\n                    {step === -1 &&\n                        <>\n                            {t('Onboarding.goToDiscord')}\n                        </>\n                    }\n                    {step === 0 &&\n                        <>\n                            {t('Onboarding.letsGo')}\n                        </>\n                    }\n                    {step === 1 &&\n                        <>\n                            {t('Onboarding.createCustomReward')}\n                        </>\n                    }\n                    {step === 2 &&\n                        <>\n                            {t('Onboarding.waitABit')}\n                        </>\n                    }\n                    {step === 3 &&\n                        <>\n                            {t('Onboarding.finishSetUp')}\n                        </>\n                    }\n                    {step === 4 &&\n                        <>\n                            {overlayLinkCopied ?\n                                    t('Onboarding.finishSetUp')\n                                :\n                                    t('Onboarding.copyToTest')\n                            }\n                        </>\n                    }\n                    {step === 5 &&\n                        <>\n                            {t('Onboarding.goToDashboard')}\n                        </>\n                    }\n                </Button>\n            </div>\n            {step !== 5 &&\n                <div style={{\n                    display: 'flex',\n                    position: 'absolute',\n                    bottom: 72,\n                }}>\n                    <div style={{\n                        backgroundColor: stepIndicator === 0 ? '#00FEDF' : '#00FEDF8A',\n                        height: '8px',\n                        width: stepIndicator === 0 ? '28px' : '8px',\n                        borderRadius: '4px',\n                        margin: '0px 6.5px',\n                    }} />\n                    <div style={{\n                        backgroundColor: stepIndicator === 1 ? '#00FEDF' : '#00FEDF8A',\n                        height: '8px',\n                        width: stepIndicator === 1 ? '28px' : '8px',\n                        borderRadius: '4px',\n                        margin: '0px 6.5px',\n\n                    }} />\n                    <div style={{\n                        backgroundColor: stepIndicator === 2 ? '#00FEDF' : '#00FEDF8A',\n                        height: '8px',\n                        width: stepIndicator === 2 ? '28px' : '8px',\n                        borderRadius: '4px',\n                        margin: '0px 6.5px',\n                    }} />\n                </div>\n            }\n            {step === 0 &&\n                <div style={{ position: 'absolute', bottom: 24, display: 'flex', alignItems: 'center' }}>\n                    <Checkbox\n                        icon={<Unchecked />}\n                        checkedIcon={<Checked />}\n                        onChange={handlePoliciesCheckbox}\n                        checked={acceptPolicies}\n                        style={{ paddingRight: '0px' }}\n                    />\n                    <div style={{ opacity: acceptPolicies ? 1 : 0.7, color: '#FFF', paddingLeft: '6px' }}>\n                        {t('Onboarding.policiesP1')}\n                        <a href={t('Onboarding.termsOfUseUrl')} target=\"_blank\"\n                            style={{ color: '#00FFDD', marginLeft: 4, marginRight: 4, textDecoration: 'none' }}>\n                            {t('Onboarding.policiesP2')}\n                        </a>\n                        {t('Onboarding.policiesP3')}\n                        <a href={t('Onboarding.privacyPolicy')}\n                            target=\"_blank\"\n                            style={{ color: '#00FFDD', marginLeft: 4, textDecoration: 'none' }}>\n                            {t('Onboarding.policiesP4')}\n                        </a>\n                    </div>\n                </div>\n            }\n        </div>\n    )\n\n}\n\nexport default OnBoarding;",["230","231"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",["232","233","234","235","236","237"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["238"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",["239"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\nimport { notifyActivationWithReferralCode } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    containerStyle: {\n        padding: 0\n    },\n    background: {\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        minHeight: '100vh',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    card: {\n        backgroundColor: '#141833',\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\n        borderRadius: '35px',\n        [theme.breakpoints.up('md')]: {\n            width: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        paddingTop: 24,\n        paddingBottom: 0\n    },\n    title: {\n        fontWeight: '600',\n        fontSize: '18px',\n        lineHeight: '32px',\n        textAlign: 'center',\n        color: '#FFFFFF',\n        whiteSpace: 'pre-line'\n    },\n    instructions: {\n        marginTop: 15,\n        fontWeight: '400',\n        fontSize: '14px',\n        lineHeight: '22px',\n        textAlign: 'center',\n        color: '#8F9BBA',\n        whiteSpace: 'pre-line'\n    },\n    textInput: {\n        textAlign: 'center',\n        paddingTop: 12,\n        paddingBottom: 12\n    },\n    activeFreeTrialButton: {\n        marginTop: 32,\n        backgroundColor: '#3B4BF9',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        },\n        marginBottom: 60\n    },\n    noCode: {\n        textAlign: 'center',\n        width: '100%',\n        marginTop: 32,\n        fontWeight: '600',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    referralProgram: {\n        textAlign: 'center',\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        marginTop: 32,\n        fontWeight: '400',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    subscribeButton: {\n        marginTop: 40,\n        backgroundColor: '#00FFDD',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    subscribeButtonCointainer: {\n        marginBottom: 24,\n        marginTop: 180\n    }\n}));\n\nconst RequestActivation = ({ user, onSuccessActivation }) => {\n    const [referralCode, setReferralCode] = useState('');\n    const [validatingCode, setValidatingCode] = useState(false);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    const validateCode = async () => {\n        if (user.broadcasterType === '') {\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        setValidatingCode(true);\n        if (referralCode) {\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\n            if (referrerUid) {\n                if (referrerUid !== user.uid) {\n                    if (!user.referredBy) {\n                        activateFreeTrialWithReferralCode(referrerUid, {\n                            redemptionsPerStream: 40,\n                            streamsIncluded: 2\n                        });\n                    } else {\n                        setValidatingCode(false);\n                        alert('Ya usaste un código de referido antes');\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('No puedes usar tu propio código');\n                }\n            } else {\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\n                if (invitationCodeSnap.exists()) {\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('Código invalido');\n                }\n            }\n        } else {\n            setValidatingCode(false);\n        }\n    }\n\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n        await updateStreamerProfile(user.uid, {\n            referredBy: referrerUid,\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\n\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\n\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\n\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n         await updateStreamerProfile(user.uid, {\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await removeInvitationCode(code);\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\n            <div className={classes.background}>\n                <div>\n                <Card className={classes.card}>\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\n                    </div>\n                    <CardContent>\n                        <p className={classes.title}>\n                            {t('RequestActivation.title')} 🚀\n                        </p>\n                        <p className={classes.instructions}>\n                            {validatingCode || !user.referredBy ?\n                                <>\n                                    {t('RequestActivation.descriptionP1')}\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\n                                    {t('RequestActivation.descriptionP2')}\n                                </>\n                                :\n                                t('RequestActivation.buyAMembership')\n                            }\n                        </p>\n                        {validatingCode || !user.referredBy ?\n                            <>\n                                <StreamerTextInput\n                                    placeholder={t('RequestActivation.referralCode')}\n                                    fullWidth\n                                    containerStyle={{ marginTop: 24 }}\n                                    classes={{ input: classes.textInput }}\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\n                                    value={referralCode}\n                                    onChange={(e) => setReferralCode(e.target.value)} />\n                                {validatingCode ?\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\n                                    </div>\n                                    :\n                                    <Button\n                                        onClick={validateCode}\n                                        fullWidth\n                                        classes={{\n                                            root: classes.activeFreeTrialButton\n                                        }}>\n                                        {t('RequestActivation.startFreeTrial')}\n                                    </Button>\n                                }\n                            </>\n                            :\n                            <div className={classes.subscribeButtonCointainer}>\n                                <Button\n                                    fullWidth\n                                    onClick={() => history.push('/membership')}\n                                    classes={{ root: classes.subscribeButton }}>\n                                    {t('RequestActivation.subscribe')}\n                                </Button>\n                            </div>\n                        }\n                    </CardContent>\n                </Card>\n                {validatingCode || !user.referredBy ?\n                    <>\n                        <p className={classes.noCode}>\n                            {t('RequestActivation.dontHaveACode')}\n                        </p>\n                        <Button\n                            fullWidth\n                            onClick={() => history.push('/membership')}\n                            classes={{ root: classes.subscribeButton }}>\n                            {t('RequestActivation.subscribe')}\n                        </Button>\n                    </>\n                    :\n                    <p className={classes.referralProgram}>\n                        {t('RequestActivation.referralProgramP1')}\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\n                        {t('RequestActivation.referralProgramP2')}\n                    </p>\n                }\n                </div>\n            </div>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default RequestActivation;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["240","241","242","243"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Button,\n    Hidden\n} from '@material-ui/core';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as QaplaGaming } from './../../assets/QaplaGamingLandingPage.svg';\nimport styles from './StreamersSignin.module.css';\nimport SignInImage from './../../assets/SignIn.png';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\nimport { getUserToken, subscribeStreamerToTwitchWebhook, subscribeStreamerToMailerLiteGroup } from '../../services/functions';\nimport { createStreamerProfile, getInteractionsRewardData, updateStreamerProfile, userHasPublicProfile } from '../../services/database';\nimport { webhookStreamOffline, webhookStreamOnline } from '../../utilities/Constants';\nimport { getTwitchUserData } from '../../services/twitch';\n\nvar utc = require('dayjs/plugin/utc');\ndayjs.extend(utc);\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst StreamersSignin = ({ user, title }) => {\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\n    const [openTermsAndConditionsDialog, setOpenTermsAndConditionsDialog] = useState(false);\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function checkIfUsersIsSigningIn() {\n            const twitchClientCode = query.get('code');\n\n            if (!isLoadingAuth && !user && twitchClientCode) {\n                setIsLoadingAuth(true);\n                const tokenData = await getUserToken(twitchClientCode);\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\n\n                    if (user.userData.isNewUser) {\n                        try {\n                            await subscribeStreamerToMailerLiteGroup(user.userData.email, user.userData.displayName);\n                        } catch (error) {\n                            console.error(error);\n                        }\n\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOnline.type, webhookStreamOnline.callback);\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOffline.type, webhookStreamOffline.callback);\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\n                    }\n\n                    try {\n                        await updateStreamerProfile(user.firebaseAuthUser.user.uid, {\n                            twitchAccessToken: tokenData.data.access_token,\n                            refreshToken: tokenData.data.refresh_token,\n                            displayName: user.userData.displayName,\n                            photoUrl: user.userData.photoUrl,\n                            broadcasterType: user.userData.broadcasterType\n                        });\n                    } catch (error) {\n                        console.log(error);\n                    }\n                } else {\n                    alert(t('StreamersSignin.alerts.errorSignIn'));\n                }\n            }\n        }\n        async function redirectUser(uid) {\n            const interactionsRewardData = await getInteractionsRewardData(user.uid);\n            if (interactionsRewardData.exists()) {\n                const userHasBeenRedirectedToCreateProfile = localStorage.getItem('userHasBeenRedirectedToCreateProfile');\n\n                if (userHasBeenRedirectedToCreateProfile) {\n                    history.push('/profile');\n                } else {\n                    if (await userHasPublicProfile(uid)) {\n                        history.push('/profile');\n                    } else {\n                        history.push('/editProfile');\n                        localStorage.setItem('userHasBeenRedirectedToCreateProfile', 'true');\n                    }\n                }\n            } else {\n                history.push('/onboarding');\n            }\n        }\n\n        checkIfUsersIsSigningIn();\n\n        if (user) {\n            redirectUser(user.uid);\n        }\n    }, [user, history, isLoadingAuth]);\n\n    const signIn = () => {\n        setIsLoadingAuth(true);\n        signInWithTwitch();\n        setIsLoadingAuth(false);\n    }\n\n    const closeTermsAndConditionsModal = () => setOpenTermsAndConditionsDialog(false);\n\n    if (user === undefined) {\n        return (\n            <StreamerDashboardContainer>\n                <Grid item md='1' />\n                <Grid item md='6' className={styles.mainContainer}>\n                    <QaplaGaming style={{ marginTop: '100px', marginBottom: '80px', transform: 'scale(0.9)' }} />\n                    <p className={styles.getStarted}>\n                        {title}\n                    </p>\n                    <div className={styles.formContainer}>\n                        <Button variant='contained'\n                            className={styles.continueButton}\n                            disabled={isLoadingAuth}\n                            startIcon={<TwitchIcon />}\n                            onClick={signIn}>\n                            {!isLoadingAuth ?\n                                t('StreamersSignin.signIn')\n                                :\n                                t('StreamersSignin.loading')\n                            }\n                        </Button>\n                        <p style={{ marginTop: '38px', color: '#FFF', fontSize: '.8rem' }}>\n                            {t('StreamersSignin.termsAndConditionsP1')}\n                            <a style={{ cursor: 'pointer', color: '#3B4BF9' }} href={t('Onboarding.termsOfUseUrl')} target='_blank'>\n                                {t('StreamersSignin.termsAndConditionsP2')}\n                            </a>\n                        </p>\n                    </div>\n                    <Hidden smDown>\n                        <div className={styles.bottomImage} >\n                            <img src={SignInImage} alt='Sign In' />\n                        </div>\n                    </Hidden>\n                </Grid>\n                <Grid item md='1' />\n            </StreamerDashboardContainer>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamersSignin;",["244","245"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["246","247"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["248","249","250"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["251","252"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["253","254","255","256","257"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(4) + 1,\n        paddingTop: theme.spacing(4) + 1,\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["258"],"import React, { useState, useEffect } from 'react';\nimport {\n    makeStyles,\n    Grid,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    withStyles,\n    Avatar,\n    Hidden,\n    InputLabel,\n    InputAdornment\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next'\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\nimport { ReactComponent as EyeIcon } from './../../assets/EyeIcon.svg';\nimport { ReactComponent as DownloadIcon } from './../../assets/DownloadIcon.svg';\n\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport BackButton from '../BackButton/BackButton';\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate } from '../../services/database';\nimport { sednPushNotificationToTopic } from '../../services/functions';\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: '24px',\n        color: '#FFF'\n    },\n    description: {\n        fontSize: '12px',\n        color: 'rgba(255,255,255,0.60)',\n        lineHeight: '18px',\n        paddingRight: '16px',\n        marginTop: '16px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        marginTop: '32px'\n    },\n    containerTextArea: {\n        marginRight: '2.5rem'\n    },\n    textArea: {\n        paddingTop: '1rem'\n    },\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    participantsColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'center'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginBottom: 16\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst SectionHeader = ({ title, description }) => {\n    const classes = useStyles();\n\n    return (\n        <div style={{ marginTop: '48px' }}>\n            <p className={classes.title}>\n                {title}\n            </p>\n            <p className={classes.description}>\n                {description}\n            </p>\n        </div>\n    );\n};\n\nconst EditStreamerEvent = ({ user }) => {\n    const { streamType } = useLocation().state;\n    const { streamId } = useParams();\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\n    const [notificationBody, setNotificationBody] = useState('');\n    const [participantsList, setParticipantsList] = useState({});\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function setStreamData() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\n                if (timeStamp.exists()) {\n                    setSelectedDate(new Date(timeStamp.val()));\n                    setDisplayDate(new Date(timeStamp.val()));\n                    setFirstTimestamp(new Date(timeStamp.val()));\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\n                }\n            }\n        }\n\n        async function setStreamParticipantsList() {\n            const participantsList = await getStreamParticipantsList(streamId);\n            if (participantsList.exists()) {\n                setParticipantsList(participantsList.val());\n            }\n        }\n\n        async function setStreamTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n                setTitle(title.val());\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                if (user.uid) {\n                    const title = await getPastStreamTitle(user.uid, streamId);\n                    setTitle(title.val());\n                }\n            }\n        }\n\n        setStreamData();\n        setStreamParticipantsList();\n        setStreamTitle();\n    }, [streamId, streamType, user]);\n\n    const sendNotification = async () => {\n        const bodys = {\n            es: notificationBody,\n            en: notificationBody\n        };\n\n        const titles = {\n            es: title['en'],\n            en: title['en']\n        };\n\n        try {\n            sednPushNotificationToTopic(streamId, titles, bodys);\n            alert(t('EditStream.alerts.sent'));\n            setNotificationBody('');\n        } catch (error) {\n            alert(t('EditStream.alerts.errorSent'));\n        }\n    }\n\n    const onChangeNotificationBody = (e) => {\n        const body = e.target.value;\n        if (body.length <= 140) {\n            setNotificationBody(body);\n        }\n    }\n\n    const saveDate = async () => {\n        if (selectedDate) {\n            const minValidDate = new Date().getTime() + 300000;\n            if (selectedDate.getTime() >= minValidDate) {\n                const dateRef = new Date(selectedDate);\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\n\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\n\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\n\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\n                let localHour = `${localHours}:${localMinutes}`;\n\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\n                alert(t('EditStream.alerts.updated'));\n            } else {\n                alert(t('EditStream.alerts.errorDate'))\n            }\n        } else {\n            alert(t('EditStream.alerts.errorDate'));\n        }\n    }\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid xs={12}>\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\n                        onClick={history.goBack} />\n                </Grid>\n                {streamType === SCHEDULED_EVENT_TYPE &&\n                    <>\n                        <Grid xs={6}>\n                            <SectionHeader\n                                title={t('EditStream.change')}\n                                description={t('EditStream.changeDesc')} />\n                            <Grid item sm={12}>\n                                <Grid container>\n                                    {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\n                                        <></>\n                                        :\n                                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                                            <Grid container style={{\n                                                marginTop: '24px'\n                                            }}>\n                                                <Grid item sm={7} md={4} spacing={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.date')}\n                                                    </InputLabel>\n                                                    <KeyboardDatePicker\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        open={calendarOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\n                                                        onClose={() => setCalendarOpen(false)}\n                                                        clearable\n                                                        disablePast\n                                                        disableToolbar\n                                                        autoOk\n                                                        value={displayDate}\n                                                        placeholder='10-10-2021'\n                                                        onChange={handleDateChange}\n                                                        minDate={new Date()}\n                                                        format='DD-MM-YY ddd'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <CalendarIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                                <div style={{ minWidth: '16px' }} />\n                                                <Grid item sm={7} md={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.time')}\n                                                    </InputLabel>\n                                                    <KeyboardTimePicker\n                                                        open={clockOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\n                                                        onOpen={() => { }}\n                                                        onClose={() => setClockOpen(false)}\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        autoOk\n                                                        error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\n                                                        value={displayDate}\n                                                        placeholder='08:00 AM'\n                                                        onChange={handleDateChange}\n                                                        // mask='__:__ _M'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <TimeIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </MuiPickersUtilsProvider>\n                                    }\n                                    <ContainedButton className={classes.button}\n                                        onClick={saveDate}\n                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime()}>\n                                        {t('EditStream.save')}\n                                    </ContainedButton>\n                                </Grid>\n                            </Grid>\n                            <SectionHeader title={t('EditStream.sendMessage')}\n                                description={t('EditStream.sendMessageDesc')} />\n                            <Grid item md={12} style={{\n                                marginTop: '24px'\n                            }}>\n                                <StreamerTextInput placeholder={t('EditStream.limit')}\n                                    multiline\n                                    rows={3}\n                                    fullWidth\n                                    textInputClassName={classes.textArea}\n                                    containerClassName={classes.containerTextArea}\n                                    value={notificationBody}\n                                    onChange={onChangeNotificationBody} />\n                                <ContainedButton className={classes.button}\n                                    onClick={sendNotification}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                                </ContainedButton>\n                            </Grid>\n                        </Grid>\n                        {/** To define how this section is going to work\n                            <Grid xs={6}>\n                                <SectionHeader title='Private Rooms'\n                                    description='If you are hosting a private room and want to give access to the participants of the event, you can share the ID with them directly in the Qapla app. Participants will get a notification to see the ID.' />\n                                <StreamerTextInput label='ID'\n                                    placeholder='ID' />\n                                <br/>\n                                <ContainedButton className={classes.button}>\n                                    Send\n                                </ContainedButton>\n                            </Grid>\n                        */}\n                    </>\n                }\n                <Grid xs={12}>\n                    <SectionHeader title={t('EditStream.participants')} />\n                    <TableContainer className={classes.tableContainer}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCellStyled align='center' padding='checkbox'>\n                                        <ProfileIcon />\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.twitch')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.game')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.qapla')}</TableCellStyled>\n                                    <TableCellStyled className={classes.participantsColumn}>\n                                        <EyeIcon /> <p>{Object.keys(participantsList).length}</p>\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>\n                                        <ContainedButton\n                                            startIcon={<DownloadIcon />}>\n                                            {t('EditStream.table.download')}\n                                        </ContainedButton>\n                                    </TableCellStyled>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {Object.keys(participantsList).map((participantUid, index) => (\n                                    <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\n                                        key={`Participant-${participantUid}`}>\n                                        <TableCellStyled align='center' className={classes.firstCell}>\n                                            <Avatar className={classes.avatar} />\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled className={classes.lastCell}>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n            </Grid>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default EditStreamerEvent;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["259"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],["260","261"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["262","263","264"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n        if (initialLabel && value === undefined) {\n            setSelectedLabel(initialLabel);\n        }\n    }, [data, initialLabel, value])\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["265","266"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/branch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",["267","268"],{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"274","line":273,"column":21,"nodeType":"275","messageId":"276","endLine":273,"endColumn":31},{"ruleId":"277","severity":1,"message":"278","line":457,"column":8,"nodeType":"279","endLine":457,"endColumn":14,"suggestions":"280"},{"ruleId":"273","severity":1,"message":"281","line":413,"column":11,"nodeType":"275","messageId":"276","endLine":413,"endColumn":26},{"ruleId":"269","replacedBy":"282"},{"ruleId":"271","replacedBy":"283"},{"ruleId":"277","severity":1,"message":"284","line":71,"column":8,"nodeType":"279","endLine":71,"endColumn":46,"suggestions":"285"},{"ruleId":"269","replacedBy":"286"},{"ruleId":"271","replacedBy":"287"},{"ruleId":"269","replacedBy":"288"},{"ruleId":"271","replacedBy":"289"},{"ruleId":"290","severity":1,"message":"291","line":520,"column":65,"nodeType":"292","endLine":520,"endColumn":80},{"ruleId":"290","severity":1,"message":"291","line":526,"column":29,"nodeType":"292","endLine":526,"endColumn":44},{"ruleId":"269","replacedBy":"293"},{"ruleId":"271","replacedBy":"294"},{"ruleId":"273","severity":1,"message":"295","line":8,"column":8,"nodeType":"275","messageId":"276","endLine":8,"endColumn":23},{"ruleId":"273","severity":1,"message":"296","line":10,"column":10,"nodeType":"275","messageId":"276","endLine":10,"endColumn":20},{"ruleId":"273","severity":1,"message":"297","line":72,"column":7,"nodeType":"275","messageId":"276","endLine":72,"endColumn":16},{"ruleId":"273","severity":1,"message":"298","line":130,"column":11,"nodeType":"275","messageId":"276","endLine":130,"endColumn":29},{"ruleId":"273","severity":1,"message":"299","line":223,"column":11,"nodeType":"275","messageId":"276","endLine":223,"endColumn":32},{"ruleId":"273","severity":1,"message":"300","line":235,"column":11,"nodeType":"275","messageId":"276","endLine":235,"endColumn":22},{"ruleId":"301","severity":1,"message":"302","line":16,"column":1,"nodeType":"303","endLine":16,"endColumn":52},{"ruleId":"273","severity":1,"message":"304","line":1,"column":17,"nodeType":"275","messageId":"276","endLine":1,"endColumn":26},{"ruleId":"273","severity":1,"message":"305","line":33,"column":12,"nodeType":"275","messageId":"276","endLine":33,"endColumn":40},{"ruleId":"277","severity":1,"message":"306","line":102,"column":8,"nodeType":"279","endLine":102,"endColumn":38,"suggestions":"307"},{"ruleId":"273","severity":1,"message":"308","line":110,"column":11,"nodeType":"275","messageId":"276","endLine":110,"endColumn":39},{"ruleId":"290","severity":1,"message":"291","line":135,"column":117,"nodeType":"292","endLine":135,"endColumn":132},{"ruleId":"269","replacedBy":"309"},{"ruleId":"271","replacedBy":"310"},{"ruleId":"269","replacedBy":"311"},{"ruleId":"271","replacedBy":"312"},{"ruleId":"273","severity":1,"message":"313","line":125,"column":27,"nodeType":"275","messageId":"276","endLine":125,"endColumn":43},{"ruleId":"273","severity":1,"message":"314","line":126,"column":24,"nodeType":"275","messageId":"276","endLine":126,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":269,"column":103,"nodeType":"317","messageId":"318","endLine":269,"endColumn":105},{"ruleId":"277","severity":1,"message":"306","line":179,"column":8,"nodeType":"279","endLine":179,"endColumn":14,"suggestions":"319"},{"ruleId":"320","severity":1,"message":"321","line":235,"column":25,"nodeType":"322","endLine":235,"endColumn":49},{"ruleId":"273","severity":1,"message":"323","line":4,"column":5,"nodeType":"275","messageId":"276","endLine":4,"endColumn":11},{"ruleId":"273","severity":1,"message":"324","line":5,"column":5,"nodeType":"275","messageId":"276","endLine":5,"endColumn":12},{"ruleId":"273","severity":1,"message":"325","line":6,"column":5,"nodeType":"275","messageId":"276","endLine":6,"endColumn":9},{"ruleId":"273","severity":1,"message":"326","line":7,"column":5,"nodeType":"275","messageId":"276","endLine":7,"endColumn":11},{"ruleId":"273","severity":1,"message":"327","line":14,"column":8,"nodeType":"275","messageId":"276","endLine":14,"endColumn":23},{"ruleId":"273","severity":1,"message":"328","line":13,"column":5,"nodeType":"275","messageId":"276","endLine":13,"endColumn":11},{"ruleId":"301","severity":1,"message":"302","line":26,"column":1,"nodeType":"303","endLine":26,"endColumn":51},{"ruleId":"269","replacedBy":"329"},{"ruleId":"271","replacedBy":"330"},{"ruleId":"273","severity":1,"message":"331","line":4,"column":5,"nodeType":"275","messageId":"276","endLine":4,"endColumn":14},{"ruleId":"273","severity":1,"message":"332","line":5,"column":5,"nodeType":"275","messageId":"276","endLine":5,"endColumn":17},{"ruleId":"273","severity":1,"message":"333","line":6,"column":5,"nodeType":"275","messageId":"276","endLine":6,"endColumn":15},{"ruleId":"273","severity":1,"message":"334","line":7,"column":28,"nodeType":"275","messageId":"276","endLine":7,"endColumn":37},{"ruleId":"273","severity":1,"message":"335","line":21,"column":11,"nodeType":"275","messageId":"276","endLine":21,"endColumn":18},{"ruleId":"273","severity":1,"message":"336","line":26,"column":7,"nodeType":"275","messageId":"276","endLine":26,"endColumn":35},{"ruleId":"337","severity":1,"message":"338","line":565,"column":9,"nodeType":"339","messageId":"340","endLine":565,"endColumn":14},"no-native-reassign",["341"],"no-negated-in-lhs",["342"],"no-unused-vars","'setBalance' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["343"],"'shareStreamLink' is assigned a value but never used.",["341"],["342"],"React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["344"],["341"],["342"],["341"],["342"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["341"],["342"],"'ContainedButton' is defined but never used.","'CHEERS_URI' is defined but never used.","'QaplaDots' is assigned a value but never used.","'continueButtonForm' is assigned a value but never used.","'renderBackgroundColor' is assigned a value but never used.","'renderImage' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'openTermsAndConditionsDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["345"],"'closeTermsAndConditionsModal' is assigned a value but never used.",["341"],["342"],["341"],["342"],"'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["346"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","'Hidden' is defined but never used.",["341"],["342"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","'streamerCustomMediaForCheers' is assigned a value but never used.","no-dupe-keys","Duplicate key 'media'.","ObjectExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"355","text":"356"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"357","text":"358"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"359","text":"360"},"Update the dependencies array to be: [query, t, user]",{"range":"361","text":"362"},[17811,17817],"[setPendingMessages, user]",[3563,3601],"[user.uid, user.id, user.refreshToken, t, history]",[4606,4636],"[user, history, isLoadingAuth, query, t]",[4767,4773],"[query, t, user]"]
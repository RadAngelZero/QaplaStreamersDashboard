[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"4"},{"size":27427,"mtime":1637878095585,"results":"5","hashOfConfig":"6"},{"size":1439,"mtime":1637878182238,"results":"7","hashOfConfig":"6"},{"size":16807,"mtime":1637879747313,"results":"8","hashOfConfig":"6"},{"size":890,"mtime":1637879786783,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"rfo3np",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx",["19"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44"],"import React, { useEffect, useState } from 'react';\nimport { withStyles, makeStyles, Grid, AccordionSummary, Avatar, Button, Chip, Switch, AppBar, Tabs, Tab, TextField, Box } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport styles from './StreamerProfileEditor.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as AddIcon } from './../../assets/AddIcon.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getStreamerLinks, getStreamerPublicProfile, loadStreamsByStatus, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\nimport StreamCard from '../StreamCard/StreamCard';\n\nimport { ReactComponent as BitsIcon } from './../../assets/BitsIcon.svg';\nimport { ReactComponent as QoinsIcon } from './../../assets/QoinsIcon.svg';\nimport { ReactComponent as InfoSquare } from './../../assets/InfoSquare.svg';\nimport { ReactComponent as Arrow } from './../../assets/Arrow.svg';\nimport CheersBitsRecordDialog from '../CheersBitsRecordDialog/CheersBitsRecordDialog';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport { uploadImage } from '../../services/storage';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    linkPlaceholder: {\n        '&::placeholder': {\n            color: 'rgba(108, 93, 211, 0.4)'\n        }\n    },\n    linkInput: {\n        backgroundColor: '#202750'\n    }\n}));\n\nconst EditBioButton = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        '&:hover': {\n            backgroundColor: '#24456680'\n        },\n        '&:disabled': {\n            backgroundColor: '#272D5780',\n            color: '#FFFFFF99',\n        }\n    },\n\n}))(Button);\n\nconst QaplaChip = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFFA6',\n        padding: '0 0.4rem',\n        '&:focus' : {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover' : {\n            backgroundColor: '#4040FF4F',\n            opacity: 0.8\n        }\n    },\n    deletable: {\n        backgroundColor: '#4040FF4F',\n        color: '#FFFFFFA6',\n        padding: '0 0.4rem',\n        '&:focus' : {\n            backgroundColor: '#4040FF4F',\n        }\n    },\n    deleteIcon: {\n        color: '#FFFD',\n        '&:hover': {\n            color: '#F00D'\n        },\n        '&:active': {\n            color: '#A00D'\n        }\n    }\n}))(Chip)\n\nconst QaplaSwitch = withStyles(() => ({\n    root: {\n\n    },\n    track: {\n        backgroundColor: '#202750'\n    },\n    checked: {\n        color: '#2CE9D2 !important',\n        '& + .MuiSwitch-track': {\n            backgroundColor: '#202750 !important'\n        }\n    },\n    thumb: {\n\n    }\n}))(Switch);\n\nconst QaplaTabs = withStyles({\n    root: {\n        minHeight: 0\n    },\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            // maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#0AFFD2',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        padding: '0 0.6rem',\n        minWidth: 0,\n        minHeight: 0,\n        textTransform: 'none',\n        color: '#fff',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n\nfunction TabPanel(props) {\n    const { children, value, index, className, ...other } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`profile-editor-tabpanel-${index}`}\n            aria-labelledby={`profile-editor-tab-${index}`}\n            {...other}\n            className={className}\n        >\n            {value === index && (\n                <>\n                    {children}\n                </>\n            )}\n        </div>\n    )\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst StreamerProfileEditor = ({ user }) => {\n    const socialLinksInitialValue = [\n        {\n            socialPage: 'Twitch',\n            value: ''\n        },\n        {\n            socialPage: 'Twitter',\n            value: ''\n        },\n        {\n            socialPage: 'Instagram',\n            value: ''\n        },\n        {\n            socialPage: 'Discord',\n            value: ''\n        },\n        {\n            socialPage: 'Youtube',\n            value: ''\n        },\n    ];\n\n    const socialLinksPlaceholders = {\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\n        Discord: `https://discord.gg/inviteCode`,\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`\n    };\n\n    const classes = useStyles();\n    const [dataIsFetched, setDataIsFetched] = useState(false);\n    const [selectedTab, setSelectedTab] = useState(0);\n    const [editingBio, setEditingBio] = useState(false);\n    const [streamerBio, setStreamerBio] = useState('');\n    const [backgroundUrl, setBackgroundUrl] = useState('https://wallpaperaccess.com/full/2124973.png');\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\n    const [streamerTags, setStreamerTags] = useState([]);\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\n\n    useEffect(() => {\n        async function getStreamerInfo() {\n            const info = await getStreamerPublicProfile(user.uid);\n            if (info.exists()) {\n                const { bio, tags, backgroundUrl } = info.val();\n                setStreamerBio(bio);\n                setBackgroundUrl(backgroundUrl || 'https://wallpaperaccess.com/full/2124973.png');\n                setStreamerTags(tags);\n            }\n\n            const links = await getStreamerLinks(user.uid);\n            if (links.exists()) {\n                setSocialLinks(links.val());\n            } else {\n                setSocialLinks(socialLinksInitialValue);\n            }\n\n            setDataIsFetched(true);\n        }\n\n        if (user && user.uid) {\n            getStreamerInfo();\n        }\n    }, [user]);\n\n    const handleTabChange = (event, newValue) => {\n        setSelectedTab(newValue)\n    }\n\n    const handleTagDelete = async (indexToDelete) => {\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\n\n        try {\n            await updateStreamerPublicProfile(user.uid, { tags });\n            setStreamerTags(tags);\n        } catch (error) {\n            console.log(error);\n            alert('Hubo un problema al eliminar el tag, intentalo mas tarde o contacta con soporte tecnico');\n        }\n    }\n\n    const updateSocialLinks = (value, index) => {\n        setSocialLinksChanged(true);\n        let newArray = [...socialLinks];\n        newArray[index] = {\n            ...newArray[index],\n            value\n        };\n\n        setSocialLinks(newArray);\n    }\n\n    const saveLinks = async () => {\n        // Creates an array without the placeholder value\n        const objectToSave = {};\n        socialLinks.forEach((link, index) => {\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\n        });\n\n        try {\n            await saveStreamerLinks(user.uid, objectToSave);\n        } catch (error) {\n            console.log(error);\n            alert('Hubo un problema al actualizar los links, intentalo mas tarde o contacta con soporte tecnico');\n        }\n        setSocialLinksChanged(false);\n    }\n\n    const saveBio = async () => {\n        try {\n            await updateStreamerPublicProfile(user.uid, { bio: streamerBio });\n            setEditingBio(false);\n        } catch (error) {\n            console.log(error);\n            alert('Hubo un problema al actualizar la bio, intentalo mas tarde o contacta con soporte tecnico');\n        }\n    }\n\n    const addTag = async () => {\n        const value = window.prompt('Tag:');\n\n        if (value) {\n            let tags = [...streamerTags];\n            tags.push(value);\n\n            try {\n                await updateStreamerPublicProfile(user.uid, { tags });\n                setStreamerTags(tags);\n            } catch (error) {\n                console.log(error);\n                alert('Hubo un problema al agregar el tag, intentalo mas tarde o contacta con soporte tecnico');\n            }\n        }\n    }\n\n    const updateTag = async (index, currentValue) => {\n        const value = window.prompt('Tag:', currentValue);\n\n        if (value) {\n            let tags = [...streamerTags];\n            tags[index] = value;\n\n            try {\n                await updateStreamerPublicProfile(user.uid, { tags });\n                setStreamerTags(tags);\n            } catch (error) {\n                console.log(error);\n                alert('Hubo un problema al actualizar el tag, intentalo mas tarde o contacta con soporte tecnico');\n            }\n        }\n    }\n\n    const uploadBackgroundImage = (e) => {\n        const newBackgroundImage = (e.target.files[0]);\n\n        const reader = new FileReader();\n        reader.addEventListener('load', () => {\n            setBackgroundUrl(reader.result);\n        });\n\n        reader.readAsDataURL(e.target.files[0]);\n\n        uploadImage(\n            newBackgroundImage,\n            `/StreamersProfilesBackgroundImages/${user.uid}`,\n            (progressValue) => setUploadImageStatus(progressValue * 100),\n            (error) => { alert('Error al agregar imagen'); console.log(error); },\n            async (url) => {\n                try {\n                    await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\n                    alert('Imagen guardada correctamente');\n                } catch (error) {\n                    alert('Hubo un error al guardar la imagen');\n                    console.log(error);\n                }\n            }\n        );\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\n            {dataIsFetched &&\n                <>\n                <div className={styles.coverContainer}>\n                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\n                </div>\n                <div className={styles.profileContainer}>\n                    <div className={styles.profilePicContainer}>\n                        <img src={user.photoUrl} alt='User profile image' className={styles.profilePic} />\n                    </div>\n                    <div className={styles.streamerNameAndEditBioButtonContainer}>\n                        <div className={styles.streamerNameContainer}>\n                            <p className={styles.streamerName}>\n                                {user.displayName}\n                            </p>\n                            <div className={styles.founderBadgeContainer}>\n                                <FounderBadge className={styles.founderBadge} />\n                            </div>\n                        </div>\n                        <div className={styles.editBioButtonContainer}>\n                            <EditBioButton variant='contained'\n                                onClick={() => !editingBio ? setEditingBio(true) : saveBio()}>\n                                {!editingBio ?\n                                    'Editar Bio'\n                                    :\n                                    'Guardar cambios'\n                                }\n                            </EditBioButton>\n                        </div>\n                    </div>\n                    <div className={styles.twitchURLContainer}>\n                        <a href='https://www.twitch.tv' target='_blank' rel='noreferrer' className={styles.twitchURL} >https://www.twitch.tv</a>\n                    </div>\n                    <div className={styles.bioContainer}>\n                        {!editingBio ?\n                            <p className={styles.bioText} onClick={() => setEditingBio(true)}>\n                                {streamerBio}\n                            </p>\n                            :\n                            <StreamerTextInput multiline\n                                fullWidth\n                                rows={5}\n                                rowsMax={5}\n                                onChange={(e) => setStreamerBio(e.target.value)}\n                                value={streamerBio}\n                                max />\n                        }\n                    </div>\n                    <ul className={styles.tagsList}>\n                        {streamerTags.map((data, index) => {\n                            return (\n                                <li key={`chip-${data}-${index}`} className={styles.tag}>\n                                    <QaplaChip\n                                        label={data}\n                                        onDelete={() => handleTagDelete(index)}\n                                        onClick={() => updateTag(index, data)}\n                                    />\n                                </li>\n                            )\n                        })}\n                        <li key='new' className={styles.tag}>\n                            <QaplaChip onClick={addTag}\n                                label='Agregar tag'\n                            />\n                        </li>\n                    </ul>\n                    <div className={styles.showNextStreamsContainer}>\n                        <p className={styles.showNextStreamsText}>Mostar próximos streams</p>\n                        <QaplaSwitch\n                            name='showNextStreams'\n                        />\n                    </div>\n                    <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\n                        <QaplaTab wid label='Social' {...a11yProps(0)} />\n                        <QaplaTab label='Códigos de creador' {...a11yProps(1)} />\n                    </QaplaTabs>\n                    <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\n                        {socialLinks.map((data, index) => {\n                            return (\n                                <>\n                                    {/* <p className={styles.socialLinkLabel}>{data.socialPage}</p> */}\n                                    <StreamerTextInput\n                                        label={data.socialPage}\n                                        containerClassName={styles.socialLinkContainer}\n                                        labelClassName={styles.socialLinkLabel}\n                                        textInputClassName={styles.socialLinkTextInput}\n                                        value={data.value}\n                                        placeholder={socialLinksPlaceholders[data.socialPage]}\n                                        classes={{ input: classes.linkPlaceholder }}\n                                        textInputClassName={classes.linkInput}\n                                        fullWidth\n                                        onChange={(e) => updateSocialLinks(e.target.value, index)}\n                                    />\n                                </>\n                            )\n                        })}\n                        <br />\n                        {socialLinksChanged &&\n                            <ContainedButton onClick={saveLinks}>\n                                Guardar cambios\n                            </ContainedButton>\n                        }\n                    </TabPanel>\n                    <TabPanel value={selectedTab} index={1}>\n                        <p>b</p>\n                    </TabPanel>\n                </div>\n                </>\n            }\n        </StreamerDashboardContainer>\n    )\n}\n\nexport default StreamerProfileEditor;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],{"ruleId":"45","severity":1,"message":"46","line":211,"column":8,"nodeType":"47","endLine":211,"endColumn":81,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":34,"nodeType":"51","messageId":"52","endLine":2,"endColumn":38},{"ruleId":"49","severity":1,"message":"53","line":2,"column":40,"nodeType":"51","messageId":"52","endLine":2,"endColumn":56},{"ruleId":"49","severity":1,"message":"54","line":2,"column":58,"nodeType":"51","messageId":"52","endLine":2,"endColumn":64},{"ruleId":"49","severity":1,"message":"55","line":2,"column":88,"nodeType":"51","messageId":"52","endLine":2,"endColumn":94},{"ruleId":"49","severity":1,"message":"56","line":2,"column":107,"nodeType":"51","messageId":"52","endLine":2,"endColumn":116},{"ruleId":"49","severity":1,"message":"57","line":2,"column":118,"nodeType":"51","messageId":"52","endLine":2,"endColumn":121},{"ruleId":"49","severity":1,"message":"58","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":17},{"ruleId":"49","severity":1,"message":"59","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":20},{"ruleId":"49","severity":1,"message":"60","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":24},{"ruleId":"49","severity":1,"message":"61","line":10,"column":28,"nodeType":"51","messageId":"52","endLine":10,"endColumn":38},{"ruleId":"49","severity":1,"message":"62","line":11,"column":28,"nodeType":"51","messageId":"52","endLine":11,"endColumn":37},{"ruleId":"49","severity":1,"message":"63","line":12,"column":28,"nodeType":"51","messageId":"52","endLine":12,"endColumn":35},{"ruleId":"49","severity":1,"message":"64","line":13,"column":8,"nodeType":"51","messageId":"52","endLine":13,"endColumn":22},{"ruleId":"49","severity":1,"message":"65","line":15,"column":54,"nodeType":"51","messageId":"52","endLine":15,"endColumn":73},{"ruleId":"49","severity":1,"message":"66","line":16,"column":8,"nodeType":"51","messageId":"52","endLine":16,"endColumn":18},{"ruleId":"49","severity":1,"message":"67","line":18,"column":28,"nodeType":"51","messageId":"52","endLine":18,"endColumn":36},{"ruleId":"49","severity":1,"message":"68","line":19,"column":28,"nodeType":"51","messageId":"52","endLine":19,"endColumn":37},{"ruleId":"49","severity":1,"message":"69","line":20,"column":28,"nodeType":"51","messageId":"52","endLine":20,"endColumn":38},{"ruleId":"49","severity":1,"message":"70","line":21,"column":28,"nodeType":"51","messageId":"52","endLine":21,"endColumn":33},{"ruleId":"49","severity":1,"message":"71","line":22,"column":8,"nodeType":"51","messageId":"52","endLine":22,"endColumn":30},{"ruleId":"49","severity":1,"message":"72","line":207,"column":12,"nodeType":"51","messageId":"52","endLine":207,"endColumn":29},{"ruleId":"45","severity":1,"message":"73","line":235,"column":8,"nodeType":"47","endLine":235,"endColumn":14,"suggestions":"74"},{"ruleId":"49","severity":1,"message":"75","line":324,"column":11,"nodeType":"51","messageId":"52","endLine":324,"endColumn":32},{"ruleId":"76","severity":1,"message":"77","line":360,"column":25,"nodeType":"78","endLine":360,"endColumn":107},{"ruleId":"79","severity":1,"message":"80","line":441,"column":41,"nodeType":"81","endLine":441,"endColumn":79},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'onPong', 'rewardsAreCreated', and 't'. Either include them or remove the dependency array.","ArrayExpression",["82"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'AccordionSummary' is defined but never used.","'Avatar' is defined but never used.","'AppBar' is defined but never used.","'TextField' is defined but never used.","'Box' is defined but never used.","'PropTypes' is defined but never used.","'useHistory' is defined but never used.","'useTranslation' is defined but never used.","'TwitchIcon' is defined but never used.","'ArrowIcon' is defined but never used.","'AddIcon' is defined but never used.","'StreamerSelect' is defined but never used.","'loadStreamsByStatus' is defined but never used.","'StreamCard' is defined but never used.","'BitsIcon' is defined but never used.","'QoinsIcon' is defined but never used.","'InfoSquare' is defined but never used.","'Arrow' is defined but never used.","'CheersBitsRecordDialog' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'socialLinksInitialValue'. Either include it or remove the dependency array.",["83"],"'uploadBackgroundImage' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",{"range":"88","text":"89"},"Update the dependencies array to be: [socialLinksInitialValue, user]",{"range":"90","text":"91"},[7598,7671],"[streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",[7080,7086],"[socialLinksInitialValue, user]"]

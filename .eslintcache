[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CloseStreamDialog/CloseStreamDialog.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"43"},{"size":383,"mtime":1642779984899,"results":"44","hashOfConfig":"45"},{"size":1023,"mtime":1642779984868,"results":"46","hashOfConfig":"45"},{"size":30575,"mtime":1642959678738,"results":"47","hashOfConfig":"45"},{"size":7544,"mtime":1642789855317,"results":"48","hashOfConfig":"45"},{"size":14323,"mtime":1642782067387,"results":"49","hashOfConfig":"45"},{"size":362,"mtime":1614731664838,"results":"50","hashOfConfig":"45"},{"size":7276,"mtime":1642712880333,"results":"51","hashOfConfig":"45"},{"size":2975,"mtime":1614731664830,"results":"52","hashOfConfig":"45"},{"size":16381,"mtime":1642779984896,"results":"53","hashOfConfig":"45"},{"size":20379,"mtime":1633450179136,"results":"54","hashOfConfig":"45"},{"size":6950,"mtime":1642779984909,"results":"55","hashOfConfig":"45"},{"size":23026,"mtime":1639435811614,"results":"56","hashOfConfig":"45"},{"size":1361,"mtime":1635283796971,"results":"57","hashOfConfig":"45"},{"size":3415,"mtime":1642779984870,"results":"58","hashOfConfig":"45"},{"size":629,"mtime":1635283796967,"results":"59","hashOfConfig":"45"},{"size":1596,"mtime":1641919402812,"results":"60","hashOfConfig":"45"},{"size":226,"mtime":1636068211199,"results":"61","hashOfConfig":"45"},{"size":25277,"mtime":1642779984869,"results":"62","hashOfConfig":"45"},{"size":3579,"mtime":1614731664824,"results":"63","hashOfConfig":"45"},{"size":27592,"mtime":1640968859961,"results":"64","hashOfConfig":"45"},{"size":2751,"mtime":1642779984908,"results":"65","hashOfConfig":"45"},{"size":1799,"mtime":1638029350636,"results":"66","hashOfConfig":"45"},{"size":2422,"mtime":1642779984900,"results":"67","hashOfConfig":"45"},{"size":695,"mtime":1635283796969,"results":"68","hashOfConfig":"45"},{"size":9171,"mtime":1638029350635,"results":"69","hashOfConfig":"45"},{"size":870,"mtime":1642782331952,"results":"70","hashOfConfig":"45"},{"size":3325,"mtime":1641919402812,"results":"71","hashOfConfig":"45"},{"size":1439,"mtime":1642779984907,"results":"72","hashOfConfig":"45"},{"size":527,"mtime":1636998131402,"results":"73","hashOfConfig":"45"},{"size":6897,"mtime":1642712880330,"results":"74","hashOfConfig":"45"},{"size":34179,"mtime":1642958067050,"results":"75","hashOfConfig":"45"},{"size":8238,"mtime":1642779984868,"results":"76","hashOfConfig":"45"},{"size":1083,"mtime":1642779984867,"results":"77","hashOfConfig":"45"},{"size":835,"mtime":1642711713952,"results":"78","hashOfConfig":"45"},{"size":5291,"mtime":1635283796969,"results":"79","hashOfConfig":"45"},{"size":13427,"mtime":1641919402811,"results":"80","hashOfConfig":"45"},{"size":2079,"mtime":1642779984906,"results":"81","hashOfConfig":"45"},{"size":14417,"mtime":1642779984902,"results":"82","hashOfConfig":"45"},{"size":1288,"mtime":1637785151307,"results":"83","hashOfConfig":"45"},{"size":1560,"mtime":1638029350634,"results":"84","hashOfConfig":"45"},{"size":890,"mtime":1642779984909,"results":"85","hashOfConfig":"45"},{"size":14755,"mtime":1642956525543,"results":"86","hashOfConfig":"45"},{"size":4816,"mtime":1642959684719,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"91"},"rfo3np",{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"91"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"104"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"107"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["187"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;",["188","189"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],["190","191"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],["192","193"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],["194","195"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",[],["196","197"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],["198","199"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["200","201"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, FormControlLabel, Radio, RadioGroup, Button, InputAdornment, InputLabel, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer } from './../../services/database';\n\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as CheckedIcon } from './../../assets/CheckedIcon.svg';\nimport { ReactComponent as UncheckedIcon } from './../../assets/UncheckedIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamDetailsDialog from '../NewStreamDetailsDialog/NewStreamDetailsDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    useEffect(() => {\n        if (user && !user.premium) {\n            history.push('/profile');\n        }\n    }, [user]);\n\n    const userLang = navigator.language || navigator.userLanguage;\n\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openDetailsDialog, setOpenDetailsDialog] = useState(false);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n    const handleGameChange = (game) => {\n        setSelectedGame(game.target.value);\n    };\n    const handleEventTypeChange = (event) => {\n        setSelectedEvent(event.target.value);\n    };\n\n    const handleStringDateChange = (event) => {\n        setStringDate(event.target.value);\n    }\n\n    const openConfirmationDialog = () => setOpenDetailsDialog(true);\n\n    const submitEvent = async () => {\n        if (selectedDate < minDate) {\n            alert(t('NewStream.alerts.before24h'));\n            return;\n        }\n        if (!selectedGame) {\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        const { endDate } = user.currentPeriod;\n\n        /**\n         * Check if the selected date is valid to create the event based on the end of the streamer subscription\n         */\n        if (selectedDate.getTime() <= endDate) {\n\n            const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\n\n            let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\n\n            if (!userCanCreateStream) {\n                if (user.boughtStreams) {\n                    /**\n                     * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\n                     * the user can create the stream, this function will also remove expired packages or packages that has been already used\n                     */\n                    userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\n                        if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\n                            addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\n                            return true;\n                        } else {\n                            removeStreamPackageOfStreamer(user.uid, streamsPackageId);\n                        }\n                    });\n                }\n            } else {\n                addToStreamsRequestedOnSubscriptionDetails(user.uid);\n            }\n\n            /**\n             * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n             * is lower or equal to the user limit per month then we create the event\n             */\n            if (userCanCreateStream) {\n                const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                await createNewStreamRequest(user, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n                history.push('/success');\n            } else {\n                // Hacer un modal chido para convencerlos de mejorar su plan o comprar eventos aparte\n                alert(t('NewStream.alerts.streamsLimit'));\n            }\n        } else {\n            alert(t('NewStream.alerts.beforePlanExpiration'));\n        }\n    }\n\n    let gameList = [];\n\n    if (games.allGames) {\n        gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] })).sort((a, b) => {\n            if (a.gameName < b.gameName) {\n                return -1;\n            }\n            if (a.gameName > b.gameName) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <BackButton onClick={history.goBack} />\n                </Grid>\n                <Grid item sm={8}>\n                    <h1 className={styles.title}>\n                        {t('NewStream.whatAreYouPlaying')}\n                    </h1>\n                    <StreamerSelect\n                        value={selectedGame}\n                        onChange={handleGameChange}\n                        Icon={ArrowIcon}\n                        label={t('NewStream.selectYourGame')}>\n                        <option style={{\n                            backgroundColor: '#141833',\n                            fontSize: '14px'\n                        }} value={null}></option>\n                        {games.allGames && gameList.map((game) => {\n                            if (!game.gameName.toLowerCase().includes('twitch')) {\n                                return <option style={{\n                                    backgroundColor: '#141833',\n                                    fontSize: '14px'\n                                }} value={game.gameKey}>{game.gameName}</option>\n                            }\n\n                            return null;\n                        })}\n                    </StreamerSelect>\n                    <h1 className={styles.title}>\n                        {t('NewStream.when')}\n                    </h1>\n                    <MuiPickersUtilsProvider utils={DayJsUtils}>\n                        <Grid container spacing={4}>\n                            <Grid item sm={4} style={{minWidth: '175px'}}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.date')}\n                                </InputLabel>\n                                <KeyboardDatePicker\n                                    open={calendarOpen}\n                                    onClick={() => setCalendarOpen(true)}\n                                    onOpen={() => {}}\n                                    onClose={() => setCalendarOpen(false)}\n                                    clearable\n                                    disablePast\n                                    disableToolbar\n                                    autoOk\n                                    value={displayDate}\n                                    placeholder='10-10-2021'\n                                    onChange={handleDateChange}\n                                    defaultValue={new Date()}\n                                    minDate={minDate}\n                                    minDateMessage={t('NewStream.alerts.before24h')}\n                                    format='DD-MM-YY ddd'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <CalendarIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={4} style={{minWidth: '175px'}}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.time')}\n                                </InputLabel>\n                                <KeyboardTimePicker\n                                    open={clockOpen}\n                                    onClick={() => setClockOpen(true)}\n                                    onOpen={() => {}}\n                                    onClose={() => setClockOpen(false)}\n                                    autoOk\n                                    error={selectedDate <= minDate}\n                                    helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\n                                    value={displayDate}\n                                    placeholder='08:00 AM'\n                                    onChange={handleDateChange}\n                                    // mask='__:__ _M'\n                                    keyboardIcon={\n                                        <InputAdornment position='end' >\n                                            <TimeIcon />\n                                        </InputAdornment>\n                                    }\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        className: classes.dateInput\n                                    }}\n                                    variant={'inline'}\n                                    PopoverProps={{\n                                        PaperProps: {\n                                            className: classes.popover,\n                                        }\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item sm={8} style={{width: '90%', minWidth: '330px'}}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.confirmDate')}\n                                </InputLabel>\n                                <StreamerTextInput placeholder={t('NewStream.confirmDatePlaceholder')}\n                                    fullWidth\n                                    value={stringDate}\n                                    onChange={handleStringDateChange} />\n                            </Grid>\n                        </Grid>\n                    </MuiPickersUtilsProvider>\n                    <h1 className={styles.title}>\n                        {t('NewStream.streamType')}\n                    </h1>\n                    <RadioGroup name={'eventType'} value={selectedEvent} onChange={(event) => { handleEventTypeChange(event) }}>\n                        <Grid container>\n                            <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'exp'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio defaultChecked\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label={t('NewStream.streamTypes.casual')} />\n                            </Grid>\n                            {/* <Grid item sm={2}>\n                                <FormControlLabel\n                                    value={'tournament'}\n                                    classes={{ label: classes.label }}\n                                    control={\n                                        <Radio\n                                            checkedIcon={<CheckedIcon />}\n                                            icon={<UncheckedIcon />}\n                                            style={{ backgroundColor: 'transparent' }} />\n                                    }\n                                    label='Tournament' />\n                            </Grid> */}\n                        </Grid>\n                    </RadioGroup>\n                    <Grid container className={classes.accordionContainer}>\n                        <Accordion\n                            className={classes.accordion}\n                        >\n                            <AccordionSummary\n                                expandIcon={<ArrowIcon />}\n                                id={\"moreOptions\"}\n                                aria-controls=\"panel1a-content\"\n                            >\n                                <InputLabel\n                                    className={classes.label}\n                                >\n                                    {t('NewStream.advanced')}\n                                </InputLabel>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Grid container direction={'column'} className={classes.accordionGridRoot}>\n                                    <InputLabel className={classes.label}>\n                                        {t('NewStream.feelingCreative')}\n                                    </InputLabel>\n                                    <Grid container>\n                                        <h1 className={styles.title}>\n                                            {t('NewStream.streamTitle')}\n                                        </h1>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label={t('NewStream.streamTitle')}\n                                                    placeholder={t('NewStream.streamTitlePlaceholder')}\n                                                    id='eventTitle'\n                                                    fullWidth={true}\n                                                    value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <h1 className={styles.title}>\n                                        {t('NewStream.streamDescription')}\n                                    </h1>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem}>\n                                                <StreamerTextInput\n                                                    label={t('NewStream.subtitle')}\n                                                    id={'eventDescriptionTitle'}\n                                                    placeholder={t('NewStream.subtitle')}\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptionsTitle ? userLang.toLowerCase().includes('es') ? optionalData.descriptionsTitle.es : optionalData.descriptionsTitle.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid>\n                                        <Grid container spacing={4}>\n                                            <Grid item className={classes.accordionGridItem} style={{ marginTop: '1rem' }}>\n                                                <StreamerTextInput\n                                                    id={'eventDescription'}\n                                                    label={t('NewStream.streamDescription')}\n                                                    placeholder={t('NewStream.descriptionPlaceholder')}\n                                                    multiline={true}\n                                                    rows={3}\n                                                    rowsMax={30}\n                                                    fullWidth={true}\n                                                    value={optionalData.descriptions ? userLang.toLowerCase().includes('es') ? optionalData.descriptions.es : optionalData.descriptions.en : ''}\n                                                    onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n                        </Accordion>\n                    </Grid>\n                    <Button\n                        className={styles.button}\n                        onClick={openConfirmationDialog}>\n                        {t('NewStream.submit')}\n                    </Button>\n                </Grid>\n            </Grid>\n            <NewStreamDetailsDialog\n                open={openDetailsDialog}\n                onClose={() => setOpenDetailsDialog(false)}\n                submitEvent={submitEvent}\n                game={selectedGame}\n                date={`${selectedDate.toLocaleDateString()} ${selectedDate.toLocaleTimeString()}`}\n                userName={user ? user.displayName : ''}\n                {...optionalData} />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PubSubTest/PubSubTest.jsx",["202"],"import React, { useState, useEffect } from 'react';\nimport { useParams, Prompt } from 'react-router';\nimport {\n    makeStyles,\n    withStyles,\n    TableCell,\n    Grid,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableBody,\n    Avatar,\n    CircularProgress,\n    Snackbar,\n    List,\n    ListItem,\n    LinearProgress,\n    ListItemIcon,\n    ListItemText,\n    Typography,\n    Box\n} from '@material-ui/core';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\nimport { ReactComponent as ConnectedIcon } from './../../assets/ganado.svg';\nimport { ReactComponent as DisconnectedIcon } from './../../assets/perdido.svg';\n\nimport { connect, createCustomReward, deleteCustomReward, closeConnection, getAllRewardRedemptions, enableCustomReward, disableCustomReward } from '../../services/twitch';\nimport { signInWithTwitch } from '../../services/auth';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport {\n    updateStreamerProfile,\n    listenCustomRewardRedemptions,\n    getStreamTimestamp,\n    getStreamCustomReward,\n    markAsClosedStreamerTwitchCustomReward,\n    removeActiveCustomRewardFromList,\n    getOpenCustomRewards,\n    setStreamInRedemptionsLists,\n    addListToStreamRedemptionList,\n    saveStreamerTwitchCustomReward\n} from '../../services/database';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { XQ, QOINS, TWITCH_PUBSUB_UNCONNECTED, TWITCH_PUBSUB_CONNECTED, TWITCH_PUBSUB_CONNECTION_LOST, HOUR_IN_MILISECONDS } from '../../utilities/Constants';\nimport { distributeStreamRedemptionsRewards } from '../../services/functions';\nimport { notifyBugToDevelopTeam } from '../../services/discord';\nimport CloseStreamDialog from '../CloseStreamDialog/CloseStreamDialog';\n\nconst useStyles = makeStyles((theme) => ({\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginTop: 16\n    },\n    secondaryButton: {\n        backgroundColor: '#00FFDD !important',\n        marginTop: 16,\n        color: '#000'\n    },\n    whiteColor: {\n        color: '#FFF'\n    },\n    linearProgressBackgroundColor: {\n        backgroundColor: '#0AFFD2'\n    },\n    greenQaplaColor: {\n        color: '#0AFFD2'\n    }\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst CLOSING_STREAM_STEPS = 4;\n\nconst CloseStreamStep = ({ label, currentStep, step, progress }) => {\n    const classes = useStyles();\n    const percentageProgress = progress * 100;\n\n    return (\n        <ListItem style={{ display: 'flex', marginBottom: 16 }}>\n            <ListItemIcon>\n                {step === currentStep ?\n                    <Box display='flex' flexDirection='column' alignItems='center'>\n                        <Box width='100%' mr={1}>\n                            <LinearProgress classes={{ barColorPrimary: classes.linearProgressBackgroundColor }} variant='determinate' value={percentageProgress} />\n                        </Box>\n                        <br />\n                        <Box minWidth={35}>\n                            <Typography className={classes.whiteColor}>{`${Math.round(\n                            percentageProgress,\n                            )}%`}</Typography>\n                        </Box>\n                    </Box>\n                    :\n                    currentStep > step &&\n                        <CheckCircleIcon className={classes.greenQaplaColor} />\n                }\n            </ListItemIcon>\n            <ListItemText>\n                {label}\n            </ListItemText>\n        </ListItem>\n    );\n}\n\nconst PubSubTest = ({ user }) => {\n    const { streamId } = useParams();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    const [connectedToTwitch, setConnectedToTwitch] = useState(false);\n    const [verifyngRedemptions, setVerifyngRedemptions] = useState(false);\n    const [rewardsIds, setRewardsIds] = useState({});\n    const [isQoinsRewardEnabled, setIsQoinsRewardEnabled] = useState(false);\n    const [oldUser, setOldUser] = useState({ twitchAccessToken: '' });\n    const [streamTimestamp, setStreamTimestamp] = useState(0);\n    const [usersThatRedeemed, setUsersThatRedeemed] = useState({});\n    const [buttonFirstText, setButtonFirstText] = useState(t('handleStream.connect'));\n    const [eventIsAlreadyClosed, setEventIsAlreadyClosed] = useState(false);\n    const [connectionStatus, setConnectionStatus] = useState(TWITCH_PUBSUB_UNCONNECTED);\n    const [statusMessage, setStatusMessage] = useState('');\n    const [currentCloseStep, setCurrentCloseStep] = useState({ step: -1, progress: 0 });\n\n    let pingTimeout;\n\n    useEffect(() => {\n        async function getTimestamp() {\n            if (streamId) {\n                const timestamp = await getStreamTimestamp(streamId);\n                if (timestamp.exists()) {\n                    setStreamTimestamp(timestamp.val());\n                }\n            }\n        }\n\n        async function checkIfStreamIsAlreadyOpen() {\n            if (user && user.uid && Object.keys(rewardsIds).length < 2) {\n                const rewardOnDatabase = await getStreamCustomReward(user.uid, streamId);\n                if (rewardOnDatabase.exists()){\n                    if (rewardOnDatabase.val().closedStream) {\n                        setEventIsAlreadyClosed(true);\n                    } else {\n                        setButtonFirstText(t('handleStream.reconnect'));\n                    }\n                }\n            }\n        }\n\n        listenCustomRewardRedemptions(streamId, (users) => {\n            if (users.exists()) {\n                let usersToSave = {};\n                users.forEach((user) => {\n                    if (usersToSave[user.val().id]) {\n                        usersToSave[user.val().id].numberOfRedemptions++;\n                    } else {\n                        usersToSave[user.val().id] = user.val();\n                        usersToSave[user.val().id].numberOfRedemptions = 1;\n                    }\n                });\n\n                setUsersThatRedeemed(usersToSave);\n            }\n        });\n\n        if (rewardsAreCreated() && user.twitchAccessToken !== oldUser.twitchAccessToken) {\n            const qoinsMaximumRedemptionsPerStream = (user.subscriptionDetails && parseInt(user.subscriptionDetails.redemptionsPerStream)) ? parseInt(user.subscriptionDetails.redemptionsPerStream) : 35;\n            connect(streamId, user.displayName, user.uid, user.twitchAccessToken, user.refreshToken, [`channel-points-channel-v1.${user.id}`], rewardsIds, onPong, qoinsMaximumRedemptionsPerStream, handleTwitchSignIn);\n            setOldUser(user);\n        }\n\n        checkIfStreamIsAlreadyOpen();\n        getTimestamp();\n        if (connectedToTwitch) {\n            window.onbeforeunload = () => true;\n        }\n\n        return (() => {\n            window.onbeforeunload = null;\n        });\n    }, [streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp]);\n\n    const listenForRewards = async () => {\n        const userCredentialsUpdated = await handleTwitchSignIn();\n\n        const rewardOnDatabase = await getStreamCustomReward(user.uid, streamId);\n\n        if (rewardOnDatabase.exists()){\n            if (!rewardOnDatabase.val().closedStream) {\n                let rewards = { expReward: rewardOnDatabase.val().expReward.rewardId, qoinsReward: rewardOnDatabase.val().qoinsReward.rewardId }\n                setRewardsIds(rewards);\n\n                // Get redemptions lists\n                const lists = await getRedemptionsLists(rewards, userCredentialsUpdated, false);\n                distributeStreamRedemptionsRewards(user.uid, user.displayName, streamId, XQ, lists.XQRedemptions);\n                distributeStreamRedemptionsRewards(user.uid, user.displayName, streamId, QOINS, lists.QoinsRedemptions);\n\n                const qoinsMaximumRedemptionsPerStream = (user.subscriptionDetails && parseInt(user.subscriptionDetails.redemptionsPerStream)) ? parseInt(user.subscriptionDetails.redemptionsPerStream) : 35;\n                connect(streamId, user.displayName, user.uid, userCredentialsUpdated.access_token, userCredentialsUpdated.refresh_token, [`channel-points-channel-v1.${user.id}`], rewards, onPong, qoinsMaximumRedemptionsPerStream, handleTwitchSignIn);\n                setOldUser(user);\n                setConnectedToTwitch(true);\n                setStatusMessage(t('handleStream.reconnected'));\n            } else {\n                alert(t('handleStream.streamClosed'));\n            }\n        } else {\n            const currentDate = new Date();\n            const streamScheduledDate = new Date(streamTimestamp);\n            if (user.id === '213807528' || currentDate.getTime() <= (streamScheduledDate.getTime() + (HOUR_IN_MILISECONDS * 2))) {\n                setStatusMessage(t('handleStream.connecting'));\n                const rewards = await createReward(userCredentialsUpdated);\n\n                if (rewards) {\n                    const qoinsMaximumRedemptionsPerStream = (user.subscriptionDetails && parseInt(user.subscriptionDetails.redemptionsPerStream)) ? parseInt(user.subscriptionDetails.redemptionsPerStream) : 35;\n                    connect(streamId, user.displayName, user.uid, userCredentialsUpdated.access_token, userCredentialsUpdated.refresh_token, [`channel-points-channel-v1.${user.id}`], rewards, onPong, qoinsMaximumRedemptionsPerStream, handleTwitchSignIn);\n                    setOldUser(user);\n                    setConnectedToTwitch(true);\n                } else {\n                    alert('Qapla Custom Reward couldn´t been created');\n                }\n            } else {\n                alert(t('handleStream.timeError'));\n            }\n        }\n    }\n\n    const onPong = () => {\n        clearTimeout(pingTimeout);\n        setConnectionStatus(TWITCH_PUBSUB_CONNECTED);\n        setConnectedToTwitch(true);\n        pingTimeout = setTimeout(() => {\n            setConnectionStatus(TWITCH_PUBSUB_CONNECTION_LOST);\n            setConnectedToTwitch(false);\n            const qoinsMaximumRedemptionsPerStream = (user.subscriptionDetails && parseInt(user.subscriptionDetails.redemptionsPerStream)) ? parseInt(user.subscriptionDetails.redemptionsPerStream) : 35;\n            connect(streamId, user.displayName, user.uid, user.twitchAccessToken, user.refreshToken, [`channel-points-channel-v1.${user.id}`], rewardsIds, onPong, qoinsMaximumRedemptionsPerStream, handleTwitchSignIn);\n        }, 25000);\n    }\n\n    const createReward = async (userCredentials) => {\n        let date = new Date();\n        if (date.getTime() >= streamTimestamp - 900000) {\n            let rewardsIdsObject = { expReward: '', qoinsReward: '' };\n            const qoinsMaximumRedemptionsPerStream = (user.subscriptionDetails && parseInt(user.subscriptionDetails.redemptionsPerStream)) ? parseInt(user.subscriptionDetails.redemptionsPerStream) : 35;\n            const expReward = await createCustomReward(user.uid, user.id, userCredentials.access_token, userCredentials.refresh_token, 'XQ Qapla', 500, false, handleTwitchSignIn, false, 0, true, 1);\n            if (expReward.status === 200) {\n                rewardsIdsObject.expReward = expReward.data.id;\n            } else {\n                if (expReward.status === 400) {\n                    return await handleDuplicatedCustomReward(XQ, expReward);\n                }\n            }\n\n            const qoinsReward = await createCustomReward(user.uid, user.id, userCredentials.access_token, userCredentials.refresh_token, 'Qoins Qapla', 500, false, handleTwitchSignIn, true, qoinsMaximumRedemptionsPerStream, true, 1);\n            if (qoinsReward.status === 200) {\n                rewardsIdsObject.qoinsReward = qoinsReward.data.id;\n            } else {\n                // Problem creating Qoins reward\n                // Delete XQ reward\n                await deleteCustomReward(user.uid, user.id, userCredentials.access_token, userCredentials.refresh_token, expReward.data.id, handleTwitchSignIn);\n\n                let errorMessage = `Error creating Qoins Reward\\nStatus: ${qoinsReward.status}`;\n                if (qoinsReward.error) {\n                    errorMessage += `\\nError: ${qoinsReward.error}\\nMessage: ${qoinsReward.message}\\nStreamer: ${user.displayName}\\nStream Id: ${streamId}`;\n                }\n                // Abort and notify Qapla developers\n                notifyBugToDevelopTeam(errorMessage);\n\n                if (qoinsReward.status === 400) {\n                    return await handleDuplicatedCustomReward(QOINS, qoinsReward);\n                }\n            }\n\n            if (expReward.status === 200 && qoinsReward.status === 200) {\n                setRewardsIds({ expReward: expReward.data.id, qoinsReward: qoinsReward.data.id });\n                await saveStreamerTwitchCustomReward(user.uid, 'expReward', expReward.data.id, expReward.data.title, expReward.data.cost, streamId);\n                await saveStreamerTwitchCustomReward(user.uid, 'qoinsReward', qoinsReward.data.id, qoinsReward.data.title, qoinsReward.data.cost, streamId);\n\n                // Enable XQ reward\n                await enableCustomReward(user.uid, user.id, userCredentials.access_token, userCredentials.refresh_token, expReward.data.id, handleTwitchSignIn);\n                setStatusMessage('');\n                setStatusMessage(t('handleStream.rewardsCreated'));\n            }\n\n            return rewardsIdsObject;\n        } else {\n            alert('La conexion solo puede realizarse cuando mucho 15 minutos antes de la hora en que esta programado el evento');\n        }\n\n        return null;\n    }\n\n    const handleDuplicatedCustomReward = async (rewardType, rewardError) => {\n        let rewardsIdsToDelete = { expReward: '', qoinsReward: '' };\n        let streamIdToClose;\n        const activeRewards = await getOpenCustomRewards(user.uid);\n        if (activeRewards.exists()) {\n            alert(t('handleStream.streamerHasAnOpenStream'));\n            activeRewards.forEach((activeReward) => {\n                rewardsIdsToDelete.expReward = activeReward.val().expReward.rewardId;\n                rewardsIdsToDelete.qoinsReward = activeReward.val().qoinsReward.rewardId;\n                streamIdToClose = activeReward.key;\n            });\n        }\n\n        if (rewardsIdsToDelete.expReward && rewardsIdsToDelete.qoinsReward && streamIdToClose) {\n            await finishStream(streamIdToClose, rewardsIdsToDelete);\n\n            const userCredentialsUpdated = await handleTwitchSignIn();\n\n            return await createReward(userCredentialsUpdated);\n        } else {\n            // Problem creating reward not caused by previous open stream\n            let errorMessage = `Error creating ${rewardType} Reward\\nStatus: ${rewardError.status}`;\n            if (rewardError.error) {\n                errorMessage += `\\nError: ${rewardError.error}\\nMessage: ${rewardError.message}\\nStreamer: ${user.displayName}\\nStream Id: ${streamId}`;\n            }\n            // Abort and notify Qapla developers\n            notifyBugToDevelopTeam(errorMessage);\n\n            alert(t('handleStream.rewardsCantBeRemoved'));\n        }\n\n        return null;\n    }\n\n    const deleteReward = async (rewardIdToDelete, userCredentials) => {\n        const result = await deleteCustomReward(user.uid, user.id, userCredentials.access_token, userCredentials.refresh_token, rewardIdToDelete, handleTwitchSignIn);\n\n        console.log(result);\n\n        if (result === 404 || result === 403) {\n            alert(`No se encontro la recompensa a eliminar, status: ${result}`);\n        } else if (result === 500) {\n            alert('Error de parte de Twitch al tratar de eliminar la recompensa');\n        }\n    }\n\n    const handleTwitchSignIn = async () => {\n        let user = await signInWithTwitch();\n        await updateStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\n\n        user.access_token = user.userData.twitchAccessToken;\n        user.refresh_token = user.userData.refreshToken;\n        return user;\n    }\n\n    const unlistenForRewards = async () => {\n        if (window.confirm(t('handleStream.closeStreamConfirmation'))) {\n            await closeStream();\n        }\n    }\n\n    const closeStream = async () => {\n        closeConnection();\n\n        finishStream(streamId, rewardsIds);\n    }\n\n    const finishStream = async (streamIdToClose, rewardsIdsToDelete) => {\n        setVerifyngRedemptions(true);\n        const userCredentialsUpdated = await handleTwitchSignIn();\n\n        const rewardsIdToDeleteArray = Object.keys(rewardsIdsToDelete).map((reward) => rewardsIdsToDelete[reward]);\n\n        setCurrentCloseStep({ step: 0, progress: 0 });\n        // Disable custom rewards on Twitch\n        for (let i = 0; i < rewardsIdToDeleteArray.length; i++) {\n            await disableCustomReward(user.id, userCredentialsUpdated.access_token, rewardsIdToDeleteArray[i], handleTwitchSignIn);\n            setCurrentCloseStep({ step: 0, progress: (i + 1) / rewardsIdToDeleteArray.length  });\n        }\n\n        // Remove the custom reward from the ActiveCustomReward node on the database\n        await removeActiveCustomRewardFromList(streamIdToClose);\n\n        // Get redemptions lists\n        const lists = await getRedemptionsLists(rewardsIdsToDelete, userCredentialsUpdated, true);\n\n        // Save the lists of redemptions on database\n        await saveRedemptionsLists(lists);\n\n        setCurrentCloseStep({ step: 3, progress: 0 });\n        // Delete the rewards. This lines can not never be before the saveRedemptionsLists function call\n        for (let i = 0; i < rewardsIdToDeleteArray.length; i++) {\n            await deleteReward(rewardsIdToDeleteArray[i], userCredentialsUpdated);\n            setCurrentCloseStep({ step: 3, progress: (i + 1) / rewardsIdToDeleteArray.length });\n        }\n\n        setCurrentCloseStep({ step: 4, progress: 0 });\n        // Mark as closed the stream on the database\n        await markAsClosedStreamerTwitchCustomReward(user.uid, streamIdToClose);\n        setCurrentCloseStep({ step: 4, progress: 1 });\n\n        // Call cloud functions tu distribute XQ and Qoins\n        distributeStreamRedemptionsRewards(user.uid, user.displayName, streamId, XQ, lists.XQRedemptions);\n        distributeStreamRedemptionsRewards(user.uid, user.displayName, streamId, QOINS, lists.QoinsRedemptions);\n\n        setCurrentCloseStep({ step: 5, progress: 0 });\n\n        setRewardsIds({});\n\n        setVerifyngRedemptions(false);\n        setConnectedToTwitch(false);\n\n        // alert(t('handleStream.rewardsSent'));\n    }\n\n    const getRedemptionsLists = async (rewardsIdsToGet, userCredentials, isClosingStream) => {\n        if (isClosingStream) {\n            setCurrentCloseStep({ step: 1, progress: 0 });\n        }\n        const XQRedemptions = await getAllRewardRedemptions(user.id, userCredentials.access_token, rewardsIdsToGet.expReward);\n        if (isClosingStream) {\n            setCurrentCloseStep({ step: 1, progress: 0.5 });\n        }\n        const QoinsRedemptions = await getAllRewardRedemptions(user.id, userCredentials.access_token, rewardsIdsToGet.qoinsReward);\n        if (isClosingStream) {\n            setCurrentCloseStep({ step: 1, progress: 1 });\n        }\n\n        return { XQRedemptions, QoinsRedemptions };\n    }\n\n    const saveRedemptionsLists = async (lists) => {\n        setStreamInRedemptionsLists(streamId);\n        setCurrentCloseStep({ step: 2, progress: 0 });\n        await addListToStreamRedemptionList(streamId, 'XQReward', lists.XQRedemptions);\n        setCurrentCloseStep({ step: 2, progress: 0.5 });\n        await addListToStreamRedemptionList(streamId, 'QoinsReward', lists.QoinsRedemptions);\n        setCurrentCloseStep({ step: 2, progress: 1 });\n    }\n\n    const enableQoinsReward = async () => {\n        const userCredentialsUpdated = await handleTwitchSignIn();\n        if (await enableCustomReward(user.uid, user.id, userCredentialsUpdated.access_token, userCredentialsUpdated.refresh_token, rewardsIds.qoinsReward, handleTwitchSignIn) === 200) {\n            setIsQoinsRewardEnabled(true);\n        }\n    }\n\n    const rewardsAreCreated = () => Object.keys(rewardsIds).length === 2;\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Prompt when={connectedToTwitch}\n                message='If you leave now you will lose the connection with Twitch and the rewards will not be sent in real time to the users' />\n            <Grid container>\n                <Grid xs={5} container>\n                    <Grid xs={6}>\n                        <ContainedButton onClick={!connectedToTwitch ? listenForRewards : unlistenForRewards}\n                            disabled={verifyngRedemptions || eventIsAlreadyClosed}\n                            endIcon={verifyngRedemptions ? <CircularProgress style={{ color: '#FFF' }} /> : null}>\n                            {verifyngRedemptions ?\n                                t('handleStream.sendingRewards')\n                            :\n                                !connectedToTwitch ? eventIsAlreadyClosed ? t('handleStream.streamClosed') : buttonFirstText : t('handleStream.endStream')\n                            }\n                        </ContainedButton>\n                        {(connectedToTwitch && !isQoinsRewardEnabled) &&\n                            <ContainedButton onClick={enableQoinsReward} className={classes.secondaryButton}>\n                                {t('handleStream.enableQoinsReward')}\n                            </ContainedButton>\n                        }\n                        {(!eventIsAlreadyClosed && connectionStatus !== TWITCH_PUBSUB_UNCONNECTED) &&\n                            <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', marginTop: 24 }}>\n                                {connectionStatus === TWITCH_PUBSUB_CONNECTED ?\n                                    <ConnectedIcon height={32} width={32} />\n                                    :\n                                    <DisconnectedIcon height={32} width={32} />\n                                }\n                                {connectionStatus === TWITCH_PUBSUB_CONNECTED ?\n                                    <p style={{ color: '#0AFFD2', marginLeft: 8 }}>\n                                        Conectado\n                                    </p>\n                                    :\n                                    <p style={{ color: '#FF0000', marginLeft: 8 }}>\n                                        Error de conexión. Reconectando...\n                                    </p>\n                                }\n                            </div>\n                        }\n                    </Grid>\n                </Grid>\n                {Object.keys(usersThatRedeemed).length > 0 &&\n                    <Grid xs={4}>\n                        <TableContainer className={classes.tableContainer}>\n                            <Table>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCellStyled align='center' padding='checkbox'>\n                                            <ProfileIcon />\n                                        </TableCellStyled>\n                                        <TableCellStyled className={classes.tableHead}>Twitch Username</TableCellStyled>\n                                        <TableCellStyled className={classes.tableHead}>Nº of Redemptions</TableCellStyled>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {Object.keys(usersThatRedeemed).map((uid, index) => (\n                                        <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\n                                            key={`Participant-${uid}`}>\n                                            <TableCellStyled align='center' className={classes.firstCell}>\n                                                <Avatar\n                                                    className={classes.avatar}\n                                                    src={usersThatRedeemed[uid].photoUrl} />\n                                            </TableCellStyled>\n                                            <TableCellStyled>\n                                                {usersThatRedeemed[uid].displayName}\n                                            </TableCellStyled>\n                                            <TableCellStyled className={classes.lastCell}>\n                                                {usersThatRedeemed[uid].numberOfRedemptions}\n                                            </TableCellStyled>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </TableContainer>\n                    </Grid>\n                }\n            </Grid>\n            <CloseStreamDialog open={currentCloseStep.step !== -1}\n                onClose={() => setCurrentCloseStep({ step: -1, progress: 0 })}\n                finished={currentCloseStep.step > CLOSING_STREAM_STEPS}>\n                <List className={classes.whiteColor}>\n                    <CloseStreamStep label={t('handleStream.closingStreamSteps.0')}\n                        currentStep={currentCloseStep.step}\n                        step={0}\n                        progress={currentCloseStep.progress} />\n\n                    <CloseStreamStep label={t('handleStream.closingStreamSteps.1')}\n                        currentStep={currentCloseStep.step}\n                        step={1}\n                        progress={currentCloseStep.progress} />\n\n                    <CloseStreamStep label={t('handleStream.closingStreamSteps.2')}\n                        currentStep={currentCloseStep.step}\n                        step={2}\n                        progress={currentCloseStep.progress} />\n\n                    <CloseStreamStep label={t('handleStream.closingStreamSteps.3')}\n                        currentStep={currentCloseStep.step}\n                        step={3}\n                        progress={currentCloseStep.progress} />\n\n                    <CloseStreamStep label={t('handleStream.closingStreamSteps.4')}\n                        currentStep={currentCloseStep.step}\n                        step={4}\n                        progress={currentCloseStep.progress} />\n                </List>\n            </CloseStreamDialog>\n            <Snackbar\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                open={statusMessage !== ''}\n                autoHideDuration={5000}\n                onClose={() => setStatusMessage('')}\n                message={statusMessage} />\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default PubSubTest;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["203"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(4) + 1,\n        paddingTop: theme.spacing(4) + 1,\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    <AppBar className={styles.appBar}>\n                        <Toolbar>\n                            <div style={{ flexGrow: 1 }}></div>\n                            <p className={styles.alreadyAUser}>\n                                Already a user?\n                            </p>\n                            <Link to='/' className={`Margin-Right ${styles.buttonContainer}`}>\n                                <Button variant='outlined'\n                                    color='#5F75EE'\n                                    className={styles.button}\n                                    onClick={() => history.push('/signin')}>\n                                    Sign in\n                                </Button>\n                            </Link>\n                        </Toolbar>\n                    </AppBar>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["204"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/InviteCode/InviteCode.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["205","206"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport styles from './LiveDonations.module.css';\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation } from '../../services/database';\nimport donationAudio from '../../assets/notification.wav';\n\nconst LiveDonations = () => {\n    const [streamerUid, setStreamerUid] = useState('');\n    const [donationQueue, setDonationQueue] = useState([]);\n    const [donationToShow, setDonationToShow] = useState(null);\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\n    const [alertSideRight, setAlertSideRight] = useState(false)\n    const { streamerId } = useParams();\n\n    useEffect(() => {\n        const pushDonation = (donation) => {\n            setDonationQueue((array) => [donation, ...array]);\n        }\n\n        const popDonation = () => {\n            const indexToPop = donationQueue.length - 1;\n            const donationToPop = donationQueue[indexToPop];\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\n\n            return donationToPop;\n        }\n\n        async function getStreamerUid() {\n            if (streamerId) {\n                const uid = await getStreamerUidWithTwitchId(streamerId);\n                setStreamerUid(uid);\n                listenForTestCheers(uid, (donation) => {\n                    pushDonation({ ...donation.val(), id: donation.key });\n                });\n            }\n        }\n\n        async function loadDonations() {\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\n                pushDonation({ ...donation.val(), id: donation.key });\n            });\n        }\n\n        if (streamerUid && !listenersAreSetted) {\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\n                setListenersAreSetted(true);\n                if (isStreaming.exists() && isStreaming.val()) {\n                    setTimeout(() => {\n                        loadDonations();\n                    }, 150000);\n                } else {\n                    removeListenerForUnreadStreamerCheers(streamerUid);\n                    setDonationQueue([]);\n                }\n            });\n        }\n\n        if (donationQueue.length > 0) {\n            setTimeout(() => {\n                const donation = popDonation();\n                if (donation) {\n                    const audio = new Audio(donationAudio);\n                    audio.play();\n                    setTimeout(() => {\n                        if ('speechSynthesis' in window && donation.message) {\n                            readMessage(donation.message);\n                        }\n                    }, 500);\n                    donation.isRightSide = alertSideRight\n                    setDonationToShow(donation);\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                        removeTestDonation(streamerUid, donation.id);\n                    } else {\n                        markDonationAsRead(streamerUid, donation.id);\n                    }\n                }\n            }, 10000);\n        } else {\n            if (listenersAreSetted) {\n                setTimeout(() => {\n                    setDonationToShow(null);\n                }, 10000);\n            }\n        }\n\n        if (!streamerUid) {\n            getStreamerUid();\n        }\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted]);\n\n    const readMessage = (message) => {\n        const availableVoices = window.speechSynthesis.getVoices();\n        let utterThis = new SpeechSynthesisUtterance(message);\n        const spanishVoice = availableVoices.find((voice) => voice.lang.substring(0, 2) === 'es');\n        utterThis.voice = spanishVoice || availableVoices[0];\n        utterThis.pitch = 1;\n        utterThis.rate = 1;\n        window.speechSynthesis.speak(utterThis);\n    }\n\n    document.body.style.backgroundColor = 'transparent';\n\n    return (\n        <div style={{ backgroundColor: 'transparent', height: '200px', width: '400px', flex: 1 }}>\n            {donationToShow &&\n                <>\n                    <DonationHandler donationToShow={donationToShow} />\n                </>\n            }\n        </div>\n    );\n}\n\nconst DonationHandler = (donationToShow) => {\n    const donation = donationToShow.donationToShow;\n    return (\n        <div style={{ display: 'flex', flex: 1, flexDirection: 'column', fontFamily: 'Montserrat', backgroundColor: '#f0f0' }}>\n            <div\n                className={styles.donationBubble}\n                style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-around',\n                    width: 'fit-content',\n                    minWidth: '340px',\n                    height: '60px',\n                    borderRadius: '18px',\n                    padding: '0 18px',\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start'\n                }}\n            >\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <p style={{ display: 'flex', color: 'white', fontSize: '1.05rem', textAlign: 'center' }}>\n                        <b style={{ color: '#09ffd2' }}>{donation.twitchUserName}</b>\n                        <div style={{ margin: '0 6px' }}>ha enviado</div>\n                        <b style={{ color: '#09ffd2' }}>{donation.amountQoins} Qoins</b>\n                    </p>\n                </div>\n                <div style={{ width: '10px' }}></div>\n                <div style={{ display: 'flex', flex: 1, alignSelf: 'center' }}>\n                    <DonatedQoin style={{ display: 'flex', flex: 1 }} />\n                </div>\n            </div>\n            {donation.message !== '' &&\n                <>\n                    <div style={{ display: 'flex', height: '6px' }}></div>\n                    <div style={{\n                        display: 'flex',\n                        width: 'fit-content',\n                        backgroundColor: '#4D00FB',\n                        borderRadius: '18px',\n                        borderBottomLeftRadius: donation.isRightSide ? '18px' : '4px',\n                        borderBottomRightRadius: donation.isRightSide ? '4px' : '18px',\n                        padding: '16.3px 20.4px',\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start'\n                    }}>\n                        <p style={{ display: 'flex', color: 'white', fontSize: '1rem' }}>{donation.message}</p>\n                    </div>\n                </>\n            }\n        </div >\n    )\n}\n\nexport default LiveDonations;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["207","208","209","210","211","212","213","214","215"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["216","217"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ESvg } from './../../assets/e.svg';\nimport HeartHands from './../../assets/HeartHands.png';\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        height: '100vh'\n    },\n    paymentInfoContainer: {\n        paddingLeft: 32,\n        paddingRight: 64,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    eImageContainer: {\n        display: 'flex',\n        width: 80,\n        height: 80,\n        borderRadius: 20,\n        backgroundColor: '#141833',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    subscriptionBought: {\n        marginTop: 48,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    subTerms: {\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    totalPaid: {\n        fontSize: 48,\n        fontWeight: '600',\n        color: 'rgba(255, 255, 255, .9)'\n    },\n    interval: {\n        marginLeft: 6,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    paymentDetails: {\n        marginTop: 48,\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    subscriptionType: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentInterval: {\n        marginTop: 8,\n        fontSize: 14,\n        fontWeight: '400',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    itemCost: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentUntilTodayContainer: {\n        marginTop: 56,\n        color: '#FFF',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    paymentUntilToday: {\n        fontSize: 24,\n        fontWeight: '500'\n    },\n    thanksCardContainer: {\n        width: '450px',\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    thanksCard: {\n        backgroundColor: '#141833',\n        display: 'inline-block',\n        color: '#FFF',\n        maxWidth: '80%',\n        borderRadius: 35\n    },\n    cardContentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: 30,\n        paddingRight: 30\n    },\n    thanksTitle: {\n        marginTop: 8,\n        fontSize: 18,\n        fontWeight: '700',\n        textAlign: 'center'\n    },\n    thanksDescription: {\n        marginTop: 24,\n        fontSize: 14,\n        fontWeight: '500',\n        lineHeight: '22px',\n        textAlign: 'center',\n        marginRight: 48,\n        marginLeft: 48\n    },\n    publishButton: {\n        marginTop: 64,\n        marginLeft: 30,\n        marginRight: 30,\n        backgroundColor: '#0AFFD2',\n        borderRadius: 10,\n        color: '#4E2D92',\n        fontSize: 16,\n        fontWeight: '700',\n        paddingTop: 19,\n        paddingBottom: 19,\n        '&:hover': {\n            backgroundColor: '#0AFFD2',\n            opacity: '.95'\n        }\n    },\n    backToDashboardButton: {\n        marginTop: 16,\n        marginBottom: 16,\n        fontSize: 16,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    }\n}));\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst ChargeConfirmationPage = ({ user }) => {\n    const [totalPaid, setTotalPaid] = useState(0);\n    const [interval, setInterval] = useState('');\n    const [intervalText, setIntervalText] = useState('');\n    const [plan, setPlan] = useState('');\n    const classes = useStyles();\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getDetails() {\n            const id = query.get('subscriptionId');\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\n            setTotalPaid(details.val().totalPaid);\n\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\n\n            setIntervalText(details.val().interval);\n\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\n        }\n\n        if (user && user.uid) {\n            getDetails();\n        }\n    }, [user]);\n\n    const onPublishStreamClick = () => {\n        history.push('/create');\n    }\n\n    const onBackToDashboardClick = () => {\n        history.push('/profile');\n    }\n\n    return (\n        <Grid container alignContent='center' className={classes.container}>\n            <Grid item md={6} className={classes.paymentInfoContainer}>\n                <div className={classes.eImageContainer}>\n                    <ESvg />\n                </div>\n                <p className={classes.subscriptionBought}>\n                    {plan && intervalText &&\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                    }\n                </p>\n                <div className={classes.subTerms}>\n                    <p className={classes.totalPaid}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                    <p className={classes.interval}>\n                        {interval}\n                    </p>\n                </div>\n                <div className={classes.paymentDetails}>\n                    <div>\n                        <p className={classes.subscriptionType}>\n                            {plan}\n                        </p>\n                        <p className={classes.paymentInterval}>\n                            {intervalText &&\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                            }\n                        </p>\n                    </div>\n                    <p className={classes.itemCost}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentUntilTodayContainer}>\n                    <p className={classes.paymentUntilToday}>\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\n                    </p>\n                    <p className={classes.paymentUntilToday}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n            </Grid>\n            <Grid item md={6} className={classes.thanksCardContainer}>\n                <Card className={classes.thanksCard}>\n                    <div className={classes.cardContentContainer}>\n                        <img src={HeartHands} />\n                        <CardContent>\n                            <p className={classes.thanksTitle}>\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\n                            </p>\n                            <p className={classes.thanksDescription}>\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\n                            </p>\n                        </CardContent>\n                        <Button fullWidth variant='contained'\n                            className={classes.publishButton}\n                            onClick={onPublishStreamClick}>\n                            {t('ChargeConfirmationPage.publishStream')}\n                        </Button>\n                        <Button className={classes.backToDashboardButton}\n                            onClick={onBackToDashboardClick}>\n                            {t('ChargeConfirmationPage.backToDashboard')}\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ChargeConfirmationPage;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CloseStreamDialog/CloseStreamDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],{"ruleId":"218","severity":1,"message":"219","line":16,"column":1,"nodeType":"220","endLine":16,"endColumn":52},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"221","replacedBy":"225"},{"ruleId":"223","replacedBy":"226"},{"ruleId":"221","replacedBy":"227"},{"ruleId":"223","replacedBy":"228"},{"ruleId":"221","replacedBy":"229"},{"ruleId":"223","replacedBy":"230"},{"ruleId":"221","replacedBy":"231"},{"ruleId":"223","replacedBy":"232"},{"ruleId":"221","replacedBy":"233"},{"ruleId":"223","replacedBy":"234"},{"ruleId":"235","severity":1,"message":"236","line":120,"column":8,"nodeType":"237","endLine":120,"endColumn":14,"suggestions":"238"},{"ruleId":"239","severity":1,"message":"240","line":246,"column":99,"nodeType":"241","messageId":"242","endLine":246,"endColumn":101},{"ruleId":"235","severity":1,"message":"243","line":211,"column":8,"nodeType":"237","endLine":211,"endColumn":81,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":14,"column":8,"nodeType":"247","messageId":"248","endLine":14,"endColumn":23},{"ruleId":"218","severity":1,"message":"219","line":26,"column":1,"nodeType":"220","endLine":26,"endColumn":51},{"ruleId":"245","severity":1,"message":"249","line":14,"column":28,"nodeType":"247","messageId":"248","endLine":14,"endColumn":45},{"ruleId":"235","severity":1,"message":"250","line":91,"column":8,"nodeType":"237","endLine":91,"endColumn":68,"suggestions":"251"},{"ruleId":"245","severity":1,"message":"252","line":2,"column":67,"nodeType":"247","messageId":"248","endLine":2,"endColumn":74},{"ruleId":"245","severity":1,"message":"253","line":13,"column":28,"nodeType":"247","messageId":"248","endLine":13,"endColumn":36},{"ruleId":"245","severity":1,"message":"254","line":16,"column":28,"nodeType":"247","messageId":"248","endLine":16,"endColumn":33},{"ruleId":"245","severity":1,"message":"255","line":233,"column":12,"nodeType":"247","messageId":"248","endLine":233,"endColumn":29},{"ruleId":"245","severity":1,"message":"256","line":237,"column":12,"nodeType":"247","messageId":"248","endLine":237,"endColumn":23},{"ruleId":"245","severity":1,"message":"257","line":240,"column":12,"nodeType":"247","messageId":"248","endLine":240,"endColumn":21},{"ruleId":"245","severity":1,"message":"258","line":240,"column":23,"nodeType":"247","messageId":"248","endLine":240,"endColumn":35},{"ruleId":"235","severity":1,"message":"259","line":286,"column":8,"nodeType":"237","endLine":286,"endColumn":14,"suggestions":"260"},{"ruleId":"245","severity":1,"message":"261","line":383,"column":11,"nodeType":"247","messageId":"248","endLine":383,"endColumn":24},{"ruleId":"235","severity":1,"message":"262","line":179,"column":8,"nodeType":"237","endLine":179,"endColumn":14,"suggestions":"263"},{"ruleId":"264","severity":1,"message":"265","line":235,"column":25,"nodeType":"266","endLine":235,"endColumn":49},"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-native-reassign",["267"],"no-negated-in-lhs",["268"],["267"],["268"],["267"],["268"],["267"],["268"],["267"],["268"],["267"],["268"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["269"],"array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'onPong', 'rewardsAreCreated', and 't'. Either include them or remove the dependency array.",["270"],"no-unused-vars","'LanguageHandler' is defined but never used.","Identifier","unusedVar","'setAlertSideRight' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'alertSideRight'. Either include it or remove the dependency array.",["271"],"'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["272"],"'copyTwitchURL' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["273"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [history, user]",{"range":"284","text":"285"},"Update the dependencies array to be: [streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",{"range":"286","text":"287"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]",{"range":"288","text":"289"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"290","text":"291"},"Update the dependencies array to be: [query, t, user]",{"range":"292","text":"293"},[4100,4106],"[history, user]",[7598,7671],"[streamId, connectedToTwitch, user, rewardsIds, oldUser, streamTimestamp, rewardsAreCreated, t, onPong]",[3625,3685],"[streamerId, streamerUid, donationQueue, listenersAreSetted, alertSideRight]",[8801,8807],"[socialLinksInitialValue, twitchURL, user]",[4767,4773],"[query, t, user]"]
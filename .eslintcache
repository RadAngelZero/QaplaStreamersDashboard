[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js":"43","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"44","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"45","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"46","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"47","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTerms/QaplaTerms.jsx":"48","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"49","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"50","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"51","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"52","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QlanProgressBar/QlanProgressBar.jsx":"53","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QStore/QStore.jsx":"54"},{"size":18723,"mtime":1652735299723,"results":"55","hashOfConfig":"56"},{"size":18558,"mtime":1652808911838,"results":"57","hashOfConfig":"56"},{"size":4448,"mtime":1652739620592,"results":"58","hashOfConfig":"56"},{"size":6661,"mtime":1652308022284,"results":"59","hashOfConfig":"56"},{"size":226,"mtime":1649101763451,"results":"60","hashOfConfig":"56"},{"size":3579,"mtime":1614731664824,"results":"61","hashOfConfig":"56"},{"size":835,"mtime":1642711713952,"results":"62","hashOfConfig":"56"},{"size":16438,"mtime":1650310830002,"results":"63","hashOfConfig":"56"},{"size":5766,"mtime":1652481463317,"results":"64","hashOfConfig":"56"},{"size":1799,"mtime":1648248621497,"results":"65","hashOfConfig":"56"},{"size":1083,"mtime":1650310829993,"results":"66","hashOfConfig":"56"},{"size":7493,"mtime":1650310830006,"results":"67","hashOfConfig":"56"},{"size":1625,"mtime":1650310830018,"results":"68","hashOfConfig":"56"},{"size":7544,"mtime":1650310829994,"results":"69","hashOfConfig":"56"},{"size":6375,"mtime":1650310830026,"results":"70","hashOfConfig":"56"},{"size":362,"mtime":1614731664838,"results":"71","hashOfConfig":"56"},{"size":8238,"mtime":1650310829995,"results":"72","hashOfConfig":"56"},{"size":12687,"mtime":1652287782961,"results":"73","hashOfConfig":"56"},{"size":890,"mtime":1650310821741,"results":"74","hashOfConfig":"56"},{"size":1535,"mtime":1649112351404,"results":"75","hashOfConfig":"56"},{"size":19652,"mtime":1652741022062,"results":"76","hashOfConfig":"56"},{"size":3357,"mtime":1650310830003,"results":"77","hashOfConfig":"56"},{"size":2011,"mtime":1650310829999,"results":"78","hashOfConfig":"56"},{"size":527,"mtime":1636998131402,"results":"79","hashOfConfig":"56"},{"size":1439,"mtime":1650310821738,"results":"80","hashOfConfig":"56"},{"size":3339,"mtime":1650310830005,"results":"81","hashOfConfig":"56"},{"size":383,"mtime":1650310830005,"results":"82","hashOfConfig":"56"},{"size":3036,"mtime":1650310830011,"results":"83","hashOfConfig":"56"},{"size":5675,"mtime":1650310830004,"results":"84","hashOfConfig":"56"},{"size":9586,"mtime":1652287782963,"results":"85","hashOfConfig":"56"},{"size":4218,"mtime":1649267933795,"results":"86","hashOfConfig":"56"},{"size":30146,"mtime":1652743163193,"results":"87","hashOfConfig":"56"},{"size":1288,"mtime":1648248621496,"results":"88","hashOfConfig":"56"},{"size":3844,"mtime":1650310830005,"results":"89","hashOfConfig":"56"},{"size":13345,"mtime":1650310830004,"results":"90","hashOfConfig":"56"},{"size":1592,"mtime":1650310830008,"results":"91","hashOfConfig":"56"},{"size":34276,"mtime":1650310830010,"results":"92","hashOfConfig":"56"},{"size":3457,"mtime":1652287782962,"results":"93","hashOfConfig":"56"},{"size":20379,"mtime":1651968115549,"results":"94","hashOfConfig":"56"},{"size":629,"mtime":1635283796967,"results":"95","hashOfConfig":"56"},{"size":28150,"mtime":1651968128791,"results":"96","hashOfConfig":"56"},{"size":14755,"mtime":1650310830011,"results":"97","hashOfConfig":"56"},{"size":6918,"mtime":1650381325653,"results":"98","hashOfConfig":"56"},{"size":2079,"mtime":1650310830014,"results":"99","hashOfConfig":"56"},{"size":2975,"mtime":1614731664830,"results":"100","hashOfConfig":"56"},{"size":17706,"mtime":1652736904676,"results":"101","hashOfConfig":"56"},{"size":3416,"mtime":1650310830004,"results":"102","hashOfConfig":"56"},{"size":29202,"mtime":1650310830006,"results":"103","hashOfConfig":"56"},{"size":8157,"mtime":1652308002849,"results":"104","hashOfConfig":"56"},{"size":695,"mtime":1635283796969,"results":"105","hashOfConfig":"56"},{"size":1023,"mtime":1650310829996,"results":"106","hashOfConfig":"56"},{"size":870,"mtime":1650310830028,"results":"107","hashOfConfig":"56"},{"size":6312,"mtime":1652287782962,"results":"108","hashOfConfig":"56"},{"size":4402,"mtime":1652815902677,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rfo3np",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"155"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"127"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"187"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"155"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"151"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"187"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],["246","247"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["248"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["249","250"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],["251","252"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],["253","254"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],["255","256"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],["257","258"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",[],["259","260"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],["261","262"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],["263","264"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],["265","266"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["267","268"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ESvg } from './../../assets/e.svg';\nimport HeartHands from './../../assets/HeartHands.png';\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        height: '100vh'\n    },\n    paymentInfoContainer: {\n        paddingLeft: 32,\n        paddingRight: 64,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    eImageContainer: {\n        display: 'flex',\n        width: 80,\n        height: 80,\n        borderRadius: 20,\n        backgroundColor: '#141833',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    subscriptionBought: {\n        marginTop: 48,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    subTerms: {\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    totalPaid: {\n        fontSize: 48,\n        fontWeight: '600',\n        color: 'rgba(255, 255, 255, .9)'\n    },\n    interval: {\n        marginLeft: 6,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    paymentDetails: {\n        marginTop: 48,\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    subscriptionType: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentInterval: {\n        marginTop: 8,\n        fontSize: 14,\n        fontWeight: '400',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    itemCost: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentUntilTodayContainer: {\n        marginTop: 56,\n        color: '#FFF',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    paymentUntilToday: {\n        fontSize: 24,\n        fontWeight: '500'\n    },\n    thanksCardContainer: {\n        width: '450px',\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    thanksCard: {\n        backgroundColor: '#141833',\n        display: 'inline-block',\n        color: '#FFF',\n        maxWidth: '80%',\n        borderRadius: 35\n    },\n    cardContentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: 30,\n        paddingRight: 30\n    },\n    thanksTitle: {\n        marginTop: 8,\n        fontSize: 18,\n        fontWeight: '700',\n        textAlign: 'center'\n    },\n    thanksDescription: {\n        marginTop: 24,\n        fontSize: 14,\n        fontWeight: '500',\n        lineHeight: '22px',\n        textAlign: 'center',\n        marginRight: 48,\n        marginLeft: 48\n    },\n    publishButton: {\n        marginTop: 64,\n        marginLeft: 30,\n        marginRight: 30,\n        backgroundColor: '#0AFFD2',\n        borderRadius: 10,\n        color: '#4E2D92',\n        fontSize: 16,\n        fontWeight: '700',\n        paddingTop: 19,\n        paddingBottom: 19,\n        '&:hover': {\n            backgroundColor: '#0AFFD2',\n            opacity: '.95'\n        }\n    },\n    backToDashboardButton: {\n        marginTop: 16,\n        marginBottom: 16,\n        fontSize: 16,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    }\n}));\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst ChargeConfirmationPage = ({ user }) => {\n    const [totalPaid, setTotalPaid] = useState(0);\n    const [interval, setInterval] = useState('');\n    const [intervalText, setIntervalText] = useState('');\n    const [plan, setPlan] = useState('');\n    const classes = useStyles();\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getDetails() {\n            const id = query.get('subscriptionId');\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\n            setTotalPaid(details.val().totalPaid);\n\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\n\n            setIntervalText(details.val().interval);\n\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\n        }\n\n        if (user && user.uid) {\n            getDetails();\n        }\n    }, [user]);\n\n    const onPublishStreamClick = () => {\n        history.push('/create');\n    }\n\n    const onBackToDashboardClick = () => {\n        history.push('/profile');\n    }\n\n    return (\n        <Grid container alignContent='center' className={classes.container}>\n            <Grid item md={6} className={classes.paymentInfoContainer}>\n                <div className={classes.eImageContainer}>\n                    <ESvg />\n                </div>\n                <p className={classes.subscriptionBought}>\n                    {plan && intervalText &&\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                    }\n                </p>\n                <div className={classes.subTerms}>\n                    <p className={classes.totalPaid}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                    <p className={classes.interval}>\n                        {interval}\n                    </p>\n                </div>\n                <div className={classes.paymentDetails}>\n                    <div>\n                        <p className={classes.subscriptionType}>\n                            {plan}\n                        </p>\n                        <p className={classes.paymentInterval}>\n                            {intervalText &&\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                            }\n                        </p>\n                    </div>\n                    <p className={classes.itemCost}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentUntilTodayContainer}>\n                    <p className={classes.paymentUntilToday}>\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\n                    </p>\n                    <p className={classes.paymentUntilToday}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n            </Grid>\n            <Grid item md={6} className={classes.thanksCardContainer}>\n                <Card className={classes.thanksCard}>\n                    <div className={classes.cardContentContainer}>\n                        <img src={HeartHands} />\n                        <CardContent>\n                            <p className={classes.thanksTitle}>\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\n                            </p>\n                            <p className={classes.thanksDescription}>\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\n                            </p>\n                        </CardContent>\n                        <Button fullWidth variant='contained'\n                            className={classes.publishButton}\n                            onClick={onPublishStreamClick}>\n                            {t('ChargeConfirmationPage.publishStream')}\n                        </Button>\n                        <Button className={classes.backToDashboardButton}\n                            onClick={onBackToDashboardClick}>\n                            {t('ChargeConfirmationPage.backToDashboard')}\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ChargeConfirmationPage;",["269","270"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["271","272","273"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport styles from './LiveDonations.module.css';\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation, getStreamerAlertsSettings, getStreamerMediaContent, listenQaplaChallengeXQProgress, getChallengeLevelGoal, getStreamerChallengeCategory, getChallengePreviousLevelGoal, listenToStreamerAlertsSettings } from '../../services/database';\nimport donationAudio from '../../assets/notification.wav';\nimport { speakCheerMessage } from '../../services/functions';\nimport { IMAGE, TEST_MESSAGE_SPEECH_URL } from '../../utilities/Constants';\nimport QlanProgressBar from '../QlanProgressBar/QlanProgressBar';\n\nconst LiveDonations = () => {\n    const [streamerUid, setStreamerUid] = useState('');\n    const [donationQueue, setDonationQueue] = useState([]);\n    const [donationToShow, setDonationToShow] = useState(null);\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\n    const [alertSideRight, setAlertSideRight] = useState(false);\n    const [isPlayingAudio, setIsPlayingAudio] = useState(false);\n    const [mediaContent, setMediaContent] = useState({ videos: [], images: [] });\n    const [qaplaChallengeXQ, setQaplaChallengeXQ] = useState(0);\n    const [nextGoalXQ, setNextGoalXQ] = useState(0);\n    const [previousGoalXQ, setPreviousGoalXQ] = useState(0);\n    const [showQaplaChallengeProgress, setShowQaplaChallengeProgress] = useState(false);\n    const { streamerId } = useParams();\n\n    useEffect(() => {\n        const pushDonation = (donation) => {\n            setDonationQueue((array) => [donation, ...array]);\n        }\n\n        const popDonation = () => {\n            const indexToPop = donationQueue.length - 1;\n            const donationToPop = donationQueue[indexToPop];\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\n\n            return donationToPop;\n        }\n\n        async function getStreamerUid() {\n            if (streamerId) {\n                const uid = await getStreamerUidWithTwitchId(streamerId);\n                setStreamerUid(uid);\n\n                listenToStreamerAlertsSettings(uid, (streamerSettings) => {\n                    if (streamerSettings.exists()) {\n                        setAlertSideRight(streamerSettings.val().alertSideRight);\n                        setShowQaplaChallengeProgress(streamerSettings.val().showQaplaChallengeProgress !== false);\n                    }\n                });\n\n                listenForTestCheers(uid, (donation) => {\n                    pushDonation({ ...donation.val(), id: donation.key });\n                });\n\n                const streamerMedia = await getStreamerMediaContent(uid);\n                setMediaContent(streamerMedia.val());\n            }\n        }\n\n        async function loadDonations() {\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\n                pushDonation({ ...donation.val(), id: donation.key });\n            });\n        }\n\n        if (streamerUid && !listenersAreSetted) {\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\n                setListenersAreSetted(true);\n                if (isStreaming.exists() && isStreaming.val()) {\n                    setTimeout(() => {\n                        loadDonations();\n                    }, 150000);\n                } else {\n                    removeListenerForUnreadStreamerCheers(streamerUid);\n                    setDonationQueue([]);\n                }\n            });\n        }\n\n        if (donationQueue.length > 0 && !isPlayingAudio) {\n            setIsPlayingAudio(true);\n            const donation = popDonation();\n\n            async function showCheer() {\n                if (mediaContent && mediaContent['images'] && mediaContent['images'].length > 0) {\n                    const maxLength = mediaContent['images'].length - 1;\n                    const mediaToShow = mediaContent['images'][Math.floor(Math.random() * (maxLength - 0 + 1)) + 0];\n                    donation.media = { type: IMAGE, source: mediaToShow };\n                }\n\n                let audio = new Audio(donationAudio);\n                if (donation.message) {\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                        audio = new Audio(TEST_MESSAGE_SPEECH_URL);\n                    } else {\n                        const messageToRead = `${donation.twitchUserName} dice: ${donation.message}`;\n\n                        window.analytics.track('Cheer received', {\n                            user: donation.twitchUserName,\n                            containsMessage: true,\n                            message: messageToRead\n                        });\n                        const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\n                        audio = new Audio(cheerMessageUrl.data);\n                    }\n                } else {\n                    const messageToRead = `${donation.twitchUserName} te ha enviado ${donation.amountQoins} Qoins`;\n\n                    window.analytics.track('Cheer received', {\n                        user: donation.twitchUserName,\n                        containsMessage: false\n                    });\n                    const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\n                    audio = new Audio(cheerMessageUrl.data);\n                }\n\n                donation.isRightSide = alertSideRight;\n\n                setDonationToShow(donation);\n                audio.onended = () => {\n                    setTimeout(() => {\n                        setDonationToShow(null);\n                    }, 3000);\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                        removeTestDonation(streamerUid, donation.id);\n                    } else {\n                        markDonationAsRead(streamerUid, donation.id);\n                    }\n\n                    setTimeout(() => {\n                        setIsPlayingAudio(false);\n                    }, 6000);\n                }\n\n                audio.play();\n            }\n\n            showCheer();\n        }\n\n        if (!streamerUid) {\n            getStreamerUid();\n        }\n\n        if (streamerUid) {\n            async function checkIfUserIsUserParticipantOfQaplaChallenge() {\n                async function getNextGoal(xq, category) {\n                    const neededXQ = await getChallengeLevelGoal(category, xq + 1);\n                    const previousGoalXQ = await getChallengePreviousLevelGoal(category, xq);\n\n                    if (neededXQ.exists()) {\n                        neededXQ.forEach((levelXQ) => {\n                            setNextGoalXQ(levelXQ.val());\n                        });\n\n                        previousGoalXQ.forEach((pastLevelXQ) => {\n                            setPreviousGoalXQ(pastLevelXQ.val());\n                        });\n\n                        setQaplaChallengeXQ(xq);\n                    } else {\n                        /**\n                         * Show some cool UI to let the streamer know he has achieved all the levels in the\n                         * Qapla Challenge\n                         */\n\n                         previousGoalXQ.forEach((pastLevelXQ) => {\n                            setNextGoalXQ(pastLevelXQ.val());\n                            setQaplaChallengeXQ(pastLevelXQ.val());\n                        });\n                    }\n                }\n\n                const userParticipation = await getStreamerChallengeCategory(streamerUid);\n                if (userParticipation.exists()) {\n                    listenQaplaChallengeXQProgress(streamerUid, (xqProgress) => {\n                        if (xqProgress.exists()) {\n                            getNextGoal(xqProgress.val(), userParticipation.val());\n                        }\n                    });\n                }  else {\n                    setShowQaplaChallengeProgress(false);\n                }\n            }\n\n            checkIfUserIsUserParticipantOfQaplaChallenge();\n        }\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio]);\n\n    document.body.style.backgroundColor = 'transparent';\n\n\n    const qaplaChallengeBarProgress = (qaplaChallengeXQ - previousGoalXQ)/(nextGoalXQ - previousGoalXQ);\n    return (\n        <div style={{ display: 'flex', backgroundColor: 'transparent', height: '100vh', width: '100%', placeItems: 'flex-end' }}>\n            {donationToShow &&\n                <>\n                    <DonationHandler donationToShow={donationToShow} />\n                </>\n            }\n            {showQaplaChallengeProgress &&\n               <QlanProgressBar\n                    percentage={qaplaChallengeBarProgress}\n                    xq={qaplaChallengeXQ}\n                />\n            }\n        </div>\n    );\n}\n\nconst DonationHandler = (donationToShow) => {\n    const donation = donationToShow.donationToShow;\n    return (\n        <div style={{\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column',\n            backgroundColor: '#f0f0',\n            padding: '0px 40px',\n            marginBottom: '30px',\n            marginLeft: donation.isRightSide ? '0px' : '20px',\n            marginRight: donation.isRightSide ? '20px' : '0px'\n        }}>\n            {donation.media && donation.media.type === IMAGE &&\n                <img src={donation.media.source} alt='' style={{\n                display: 'flex',\n                alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                maxHeight: '250px',\n                objectFit: 'scale-down'\n            }} />}\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-around',\n                    marginTop: '20px',\n                    width: 'fit-content',\n                    backgroundColor: '#4D00FB',\n                    marginLeft: donation.isRightSide ? '0px' : '-30px',\n                    marginRight: donation.isRightSide ? '-30px' : '0px',\n                    borderRadius: '30px',\n                    padding: '24px 24px',\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                    zIndex: 10\n                }}\n            >\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <p style={{\n                        display: 'flex',\n                        color: 'white',\n                        fontSize: '26px',\n                        textAlign: 'center'\n                    }}>\n                        <b style={{ color: '#0AFFD2' }}>{donation.twitchUserName}</b>\n                        <div style={{ margin: '0 6px' }}>ha enviado</div>\n                        <b style={{ color: '#0AFFD2', fontWeight: '700', }}>{donation.amountQoins} Qoins</b>\n                    </p>\n                </div>\n                <div style={{ width: '10px' }}></div>\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <DonatedQoin style={{ display: 'flex', width: '38px', height: '38px' }} />\n                </div>\n            </div>\n            {donation.message !== '' &&\n                <>\n                    <div style={{\n                        display: 'flex',\n                        width: 'fit-content',\n                        backgroundColor: '#FFFFFF',\n                        marginTop: '-20px',\n                        borderRadius: '30px',\n                        borderTopLeftRadius: donation.isRightSide ? '30px' : '0px',\n                        borderTopRightRadius: donation.isRightSide ? '0px' : '30px',\n                        padding: '30px',\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                    }}>\n                        <p style={{\n                            display: 'flex',\n                            color: '#0D1021',\n                            fontSize: '24px',\n                            fontWeight: '600',\n                            lineHeight: '36px',\n                            letterSpacing: '0.6px'\n                        }}>{donation.message}</p>\n                    </div>\n                </>\n            }\n        </div >\n    )\n}\n\nexport default LiveDonations;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],["274","275"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",["276"],"import React, { Component } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport styles from './StreamsSwitch.module.css';\n\nimport { ReactComponent as Clock } from './../../assets/Clock.svg';\nimport { ReactComponent as Calendar } from './../../assets/Calendar.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    mainContainer: {\n        display: 'flex',\n        width: '84px',\n        height: '40px',\n        backgroundColor: '#141735',\n        borderRadius: '100px',\n        flexDirection: 'row',\n        '&:hover': {\n            cursor: 'pointer'\n        }\n    },\n    iconContainer: {\n        display: 'flex',\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n}));\n\nconst StreamsSwitch = ({ switchPosition, onClick }) => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.mainContainer} onClick={onClick}>\n            <div className={classes.iconContainer} style={{paddingLeft: '6px'}}>\n                <Clock style={{\n                    opacity: switchPosition ? 1 : 0.4,\n                }}\n                    className={switchPosition ? styles.iconSelected : styles.icon} />\n            </div>\n            <div className={classes.iconContainer} style={{paddingRight: '6px'}}>\n                <Calendar style={{\n                    opacity: switchPosition ? 0.4 : 1,\n                }}\n                    className={switchPosition ? styles.icon : styles.iconSelected} />\n            </div>\n        </div>\n    )\n}\n\nexport default StreamsSwitch;",["277","278"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["279","280"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["281","282"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\n\nconst useStyles = makeStyles(() => ({\n    languageLabel: {\n        color: '#FFF',\n        fontSize: 16,\n        fontWeight: 600\n    }\n}));\n\nconst LanguageSelect = () => {\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\n    const [langData, setLangData] = useState([])\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        let tempLangArr = []\n        getAvailableLanguages().map((languageCode) => (\n            tempLangArr.push({\n                value: languageCode,\n                label: t(`LanguageHandler.languages.${languageCode}`)\n            })\n        ))\n        setLangData(tempLangArr)\n    }, [t])\n\n    const onLanguageChanged = (languageCode) => {\n        changeLanguage(languageCode);\n        setCurrentLanguageCode(languageCode);\n    }\n\n    return (\n        <div style={{\n            display: 'flex'\n        }}>\n            <TranslateIcon style={{\n                display: 'flex'\n            }} />\n            {/* The style of this select needs to be implemented inline */}\n            <div style={{\n                marginTop: '-10px',\n            }}>\n                <StreamerSelect\n                    style={{ backgroundColor: '#141833' }}\n                    data={langData}\n                    value={currentLanguageCode}\n                    onChange={onLanguageChanged}\n                    overflowY='hidden'\n                    overflowX='hidden'\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LanguageSelect;",["283","284"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],["285","286"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["287"],"import React from 'react';\nimport { withStyles, Tabs } from '@material-ui/core';\n\nconst QaplaTabs = withStyles((theme) => ({\n    root: {\n        borderBottom: 'transparent',\n        [theme.breakpoints.down('md')]: {\n            paddingLeft: 45\n        }\n    },\n    indicator: {\n        backgroundColor: '#0AFFD2',\n    }\n}))(Tabs);\n\nexport default (props) => <QaplaTabs {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["288","289","290"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n    })\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;",["291","292"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],["293","294"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["295"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["296","297","298","299","300"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(4) + 1,\n        paddingTop: theme.spacing(4) + 1,\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["301","302","303","304","305","306","307","308","309"],"import React, { useEffect, useState } from 'react';\nimport { withStyles, makeStyles, Button, Chip, Switch, Tabs, Tab, Tooltip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\nimport StreamerProfileEditorOnBoarding from '../StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding';\n\nimport styles from './StreamerProfileEditor.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getStreamerLinks, listenStreamerPublicProfile, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\nimport { ReactComponent as EditIcon } from './../../assets/Edit.svg';\nimport { ReactComponent as CameraIcon } from './../../assets/Camera.svg';\nimport { ReactComponent as XIcon } from './../../assets/xIcon.svg';\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport { uploadImage } from '../../services/storage';\nimport { MIN_TAGS, PROFILE_BACKGROUND_GRADIENTS } from '../../utilities/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    linkPlaceholder: {\n        '&::placeholder': {\n            color: 'rgba(108, 93, 211, 0.4)'\n        }\n    },\n    linkInput: {\n        backgroundColor: '#202750',\n        color: '#FFF',\n        '&.Mui-disabled': {\n            color: '#AAA'\n        }\n    }\n}));\n\nconst EditBioButton = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        justifyItems: 'center',\n        padding: '0.8rem 1rem',\n        borderRadius: '0.8rem',\n        maxHeight: '46px',\n        textTransform: 'capitalize',\n        fontSize: '14px',\n        fontWeight: 600,\n        '&:hover': {\n            backgroundColor: '#24456680'\n        },\n        '&:disabled': {\n            backgroundColor: '#272D5780',\n            color: '#FFFFFF99',\n        },\n        '&#cover': {\n            backgroundColor: '#272D5780'\n        }\n    },\n\n}))(Button);\n\nconst QaplaChip = withStyles(() => ({\n    root: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFFA6',\n        minHeight: '41px',\n        borderRadius: '100rem',\n        padding: '1.2rem 0.4rem',\n        fontWeight: 600,\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n            backgroundColor: '#4040FF4F',\n            opacity: 0.8\n        }\n    },\n    deletable: {\n        backgroundColor: '#4040FF4F',\n        color: '#FFFFFFA6',\n        '&:focus': {\n            backgroundColor: '#4040FF4F',\n        },\n        '&:hover': {\n\n        }\n    },\n    deleteIcon: {\n        display: 'flex',\n        backgroundColor: '#FFFD',\n        borderRadius: '100px',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '&:hover': {\n            backgroundColor: '#F00D'\n        },\n        '&:active': {\n            backgroundColor: '#A00D'\n        }\n    }\n}))(Chip)\n\nconst QaplaSwitch = withStyles(() => ({\n    root: {\n\n    },\n    track: {\n        backgroundColor: '#202750'\n    },\n    checked: {\n        color: '#2CE9D2 !important',\n        '& + .MuiSwitch-track': {\n            backgroundColor: '#202750 !important'\n        }\n    },\n    thumb: {\n\n    }\n}))(Switch);\n\nconst QaplaTabs = withStyles({\n    root: {\n        minHeight: 0,\n        marginTop: '3rem'\n    },\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            // maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#0AFFD2',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        padding: '0 0.6rem',\n        minWidth: 0,\n        minHeight: 0,\n        textTransform: 'none',\n        color: '#fff',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n\nfunction TabPanel(props) {\n    const { children, value, index, className, ...other } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`profile-editor-tabpanel-${index}`}\n            aria-labelledby={`profile-editor-tab-${index}`}\n            {...other}\n            className={className}\n        >\n            {value === index && (\n                <>\n                    {children}\n                </>\n            )}\n        </div>\n    )\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst StreamerProfileEditor = ({ user }) => {\n    const socialLinksInitialValue = [\n        {\n            socialPage: 'Twitch',\n            value: ''\n        },\n        {\n            socialPage: 'Twitter',\n            value: ''\n        },\n        {\n            socialPage: 'Instagram',\n            value: ''\n        },\n        {\n            socialPage: 'Discord',\n            value: ''\n        },\n        {\n            socialPage: 'Youtube',\n            value: ''\n        },\n        /* {\n            socialPage: 'TikTok',\n            value: ''\n        } */\n    ];\n\n    const socialLinksPlaceholders = {\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\n        Discord: `https://discord.gg/inviteCode`,\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`,\n        tiktok: `https://www.tiktok.com/@${user ? user.displayName : ''}`\n    };\n\n    const classes = useStyles();\n    const [dataIsFetched, setDataIsFetched] = useState(false);\n    const [selectedTab, setSelectedTab] = useState(0);\n    const [editingBio, setEditingBio] = useState(false);\n    const [addingTag, setAddingTag] = useState(false);\n    const [streamerBio, setStreamerBio] = useState('');\n    const [backgroundUrl, setBackgroundUrl] = useState('');\n    const [backgroundGradient, setBackgroundGradient] = useState(null);\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\n    const [streamerTags, setStreamerTags] = useState([]);\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\n    const [openTooltip, setOpenTooltip] = useState(false);\n    const [onBoardingDone, setOnBoardingDone] = useState(true);\n    const [onBoardingStep, setOnBoardingStep] = useState(0);\n    const [chipHover, setChipHover] = useState({});\n    const { t } = useTranslation();\n    const twitchURL = `https://www.twitch.tv/${user && user.login ? user.login : ''}`;\n\n    useEffect(() => {\n        async function getStreamerInfo() {\n            listenStreamerPublicProfile(user.uid, async (info) => {\n                if (info.exists()) {\n                    const { bio, tags, backgroundUrl, backgroundGradient } = info.val();\n                    if (!tags || tags.length < MIN_TAGS) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(4);\n                    }\n\n                    if (!bio) {\n                        setOnBoardingDone(false);\n                        setOnBoardingStep(3);\n                    }\n                    setStreamerBio(bio || '');\n                    setBackgroundGradient(backgroundGradient);\n                    setBackgroundUrl(backgroundUrl);\n                    setStreamerTags(tags || []);\n                } else {\n                    setOnBoardingDone(false);\n                }\n\n                const links = await getStreamerLinks(user.uid);\n                if (links.exists()) {\n                    setSocialLinks(links.val());\n                } else {\n                    /**\n                     * Set Twitch Link by default (we already know this link)\n                     */\n                    const socialLinksWithTwitchAdded = socialLinksInitialValue;\n                    socialLinksWithTwitchAdded[0].value = twitchURL;\n\n                    setSocialLinks(socialLinksInitialValue);\n                }\n\n                setDataIsFetched(true);\n            });\n        }\n\n        if (user && user.uid) {\n            getStreamerInfo();\n        }\n    }, [user]);\n\n    const onBoardingDoneByStreamer = async () => {\n        const min = 0;\n        const max = 4;\n        const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\n\n        const backgroundSelected = PROFILE_BACKGROUND_GRADIENTS[randomIndex];\n        setBackgroundGradient(backgroundSelected);\n\n        await updateStreamerPublicProfile(user.uid, {\n            backgroundGradient: backgroundSelected,\n            displayName: user.displayName,\n            photoUrl: user.photoUrl\n        });\n\n        window.analytics.track('Public profile onboarding done', {\n            uid: user.uid,\n            timestamp: (new Date()).getTime()\n        });\n        setOnBoardingDone(true);\n    }\n\n    const handleTabChange = (event, newValue) => {\n        setSelectedTab(newValue)\n    }\n\n    const handleTagDelete = async (indexToDelete) => {\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\n\n        try {\n            await updateStreamerPublicProfile(user.uid, { tags });\n            setStreamerTags(tags);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.deleteTag'));\n        }\n    }\n\n    const updateSocialLinks = (value, index) => {\n        setSocialLinksChanged(true);\n        let newArray = [...socialLinks];\n        newArray[index] = {\n            ...newArray[index],\n            value\n        };\n\n        setSocialLinks(newArray);\n    }\n\n    const saveLinks = async () => {\n        // Creates an array without the placeholder value\n        const objectToSave = {};\n        socialLinks.forEach((link, index) => {\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\n        });\n\n        try {\n            await saveStreamerLinks(user.uid, objectToSave);\n        } catch (error) {\n            console.log(error);\n            alert(t('StreamerProfileEditor.errors.updateLinks'));\n        }\n        setSocialLinksChanged(false);\n    }\n\n    const addTag = async () => {\n        setOnBoardingStep(4);\n        setAddingTag(true);\n    }\n\n    const uploadBackgroundImage = (e) => {\n        if (e.target.files[0]) {\n            const newBackgroundImage = (e.target.files[0]);\n            uploadImage(\n                newBackgroundImage,\n                `/StreamersProfilesBackgroundImages/${user.uid}`,\n                (progressValue) => setUploadImageStatus(progressValue * 100),\n                (error) => { alert('Error al agregar imagen'); console.log(error); },\n                async (url) => {\n                    try {\n                        await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\n                        alert(t('StreamerProfileEditor.confirmations.saveImage'));\n                    } catch (error) {\n                        alert(t('StreamerProfileEditor.errors.saveImage'));\n                        console.log(error);\n                    }\n                }\n            );\n\n            const reader = new FileReader();\n            reader.addEventListener('load', () => {\n                setBackgroundUrl(reader.result);\n            });\n\n            reader.readAsDataURL(e.target.files[0]);\n        }\n    }\n\n    const copyTwitchURL = () => {\n        navigator.clipboard.writeText(twitchURL);\n        setOpenTooltip(true);\n        setTimeout(() => {\n            setOpenTooltip(false);\n        }, 1250);\n    }\n\n    const createLinearGradientCSS = () => {\n        if (backgroundGradient) {\n            let colorsString = '';\n            backgroundGradient.colors.forEach((color, index) => {\n                if (index !== backgroundGradient.colors.length - 1) {\n                    colorsString += `${color},`;\n                } else {\n                    colorsString += color;\n                }\n            });\n\n            return `linear-gradient(${backgroundGradient.angle}deg, ${colorsString})`;\n        }\n\n        return '';\n    }\n\n    const editBio = () => {\n        setOnBoardingStep(3);\n        setEditingBio(true);\n    }\n\n    const cancelEditing = () => {\n        setEditingBio(false);\n        setAddingTag(false);\n    }\n\n    const onDragEnd = (result) => {\n        if (!result.destination) {\n            return\n        }\n        let source = result.source.index\n        let destination = result.destination.index\n\n        if (source === destination) {\n            return\n        }\n\n        const socialLinksCopy = [...socialLinks];\n        socialLinksCopy.splice(destination, 0, socialLinksCopy.splice(source, 1)[0]);\n\n        setSocialLinks(socialLinksCopy);\n        setSocialLinksChanged(true);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\n            {dataIsFetched &&\n                <>\n                    {onBoardingDone && !editingBio && !addingTag ?\n                        <>\n                            <div className={styles.coverContainer}>\n                                {backgroundUrl ?\n                                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\n                                    :\n                                    <div className={styles.cover} style={{ background: createLinearGradientCSS() }} />\n                                }\n                            </div>\n                            <div className={styles.editCoverButtonContainer}>\n                                <input\n                                    accept='image/*'\n                                    style={{ display: 'none' }}\n                                    type='file'\n                                    id='image-input'\n                                    onChange={uploadBackgroundImage} />\n                                <label htmlFor='image-input'>\n                                    <EditBioButton id='cover' component='span'>\n                                        <CameraIcon />\n                                        <div style={{ width: '0.4rem' }} />\n                                        {t('StreamerProfileEditor.editCover')}\n                                    </EditBioButton>\n                                </label>\n                            </div>\n                            <div className={styles.profileContainer}>\n                                <div className={styles.profilePicContainer}>\n                                    <img src={user.photoUrl} alt='User pfp' className={styles.profilePic} />\n                                </div>\n                                <div className={styles.streamerNameAndEditBioButtonContainer}>\n                                    <div className={styles.streamerNameContainer}>\n                                        <p className={styles.streamerName}>\n                                            {user.displayName}\n                                        </p>\n                                        <div className={styles.founderBadgeContainer}>\n                                            <FounderBadge className={styles.founderBadge} />\n                                        </div>\n                                    </div>\n                                    <div className={styles.editBioButtonContainer}>\n                                        <EditBioButton variant='contained'\n                                            onClick={editBio}>\n                                            {!editingBio ?\n                                                <>\n                                                    <EditIcon />\n                                                    <div style={{ width: '0.4rem' }} />\n                                                    {t('StreamerProfileEditor.editBio')}\n                                                </>\n                                                :\n                                                t('StreamerProfileEditor.saveChanges')\n                                            }\n                                        </EditBioButton>\n                                    </div>\n                                </div>\n                                {/* <div className={styles.twitchURLContainer}>\n                                    <a href={twitchURL} target='_blank' rel='noreferrer' className={styles.twitchURL} >{twitchURL}</a>\n                                    <Tooltip placement='top' open={openTooltip} title='Copiado'>\n                                        <CopyIcon onClick={copyTwitchURL} />\n                                    </Tooltip>\n                                </div> */}\n                                <div className={styles.bioContainer}>\n                                    <p className={styles.bioText} onClick={editBio}>\n                                        {streamerBio}\n                                    </p>\n                                </div>\n                                <ul className={styles.tagsList}>\n                                    {streamerTags.map((data, index) => {\n                                        return (\n                                            <li key={`chip-${data}-${index}`} className={styles.tag}>\n                                                <QaplaChip\n                                                    label={data}\n                                                    onDelete={() => handleTagDelete(index)}\n                                                />\n                                            </li>\n                                        )\n                                    })}\n                                    <li key='new' className={styles.tag}>\n                                        <QaplaChip onClick={addTag}\n                                            label={t('StreamerProfileEditor.addTag')}\n                                        />\n                                    </li>\n                                </ul>\n                                <div className={styles.showNextStreamsContainer}>\n                                    <p className={styles.showNextStreamsText}>\n                                        {t('StreamerProfileEditor.showUpcomingStreams')}\n                                    </p>\n                                    <QaplaSwitch\n                                        name='showNextStreams'\n                                    /** ToDo: Show streams in profile. Also show twitch status (online or offline) <= more of this on cloud function */\n                                    />\n                                </div>\n                                <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\n                                    <QaplaTab wid label={t('StreamerProfileEditor.social')} {...a11yProps(0)} />\n                                    {/* <QaplaTab label='Códigos de creador' {...a11yProps(1)} /> */}\n                                </QaplaTabs>\n                                <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\n                                    <DragDropContext onDragEnd={onDragEnd}>\n                                        <Droppable droppableId='links-droppable'>\n                                            {(provided, snapshot) => (\n                                                <div style={{ width: '100%' }}\n                                                    {...provided.droppableProps}\n                                                    ref={provided.innerRef}\n                                                >\n                                                    {socialLinks.map((data, index) => (\n                                                        <Draggable key={`draggable-link-${index}`} draggableId={`draggable-link-${index}`} index={index}>\n                                                            {(provided, snapshot) => (\n                                                                <div\n                                                                    ref={provided.innerRef}\n                                                                    {...provided.draggableProps}\n                                                                    {...provided.dragHandleProps}\n                                                                >\n                                                                    <div\n                                                                        style={{\n                                                                            display: 'flex',\n                                                                            flexDirection: 'row',\n                                                                            alignItems: 'center',\n                                                                            width: '100%'\n                                                                        }}>\n                                                                        <div style={{ display: 'flex', width: '100%' }}>\n                                                                            <StreamerTextInput\n                                                                                label={data.socialPage}\n                                                                                containerClassName={styles.socialLinkContainer}\n                                                                                labelClassName={styles.socialLinkLabel}\n                                                                                value={data.value}\n                                                                                disabled={data.socialPage.toLowerCase() === 'twitch'}\n                                                                                placeholder={socialLinksPlaceholders[data.socialPage]}\n                                                                                classes={{ input: classes.linkPlaceholder }}\n                                                                                textInputClassName={classes.linkInput}\n                                                                                fullWidth\n                                                                                onChange={(e) => updateSocialLinks(e.target.value, index)}\n                                                                            />\n                                                                        </div>\n                                                                        <div style={{\n                                                                            display: 'flex',\n                                                                            backgroundColor: '#141833',\n                                                                            width: '30px',\n                                                                            minWidth: '30px',\n                                                                            height: '45px',\n                                                                            marginBottom: '12px',\n                                                                            alignSelf: 'flex-end',\n                                                                            borderRadius: '8px'\n\n                                                                        }} >\n                                                                            <div style={{\n                                                                                display: 'flex',\n                                                                                flex: 1,\n                                                                                padding: '14px 10px',\n                                                                            }}>\n                                                                                <div style={{\n                                                                                    display: 'flex',\n                                                                                    flex: 1,\n                                                                                    flexDirection: 'column',\n                                                                                    justifyContent: 'space-between',\n                                                                                }}>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                    <div style={{\n                                                                                        display: 'flex',\n                                                                                        flex: 1,\n                                                                                        flexDirection: 'row',\n                                                                                        justifyContent: 'space-between',\n                                                                                        maxHeight: '3px'\n                                                                                    }}>\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                        <div style={{\n                                                                                            display: 'flex',\n                                                                                            backgroundColor: '#C4C4C4',\n                                                                                            width: '3px',\n                                                                                            height: '3px',\n                                                                                            borderRadius: '100px'\n                                                                                        }} />\n                                                                                    </div>\n                                                                                </div>\n\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            )}\n                                                        </Draggable>\n                                                    ))}\n                                                    {provided.placeholder}\n                                                </div>\n                                            )}\n                                        </Droppable>\n                                    </DragDropContext>\n                                    <br />\n                                    {socialLinksChanged &&\n                                        <ContainedButton onClick={saveLinks}>\n                                            {t('StreamerProfileEditor.saveChanges')}\n                                        </ContainedButton>\n                                    }\n                                </TabPanel>\n                                <TabPanel value={selectedTab} index={1}>\n                                    <p>b</p>\n                                </TabPanel>\n                            </div>\n                        </>\n                        :\n                        <StreamerProfileEditorOnBoarding step={onBoardingStep}\n                            user={user}\n                            onBoardingDone={onBoardingDoneByStreamer}\n                            showOnlySpecificStep={editingBio || addingTag}\n                            streamerBio={streamerBio}\n                            streamerTags={streamerTags}\n                            closeOnBoarding={cancelEditing} />\n                    }\n                </>\n            }\n        </StreamerDashboardContainer>\n    )\n}\n\nexport default StreamerProfileEditor;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStreamDetailsDialog/NewStreamDetailsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["310"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, FormControlLabel, Radio, RadioGroup, Button, InputAdornment, InputLabel, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer } from './../../services/database';\n\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as CheckedIcon } from './../../assets/CheckedIcon.svg';\nimport { ReactComponent as UncheckedIcon } from './../../assets/UncheckedIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamDetailsDialog from '../NewStreamDetailsDialog/NewStreamDetailsDialog';\nimport RequestActivation from '../RequestActivation/RequestActivation';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    const userLang = navigator.language || navigator.userLanguage;\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openDetailsDialog, setOpenDetailsDialog] = useState(false);\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [gamesData, setGamesData] = useState([]);\n    const [showAccountActviation, setShowAccountActviation] = useState(false);\n    const [lockSendButton, setLockSendButton] = useState(false);\n\n    useEffect(() => {\n        let gameList = [];\n\n        if (games.allGames) {\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] })).sort((a, b) => {\n                if (a.gameName < b.gameName) {\n                    return -1;\n                }\n                if (a.gameName > b.gameName) {\n                    return 1;\n                }\n\n                return 0;\n            });\n            let tempGamesData = []\n            gameList.forEach(game => {\n                tempGamesData.push({\n                    value: game.gameKey,\n                    label: game.gameName\n                })\n            });\n            setGamesData(tempGamesData)\n        }\n    }, [games.allGames, user]);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n    const handleGameChange = (game) => {\n        setSelectedGame(game);\n    };\n    const handleEventTypeChange = (event) => {\n        setSelectedEvent(event.target.value);\n    };\n\n    const handleStringDateChange = (event) => {\n        setStringDate(event.target.value);\n    }\n\n    const openConfirmationDialog = () => setOpenDetailsDialog(true);\n\n    const submitEvent = async () => {\n        setLockSendButton(true);\n        if (!user.premium && !user.freeTrial) {\n            setLockSendButton(false);\n            return setShowAccountActviation(true);\n        }\n\n        if (selectedDate < minDate) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.before24h'));\n            return;\n        }\n        if (!selectedGame) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        const { endDate } = user.currentPeriod;\n\n        /**\n         * Check if the selected date is valid to create the event based on the end of the streamer subscription\n         */\n        if (selectedDate.getTime() <= endDate) {\n\n            const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\n\n            let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\n\n            if (!userCanCreateStream) {\n                if (user.boughtStreams) {\n                    /**\n                     * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\n                     * the user can create the stream, this function will also remove expired packages or packages that has been already used\n                     */\n                    userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\n                        if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\n                            addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\n                            return true;\n                        } else {\n                            removeStreamPackageOfStreamer(user.uid, streamsPackageId);\n                        }\n                    });\n                }\n            } else {\n                addToStreamsRequestedOnSubscriptionDetails(user.uid);\n            }\n\n            /**\n             * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n             * is lower or equal to the user limit per month then we create the event\n             */\n            if (userCanCreateStream) {\n                const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                await createNewStreamRequest(user, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n\n                window.analytics.track('Stream requested', {\n                    selectedGame,\n                    selectedDate: selectedDate.getTime(),\n                    uid: user.uid\n                });\n                history.push('/success');\n            } else {\n                // Hacer un modal chido para convencerlos de mejorar su plan o comprar eventos aparte\n                alert(t('NewStream.alerts.streamsLimit'));\n            }\n        } else {\n            alert(t('NewStream.alerts.beforePlanExpiration'));\n        }\n    }\n\n    const successActivation = async () => {\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n        await createNewStreamRequest(user, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n        await addToStreamsRequestedOnSubscriptionDetails(user.uid);\n\n        window.analytics.track('Free trial started', {\n            uid: user.uid\n        });\n        history.push('/success');\n    }\n\n    if (!showAccountActviation) {\n        return (\n            <StreamerDashboardContainer user={user}>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <BackButton onClick={history.goBack} />\n                    </Grid>\n                    <Grid item sm={8}>\n                        <h1 className={styles.title}>\n                            {t('NewStream.whatAreYouPlaying')}\n                        </h1>\n                        <div style={{\n                            display: 'flex',\n                            height: '58px',\n                            marginTop: '20px'\n                        }}>\n                            <StreamerSelect\n                                data={gamesData}\n                                value={selectedGame}\n                                onChange={handleGameChange}\n                                initialLabel={t('NewStream.selectYourGame')}\n                                maxHeightOpen={'200px'}\n                                overflowX={'hidden'}\n                                style={{\n                                    minHeight: '58px'\n                                }}/>\n                        </div>\n                        <h1 className={styles.title}>\n                            {t('NewStream.when')}\n                        </h1>\n                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                            <Grid container spacing={4}>\n                                <Grid item sm={4} style={{ minWidth: '175px' }}>\n                                    <InputLabel className={classes.datePickerLabel}>\n                                        {t('NewStream.date')}\n                                    </InputLabel>\n                                    <KeyboardDatePicker\n                                        open={calendarOpen}\n                                        onClick={() => setCalendarOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setCalendarOpen(false)}\n                                        clearable\n                                        disablePast\n                                        disableToolbar\n                                        autoOk\n                                        value={displayDate}\n                                        placeholder='10-10-2021'\n                                        onChange={handleDateChange}\n                                        defaultValue={new Date()}\n                                        minDate={minDate}\n                                        minDateMessage={t('NewStream.alerts.before24h')}\n                                        format='DD-MM-YY ddd'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <CalendarIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item sm={4} style={{ minWidth: '175px' }}>\n                                    <InputLabel className={classes.datePickerLabel}>\n                                        {t('NewStream.time')}\n                                    </InputLabel>\n                                    <KeyboardTimePicker\n                                        open={clockOpen}\n                                        onClick={() => setClockOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setClockOpen(false)}\n                                        autoOk\n                                        error={selectedDate <= minDate}\n                                        helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\n                                        value={displayDate}\n                                        placeholder='08:00 AM'\n                                        onChange={handleDateChange}\n                                        // mask='__:__ _M'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <TimeIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item sm={8} style={{ width: '90%', minWidth: '330px' }}>\n                                    <InputLabel className={classes.datePickerLabel}>\n                                        {t('NewStream.confirmDate')}\n                                    </InputLabel>\n                                    <StreamerTextInput placeholder={t('NewStream.confirmDatePlaceholder')}\n                                        fullWidth\n                                        value={stringDate}\n                                        onChange={handleStringDateChange} />\n                                </Grid>\n                            </Grid>\n                        </MuiPickersUtilsProvider>\n                        <h1 className={styles.title}>\n                            {t('NewStream.streamType')}\n                        </h1>\n                        <RadioGroup name={'eventType'} value={selectedEvent} onChange={(event) => { handleEventTypeChange(event) }}>\n                            <Grid container>\n                                <Grid item sm={2}>\n                                    <FormControlLabel\n                                        value={'exp'}\n                                        classes={{ label: classes.label }}\n                                        control={\n                                            <Radio defaultChecked\n                                                checkedIcon={<CheckedIcon />}\n                                                icon={<UncheckedIcon />}\n                                                style={{ backgroundColor: 'transparent' }} />\n                                        }\n                                        label={t('NewStream.streamTypes.casual')} />\n                                </Grid>\n                                {/* <Grid item sm={2}>\n                                    <FormControlLabel\n                                        value={'tournament'}\n                                        classes={{ label: classes.label }}\n                                        control={\n                                            <Radio\n                                                checkedIcon={<CheckedIcon />}\n                                                icon={<UncheckedIcon />}\n                                                style={{ backgroundColor: 'transparent' }} />\n                                        }\n                                        label='Tournament' />\n                                </Grid> */}\n                            </Grid>\n                        </RadioGroup>\n                        <Grid container className={classes.accordionContainer}>\n                            <Accordion\n                                className={classes.accordion}\n                            >\n                                <AccordionSummary\n                                    expandIcon={<ArrowIcon />}\n                                    id={\"moreOptions\"}\n                                    aria-controls=\"panel1a-content\"\n                                >\n                                    <InputLabel\n                                        className={classes.label}\n                                    >\n                                        {t('NewStream.advanced')}\n                                    </InputLabel>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Grid container direction={'column'} className={classes.accordionGridRoot}>\n                                        <InputLabel className={classes.label}>\n                                            {t('NewStream.feelingCreative')}\n                                        </InputLabel>\n                                        <Grid container>\n                                            <h1 className={styles.title}>\n                                                {t('NewStream.streamTitle')}\n                                            </h1>\n                                            <Grid container spacing={4}>\n                                                <Grid item className={classes.accordionGridItem}>\n                                                    <StreamerTextInput\n                                                        label={t('NewStream.streamTitle')}\n                                                        placeholder={t('NewStream.streamTitlePlaceholder')}\n                                                        id='eventTitle'\n                                                        fullWidth={true}\n                                                        value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <h1 className={styles.title}>\n                                            {t('NewStream.streamDescription')}\n                                        </h1>\n                                        <Grid>\n                                            <Grid container spacing={4}>\n                                                <Grid item className={classes.accordionGridItem}>\n                                                    <StreamerTextInput\n                                                        label={t('NewStream.subtitle')}\n                                                        id={'eventDescriptionTitle'}\n                                                        placeholder={t('NewStream.subtitle')}\n                                                        fullWidth={true}\n                                                        value={optionalData.descriptionsTitle ? userLang.toLowerCase().includes('es') ? optionalData.descriptionsTitle.es : optionalData.descriptionsTitle.en : ''}\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid>\n                                            <Grid container spacing={4}>\n                                                <Grid item className={classes.accordionGridItem} style={{ marginTop: '1rem' }}>\n                                                    <StreamerTextInput\n                                                        id={'eventDescription'}\n                                                        label={t('NewStream.streamDescription')}\n                                                        placeholder={t('NewStream.descriptionPlaceholder')}\n                                                        multiline={true}\n                                                        rows={3}\n                                                        rowsMax={30}\n                                                        fullWidth={true}\n                                                        value={optionalData.descriptions ? userLang.toLowerCase().includes('es') ? optionalData.descriptions.es : optionalData.descriptions.en : ''}\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </AccordionDetails>\n                            </Accordion>\n                        </Grid>\n                        <Button\n                            className={styles.button}\n                            onClick={openConfirmationDialog}>\n                            {t('NewStream.submit')}\n                        </Button>\n                    </Grid>\n                </Grid>\n                <NewStreamDetailsDialog\n                    lockSendButton={lockSendButton}\n                    open={openDetailsDialog}\n                    onClose={() => setOpenDetailsDialog(false)}\n                    submitEvent={submitEvent}\n                    game={selectedGame}\n                    date={`${selectedDate.toLocaleDateString()} ${selectedDate.toLocaleTimeString()}`}\n                    userName={user ? user.displayName : ''}\n                    {...optionalData} />\n            </StreamerDashboardContainer>\n        );\n    } else {\n        return <RequestActivation user={user} onSuccessActivation={successActivation} />\n    }\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTerms/QaplaTerms.jsx",[],["311","312"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["313"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QlanProgressBar/QlanProgressBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QStore/QStore.jsx",[],{"ruleId":"314","replacedBy":"315"},{"ruleId":"316","replacedBy":"317"},{"ruleId":"318","severity":1,"message":"319","line":89,"column":8,"nodeType":"320","endLine":89,"endColumn":38,"suggestions":"321"},{"ruleId":"314","replacedBy":"322"},{"ruleId":"316","replacedBy":"323"},{"ruleId":"314","replacedBy":"324"},{"ruleId":"316","replacedBy":"325"},{"ruleId":"314","replacedBy":"326"},{"ruleId":"316","replacedBy":"327"},{"ruleId":"314","replacedBy":"328"},{"ruleId":"316","replacedBy":"329"},{"ruleId":"314","replacedBy":"330"},{"ruleId":"316","replacedBy":"331"},{"ruleId":"314","replacedBy":"332"},{"ruleId":"316","replacedBy":"333"},{"ruleId":"314","replacedBy":"334"},{"ruleId":"316","replacedBy":"335"},{"ruleId":"314","replacedBy":"336"},{"ruleId":"316","replacedBy":"337"},{"ruleId":"314","replacedBy":"338"},{"ruleId":"316","replacedBy":"339"},{"ruleId":"318","severity":1,"message":"340","line":179,"column":8,"nodeType":"320","endLine":179,"endColumn":14,"suggestions":"341"},{"ruleId":"342","severity":1,"message":"343","line":235,"column":25,"nodeType":"344","endLine":235,"endColumn":49},{"ruleId":"314","replacedBy":"345"},{"ruleId":"316","replacedBy":"346"},{"ruleId":"347","severity":1,"message":"348","line":4,"column":8,"nodeType":"349","messageId":"350","endLine":4,"endColumn":14},{"ruleId":"347","severity":1,"message":"351","line":6,"column":198,"nodeType":"349","messageId":"350","endLine":6,"endColumn":223},{"ruleId":"318","severity":1,"message":"352","line":188,"column":8,"nodeType":"320","endLine":188,"endColumn":84,"suggestions":"353"},{"ruleId":"314","replacedBy":"354"},{"ruleId":"316","replacedBy":"355"},{"ruleId":"347","severity":1,"message":"356","line":1,"column":17,"nodeType":"349","messageId":"350","endLine":1,"endColumn":26},{"ruleId":"314","replacedBy":"357"},{"ruleId":"316","replacedBy":"358"},{"ruleId":"347","severity":1,"message":"359","line":255,"column":21,"nodeType":"349","messageId":"350","endLine":255,"endColumn":31},{"ruleId":"318","severity":1,"message":"360","line":424,"column":8,"nodeType":"320","endLine":424,"endColumn":14,"suggestions":"361"},{"ruleId":"347","severity":1,"message":"362","line":7,"column":28,"nodeType":"349","messageId":"350","endLine":7,"endColumn":37},{"ruleId":"347","severity":1,"message":"363","line":21,"column":11,"nodeType":"349","messageId":"350","endLine":21,"endColumn":18},{"ruleId":"314","replacedBy":"364"},{"ruleId":"316","replacedBy":"365"},{"ruleId":"314","replacedBy":"366"},{"ruleId":"316","replacedBy":"367"},{"ruleId":"368","severity":1,"message":"369","line":16,"column":1,"nodeType":"370","endLine":16,"endColumn":52},{"ruleId":"347","severity":1,"message":"371","line":4,"column":5,"nodeType":"349","messageId":"350","endLine":4,"endColumn":14},{"ruleId":"347","severity":1,"message":"372","line":5,"column":5,"nodeType":"349","messageId":"350","endLine":5,"endColumn":17},{"ruleId":"347","severity":1,"message":"373","line":6,"column":5,"nodeType":"349","messageId":"350","endLine":6,"endColumn":15},{"ruleId":"314","replacedBy":"374"},{"ruleId":"316","replacedBy":"375"},{"ruleId":"314","replacedBy":"376"},{"ruleId":"316","replacedBy":"377"},{"ruleId":"318","severity":1,"message":"378","line":243,"column":8,"nodeType":"320","endLine":243,"endColumn":44,"suggestions":"379"},{"ruleId":"347","severity":1,"message":"380","line":4,"column":5,"nodeType":"349","messageId":"350","endLine":4,"endColumn":11},{"ruleId":"347","severity":1,"message":"381","line":5,"column":5,"nodeType":"349","messageId":"350","endLine":5,"endColumn":12},{"ruleId":"347","severity":1,"message":"382","line":6,"column":5,"nodeType":"349","messageId":"350","endLine":6,"endColumn":9},{"ruleId":"347","severity":1,"message":"383","line":7,"column":5,"nodeType":"349","messageId":"350","endLine":7,"endColumn":11},{"ruleId":"347","severity":1,"message":"384","line":14,"column":8,"nodeType":"349","messageId":"350","endLine":14,"endColumn":23},{"ruleId":"347","severity":1,"message":"385","line":2,"column":67,"nodeType":"349","messageId":"350","endLine":2,"endColumn":74},{"ruleId":"347","severity":1,"message":"386","line":13,"column":28,"nodeType":"349","messageId":"350","endLine":13,"endColumn":36},{"ruleId":"347","severity":1,"message":"387","line":16,"column":28,"nodeType":"349","messageId":"350","endLine":16,"endColumn":33},{"ruleId":"347","severity":1,"message":"388","line":233,"column":12,"nodeType":"349","messageId":"350","endLine":233,"endColumn":29},{"ruleId":"347","severity":1,"message":"389","line":237,"column":12,"nodeType":"349","messageId":"350","endLine":237,"endColumn":23},{"ruleId":"347","severity":1,"message":"390","line":240,"column":12,"nodeType":"349","messageId":"350","endLine":240,"endColumn":21},{"ruleId":"347","severity":1,"message":"391","line":240,"column":23,"nodeType":"349","messageId":"350","endLine":240,"endColumn":35},{"ruleId":"318","severity":1,"message":"392","line":286,"column":8,"nodeType":"320","endLine":286,"endColumn":14,"suggestions":"393"},{"ruleId":"347","severity":1,"message":"394","line":385,"column":11,"nodeType":"349","messageId":"350","endLine":385,"endColumn":24},{"ruleId":"395","severity":1,"message":"396","line":276,"column":99,"nodeType":"397","messageId":"398","endLine":276,"endColumn":101},{"ruleId":"314","replacedBy":"399"},{"ruleId":"316","replacedBy":"400"},{"ruleId":"368","severity":1,"message":"369","line":26,"column":1,"nodeType":"370","endLine":26,"endColumn":51},"no-native-reassign",["401"],"no-negated-in-lhs",["402"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.","ArrayExpression",["403"],["401"],["402"],["401"],["402"],["401"],["402"],["401"],["402"],["401"],["402"],["401"],["402"],["401"],["402"],["401"],["402"],["401"],["402"],"React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["404"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["401"],["402"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'getStreamerAlertsSettings' is defined but never used.","React Hook useEffect has missing dependencies: 'alertSideRight' and 'mediaContent'. Either include them or remove the dependency array.",["405"],["401"],["402"],"'Component' is defined but never used.",["401"],["402"],"'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["406"],"'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.",["401"],["402"],["401"],["402"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.",["401"],["402"],["401"],["402"],"React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["407"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["408"],"'copyTwitchURL' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["401"],["402"],"no-global-assign","no-unsafe-negation",{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},"Update the dependencies array to be: [user, history, isLoadingAuth, query]",{"range":"421","text":"422"},"Update the dependencies array to be: [query, t, user]",{"range":"423","text":"424"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, mediaContent, alertSideRight]",{"range":"425","text":"426"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"427","text":"428"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"429","text":"430"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"431","text":"432"},[3780,3810],"[user, history, isLoadingAuth, query]",[4767,4773],"[query, t, user]",[8439,8515],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, mediaContent, alertSideRight]",[16370,16376],"[setPendingMessages, user]",[6720,6756],"[streamStarted, dots, enablingQoins, stream]",[8801,8807],"[socialLinksInitialValue, twitchURL, user]"]
[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BarProgressBit\\BarProgressBit.jsx":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutDialog\\CasthQutDialog.jsx":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutConfirmDialog\\CasthQutConfirmDialog.jsx":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js":"20","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"21","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx":"22","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx":"23","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx":"24","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js":"25","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx":"26","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GoalProgressBar\\GoalProgressBar.jsx":"27","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx":"28","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"29","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx":"30","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js":"31","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx":"32","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx":"33","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx":"34","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx":"35","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js":"36","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js":"37","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx":"38","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx":"39","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx":"40","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx":"41","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx":"42","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx":"43","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx":"44","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx":"45","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx":"46","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx":"47","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx":"48"},{"size":3772,"mtime":1662399697811,"results":"49","hashOfConfig":"50"},{"size":1012,"mtime":1662139933678,"results":"51","hashOfConfig":"50"},{"size":17674,"mtime":1662138952578,"results":"52","hashOfConfig":"50"},{"size":1568,"mtime":1660938322011,"results":"53","hashOfConfig":"50"},{"size":21757,"mtime":1660938321969,"results":"54","hashOfConfig":"50"},{"size":13729,"mtime":1660938321985,"results":"55","hashOfConfig":"50"},{"size":3452,"mtime":1660938321983,"results":"56","hashOfConfig":"50"},{"size":5837,"mtime":1660938321985,"results":"57","hashOfConfig":"50"},{"size":3513,"mtime":1660938321984,"results":"58","hashOfConfig":"50"},{"size":2072,"mtime":1660938322009,"results":"59","hashOfConfig":"50"},{"size":3435,"mtime":1660938321986,"results":"60","hashOfConfig":"50"},{"size":20096,"mtime":1660938321994,"results":"61","hashOfConfig":"50"},{"size":716,"mtime":1662143061875,"results":"62","hashOfConfig":"50"},{"size":545,"mtime":1660938322012,"results":"63","hashOfConfig":"50"},{"size":899,"mtime":1660938322023,"results":"64","hashOfConfig":"50"},{"size":4712,"mtime":1661204912304,"results":"65","hashOfConfig":"50"},{"size":375,"mtime":1660938322013,"results":"66","hashOfConfig":"50"},{"size":3046,"mtime":1660938321997,"results":"67","hashOfConfig":"50"},{"size":1550,"mtime":1660938322017,"results":"68","hashOfConfig":"50"},{"size":6442,"mtime":1660938322018,"results":"69","hashOfConfig":"50"},{"size":1425,"mtime":1660938322018,"results":"70","hashOfConfig":"50"},{"size":1646,"mtime":1660938321995,"results":"71","hashOfConfig":"50"},{"size":1128,"mtime":1660938321966,"results":"72","hashOfConfig":"50"},{"size":398,"mtime":1660938321988,"results":"73","hashOfConfig":"50"},{"size":2247,"mtime":1660938322016,"results":"74","hashOfConfig":"50"},{"size":657,"mtime":1660938321974,"results":"75","hashOfConfig":"50"},{"size":6568,"mtime":1660938321973,"results":"76","hashOfConfig":"50"},{"size":3954,"mtime":1660938321987,"results":"77","hashOfConfig":"50"},{"size":7758,"mtime":1660938321967,"results":"78","hashOfConfig":"50"},{"size":6746,"mtime":1660938322007,"results":"79","hashOfConfig":"50"},{"size":7030,"mtime":1660938322020,"results":"80","hashOfConfig":"50"},{"size":1985,"mtime":1660938321970,"results":"81","hashOfConfig":"50"},{"size":12209,"mtime":1660938321991,"results":"82","hashOfConfig":"50"},{"size":18030,"mtime":1660938322005,"results":"83","hashOfConfig":"50"},{"size":2074,"mtime":1660938321974,"results":"84","hashOfConfig":"50"},{"size":35698,"mtime":1661204966373,"results":"85","hashOfConfig":"50"},{"size":4120,"mtime":1660938322014,"results":"86","hashOfConfig":"50"},{"size":3682,"mtime":1660938321972,"results":"87","hashOfConfig":"50"},{"size":17018,"mtime":1660938321975,"results":"88","hashOfConfig":"50"},{"size":1327,"mtime":1660938322010,"results":"89","hashOfConfig":"50"},{"size":16799,"mtime":1660938321981,"results":"90","hashOfConfig":"50"},{"size":23458,"mtime":1660938321971,"results":"91","hashOfConfig":"50"},{"size":860,"mtime":1660938321993,"results":"92","hashOfConfig":"50"},{"size":35175,"mtime":1660938322000,"results":"93","hashOfConfig":"50"},{"size":9933,"mtime":1660938321992,"results":"94","hashOfConfig":"50"},{"size":720,"mtime":1660938321988,"results":"95","hashOfConfig":"50"},{"size":15129,"mtime":1660938322002,"results":"96","hashOfConfig":"50"},{"size":8811,"mtime":1662439757210,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pa48sw",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"111"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"107"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"107"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"107"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BarProgressBit\\BarProgressBit.jsx",["204"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutDialog\\CasthQutDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx",[],["205","206"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx",[],["207","208"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx",["209","210"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, Slide, Button, Dialog, DialogContent, IconButton, List, ListItem, ListItemAvatar, Avatar, ListItemText, Box } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\r\nimport DayJsUtils from '@date-io/dayjs';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport { ReactComponent as QoinsIcon } from './../../assets/DonatedQoin.svg';\r\nimport { ReactComponent as BitsIcon } from './../../assets/BitsIcon.svg';\r\nimport { ReactComponent as DonatedQoinIcon } from './../../assets/DonatedQoin.svg';\r\nimport { ReactComponent as RepeatIcon } from './../../assets/RepeatIcon.svg';\r\nimport { getPeriodStreamerPayments, listenForLastStreamerCheers, markDonationAsUnreadToRepeat, removeListenerForLastStreamerCheers } from '../../services/database';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toggleButton: {\r\n        borderRadius: 6,\r\n        textAlign: 'center',\r\n        marginRight: 8,\r\n        fontSize: 17,\r\n        fontStyle: 'normal',\r\n        fontWeight: 600,\r\n        paddingLeft: 16,\r\n        paddingRight: 16,\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            opacity: '.80',\r\n            background: '#29326B44 !important'\r\n        }\r\n    },\r\n    scrollPaper: {\r\n        alignItems: 'flex-start',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    paper: {\r\n        height: '100vh',\r\n        background: 'linear-gradient(0deg, #0D1021, #0D1021), #141735',\r\n        borderRadius: 20,\r\n        paddingBottom: '5px',\r\n        padding: '28px 40px',\r\n        maxWidth: '100%',\r\n        width: '100%',\r\n        margin: '21px 17px 0px 0px',\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            width: '100%',\r\n            margin: '0px',\r\n            borderRadius: '0px',\r\n            maxHeight: '100%'\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: '440px'\r\n        }\r\n    },\r\n    dialogRoot: {\r\n        zIndex: '100 !important',\r\n        '& .MuiBackdrop-root': {\r\n            backgroundColor: '#02071E80',\r\n            backdropFilter: 'blur(5px)',\r\n            width: '200wh',\r\n            height: '200vh'\r\n\r\n        }\r\n    },\r\n    dialogHeaderContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        overflow: ''\r\n    },\r\n    balanceCurrencyContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginTop: '23px',\r\n        minWidth: '200px'\r\n    },\r\n    balanceCurrencyValue: {\r\n        display: 'flex',\r\n        color: '#FFF',\r\n        fontSize: '48px',\r\n        lineHeight: '52px',\r\n        fontWeight: 600,\r\n        letterSpacing: '-0.86',\r\n        marginLeft: '12px',\r\n    },\r\n    subDataContainer: {\r\n        marginTop: '30px',\r\n        color: '#8692FF',\r\n        fontWeight: '500',\r\n        fontSize: '14px',\r\n        lineHeight: '17px',\r\n        letterSpacing: '0.35px'\r\n    },\r\n    periodText: {\r\n        color: 'rgba(134, 146, 255, 0.65)',\r\n        fontSize: 14,\r\n        fontWeight: 600,\r\n        letterSpacing: .35,\r\n        marginBottom: 16,\r\n        cursor: 'pointer'\r\n    },\r\n    qoinsDonationPrimaryText: {\r\n        fontSize: 18,\r\n        fontWeight: 600,\r\n        color: '#FFF'\r\n    },\r\n    qoinsCheersecondaryText: {\r\n        fontSize: 14,\r\n        fontWeight: 500,\r\n        color: 'rgba(255, 255, 255, .65)'\r\n    },\r\n    qoinDonationValueContainer: {\r\n        display: 'flex',\r\n        alignSelf: 'flex-start',\r\n        alignItems: 'center',\r\n        marginTop: 6\r\n    },\r\n    qoinDonationValueText: {\r\n        color: '#FFF',\r\n        fontSize: 18,\r\n        fontWeight: 600,\r\n        marginRight: 4\r\n    },\r\n    list: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        paddingRight: '20px',\r\n        marginRight: '-20px',\r\n        position: 'relative',\r\n        overflow: 'auto'\r\n    },\r\n    periodPicker: {\r\n        color: '#FFF',\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n    repeatButton: {\r\n        alignSelf: 'center',\r\n        fontSize: 11,\r\n        fontWeight: '700',\r\n        color: '#FFF',\r\n        borderRadius: 5,\r\n        backgroundColor: '#22272F',\r\n        marginLeft: 8,\r\n        paddingTop: '2px',\r\n        paddingBottom: '2px',\r\n        paddingLeft: '11px',\r\n        paddingRight: '11px',\r\n        '&:hover': {\r\n            backgroundColor: '#22272F',\r\n            opacity: '.9'\r\n        }\r\n    }\r\n}));\r\n\r\nconst DialoogTransaction = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction='left' ref={ref} {...props} />;\r\n});\r\n\r\nconst ToggleButton = ({ currentValue, value, onChange, label }) => {\r\n    const classes = useStyles();\r\n    const active = currentValue === value;\r\n\r\n    return (\r\n        <Button\r\n            className={classes.toggleButton}\r\n            style={{ background: active ? '#29326B' : 'rgba(41, 50, 107, 0)', color: active ? '#FFF' : 'rgba(255, 255, 255, .6)' }}\r\n            onClick={() => onChange(value)}>\r\n            {label || value}\r\n        </Button>\r\n    );\r\n};\r\n\r\nconst RecordsHeader = ({ value, Icon, showPeriod, onPeriodChange }) => {\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [openMonthPicker, setOpenMonthPicker] = useState(false);\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n\r\n    const monthsArray = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date.$d);\r\n        setOpenMonthPicker(false);\r\n        if (onPeriodChange) {\r\n            onPeriodChange(date.$d);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', flexDirection: 'column', minWidth: '200px' }}>\r\n                <div className={classes.balanceCurrencyContainer}>\r\n                    <Icon />\r\n                    <p className={classes.balanceCurrencyValue}>\r\n                        {parseInt(value || 0).toLocaleString()}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            {showPeriod &&\r\n                <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                    {/**\r\n                     * Box hides the TextField of the picker but allows the user to open\r\n                     * the dialog to select the period\r\n                     */}\r\n                    <Box component='div' visibility='hidden'>\r\n                        <DatePicker format='MM'\r\n                            disableFuture\r\n                            disableToolbar\r\n                            variant='inline'\r\n                            views={['month']}\r\n                            open={openMonthPicker}\r\n                            openTo='month'\r\n                            value={selectedDate}\r\n                            onChange={handleDateChange}\r\n                            PopoverProps={{\r\n                                PaperProps: {\r\n                                    className: classes.popover\r\n                                }\r\n                            }} />\r\n                    </Box>\r\n                    <div className={classes.periodText} onClick={() => setOpenMonthPicker(true)}>\r\n                        {t('CheersBitsRecordDialog.period')} {t(`months.${monthsArray[selectedDate.getMonth()]}`)} {selectedDate.getFullYear()}\r\n                    </div>\r\n                </MuiPickersUtilsProvider>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst QoinsCheers = ({ uid, qoinsBalance, cheers, messages, setPendingMessages, qlanBalance }) => {\r\n    const classes = useStyles();\r\n    const [balance, setBalance] = useState(qoinsBalance + qlanBalance);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (setPendingMessages !== undefined) {\r\n            setPendingMessages(0);\r\n        }\r\n    }, [setPendingMessages]);\r\n\r\n    const showDate = () => {\r\n        const today = new Date();\r\n        /**\r\n         * Not all the browsers supports the parameter \"locales\" from the function toLocaleDateString\r\n         * https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\r\n         */\r\n        try {\r\n            return today.toLocaleDateString('es-MX');\r\n        } catch (error) {\r\n            return today.toLocaleDateString();\r\n        }\r\n    }\r\n\r\n    const repeatSelectedCheer = async (cheerId) => {\r\n        await markDonationAsUnreadToRepeat(uid, cheerId);\r\n        window.analytics.track('Cheer repeated');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!messages &&\r\n                <>\r\n                    <RecordsHeader value={balance} Icon={QoinsIcon} />\r\n                    <div className={classes.subDataContainer}>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <p style={{ display: 'flex', width: '62px' }}> Cheers </p>\r\n                            <p style={{ display: 'flex', }}> {qoinsBalance.toLocaleString()} </p>\r\n                        </div>\r\n                        <div style={{ display: 'flex', marginTop: '30px' }}>\r\n                            <p style={{ display: 'flex', width: '62px' }}> Qlan </p>\r\n                            <p style={{ display: 'flex', }}> {qlanBalance.toLocaleString()} </p>\r\n                        </div>\r\n                        <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\r\n                            {t('CheersBitsRecordDialog.cheersReceivedAt', { date: showDate() })}\r\n                        </p>\r\n                    </div>\r\n                </>\r\n            }\r\n            <List className={classes.list} style={{ maxHeight: messages ? '82vh' : '60vh', marginTop: '20px', paddingTop: '0px' }}>\r\n                {Object.keys(cheers).reverse().map((cheerId) => (\r\n                    <>\r\n                        {((messages && cheers[cheerId].message) || (!messages)) &&\r\n                            <ListItem disableGutters style={{ display: 'flex', flexDirection: 'column', padding: '0px', marginBottom: '40px' }}>\r\n                                <div style={{ display: 'flex', width: '100%' }}>\r\n                                    <ListItemAvatar style={{ alignSelf: 'center' }} >\r\n                                        <Avatar alt={cheers[cheerId].twitchUserName}\r\n                                            src={cheers[cheerId].photoURL} />\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={\r\n                                        <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                                            <p>{cheers[cheerId].twitchUserName}</p>\r\n                                            {cheers[cheerId].read &&\r\n                                                <Button onClick={() => repeatSelectedCheer(cheerId)}\r\n                                                    className={classes.repeatButton}\r\n                                                    endIcon={<RepeatIcon />}\r\n                                                    variant='contained'>\r\n                                                    {t('CheersBitsRecordDialog.repeatCheer')}\r\n                                                </Button>\r\n                                            }\r\n                                            {!cheers[cheerId].read && <div style={{ backgroundColor: '#8DEBFF', alignSelf: 'center', marginLeft: '8px', width: '8px', height: '8px', borderRadius: '8px' }}>\r\n                                            </div>}\r\n                                        </div>\r\n                                    }\r\n                                        secondary={formatDate(cheers[cheerId].timestamp)}\r\n                                        classes={{\r\n                                            primary: classes.qoinsDonationPrimaryText,\r\n                                            secondary: classes.qoinsCheersecondaryText\r\n                                        }} />\r\n\r\n                                    <div className={classes.qoinDonationValueContainer}>\r\n                                        <div className={classes.qoinDonationValueText}>\r\n                                            {cheers[cheerId].amountQoins}\r\n                                        </div>\r\n                                        <DonatedQoinIcon style={{ height: 35, width: 35 }} />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {messages && cheers[cheerId].message &&\r\n                                    <div style={{ background: '#3B4BF9', borderRadius: '2px 20px 20px 20px', padding: '16px 20px 16px 20px', alignSelf: 'flex-start' }}>\r\n                                        <p style={{ color: '#FFF', fontSize: 14, fontWeight: 500, letterSpacing: .35 }}>\r\n                                            {cheers[cheerId].message}\r\n                                        </p>\r\n                                    </div>\r\n                                }\r\n                            </ListItem>}\r\n                    </>\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\nconst PaidBits = ({ bitsBalance, valueOfQoinsForStreamer, isPaidUser, payments, onPeriodChange }) => {\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <>\r\n            <RecordsHeader value={bitsBalance}\r\n                Icon={BitsIcon}\r\n                showPeriod\r\n                onPeriodChange={onPeriodChange} />\r\n            <div className={classes.subDataContainer}>\r\n                <p style={{ display: 'flex' }}>\r\n                    200 Qoins = {valueOfQoinsForStreamer} Bits\r\n                </p>\r\n                <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\r\n                    {`${t('CheersBitsRecordDialog.bitsToPay')} ${isPaidUser ? t('CheersBitsRecordDialog.withSubscription') : ''}`}\r\n                </p>\r\n                <p style={{ display: 'flex', color: '#FFFFFFA6', marginTop: '45px', lineHeight: '17px', fontWeight: '400' }}>\r\n                    {t('CheersBitsRecordDialog.deliveredCheers')}\r\n                </p>\r\n            </div>\r\n\r\n            <List className={classes.list} style={{ maxHeight: '54vh', marginTop: '20px', paddingTop: '0px' }}>\r\n                {Object.keys(payments).reverse().map((paymentId) => (\r\n                    <ListItem disableGutters>\r\n                        <ListItemText primary={payments[paymentId].currency}\r\n                            secondary={formatDate(payments[paymentId].timestamp)}\r\n                            classes={{\r\n                                primary: classes.qoinsDonationPrimaryText,\r\n                                secondary: classes.qoinsCheersecondaryText\r\n                            }} />\r\n                        <div className={classes.qoinDonationValueContainer}>\r\n                            <div className={classes.qoinDonationValueText}>\r\n                                {payments[paymentId].amount}\r\n                            </div>\r\n                        </div>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\nconst CheersBitsRecordDialog = ({ user, cheersQoins, qlanQoins, estimatedBits, valueOfQoinsForStreamer, open, onClose, pressed, setPendingMessages }) => {\r\n    const [value, setValue] = useState('Qoins');\r\n    const [qoinsCheers, setQoinsCheers] = useState({});\r\n    const [paymentsHistory, setPaymentsHistory] = useState({});\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function loadDefaultPayments() {\r\n            const date = new Date();\r\n            date.setDate(1);\r\n            date.setHours(0, 0, 0, 0);\r\n            const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\r\n            const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\r\n            setPaymentsHistory(payments.val() || {});\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            listenForLastStreamerCheers(user.uid, 20, (cheers) => {\r\n                if (cheers.exists()) {\r\n                    setQoinsCheers(cheers.val());\r\n                    let seekUnread = Object.values(cheers.val());\r\n                    let unreadCount = 0;\r\n                    seekUnread.forEach(e => {\r\n                        if (!e.read && e.message) {\r\n                            unreadCount++\r\n                        }\r\n                    });\r\n                    setPendingMessages(unreadCount)\r\n                }\r\n            });\r\n            loadDefaultPayments();\r\n        }\r\n\r\n\r\n        return () => {\r\n            if (user && user.uid) {\r\n                removeListenerForLastStreamerCheers(user.uid);\r\n            }\r\n        };\r\n    }, [user]);\r\n\r\n    const loadPaymentsByTimestamp = async (timestamp) => {\r\n        const date = new Date(timestamp);\r\n        date.setDate(1);\r\n        date.setHours(0, 0, 0, 0);\r\n        const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\r\n        const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\r\n        setPaymentsHistory(payments.val() || {});\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open}\r\n            onClose={onClose}\r\n            scroll='paper'\r\n            TransitionComponent={DialoogTransaction}\r\n            classes={{\r\n                scrollPaper: classes.scrollPaper,\r\n                paper: classes.paper,\r\n                root: classes.dialogRoot\r\n            }}\r\n            TransitionProps={{\r\n                onEnter: () => {\r\n                    setValue(pressed)\r\n                }\r\n            }}>\r\n            <DialogContent style={{ padding: '0px', overflow: 'visible' }}>\r\n                <div className={classes.dialogHeaderContainer}>\r\n                    <div style={{ marginRight: 96 }}>\r\n                        <ToggleButton currentValue={value}\r\n                            value='Qoins'\r\n                            onChange={setValue} />\r\n                        <ToggleButton currentValue={value}\r\n                            value='Bits'\r\n                            onChange={setValue} />\r\n                        <ToggleButton currentValue={value}\r\n                            value='Messages'\r\n                            label={t('CheersBitsRecordDialog.messages')}\r\n                            onChange={setValue} />\r\n                    </div>\r\n                    <IconButton onClick={onClose} style={{ zIndex: '10', alignSelf: 'flex-start', width: '40px', height: '40px', padding: '0px', marginTop: '-4px', marginRight: '-16px' }} >\r\n                        <CloseIcon style={{ width: '40px', height: '40px' }} />\r\n                    </IconButton>\r\n                </div>\r\n                {value === 'Qoins' &&\r\n                    <QoinsCheers uid={user.uid}\r\n                        qoinsBalance={cheersQoins}\r\n                        cheers={qoinsCheers}\r\n                        qlanBalance={qlanQoins} />\r\n                }\r\n                {value === 'Bits' &&\r\n                    <PaidBits bitsBalance={estimatedBits}\r\n                        valueOfQoinsForStreamer={valueOfQoinsForStreamer}\r\n                        isPaidUser={user.premium || user.freeTrial}\r\n                        payments={paymentsHistory}\r\n                        onPeriodChange={loadPaymentsByTimestamp} />\r\n                }\r\n                {value === 'Messages' &&\r\n                    <QoinsCheers uid={user.uid}\r\n                        qoinsBalance={cheersQoins}\r\n                        messages={true}\r\n                        cheers={qoinsCheers}\r\n                        setPendingMessages={setPendingMessages}\r\n                    />\r\n                }\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nfunction formatDate(timestamp) {\r\n    const paymentDate = new Date(timestamp);\r\n\r\n    const date = paymentDate.getDate() >= 10 ? paymentDate.getDate() : `0${paymentDate.getDate()}`;\r\n    const month = (paymentDate.getMonth() + 1) >= 10 ? (paymentDate.getMonth() + 1) : `0${(paymentDate.getMonth() + 1)}`;\r\n\r\n    return `${date}/${month}/${paymentDate.getFullYear().toString().substring(2)}`;\r\n}\r\n\r\nexport default CheersBitsRecordDialog;",["211","212"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx",["213"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx",[],["214","215"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",["216"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button, CircularProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport {\r\n    streamsPlaceholderImages,\r\n    SCHEDULED_EVENT_TYPE,\r\n    PAST_STREAMS_EVENT_TYPE,\r\n    PENDING_APPROVAL_EVENT_TYPE,\r\n    HOUR_IN_MILISECONDS\r\n} from '../../utilities/Constants';\r\nimport {\r\n    cancelStreamRequest,\r\n    getStreamTitle,\r\n    getPastStreamTitle,\r\n    checkActiveCustomReward\r\n} from '../../services/database';\r\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\r\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\r\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\r\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\r\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\r\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\r\nimport { auth } from '../../services/firebase';\r\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\r\nimport { sendCustomMessage } from '../../services/functions';\r\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    eventCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '1.5rem',\r\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\r\n        height: '100%',\r\n        minWidth: '250px',\r\n        minHeight: '360px',\r\n    },\r\n    relativeContainer: {\r\n        position: 'relative'\r\n    },\r\n    hourContainer: {\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        top: '1rem',\r\n        background: '#1B1D2159',\r\n        borderRadius: '.5rem'\r\n    },\r\n    hourText: {\r\n        color: '#FFF',\r\n        padding: '2px 8px',\r\n        fontSize: '11px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        letterSpacing: '-0.5px',\r\n        textAlign: 'center'\r\n\r\n    },\r\n    dateContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        bottom: '1rem',\r\n        padding: '2px 10px',\r\n        background: '#1B1D21',\r\n        height: '32px',\r\n        borderRadius: '10px'\r\n    },\r\n    dateText: {\r\n        color: '#FFF',\r\n        fontSize: '13px',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        marginLeft: '10px'\r\n    },\r\n    eventImage: {\r\n        objectFit: 'cover',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        borderRadius: '24px'\r\n    },\r\n    eventCardContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '24px 16px',\r\n        height: '100%'\r\n    },\r\n    eventCardTitle: {\r\n        color: '#FFFFFF',\r\n        fontSize: '16px',\r\n        lineHeight: '24px',\r\n        fontWeight: '500',\r\n        height: '48px',\r\n\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    circle: {\r\n        borderRadius: '100%',\r\n        height: '.55rem',\r\n        width: '.55rem',\r\n        marginRight: '.5rem'\r\n    },\r\n    participantsNumber: {\r\n        fontSize: '12px',\r\n        textAlign: 'right',\r\n        lineHeight: '16px'\r\n    },\r\n    streamButton: {\r\n        backgroundColor: '#6C5DD3 !important',\r\n        color: '#FFF'\r\n    },\r\n    buttonsContainer: {\r\n        marginTop: 'auto'\r\n    },\r\n    startButton: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#0D1021',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    endButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#FFF',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    manageButton: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none'\r\n    }\r\n}));\r\n\r\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\r\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\r\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [stream, setStream] = useState(null);\r\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\r\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\r\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\r\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\r\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\r\n    const [startingStream, setStartingStream] = useState(false);\r\n    const [closingStream, setClosingStream] = useState(false);\r\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\r\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\r\n    const [loadingDots, setLoadingDots] = useState('');\r\n    const [hideStream, setHideStream] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getParticipantsNumber() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                /* const participants = await getStreamParticipantsNumber(streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getStreamTitle(streamId);\r\n                if (title.exists()) {\r\n                    setTitle(title.val());\r\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getPastStreamTitle(user.uid, streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\r\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            }\r\n        }\r\n\r\n        async function checkStreamStatus() {\r\n            const streamStatus = await checkActiveCustomReward(streamId);\r\n            if (streamStatus.exists()) {\r\n                setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                setShowRewardsOptions(true);\r\n                setHideStream(false);\r\n            } else {\r\n                setStream(null);\r\n            }\r\n        }\r\n\r\n\r\n        getParticipantsNumber();\r\n        checkStreamStatus();\r\n\r\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\r\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\r\n            const currentTimestamp = (new Date()).getTime();\r\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\r\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\r\n                    setHideStream(true);\r\n                } else {\r\n                    setShowRewardsOptions(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startingStream) {\r\n            setTimeout(() => {\r\n                if (loadingDots.length > 2) {\r\n                    setLoadingDots('');\r\n                } else {\r\n                    setLoadingDots(loadingDots + '.');\r\n                }\r\n            }, 500);\r\n        } else if (loadingDots !== '') {\r\n            setLoadingDots('');\r\n        }\r\n\r\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\r\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\r\n\r\n    const cancelStream = (e) => {\r\n        e.stopPropagation();\r\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\r\n            cancelStreamRequest(user.uid, streamId);\r\n            onRemoveStream(streamId);\r\n        }\r\n    }\r\n\r\n    const startStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setStartingStream(true);\r\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream);\r\n\r\n            window.analytics.track('Stream started', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream(streamData);\r\n            if (!openStreamDialog) {\r\n                setOpenStreamStartedDialog(true);\r\n            }\r\n            setStartingStream(false);\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const closeStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setClosingStream(true);\r\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.xqReward, stream.xqRewardWebhookId, stream.qoinsReward, stream.qoinsRewardWebhookId);\r\n\r\n            window.analytics.track('Stream finished', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setOpenRewardsRemovedDialog(true);\r\n\r\n            // Close the rest of Dialogs just in case\r\n            setOpenStreamStartedDialog(false);\r\n            setOpenQoinsWarningDialog(false);\r\n            setOpenStreamDialog(false);\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (stream.qoinsEnabled) {\r\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\r\n            if (dontShowCloseStreamWarning) {\r\n                closeStream();\r\n            } else {\r\n                setOpenEndStreamDialog(true);\r\n            }\r\n        } else {\r\n            setOpenQoinsWarningDialog(true);\r\n        }\r\n    }\r\n\r\n    const enableQoinsReward = async () => {\r\n        try {\r\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward);\r\n\r\n            window.analytics.track('Qoins enabled', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream({ ...stream, qoinsEnabled: true });\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\r\n\r\n    const closeDialogsAndOpenManageRewardsDialog = () => {\r\n        setOpenStreamStartedDialog(false);\r\n        setOpenQoinsWarningDialog(false);\r\n        setOpenStreamDialog(true);\r\n    }\r\n\r\n    const closeAndRemoveStream = () => {\r\n        setOpenRewardsRemovedDialog(false);\r\n        onRemoveStream(streamId);\r\n    }\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message) {\r\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\r\n\r\n            window.analytics.track('Custom Message sent', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime(),\r\n                message\r\n            });\r\n            setOpenCustomMessageSentDialog(true);\r\n        }\r\n    }\r\n\r\n    const shareStreamLink = async () => {\r\n        const link = await generateStreamDynamicLink(streamId, {\r\n            title: title && title['en'] ? title['en'] : '',\r\n            description: `Evento de ${user.displayName}`,\r\n            image: image ? image : ''\r\n        });\r\n\r\n        // This does not work on Safari for some reason\r\n        if (link) {\r\n            navigator.clipboard.writeText(link);\r\n        }\r\n    }\r\n\r\n    if (game && !hideStream) {\r\n        return (\r\n            <Card className={classes.eventCard} style={style}>\r\n                <div className={classes.relativeContainer}>\r\n                    <div className={classes.hourContainer}>\r\n                        <p className={classes.hourText}>\r\n                            {hour}\r\n                        </p>\r\n                    </div>\r\n                    <div className={classes.dateContainer}>\r\n                        <CalendarIcon />\r\n                        <p className={classes.dateText}>\r\n                            {date}\r\n                        </p>\r\n                    </div>\r\n                    <img\r\n                        alt='Game'\r\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\r\n                        width='100%'\r\n                        height='180'\r\n                        className={classes.eventImage} />\r\n                </div>\r\n                <div className={classes.eventCardContent}>\r\n                    <p className={classes.eventCardTitle}>\r\n                        {title && title['en'] ? title['en'] : ''}\r\n                    </p>\r\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\r\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\r\n                            <div style={{\r\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\r\n                                width: '8px',\r\n                                height: '8px',\r\n                                borderRadius: '50%'\r\n                            }} />\r\n                            <div style={{ width: '6px' }} />\r\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\r\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                    <div className={classes.buttonsContainer}>\r\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\r\n                            (!startingStream ?\r\n                                (stream ?\r\n                                    (!closingStream ?\r\n                                        <Button size='medium' className={classes.endButton}\r\n                                            disabled={closingStream}\r\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\r\n                                            {t('StreamCard.end')}\r\n                                        </Button>\r\n                                        :\r\n                                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                            <CircularProgress style={{ color: '#3B4BF9' }} />\r\n                                        </div>\r\n                                    )\r\n                                    :\r\n                                    <Button size='medium' className={classes.startButton}\r\n                                        onClick={startStream }>\r\n                                        {t('StreamCard.start')}\r\n                                    </Button>\r\n                                )\r\n                                :\r\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\r\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\r\n                                </p>\r\n                            )\r\n                        }\r\n                        <div style={{ height: '11px' }} />\r\n                        {streamType === SCHEDULED_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={showRewardsOptions ? setOpenStreamDialog : manageStream}>\r\n                                {showRewardsOptions ?\r\n                                    t('StreamCard.manageRewards')\r\n                                    :\r\n                                    t('StreamCard.manageStream')\r\n                                }\r\n                            </Button>\r\n                        }\r\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\r\n                                {t('StreamCard.cancelStreamRequest')}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <EventManagementDialog open={openStreamDialog}\r\n                    user={user}\r\n                    sendMessage={sendMessage}\r\n                    streamId={streamId}\r\n                    stream={stream}\r\n                    streamStarted={startingStream}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenStreamDialog(false)}\r\n                    startStream={startStream}\r\n                    enableQoins={enableQoinsReward}\r\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\r\n                    streamTitle={title && title['en'] ? title['en'] : ''}\r\n                    date={date}\r\n                    hour={hour} />\r\n                <EventConfirmStartDialog open={openStreamStartedDialog}\r\n                    onClose={() => setOpenStreamStartedDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\r\n                    onClose={() => setOpenQoinsWarningDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenEndStreamDialog(false)}\r\n                    closeStream={closeStream} />\r\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\r\n                    onClose={closeAndRemoveStream}  />\r\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\r\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamCard;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CasthQutConfirmDialog\\CasthQutConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx",["217","218","219","220","221"],"import React from 'react';\r\nimport {\r\n    Grid,\r\n    AppBar,\r\n    Toolbar,\r\n    Link,\r\n    Button\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport styles from './StreamerDashboardContainer.module.css';\r\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\r\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridContainer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexWrap: 'nowrap'\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        paddingLeft: theme.spacing(4) + 1,\r\n        paddingTop: theme.spacing(4) + 1,\r\n    }\r\n}));\r\n\r\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\r\n            {!user && user === undefined ?\r\n                <>\r\n                    {children}\r\n                </>\r\n                :\r\n                <>\r\n                    {history.location.pathname !== '/welcome' &&\r\n                        <StreamerSideBar user={user} />\r\n                    }\r\n                    <div className={`${classes.content} ${containerStyle}`}>\r\n                        {children}\r\n                    </div>\r\n                </>\r\n            }\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default StreamerDashboardContainer;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx",["222"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GoalProgressBar\\GoalProgressBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx",["223"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n    Grid,\r\n    Button,\r\n    Hidden\r\n} from '@material-ui/core';\r\nimport dayjs from 'dayjs';\r\n\r\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\r\nimport { ReactComponent as QaplaGaming } from './../../assets/QaplaGamingLandingPage.svg';\r\nimport styles from './StreamersSignin.module.css';\r\nimport SignInImage from './../../assets/SignIn.png';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\r\nimport { getUserToken, subscribeStreamerToTwitchWebhook, subscribeStreamerToMailerLiteGroup } from '../../services/functions';\r\nimport { createStreamerProfile, updateStreamerProfile, userHasPublicProfile } from '../../services/database';\r\nimport QaplaTerms from '../QaplaTerms/QaplaTerms';\r\nimport { webhookStreamOffline, webhookStreamOnline } from '../../utilities/Constants';\r\nimport { getTwitchUserData } from '../../services/twitch';\r\n\r\nvar utc = require('dayjs/plugin/utc');\r\ndayjs.extend(utc);\r\n\r\nfunction useQuery() {\r\n    const { search } = useLocation();\r\n\r\n    return useMemo(() => new URLSearchParams(search), [search]);\r\n}\r\n\r\nconst StreamersSignin = ({ user, title }) => {\r\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\r\n    const [openTermsAndConditionsDialog, setOpenTermsAndConditionsDialog] = useState(false);\r\n    const history = useHistory();\r\n    const query = useQuery();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function checkIfUsersIsSigningIn() {\r\n            const twitchClientCode = query.get('code');\r\n\r\n            if (!isLoadingAuth && !user && twitchClientCode) {\r\n                setIsLoadingAuth(true);\r\n                const tokenData = await getUserToken(twitchClientCode);\r\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\r\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\r\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\r\n\r\n                    if (user.userData.isNewUser) {\r\n                        try {\r\n                            await subscribeStreamerToMailerLiteGroup(user.userData.email, user.userData.displayName);\r\n                        } catch (error) {\r\n                            console.error(error);\r\n                        }\r\n\r\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOnline.type, webhookStreamOnline.callback);\r\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOffline.type, webhookStreamOffline.callback);\r\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\r\n                    }\r\n\r\n                    try {\r\n                        await updateStreamerProfile(user.firebaseAuthUser.user.uid, {\r\n                            twitchAccessToken: tokenData.data.access_token,\r\n                            refreshToken: tokenData.data.refresh_token,\r\n                            displayName: user.userData.displayName,\r\n                            photoUrl: user.userData.photoUrl,\r\n                            broadcasterType: user.userData.broadcasterType\r\n                        });\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                    }\r\n                } else {\r\n                    alert(t('StreamersSignin.alerts.errorSignIn'));\r\n                }\r\n            }\r\n        }\r\n        async function redirectUser(uid) {\r\n            const userHasBeenRedirectedToCreateProfile = localStorage.getItem('userHasBeenRedirectedToCreateProfile');\r\n\r\n            if (userHasBeenRedirectedToCreateProfile) {\r\n                history.push('/profile');\r\n            } else {\r\n                if (await userHasPublicProfile(uid)) {\r\n                    history.push('/profile');\r\n                } else {\r\n                    history.push('/editProfile');\r\n                    localStorage.setItem('userHasBeenRedirectedToCreateProfile', 'true');\r\n                }\r\n            }\r\n        }\r\n\r\n        checkIfUsersIsSigningIn();\r\n\r\n        if (user) {\r\n            redirectUser(user.uid);\r\n        }\r\n    }, [user, history, isLoadingAuth]);\r\n\r\n    const signIn = () => {\r\n        setIsLoadingAuth(true);\r\n        signInWithTwitch();\r\n        setIsLoadingAuth(false);\r\n    }\r\n\r\n    const closeTermsAndConditionsModal = () => setOpenTermsAndConditionsDialog(false);\r\n\r\n    if (user === undefined) {\r\n        return (\r\n            <StreamerDashboardContainer>\r\n                <Grid item md='1' />\r\n                <Grid item md='6' className={styles.mainContainer}>\r\n                    <QaplaGaming style={{ marginTop: '100px', marginBottom: '80px', transform: 'scale(0.9)' }} />\r\n                    <p className={styles.getStarted}>\r\n                        {title}\r\n                    </p>\r\n                    <div className={styles.formContainer}>\r\n                        <Button variant='contained'\r\n                            className={styles.continueButton}\r\n                            disabled={isLoadingAuth}\r\n                            startIcon={<TwitchIcon />}\r\n                            onClick={signIn}>\r\n                            {!isLoadingAuth ?\r\n                                t('StreamersSignin.signIn')\r\n                                :\r\n                                t('StreamersSignin.loading')\r\n                            }\r\n                        </Button>\r\n                        <p style={{ marginTop: '38px', color: '#FFF', fontSize: '.8rem' }}>\r\n                            {t('StreamersSignin.termsAndConditionsP1')}\r\n                            <u style={{ cursor: 'pointer', color: '#3B4BF9' }} onClick={() => setOpenTermsAndConditionsDialog(true)}>\r\n                                {t('StreamersSignin.termsAndConditionsP2')}\r\n                            </u>\r\n                        </p>\r\n                    </div>\r\n                    <Hidden smDown>\r\n                        <div className={styles.bottomImage} >\r\n                            <img src={SignInImage} alt='Sign In' />\r\n                        </div>\r\n                    </Hidden>\r\n                </Grid>\r\n                <Grid item md='1' />\r\n                <QaplaTerms open={openTermsAndConditionsDialog} onClose={closeTermsAndConditionsModal} />\r\n            </StreamerDashboardContainer>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamersSignin;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx",["224"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport dayjs from 'dayjs';\r\n\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\r\nimport { notifyActivationWithReferralCode } from '../../services/discord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerStyle: {\r\n        padding: 0\r\n    },\r\n    background: {\r\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\r\n        display: 'flex',\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        minHeight: '100vh',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        backgroundColor: '#141833',\r\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\r\n        borderRadius: '35px',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingTop: 24,\r\n        paddingBottom: 0\r\n    },\r\n    title: {\r\n        fontWeight: '600',\r\n        fontSize: '18px',\r\n        lineHeight: '32px',\r\n        textAlign: 'center',\r\n        color: '#FFFFFF',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    instructions: {\r\n        marginTop: 15,\r\n        fontWeight: '400',\r\n        fontSize: '14px',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        color: '#8F9BBA',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    textInput: {\r\n        textAlign: 'center',\r\n        paddingTop: 12,\r\n        paddingBottom: 12\r\n    },\r\n    activeFreeTrialButton: {\r\n        marginTop: 32,\r\n        backgroundColor: '#3B4BF9',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        },\r\n        marginBottom: 60\r\n    },\r\n    noCode: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        marginTop: 32,\r\n        fontWeight: '600',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    referralProgram: {\r\n        textAlign: 'center',\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        marginTop: 32,\r\n        fontWeight: '400',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    subscribeButton: {\r\n        marginTop: 40,\r\n        backgroundColor: '#00FFDD',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    subscribeButtonCointainer: {\r\n        marginBottom: 24,\r\n        marginTop: 180\r\n    }\r\n}));\r\n\r\nconst RequestActivation = ({ user, onSuccessActivation }) => {\r\n    const [referralCode, setReferralCode] = useState('');\r\n    const [validatingCode, setValidatingCode] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const validateCode = async () => {\r\n        if (user.broadcasterType === '') {\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        setValidatingCode(true);\r\n        if (referralCode) {\r\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\r\n            if (referrerUid) {\r\n                if (referrerUid !== user.uid) {\r\n                    if (!user.referredBy) {\r\n                        activateFreeTrialWithReferralCode(referrerUid, {\r\n                            redemptionsPerStream: 40,\r\n                            streamsIncluded: 2\r\n                        });\r\n                    } else {\r\n                        setValidatingCode(false);\r\n                        alert('Ya usaste un código de referido antes');\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('No puedes usar tu propio código');\r\n                }\r\n            } else {\r\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\r\n                if (invitationCodeSnap.exists()) {\r\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\r\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('Código invalido');\r\n                }\r\n            }\r\n        } else {\r\n            setValidatingCode(false);\r\n        }\r\n    }\r\n\r\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n        await updateStreamerProfile(user.uid, {\r\n            referredBy: referrerUid,\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\r\n\r\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\r\n\r\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\r\n\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n         await updateStreamerProfile(user.uid, {\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await removeInvitationCode(code);\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\r\n            <div className={classes.background}>\r\n                <div>\r\n                <Card className={classes.card}>\r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\r\n                    </div>\r\n                    <CardContent>\r\n                        <p className={classes.title}>\r\n                            {t('RequestActivation.title')} 🚀\r\n                        </p>\r\n                        <p className={classes.instructions}>\r\n                            {validatingCode || !user.referredBy ?\r\n                                <>\r\n                                    {t('RequestActivation.descriptionP1')}\r\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\r\n                                    {t('RequestActivation.descriptionP2')}\r\n                                </>\r\n                                :\r\n                                t('RequestActivation.buyAMembership')\r\n                            }\r\n                        </p>\r\n                        {validatingCode || !user.referredBy ?\r\n                            <>\r\n                                <StreamerTextInput\r\n                                    placeholder={t('RequestActivation.referralCode')}\r\n                                    fullWidth\r\n                                    containerStyle={{ marginTop: 24 }}\r\n                                    classes={{ input: classes.textInput }}\r\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\r\n                                    value={referralCode}\r\n                                    onChange={(e) => setReferralCode(e.target.value)} />\r\n                                {validatingCode ?\r\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\r\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\r\n                                    </div>\r\n                                    :\r\n                                    <Button\r\n                                        onClick={validateCode}\r\n                                        fullWidth\r\n                                        classes={{\r\n                                            root: classes.activeFreeTrialButton\r\n                                        }}>\r\n                                        {t('RequestActivation.startFreeTrial')}\r\n                                    </Button>\r\n                                }\r\n                            </>\r\n                            :\r\n                            <div className={classes.subscribeButtonCointainer}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    onClick={() => history.push('/membership')}\r\n                                    classes={{ root: classes.subscribeButton }}>\r\n                                    {t('RequestActivation.subscribe')}\r\n                                </Button>\r\n                            </div>\r\n                        }\r\n                    </CardContent>\r\n                </Card>\r\n                {validatingCode || !user.referredBy ?\r\n                    <>\r\n                        <p className={classes.noCode}>\r\n                            {t('RequestActivation.dontHaveACode')}\r\n                        </p>\r\n                        <Button\r\n                            fullWidth\r\n                            onClick={() => history.push('/membership')}\r\n                            classes={{ root: classes.subscribeButton }}>\r\n                            {t('RequestActivation.subscribe')}\r\n                        </Button>\r\n                    </>\r\n                    :\r\n                    <p className={classes.referralProgram}>\r\n                        {t('RequestActivation.referralProgramP1')}\r\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\r\n                        {t('RequestActivation.referralProgramP2')}\r\n                    </p>\r\n                }\r\n                </div>\r\n            </div>\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default RequestActivation;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx",["225","226"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx",["227","228","229","230"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx",["231"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx",["232","233","234","235","236","237","238","239","240"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx",["241"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx",["242","243","244"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as ESvg } from './../../assets/g.svg';\r\nimport {ReactComponent as Closeicon} from './../../assets/Closeicono.svg'\r\nimport HeartHands from './../../assets/HeartHands.png';\r\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        height: '100vh'\r\n    },\r\n    paymentInfoContainer: {\r\n        paddingLeft: 32,\r\n        paddingRight: 64,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    },\r\n    eImageContainer: {\r\n        display: 'flex',\r\n        width: 80,\r\n        height: 80,\r\n        borderRadius: 20,\r\n        backgroundColor: '#141833',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    subscriptionBought: {\r\n        marginTop: 48,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    subTerms: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    },\r\n    totalPaid: {\r\n        fontSize: 48,\r\n        fontWeight: '600',\r\n        color: 'rgba(255, 255, 255, .9)',\r\n        lineHeight:'58.09px'\r\n    },\r\n    interval: {\r\n        marginLeft: 6,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    paymentDetails: {\r\n        marginTop: 48,\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    subscriptionType: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentInterval: {\r\n        marginTop: 8,\r\n        fontSize: 14,\r\n        fontWeight: '400',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    itemCost: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentUntilTodayContainer: {\r\n        marginTop: 56,\r\n        color: '#FFF',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    paymentUntilToday: {\r\n        fontSize: 24,\r\n        fontWeight: '500'\r\n    },\r\n    thanksCardContainer: {\r\n        width: '450px',\r\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    thanksCard: {\r\n        backgroundColor: '#141833',\r\n        display: 'inline-block',\r\n        color: '#FFF',\r\n        maxWidth: '80%',\r\n        borderRadius: 35\r\n    },\r\n    cardContentContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        maxWidth:'450px'\r\n    },\r\n    thanksTitle: {\r\n        marginTop: 8,\r\n        fontSize: 18,\r\n        fontWeight: '700',\r\n        textAlign: 'center'\r\n    },\r\n    thanksDescription: {\r\n        marginTop: 24,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        marginRight: 48,\r\n        marginLeft: 48\r\n    },\r\n    publishButton: {\r\n        marginTop: 64,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        backgroundColor: '#0AFFD2',\r\n        borderRadius: 10,\r\n        color: '#4E2D92',\r\n        fontSize: 16,\r\n        fontWeight: '700',\r\n        paddingTop: 19,\r\n        paddingBottom: 19,\r\n        '&:hover': {\r\n            backgroundColor: '#0AFFD2',\r\n            opacity: '.95'\r\n        }\r\n    },\r\n    backToDashboardButton: {\r\n        marginTop: 16,\r\n        marginBottom: 16,\r\n        fontSize: 16,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    buttonClose:{\r\n       position: 'absolute',\r\n       top:'0px',\r\n       left:'-10px',\r\n    }\r\n}));\r\n\r\nfunction useQuery() {\r\n    const { search } = useLocation();\r\n\r\n    return useMemo(() => new URLSearchParams(search), [search]);\r\n}\r\n\r\nconst ChargeConfirmationPage = ({ user }) => {\r\n    const [totalPaid, setTotalPaid] = useState(0);\r\n    const [interval, setInterval] = useState('');\r\n    const [intervalText, setIntervalText] = useState('');\r\n    const [plan, setPlan] = useState('');\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const query = useQuery();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getDetails() {\r\n            const id = query.get('subscriptionId');\r\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\r\n            setTotalPaid(details.val().totalPaid);\r\n\r\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\r\n\r\n            setIntervalText(details.val().interval);\r\n\r\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            // getDetails();\r\n        }\r\n    }, [user]);\r\n\r\n    const onPublishStreamClick = () => {\r\n        history.push('/create');\r\n    }\r\n\r\n    const onBackToDashboardClick = () => {\r\n        history.push('/profile');\r\n    }\r\n\r\n    return (\r\n        <Grid container alignContent='center' className={classes.container}>\r\n            <Grid item md={6} className={classes.paymentInfoContainer}>\r\n                <Closeicon className={classes.buttonClose}/>\r\n                <div className={classes.eImageContainer}>\r\n                \r\n                    <ESvg />\r\n                </div>\r\n                <p className={classes.subscriptionBought}>\r\n                    {plan && intervalText &&\r\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                    }\r\n                </p>\r\n                <div className={classes.subTerms}>\r\n                    <p className={classes.totalPaid}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                    <p className={classes.interval}>\r\n                        {interval}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentDetails}>\r\n                    <div>\r\n                        <p className={classes.subscriptionType}>\r\n                            {plan}\r\n                        </p>\r\n                        <p className={classes.paymentInterval}>\r\n                            {intervalText &&\r\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <p className={classes.itemCost}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentUntilTodayContainer}>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\r\n                    </p>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            </Grid>\r\n            <Grid item md={6} className={classes.thanksCardContainer}>\r\n                <Card className={classes.thanksCard}>\r\n                    <div className={classes.cardContentContainer}>\r\n                        <img src={HeartHands} />\r\n                        <CardContent>\r\n                            <p className={classes.thanksTitle}>\r\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\r\n                            </p>\r\n                            <p className={classes.thanksDescription}>\r\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\r\n                            </p>\r\n                        </CardContent>\r\n                        <Button fullWidth variant='contained'\r\n                            className={classes.publishButton}\r\n                            onClick={onPublishStreamClick}>\r\n                            {t('ChargeConfirmationPage.publishStream')}\r\n                        </Button>\r\n                        <Button className={classes.backToDashboardButton}\r\n                            onClick={onBackToDashboardClick}>\r\n                            {t('ChargeConfirmationPage.backToDashboard')}\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ChargeConfirmationPage;",{"ruleId":"245","severity":1,"message":"246","line":74,"column":22,"nodeType":"247","messageId":"248","endLine":74,"endColumn":35},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"249","replacedBy":"253"},{"ruleId":"251","replacedBy":"254"},{"ruleId":"245","severity":1,"message":"255","line":273,"column":21,"nodeType":"247","messageId":"248","endLine":273,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":457,"column":8,"nodeType":"258","endLine":457,"endColumn":14,"suggestions":"259"},{"ruleId":"249","replacedBy":"260"},{"ruleId":"251","replacedBy":"261"},{"ruleId":"256","severity":1,"message":"262","line":243,"column":8,"nodeType":"258","endLine":243,"endColumn":44,"suggestions":"263"},{"ruleId":"249","replacedBy":"264"},{"ruleId":"251","replacedBy":"265"},{"ruleId":"245","severity":1,"message":"266","line":373,"column":11,"nodeType":"247","messageId":"248","endLine":373,"endColumn":26},{"ruleId":"245","severity":1,"message":"267","line":4,"column":5,"nodeType":"247","messageId":"248","endLine":4,"endColumn":11},{"ruleId":"245","severity":1,"message":"268","line":5,"column":5,"nodeType":"247","messageId":"248","endLine":5,"endColumn":12},{"ruleId":"245","severity":1,"message":"269","line":6,"column":5,"nodeType":"247","messageId":"248","endLine":6,"endColumn":9},{"ruleId":"245","severity":1,"message":"270","line":7,"column":5,"nodeType":"247","messageId":"248","endLine":7,"endColumn":11},{"ruleId":"245","severity":1,"message":"271","line":14,"column":8,"nodeType":"247","messageId":"248","endLine":14,"endColumn":23},{"ruleId":"272","severity":1,"message":"273","line":16,"column":1,"nodeType":"274","endLine":16,"endColumn":52},{"ruleId":"256","severity":1,"message":"275","line":98,"column":8,"nodeType":"258","endLine":98,"endColumn":38,"suggestions":"276"},{"ruleId":"245","severity":1,"message":"277","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":26},{"ruleId":"245","severity":1,"message":"278","line":7,"column":28,"nodeType":"247","messageId":"248","endLine":7,"endColumn":37},{"ruleId":"245","severity":1,"message":"279","line":21,"column":11,"nodeType":"247","messageId":"248","endLine":21,"endColumn":18},{"ruleId":"245","severity":1,"message":"280","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":14},{"ruleId":"245","severity":1,"message":"281","line":6,"column":198,"nodeType":"247","messageId":"248","endLine":6,"endColumn":223},{"ruleId":"245","severity":1,"message":"282","line":23,"column":12,"nodeType":"247","messageId":"248","endLine":23,"endColumn":24},{"ruleId":"256","severity":1,"message":"283","line":223,"column":8,"nodeType":"258","endLine":223,"endColumn":84,"suggestions":"284"},{"ruleId":"245","severity":1,"message":"285","line":13,"column":5,"nodeType":"247","messageId":"248","endLine":13,"endColumn":11},{"ruleId":"245","severity":1,"message":"286","line":2,"column":67,"nodeType":"247","messageId":"248","endLine":2,"endColumn":74},{"ruleId":"245","severity":1,"message":"287","line":13,"column":28,"nodeType":"247","messageId":"248","endLine":13,"endColumn":36},{"ruleId":"245","severity":1,"message":"288","line":16,"column":28,"nodeType":"247","messageId":"248","endLine":16,"endColumn":33},{"ruleId":"245","severity":1,"message":"289","line":233,"column":12,"nodeType":"247","messageId":"248","endLine":233,"endColumn":29},{"ruleId":"245","severity":1,"message":"290","line":237,"column":12,"nodeType":"247","messageId":"248","endLine":237,"endColumn":23},{"ruleId":"245","severity":1,"message":"291","line":241,"column":12,"nodeType":"247","messageId":"248","endLine":241,"endColumn":21},{"ruleId":"245","severity":1,"message":"292","line":241,"column":23,"nodeType":"247","messageId":"248","endLine":241,"endColumn":35},{"ruleId":"256","severity":1,"message":"293","line":288,"column":8,"nodeType":"258","endLine":288,"endColumn":14,"suggestions":"294"},{"ruleId":"245","severity":1,"message":"295","line":387,"column":11,"nodeType":"247","messageId":"248","endLine":387,"endColumn":24},{"ruleId":"272","severity":1,"message":"273","line":26,"column":1,"nodeType":"274","endLine":26,"endColumn":51},{"ruleId":"245","severity":1,"message":"296","line":172,"column":24,"nodeType":"247","messageId":"248","endLine":172,"endColumn":34},{"ruleId":"256","severity":1,"message":"275","line":187,"column":8,"nodeType":"258","endLine":187,"endColumn":14,"suggestions":"297"},{"ruleId":"298","severity":1,"message":"299","line":245,"column":25,"nodeType":"300","endLine":245,"endColumn":49},"no-unused-vars","'setamountBits' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["301"],"no-negated-in-lhs",["302"],["301"],["302"],"'setBalance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["303"],["301"],["302"],"React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["304"],["301"],["302"],"'shareStreamLink' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["305"],"'useEffect' is defined but never used.","'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","'styles' is defined but never used.","'getStreamerAlertsSettings' is defined but never used.","'mediaContent' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'alertSideRight' and 'queueAnimation'. Either include them or remove the dependency array.",["306"],"'Hidden' is defined but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["307"],"'copyTwitchURL' is assigned a value but never used.","'getDetails' is defined but never used.",["308"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"321","text":"322"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"323","text":"324"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"325","text":"326"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",{"range":"327","text":"328"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"329","text":"330"},"Update the dependencies array to be: [query, t, user]",{"range":"331","text":"332"},[18267,18273],"[setPendingMessages, user]",[6962,6998],"[streamStarted, dots, enablingQoins, stream]",[4466,4496],"[user, history, isLoadingAuth, query, t]",[10257,10333],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",[9179,9185],"[socialLinksInitialValue, twitchURL, user]",[5179,5185],"[query, t, user]"]
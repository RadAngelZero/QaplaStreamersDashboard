[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"43"},{"size":4817,"mtime":1662251001613,"results":"44","hashOfConfig":"45"},{"size":9052,"mtime":1661972893700,"results":"46","hashOfConfig":"45"},{"size":21222,"mtime":1661972327645,"results":"47","hashOfConfig":"45"},{"size":21156,"mtime":1661975099553,"results":"48","hashOfConfig":"45"},{"size":7544,"mtime":1650310829994,"results":"49","hashOfConfig":"45"},{"size":3414,"mtime":1661972887780,"results":"50","hashOfConfig":"45"},{"size":6609,"mtime":1661974982586,"results":"51","hashOfConfig":"45"},{"size":20318,"mtime":1661975994084,"results":"52","hashOfConfig":"45"},{"size":5699,"mtime":1661974634048,"results":"53","hashOfConfig":"45"},{"size":12826,"mtime":1662044241478,"results":"54","hashOfConfig":"45"},{"size":4314,"mtime":1661975942806,"results":"55","hashOfConfig":"45"},{"size":21460,"mtime":1662058209975,"results":"56","hashOfConfig":"45"},{"size":14755,"mtime":1659986034550,"results":"57","hashOfConfig":"45"},{"size":2185,"mtime":1661972327672,"results":"58","hashOfConfig":"45"},{"size":3416,"mtime":1650310830004,"results":"59","hashOfConfig":"45"},{"size":383,"mtime":1650310830005,"results":"60","hashOfConfig":"45"},{"size":11901,"mtime":1661972327656,"results":"61","hashOfConfig":"45"},{"size":6726,"mtime":1662044244293,"results":"62","hashOfConfig":"45"},{"size":14683,"mtime":1661997078472,"results":"63","hashOfConfig":"45"},{"size":226,"mtime":1659480227124,"results":"64","hashOfConfig":"45"},{"size":25007,"mtime":1662044157124,"results":"65","hashOfConfig":"45"},{"size":1288,"mtime":1648248621496,"results":"66","hashOfConfig":"45"},{"size":1291,"mtime":1661972887777,"results":"67","hashOfConfig":"45"},{"size":8238,"mtime":1650310829995,"results":"68","hashOfConfig":"45"},{"size":8409,"mtime":1661972887794,"results":"69","hashOfConfig":"45"},{"size":1592,"mtime":1650310830008,"results":"70","hashOfConfig":"45"},{"size":1919,"mtime":1661972327646,"results":"71","hashOfConfig":"45"},{"size":3579,"mtime":1614731664824,"results":"72","hashOfConfig":"45"},{"size":835,"mtime":1642711713952,"results":"73","hashOfConfig":"45"},{"size":22970,"mtime":1661972327647,"results":"74","hashOfConfig":"45"},{"size":9694,"mtime":1661972327657,"results":"75","hashOfConfig":"45"},{"size":629,"mtime":1635283796967,"results":"76","hashOfConfig":"45"},{"size":695,"mtime":1635283796969,"results":"77","hashOfConfig":"45"},{"size":362,"mtime":1614731664838,"results":"78","hashOfConfig":"45"},{"size":16521,"mtime":1661972327653,"results":"79","hashOfConfig":"45"},{"size":6280,"mtime":1661972327673,"results":"80","hashOfConfig":"45"},{"size":3844,"mtime":1650310830005,"results":"81","hashOfConfig":"45"},{"size":2975,"mtime":1614731664830,"results":"82","hashOfConfig":"45"},{"size":3170,"mtime":1661972327665,"results":"83","hashOfConfig":"45"},{"size":3326,"mtime":1661972327650,"results":"84","hashOfConfig":"45"},{"size":2042,"mtime":1661972327667,"results":"85","hashOfConfig":"45"},{"size":3339,"mtime":1650310830005,"results":"86","hashOfConfig":"45"},{"size":2011,"mtime":1650310829999,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rfo3np",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"130"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"130"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"135"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"130"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],["187","188"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["189","190"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",["191"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\nimport {\n    streamsPlaceholderImages,\n    SCHEDULED_EVENT_TYPE,\n    PAST_STREAMS_EVENT_TYPE,\n    PENDING_APPROVAL_EVENT_TYPE,\n    HOUR_IN_MILISECONDS\n} from '../../utilities/Constants';\nimport {\n    cancelStreamRequest,\n    getStreamTitle,\n    getPastStreamTitle,\n    checkActiveCustomReward,\n    listenToQoinsEnabled,\n    removeQoinsEnabledListener\n} from '../../services/database';\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\nimport { auth } from '../../services/firebase';\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\nimport { sendCustomMessage } from '../../services/functions';\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\n\nconst useStyles = makeStyles(() => ({\n    eventCard: {\n        display: 'flex',\n        flexDirection: 'column',\n        backgroundColor: '#141833',\n        borderRadius: '1.5rem',\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\n        height: '100%',\n        minWidth: '250px',\n        minHeight: '360px',\n    },\n    relativeContainer: {\n        position: 'relative'\n    },\n    hourContainer: {\n        position: 'absolute',\n        right: '1rem',\n        top: '1rem',\n        background: '#1B1D2159',\n        borderRadius: '.5rem'\n    },\n    hourText: {\n        color: '#FFF',\n        padding: '2px 8px',\n        fontSize: '11px',\n        fontStyle: 'normal',\n        fontWeight: '700',\n        lineHeight: '20px',\n        letterSpacing: '-0.5px',\n        textAlign: 'center'\n\n    },\n    dateContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        position: 'absolute',\n        right: '1rem',\n        bottom: '1rem',\n        padding: '2px 10px',\n        background: '#1B1D21',\n        height: '32px',\n        borderRadius: '10px'\n    },\n    dateText: {\n        color: '#FFF',\n        fontSize: '13px',\n        fontWeight: '700',\n        lineHeight: '20px',\n        marginLeft: '10px'\n    },\n    eventImage: {\n        objectFit: 'cover',\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        borderRadius: '24px'\n    },\n    eventCardContent: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '24px 16px',\n        height: '100%'\n    },\n    eventCardTitle: {\n        color: '#FFFFFF',\n        fontSize: '16px',\n        lineHeight: '24px',\n        fontWeight: '500',\n        height: '48px',\n\n    },\n    rowContainer: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    circle: {\n        borderRadius: '100%',\n        height: '.55rem',\n        width: '.55rem',\n        marginRight: '.5rem'\n    },\n    participantsNumber: {\n        fontSize: '12px',\n        textAlign: 'right',\n        lineHeight: '16px'\n    },\n    streamButton: {\n        backgroundColor: '#6C5DD3 !important',\n        color: '#FFF'\n    },\n    buttonsContainer: {\n        marginTop: 'auto'\n    },\n    startButton: {\n        backgroundColor: '#00FFDD',\n        color: '#0D1021',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    endButton: {\n        backgroundColor: '#3B4BF9',\n        color: '#FFF',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    manageButton: {\n        backgroundColor: '#272D5780',\n        color: '#FFFFFF99',\n        width: '100%',\n        borderRadius: '8px',\n        textTransform: 'none'\n    }\n}));\n\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [stream, setStream] = useState(null);\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\n    const [startingStream, setStartingStream] = useState(false);\n    const [closingStream, setClosingStream] = useState(false);\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\n    const [loadingDots, setLoadingDots] = useState('');\n    const [hideStream, setHideStream] = useState(false);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getParticipantsNumber() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                /* const participants = await getStreamParticipantsNumber(streamId);\n                let participantsNumber = participants.exists() ? participants.val() : 0;\n                setParticipantsNumber(participantsNumber); */\n\n                const title = await getStreamTitle(streamId);\n                if (title.exists()) {\n                    setTitle(title.val());\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName });\n                }\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\n                let participantsNumber = participants.exists() ? participants.val() : 0;\n                setParticipantsNumber(participantsNumber); */\n\n                const title = await getPastStreamTitle(user.uid, streamId);\n                setTitle(title.val());\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\n                    setTitle({ en: games['allGames'][game].gameName });\n                }\n            }\n        }\n\n        async function checkStreamStatus() {\n            const streamStatus = await checkActiveCustomReward(streamId);\n            if (streamStatus.exists()) {\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                        if (qoinsEnabled.val()) {\n                            setStream({\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\n                                qoinsEnabled: qoinsEnabled.val()\n                            });\n\n                            removeQoinsEnabledListener(streamId);\n                        } else {\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\n                        }\n                    });\n                } else {\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\n                }\n\n                setShowRewardsOptions(true);\n                setHideStream(false);\n            } else {\n                setStream(null);\n            }\n        }\n\n\n        getParticipantsNumber();\n        checkStreamStatus();\n\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\n            const currentTimestamp = (new Date()).getTime();\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\n                    setHideStream(true);\n                } else {\n                    setShowRewardsOptions(true);\n                }\n            }\n        }\n\n        if (startingStream) {\n            setTimeout(() => {\n                if (loadingDots.length > 2) {\n                    setLoadingDots('');\n                } else {\n                    setLoadingDots(loadingDots + '.');\n                }\n            }, 500);\n        } else if (loadingDots !== '') {\n            setLoadingDots('');\n        }\n\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\n\n    const cancelStream = (e) => {\n        e.stopPropagation();\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\n            cancelStreamRequest(user.uid, streamId);\n            onRemoveStream(streamId);\n        }\n    }\n\n    const startStream = async (enableIn) => {\n        try {\n            setStartingStream(true);\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream, enableIn);\n\n            if (enableIn) {\n                listenToQoinsEnabled(streamId, (qoinsEnabled) => {\n                    if (qoinsEnabled.val()) {\n                        setStream({\n                            ...stream,\n                            qoinsEnabled: qoinsEnabled.val()\n                        });\n\n                        removeQoinsEnabledListener(streamId);\n                    }\n                });\n            }\n\n            window.analytics.track('Stream started', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setStream(streamData);\n            if (!openStreamDialog) {\n                setOpenStreamStartedDialog(true);\n            }\n            setStartingStream(false);\n\n            return streamData;\n        } catch (error) {\n            if (error && error.status === 401) {\n                handleExpiredSession();\n            } else {\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\n            }\n        }\n    }\n\n    const closeStream = async (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        try {\n            setClosingStream(true);\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId);\n\n            window.analytics.track('Stream finished', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setOpenRewardsRemovedDialog(true);\n\n            // Close the rest of Dialogs just in case\n            setOpenStreamStartedDialog(false);\n            setOpenQoinsWarningDialog(false);\n            setOpenStreamDialog(false);\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\n        if (e) {\n            e.stopPropagation();\n        }\n\n        if (stream.qoinsEnabled) {\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\n            if (dontShowCloseStreamWarning) {\n                closeStream();\n            } else {\n                setOpenEndStreamDialog(true);\n            }\n        } else {\n            setOpenQoinsWarningDialog(true);\n        }\n    }\n\n    /**\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\n     * have streamObject as parameter with a default value of stream state\n     */\n    const enableQoinsReward = async (streamObject = stream) => {\n        try {\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\n\n            window.analytics.track('Qoins enabled', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime()\n            });\n            setStream({ ...streamObject, qoinsEnabled: true });\n        } catch (error) {\n            console.log(error);\n            handleExpiredSession();\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\n\n    const closeDialogsAndOpenManageRewardsDialog = () => {\n        setOpenStreamStartedDialog(false);\n        setOpenQoinsWarningDialog(false);\n        setOpenStreamDialog(true);\n    }\n\n    const closeAndRemoveStream = () => {\n        setOpenRewardsRemovedDialog(false);\n        onRemoveStream(streamId);\n    }\n\n    const sendMessage = async (message) => {\n        if (message) {\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\n\n            window.analytics.track('Custom Message sent', {\n                streamId,\n                uid: user.uid,\n                timestamp: (new Date()).getTime(),\n                message\n            });\n            setOpenCustomMessageSentDialog(true);\n        }\n    }\n\n    const shareStreamLink = async () => {\n        const link = await generateStreamDynamicLink(streamId, {\n            title: title && title['en'] ? title['en'] : '',\n            description: `Evento de ${user.displayName}`,\n            image: image ? image : ''\n        });\n\n        // This does not work on Safari for some reason\n        if (link) {\n            navigator.clipboard.writeText(link);\n        }\n    }\n\n    if (game && !hideStream) {\n        return (\n            <Card className={classes.eventCard} style={style}>\n                <div className={classes.relativeContainer}>\n                    <div className={classes.hourContainer}>\n                        <p className={classes.hourText}>\n                            {hour}\n                        </p>\n                    </div>\n                    <div className={classes.dateContainer}>\n                        <CalendarIcon />\n                        <p className={classes.dateText}>\n                            {date}\n                        </p>\n                    </div>\n                    <img\n                        alt='Game'\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\n                        width='100%'\n                        height='180'\n                        className={classes.eventImage} />\n                </div>\n                <div className={classes.eventCardContent}>\n                    <p className={classes.eventCardTitle}>\n                        {title && title['en'] ? title['en'] : ''}\n                    </p>\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\n                            <div style={{\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\n                                width: '8px',\n                                height: '8px',\n                                borderRadius: '50%'\n                            }} />\n                            <div style={{ width: '6px' }} />\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\n                            </p>\n                        </div>\n                    }\n                    <div className={classes.buttonsContainer}>\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\n                            (!startingStream ?\n                                (stream ?\n                                    (!closingStream && stream.qoinsEnabled ?\n                                        <Button size='medium' className={classes.endButton}\n                                            disabled={closingStream}\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\n                                            {t('StreamCard.end')}\n                                        </Button>\n                                        :\n                                        <p style={{ color: '#FFF', textAlign: 'center' }}>\n                                            {t('StreamCard.dropsScheduled')}\n                                        </p>\n                                    )\n                                    :\n                                    <Button size='medium' className={classes.startButton}\n                                        startIcon={<TimerIcon />}\n                                        onClick={() => setOpenStreamDialog(true)}>\n                                        {t('StreamCard.enableDrops')}\n                                    </Button>\n                                )\n                                :\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\n                                </p>\n                            )\n                        }\n                        <div style={{ height: '11px' }} />\n                        {streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions &&\n                            <Button size='medium' className={classes.manageButton} onClick={manageStream}>\n                                {t('StreamCard.manageStream')}\n                            </Button>\n                        }\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\n                                {t('StreamCard.cancelStreamRequest')}\n                            </Button>\n                        }\n                    </div>\n                </div>\n                <EventManagementDialog open={openStreamDialog}\n                    user={user}\n                    sendMessage={sendMessage}\n                    streamId={streamId}\n                    stream={stream}\n                    streamStarted={startingStream}\n                    closingStream={closingStream}\n                    onClose={() => setOpenStreamDialog(false)}\n                    startStream={startStream}\n                    enableQoins={enableQoinsReward}\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\n                    streamTitle={title && title['en'] ? title['en'] : ''}\n                    date={date}\n                    hour={hour} />\n                <EventConfirmStartDialog open={openStreamStartedDialog}\n                    onClose={() => setOpenStreamStartedDialog(false)}\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\n                    onClose={() => setOpenQoinsWarningDialog(false)}\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\n                    closingStream={closingStream}\n                    onClose={() => setOpenEndStreamDialog(false)}\n                    closeStream={closeStream} />\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\n                    onClose={closeAndRemoveStream}  />\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\n            </Card>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamCard;",["192","193"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ModalQoinsDrops/ModalQoinsDrops.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditCoin/StreamerProfileEditCoin.jsx",["194"],"import React, { useState, useEffect } from \"react\";\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from \"@material-ui/core\";\n\nimport iconEdit from \"../../assets/Edit.svg\";\nimport { getCustomReward, updateCustomReward } from \"../../services/twitch\";\nimport { getInteractionsRewardData, setAlertSetting, updateStreamerProfile } from \"../../services/database\";\nimport { refreshUserAccessToken } from \"../../services/functions\";\nimport { auth } from \"../../services/firebase\";\nimport { ReactComponent as ConfirmChange } from './../../assets/ConfirmChange.svg';\nimport StreamerProfileModalDisableInteractions from \"../StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions\";\nimport StreamerProfileImgCoin from '../StreamerProfileImgCoin/StreamerProfileImgCoin';\nimport style from \"./StreamerProfileEditCoin.module.css\";\n\nconst useStyles = makeStyles((theme) => ({\n    circularProgress: {\n        color: '#0AFFD2',\n        alignSelf: 'center'\n    }\n}));\n\nconst StreamerProfileEditCoin = ({ user }) => {\n    const [ActiveEditTitle, setActiveEditTitle] = useState(false);\n    const [ActiveEditCoins, setActiveEditCoins] = useState(false);\n    const [rewardId, setRewardId] = useState('');\n    const [rewardName, setRewardName] = useState('');\n    const [rewardCost, setRewardCost] = useState('');\n    const [savingChanges, setSavingChanges] = useState(false);\n    const [rewardBackgroundColor, setRewardBackgroundColor] = useState('');\n    const [modal, setModal] = useState(false);\n    const [titleCheckbox, setTitleCheckbox] = useState('');\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function getRewardData() {\n            try {\n                const rewardData = await getInteractionsRewardData(user.uid);\n                if (rewardData.exists()) {\n                    const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n                    if (userTokensUpdated.data.status === 200) {\n                        const userCredentialsUpdated = userTokensUpdated.data;\n                        updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                        const reward = await getCustomReward(rewardData.val().rewardId, user.id, userCredentialsUpdated.access_token);\n                        if (reward && reward.id) {\n                            setRewardName(reward.title);\n                            setRewardCost(reward.cost);\n                            setRewardBackgroundColor(reward.background_color);\n                            setReactionsEnabled(!reward.is_paused);\n                            setTitleCheckbox(t(!reward.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'));\n                            setRewardId(reward.id);\n                        } else if (reward === 404) {\n                            history.push('/onboarding');\n                        }\n                    }\n                } else {\n                    history.push('/onboarding');\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n\n        if (user.uid) {\n            getRewardData();\n        }\n    }, [user.uid, user.id, user.refreshToken]);\n\n    const saveData = async (event) => {\n        if (event.key === 'Enter' || event.type === 'click') {\n            setSavingChanges(true);\n            const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n            if (userTokensUpdated.data.status === 200) {\n                const userCredentialsUpdated = userTokensUpdated.data;\n                updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n                const rewardUpdated = await updateCustomReward(\n                    user.id,\n                    userCredentialsUpdated.access_token,\n                    rewardId,\n                    {\n                        title: rewardName,\n                        cost: rewardCost\n                    }\n                );\n\n                if (rewardUpdated.status === 200) {\n                    setRewardName(rewardUpdated.title);\n                    setRewardCost(rewardUpdated.cost);\n                    setRewardBackgroundColor(rewardUpdated.background_color);\n                    setActiveEditCoins(false);\n                    setActiveEditTitle(false);\n                } else {\n                    switch (rewardUpdated.status) {\n                        case 404:\n                            // Not found (maybe the reward was removed from Twitch)\n                            break;\n                        case 500:\n                            // Twitch internal server error (could not update because of Twitch)\n                            break;\n                        default:\n                            break;\n                    }\n                }\n\n                setSavingChanges(false);\n            } else {\n                switch (userTokensUpdated.data.status) {\n                    case 401:\n                        // Invalid refresh token (need to sign in again)\n                        handleExpiredSession();\n                        break;\n                    case 500:\n                        // Twitch internal server error\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    const handleExpiredSession = async () => {\n        alert(t('StreamCard.sessionExpired'));\n        await auth.signOut();\n        history.push('/');\n    }\n\n    const handleCheckbox = (e) => {\n        if (!e.target.checked) {\n            const dontShowDialog = localStorage.getItem('dontShowCloseDisableReactionsDialog');\n            if (!dontShowDialog) {\n                setModal(true);\n            } else {\n                toggleReward();\n            }\n        } else {\n            setTitleCheckbox(t('StreamerProfile.StreamerProfileEditCoin.enabled'));\n            toggleReward();\n        }\n    }\n\n    const toggleReward = async () => {\n        setSavingChanges(true);\n        const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\n\n        if (userTokensUpdated.data.status === 200) {\n            const userCredentialsUpdated = userTokensUpdated.data;\n            updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\n            const rewardUpdated = await updateCustomReward(\n                user.id,\n                userCredentialsUpdated.access_token,\n                rewardId,\n                {\n                    is_paused: reactionsEnabled\n                }\n            );\n\n            if (rewardUpdated.status === 200) {\n                setAlertSetting(user.uid, 'reactionsEnabled', !rewardUpdated.is_paused);\n                setReactionsEnabled(!rewardUpdated.is_paused);\n                setTitleCheckbox(t(!rewardUpdated.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'))\n            } else {\n                switch (rewardUpdated.status) {\n                    case 404:\n                        // Not found (maybe the reward was removed from Twitch)\n                        break;\n                    case 500:\n                        // Twitch internal server error (could not update because of Twitch)\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            setSavingChanges(false);\n        } else {\n            switch (userTokensUpdated.data.status) {\n                case 401:\n                    // Invalid refresh token (need to sign in again)\n                    handleExpiredSession();\n                    break;\n                case 500:\n                    // Twitch internal server error\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    return (\n        <div className={style.containerItereractions}>\n            <h1 className={style.Titulo}>\n                {t('StreamerProfile.StreamerProfileEditCoin.reactions')}\n            </h1>\n            {rewardId !== '' && !savingChanges ?\n                <>\n                <StreamerProfileImgCoin rewardCost={rewardCost} backgroundColor={rewardBackgroundColor} />\n                <div className={style.content_input}>\n                    <div className={style.input}>\n                        {ActiveEditTitle ?\n                            <>\n                            <input\n                                className={style.Visibility_input}\n                                type=\"text\"\n                                maxLength={18}\n                                autoFocus\n                                value={rewardName}\n                                onChange={(event) => setRewardName(event.target.value)}\n                                onKeyPress={saveData} />\n                            <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <ConfirmChange />\n                            </Button>\n                            </>\n                            :\n                            <>\n                            <p className={style.p}>\n                                {rewardName}\n                            </p>\n                            <Button onClick={() => setActiveEditTitle(!ActiveEditTitle)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <img src={iconEdit} alt=\"icons-edit\" />\n                            </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.input}>\n                        {ActiveEditCoins ?\n                            <>\n                            <input\n                                className={style.Visibility_input}\n                                type=\"number\"\n                                autoFocus\n                                value={rewardCost}\n                                onChange={(event) => setRewardCost(event.target.value || 0)}\n                                onKeyPress={saveData} />\n                                <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                    <ConfirmChange />\n                                </Button>\n                            </>\n                            :\n                            <>\n                            <p className={style.p}>\n                                {rewardCost.toLocaleString()}\n                            </p>\n                            <Button onClick={() => setActiveEditCoins(!ActiveEditCoins)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\n                                <img src={iconEdit} alt=\"icons-edit\" />\n                            </Button>\n                            </>\n                        }\n                    </div>\n                    <div className={style.disableInteractions}>\n                        <p className={style.p}>{t('StreamerProfile.StreamerProfileEditCoin.reactions')} {titleCheckbox}</p>\n                        <input\n                            className={style.input_checkbox}\n                            type=\"checkbox\"\n                            id=\"boton\"\n                            checked={reactionsEnabled}\n                            onChange={(e) => handleCheckbox(e)}\n                        />\n                        <label for=\"boton\"></label>\n                    </div>\n                </div>\n                </>\n            :\n                <div style={{ display: 'flex', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n                    <CircularProgress className={classes.circularProgress} size={25} />\n                </div>\n            }\n            <Modal className={style.modalContainer}\n                open={modal}\n                onClose={() => setModal(false)}>\n                <StreamerProfileModalDisableInteractions closeDialog={() => setModal(false)}\n                    disableReward={toggleReward}\n                    setReactionsEnabled={setReactionsEnabled}\n                    setTitleCheckbox={setTitleCheckbox} />\n            </Modal>\n        </div>\n    );\n};\n\nexport default StreamerProfileEditCoin;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions.jsx",[],["195","196"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/OnBoarding/OnBoarding.jsx",["197","198"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["199"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",["200"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["201","202","203","204"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Button,\n    Hidden\n} from '@material-ui/core';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as QaplaGaming } from './../../assets/QaplaGamingLandingPage.svg';\nimport styles from './StreamersSignin.module.css';\nimport SignInImage from './../../assets/SignIn.png';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\nimport { getUserToken, subscribeStreamerToTwitchWebhook, subscribeStreamerToMailerLiteGroup } from '../../services/functions';\nimport { createStreamerProfile, getInteractionsRewardData, updateStreamerProfile, userHasPublicProfile } from '../../services/database';\nimport { webhookStreamOffline, webhookStreamOnline } from '../../utilities/Constants';\nimport { getTwitchUserData } from '../../services/twitch';\n\nvar utc = require('dayjs/plugin/utc');\ndayjs.extend(utc);\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst StreamersSignin = ({ user, title }) => {\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\n    const [openTermsAndConditionsDialog, setOpenTermsAndConditionsDialog] = useState(false);\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function checkIfUsersIsSigningIn() {\n            const twitchClientCode = query.get('code');\n\n            if (!isLoadingAuth && !user && twitchClientCode) {\n                setIsLoadingAuth(true);\n                const tokenData = await getUserToken(twitchClientCode);\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\n\n                    if (user.userData.isNewUser) {\n                        try {\n                            await subscribeStreamerToMailerLiteGroup(user.userData.email, user.userData.displayName);\n                        } catch (error) {\n                            console.error(error);\n                        }\n\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOnline.type, webhookStreamOnline.callback);\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOffline.type, webhookStreamOffline.callback);\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\n                    }\n\n                    try {\n                        await updateStreamerProfile(user.firebaseAuthUser.user.uid, {\n                            twitchAccessToken: tokenData.data.access_token,\n                            refreshToken: tokenData.data.refresh_token,\n                            displayName: user.userData.displayName,\n                            photoUrl: user.userData.photoUrl,\n                            broadcasterType: user.userData.broadcasterType\n                        });\n                    } catch (error) {\n                        console.log(error);\n                    }\n                } else {\n                    alert(t('StreamersSignin.alerts.errorSignIn'));\n                }\n            }\n        }\n        async function redirectUser(uid) {\n            const interactionsRewardData = await getInteractionsRewardData(user.uid);\n            if (interactionsRewardData.exists()) {\n                const userHasBeenRedirectedToCreateProfile = localStorage.getItem('userHasBeenRedirectedToCreateProfile');\n\n                if (userHasBeenRedirectedToCreateProfile) {\n                    history.push('/profile');\n                } else {\n                    if (await userHasPublicProfile(uid)) {\n                        history.push('/profile');\n                    } else {\n                        history.push('/editProfile');\n                        localStorage.setItem('userHasBeenRedirectedToCreateProfile', 'true');\n                    }\n                }\n            } else {\n                history.push('/onboarding');\n            }\n        }\n\n        checkIfUsersIsSigningIn();\n\n        if (user) {\n            redirectUser(user.uid);\n        }\n    }, [user, history, isLoadingAuth]);\n\n    const signIn = () => {\n        setIsLoadingAuth(true);\n        signInWithTwitch();\n        setIsLoadingAuth(false);\n    }\n\n    const closeTermsAndConditionsModal = () => setOpenTermsAndConditionsDialog(false);\n\n    if (user === undefined) {\n        return (\n            <StreamerDashboardContainer>\n                <Grid item md='1' />\n                <Grid item md='6' className={styles.mainContainer}>\n                    <QaplaGaming style={{ marginTop: '100px', marginBottom: '80px', transform: 'scale(0.9)' }} />\n                    <p className={styles.getStarted}>\n                        {title}\n                    </p>\n                    <div className={styles.formContainer}>\n                        <Button variant='contained'\n                            className={styles.continueButton}\n                            disabled={isLoadingAuth}\n                            startIcon={<TwitchIcon />}\n                            onClick={signIn}>\n                            {!isLoadingAuth ?\n                                t('StreamersSignin.signIn')\n                                :\n                                t('StreamersSignin.loading')\n                            }\n                        </Button>\n                        <p style={{ marginTop: '38px', color: '#FFF', fontSize: '.8rem' }}>\n                            {t('StreamersSignin.termsAndConditionsP1')}\n                            <a style={{ cursor: 'pointer', color: '#3B4BF9' }} href={t('Onboarding.termsOfUseUrl')} target='_blank'>\n                                {t('StreamersSignin.termsAndConditionsP2')}\n                            </a>\n                        </p>\n                    </div>\n                    <Hidden smDown>\n                        <div className={styles.bottomImage} >\n                            <img src={SignInImage} alt='Sign In' />\n                        </div>\n                    </Hidden>\n                </Grid>\n                <Grid item md='1' />\n            </StreamerDashboardContainer>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamersSignin;",["205","206"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],["207","208"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["209","210","211"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, CircularProgress } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\n\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer, updateStreamerProfile } from './../../services/database';\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\nimport RequestActivation from '../RequestActivation/RequestActivation';\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    titleLabel: {\n        marginBottom: 8\n    },\n    datePickerLabel: {\n        marginBottom: theme.spacing(1),\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        height: '56px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    const userLang = navigator.language || navigator.userLanguage;\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [gamesData, setGamesData] = useState([]);\n    const [showAccountActviation, setShowAccountActviation] = useState(false);\n    const [lockSendButton, setLockSendButton] = useState(false);\n\n    useEffect(() => {\n        let gameList = [];\n\n        if (games.allGames) {\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\n\n            let tempGamesData = [];\n            gameList.forEach((game) => {\n                tempGamesData.push({\n                    id: game.gameKey,\n                    name: game.gameName\n                })\n            });\n\n            setGamesData(tempGamesData);\n        }\n    }, [games.allGames, user]);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    const openSuccessWindow = () => {\n        submitEvent();\n    };\n\n    const submitEvent = async () => {\n        setLockSendButton(true);\n        if (user.broadcasterType === '') {\n            setLockSendButton(false);\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        if (!user.premium && !user.freeTrial) {\n            setLockSendButton(false);\n            return setShowAccountActviation(true);\n        }\n\n        if (selectedDate < minDate) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.before24h'));\n            return;\n        }\n        if (!selectedGame) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        if (user.currentPeriod) {\n            const { endDate } = user.currentPeriod;\n\n            /**\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\n             */\n            if (selectedDate.getTime() <= endDate) {\n\n                const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\n\n                let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\n\n                if (!userCanCreateStream) {\n                    if (user.boughtStreams) {\n                        /**\n                         * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\n                         * the user can create the stream, this function will also remove expired packages or packages that has been already used\n                         */\n                        userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\n                            if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\n                                addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\n                                return true;\n                            } else {\n                                removeStreamPackageOfStreamer(user.uid, streamsPackageId);\n                            }\n                        });\n                    }\n                } else {\n                    addToStreamsRequestedOnSubscriptionDetails(user.uid);\n                }\n\n                /**\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n                 * is lower or equal to the user limit per month then we create the event\n                 */\n                if (userCanCreateStream) {\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                    let streamerData = {\n                        displayName: user.displayName,\n                        login: user.login,\n                        photoUrl: user.photoUrl\n                    };\n\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\n                    if (userData && userData.data) {\n                        streamerData = {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url\n                        };\n\n                        await updateStreamerProfile(user.uid, {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url,\n                            broadcasterType: userData.data.broadcaster_type\n                        });\n                    }\n\n                    await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n\n                    window.analytics.track('Stream requested', {\n                        selectedGame,\n                        selectedDate: selectedDate.getTime(),\n                        uid: user.uid\n                    });\n                    setOpenSuccessDialog(true);\n                } else {\n                    setShowAccountActviation(true);\n                }\n            } else {\n                alert(t('NewStream.alerts.beforePlanExpiration'));\n            }\n        } else {\n            setShowAccountActviation(true);\n        }\n    }\n\n    const successActivation = async () => {\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n        let streamerData = {\n            displayName: user.displayName,\n            login: user.login,\n            photoUrl: user.photoUrl\n        };\n\n        const userData = await getTwitchUserDataCloudFunction(user.id);\n        if (userData && userData.data) {\n            streamerData = {\n                displayName: userData.data.display_name,\n                login: userData.data.login,\n                photoUrl: userData.data.profile_image_url\n            };\n\n            await updateStreamerProfile(user.uid, {\n                displayName: userData.data.display_name,\n                login: userData.data.login,\n                photoUrl: userData.data.profile_image_url,\n                broadcasterType: userData.data.broadcaster_type\n            });\n        }\n\n        await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n        await addToStreamsRequestedOnSubscriptionDetails(user.uid);\n\n        updateStreamerProfile(user.uid, streamerData);\n\n        window.analytics.track('Free trial started', {\n            uid: user.uid\n        });\n        setOpenSuccessDialog(true);\n    }\n\n    if (!showAccountActviation) {\n        return (\n            <StreamerDashboardContainer user={user}>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <BackButton onClick={history.goBack} />\n                    </Grid>\n                    <Grid item sm={8}>\n                        <h1 className={styles.title}>\n                            {t('NewStream.whatAreYouPlaying')}\n                        </h1>\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                            <Grid item sm={5} style={{ width: '274px', maxWidth: '274px', }}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.pickACategory')}\n                                </InputLabel>\n                                <ReactSearchAutocomplete\n                                    items={gamesData}\n                                    autofocus\n                                    placeholder={t('NewStream.categoryPickerPlaceholder')}\n                                    showItemsOnFocus\n                                    maxResults={5}\n                                    onSelect={(game) => setSelectedGame(game.id)}\n                                    onClear={() => setSelectedGame(null)}\n                                    styling={{\n                                        zIndex: 999,\n                                        height: '56px',\n                                        color: '#FFF',\n                                        hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\n                                        fontSize: '1rem',\n                                        fontWeight: 'bold',\n                                        backgroundColor: '#141833',\n                                        border: 'none',\n                                        borderRadius: '8px',\n                                        placeholderColor: 'rgba(255, 255, 255, 0.5)',\n                                        fontFamily: 'Inter',\n                                        lineColor: 'transparent'\n                                    }}\n                                    showIcon={false}\n                                    formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\n                            </Grid>\n                        </Grid>\n                        <h1 className={styles.title}>\n                            {t('NewStream.when')}\n                        </h1>\n                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                            <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                    <InputLabel className={classes.datePickerLabel} >\n                                        {t('NewStream.date')}\n                                    </InputLabel>\n                                    <KeyboardDatePicker\n                                        open={calendarOpen}\n                                        onClick={() => setCalendarOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setCalendarOpen(false)}\n                                        clearable\n                                        disablePast\n                                        disableToolbar\n                                        autoOk\n                                        value={displayDate}\n                                        placeholder='10-10-2021'\n                                        onChange={handleDateChange}\n                                        defaultValue={new Date()}\n                                        minDate={minDate}\n                                        minDateMessage={t('NewStream.alerts.before24h')}\n                                        format='DD-MM-YY ddd'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <CalendarIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                    <InputLabel className={classes.datePickerLabel}>\n                                        {t('NewStream.time')}\n                                    </InputLabel>\n                                    <KeyboardTimePicker\n                                        open={clockOpen}\n                                        onClick={() => setClockOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setClockOpen(false)}\n                                        autoOk\n                                        error={selectedDate <= minDate}\n                                        helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\n                                        value={displayDate}\n                                        placeholder='08:00 AM'\n                                        onChange={handleDateChange}\n                                        // mask='__:__ _M'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <TimeIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </MuiPickersUtilsProvider>\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                            <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                <Grid container>\n                                    <h1 className={styles.title}>\n                                        {t('NewStream.streamTitle')}\n                                    </h1>\n                                    <Grid container spacing={4}>\n                                        <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\n                                            <StreamerTextInput\n                                                labelClassName={classes.titleLabel}\n                                                label={t('NewStream.streamTitle')}\n                                                placeholder={t('NewStream.streamTitlePlaceholder')}\n                                                id='eventTitle'\n                                                fullWidth={true}\n                                                value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Button\n                            disabled={lockSendButton}\n                            className={styles.button}\n                            onClick={openSuccessWindow}>\n                            {lockSendButton ?\n                                <CircularProgress\n                                    style={{\n                                        color: '#fff7',\n                                        alignSelf: 'center'\n                                    }}\n                                    size={25} />\n                                :\n                                t('NewStream.submit')\n                            }\n                        </Button>\n                    </Grid>\n                </Grid>\n                <NewStreamSuccessDialog\n                    open={openSuccessDialog}\n                    onClose={() => history.push('/profile')}\n                    mainPage={() => history.push('/profile')}\n                />\n            </StreamerDashboardContainer>\n        );\n    } else {\n        return (\n            <>\n                <RequestActivation user={user} onSuccessActivation={successActivation} />\n                <NewStreamSuccessDialog\n                    open={openSuccessDialog}\n                    onClose={() => history.push('/profile')}\n                    mainPage={() => history.push('/profile')}\n                />\n            </>\n        )\n    }\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GiphyTextGenerator/GiphyTextGenerator.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["212","213"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["214","215","216","217","218"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(4) + 1,\n        paddingTop: theme.spacing(4) + 1,\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["219"],"import React, { useState, useEffect } from 'react';\nimport {\n    makeStyles,\n    Grid,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    withStyles,\n    Avatar,\n    Hidden,\n    InputLabel,\n    InputAdornment\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next'\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\nimport { ReactComponent as EyeIcon } from './../../assets/EyeIcon.svg';\nimport { ReactComponent as DownloadIcon } from './../../assets/DownloadIcon.svg';\n\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport BackButton from '../BackButton/BackButton';\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate } from '../../services/database';\nimport { sednPushNotificationToTopic } from '../../services/functions';\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: '24px',\n        color: '#FFF'\n    },\n    description: {\n        fontSize: '12px',\n        color: 'rgba(255,255,255,0.60)',\n        lineHeight: '18px',\n        paddingRight: '16px',\n        marginTop: '16px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        marginTop: '32px'\n    },\n    containerTextArea: {\n        marginRight: '2.5rem'\n    },\n    textArea: {\n        paddingTop: '1rem'\n    },\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    participantsColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'center'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginBottom: 16\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst SectionHeader = ({ title, description }) => {\n    const classes = useStyles();\n\n    return (\n        <div style={{ marginTop: '48px' }}>\n            <p className={classes.title}>\n                {title}\n            </p>\n            <p className={classes.description}>\n                {description}\n            </p>\n        </div>\n    );\n};\n\nconst EditStreamerEvent = ({ user }) => {\n    const { streamType } = useLocation().state;\n    const { streamId } = useParams();\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\n    const [notificationBody, setNotificationBody] = useState('');\n    const [participantsList, setParticipantsList] = useState({});\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function setStreamData() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\n                if (timeStamp.exists()) {\n                    setSelectedDate(new Date(timeStamp.val()));\n                    setDisplayDate(new Date(timeStamp.val()));\n                    setFirstTimestamp(new Date(timeStamp.val()));\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\n                }\n            }\n        }\n\n        async function setStreamParticipantsList() {\n            const participantsList = await getStreamParticipantsList(streamId);\n            if (participantsList.exists()) {\n                setParticipantsList(participantsList.val());\n            }\n        }\n\n        async function setStreamTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n                setTitle(title.val());\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                if (user.uid) {\n                    const title = await getPastStreamTitle(user.uid, streamId);\n                    setTitle(title.val());\n                }\n            }\n        }\n\n        setStreamData();\n        setStreamParticipantsList();\n        setStreamTitle();\n    }, [streamId, streamType, user]);\n\n    const sendNotification = async () => {\n        const bodys = {\n            es: notificationBody,\n            en: notificationBody\n        };\n\n        const titles = {\n            es: title['en'],\n            en: title['en']\n        };\n\n        try {\n            sednPushNotificationToTopic(streamId, titles, bodys);\n            alert(t('EditStream.alerts.sent'));\n            setNotificationBody('');\n        } catch (error) {\n            alert(t('EditStream.alerts.errorSent'));\n        }\n    }\n\n    const onChangeNotificationBody = (e) => {\n        const body = e.target.value;\n        if (body.length <= 140) {\n            setNotificationBody(body);\n        }\n    }\n\n    const saveDate = async () => {\n        if (selectedDate) {\n            const minValidDate = new Date().getTime() + 300000;\n            if (selectedDate.getTime() >= minValidDate) {\n                const dateRef = new Date(selectedDate);\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\n\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\n\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\n\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\n                let localHour = `${localHours}:${localMinutes}`;\n\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\n                alert(t('EditStream.alerts.updated'));\n            } else {\n                alert(t('EditStream.alerts.errorDate'))\n            }\n        } else {\n            alert(t('EditStream.alerts.errorDate'));\n        }\n    }\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid xs={12}>\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\n                        onClick={history.goBack} />\n                </Grid>\n                {streamType === SCHEDULED_EVENT_TYPE &&\n                    <>\n                        <Grid xs={6}>\n                            <SectionHeader\n                                title={t('EditStream.change')}\n                                description={t('EditStream.changeDesc')} />\n                            <Grid item sm={12}>\n                                <Grid container>\n                                    {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\n                                        <></>\n                                        :\n                                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                                            <Grid container style={{\n                                                marginTop: '24px'\n                                            }}>\n                                                <Grid item sm={7} md={4} spacing={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.date')}\n                                                    </InputLabel>\n                                                    <KeyboardDatePicker\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        open={calendarOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\n                                                        onClose={() => setCalendarOpen(false)}\n                                                        clearable\n                                                        disablePast\n                                                        disableToolbar\n                                                        autoOk\n                                                        value={displayDate}\n                                                        placeholder='10-10-2021'\n                                                        onChange={handleDateChange}\n                                                        minDate={new Date()}\n                                                        format='DD-MM-YY ddd'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <CalendarIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                                <div style={{ minWidth: '16px' }} />\n                                                <Grid item sm={7} md={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.time')}\n                                                    </InputLabel>\n                                                    <KeyboardTimePicker\n                                                        open={clockOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\n                                                        onOpen={() => { }}\n                                                        onClose={() => setClockOpen(false)}\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        autoOk\n                                                        error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\n                                                        value={displayDate}\n                                                        placeholder='08:00 AM'\n                                                        onChange={handleDateChange}\n                                                        // mask='__:__ _M'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <TimeIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </MuiPickersUtilsProvider>\n                                    }\n                                    <ContainedButton className={classes.button}\n                                        onClick={saveDate}\n                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime()}>\n                                        {t('EditStream.save')}\n                                    </ContainedButton>\n                                </Grid>\n                            </Grid>\n                            <SectionHeader title={t('EditStream.sendMessage')}\n                                description={t('EditStream.sendMessageDesc')} />\n                            <Grid item md={12} style={{\n                                marginTop: '24px'\n                            }}>\n                                <StreamerTextInput placeholder={t('EditStream.limit')}\n                                    multiline\n                                    rows={3}\n                                    fullWidth\n                                    textInputClassName={classes.textArea}\n                                    containerClassName={classes.containerTextArea}\n                                    value={notificationBody}\n                                    onChange={onChangeNotificationBody} />\n                                <ContainedButton className={classes.button}\n                                    onClick={sendNotification}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                                </ContainedButton>\n                            </Grid>\n                        </Grid>\n                        {/** To define how this section is going to work\n                            <Grid xs={6}>\n                                <SectionHeader title='Private Rooms'\n                                    description='If you are hosting a private room and want to give access to the participants of the event, you can share the ID with them directly in the Qapla app. Participants will get a notification to see the ID.' />\n                                <StreamerTextInput label='ID'\n                                    placeholder='ID' />\n                                <br/>\n                                <ContainedButton className={classes.button}>\n                                    Send\n                                </ContainedButton>\n                            </Grid>\n                        */}\n                    </>\n                }\n                <Grid xs={12}>\n                    <SectionHeader title={t('EditStream.participants')} />\n                    <TableContainer className={classes.tableContainer}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCellStyled align='center' padding='checkbox'>\n                                        <ProfileIcon />\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.twitch')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.game')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.qapla')}</TableCellStyled>\n                                    <TableCellStyled className={classes.participantsColumn}>\n                                        <EyeIcon /> <p>{Object.keys(participantsList).length}</p>\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>\n                                        <ContainedButton\n                                            startIcon={<DownloadIcon />}>\n                                            {t('EditStream.table.download')}\n                                        </ContainedButton>\n                                    </TableCellStyled>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {Object.keys(participantsList).map((participantUid, index) => (\n                                    <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\n                                        key={`Participant-${participantUid}`}>\n                                        <TableCellStyled align='center' className={classes.firstCell}>\n                                            <Avatar className={classes.avatar} />\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled className={classes.lastCell}>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n            </Grid>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default EditStreamerEvent;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["220"],"import React from 'react';\nimport { withStyles, Tab } from '@material-ui/core';\n\nconst QaplaTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        minWidth: 72,\n        fontWeight: theme.typography.fontWeightRegular,\n        marginRight: theme.spacing(4),\n        fontSize: 18,\n        '&:hover': {\n            color: '#FFF',\n            opacity: 1,\n        },\n        '&$selected': {\n            color: '#FFF',\n            fontWeight: '500',\n        },\n        '&:focus': {\n            color: '#FFF',\n        },\n    },\n    selected: {},\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\n\nexport default (props) => <QaplaTab {...props} />;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/PlanPicker/PlanPicker.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/functions.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["221","222","223"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n        if (initialLabel && value === undefined) {\n            setSelectedLabel(initialLabel);\n        }\n    }, [data, initialLabel, value])\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["224","225"],{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","replacedBy":"229"},{"ruleId":"230","severity":1,"message":"231","line":273,"column":21,"nodeType":"232","messageId":"233","endLine":273,"endColumn":31},{"ruleId":"234","severity":1,"message":"235","line":457,"column":8,"nodeType":"236","endLine":457,"endColumn":14,"suggestions":"237"},{"ruleId":"230","severity":1,"message":"238","line":413,"column":11,"nodeType":"232","messageId":"233","endLine":413,"endColumn":26},{"ruleId":"226","replacedBy":"239"},{"ruleId":"228","replacedBy":"240"},{"ruleId":"234","severity":1,"message":"241","line":71,"column":8,"nodeType":"236","endLine":71,"endColumn":46,"suggestions":"242"},{"ruleId":"226","replacedBy":"243"},{"ruleId":"228","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":520,"column":65,"nodeType":"247","endLine":520,"endColumn":80},{"ruleId":"245","severity":1,"message":"246","line":526,"column":29,"nodeType":"247","endLine":526,"endColumn":44},{"ruleId":"248","severity":1,"message":"249","line":16,"column":1,"nodeType":"250","endLine":16,"endColumn":52},{"ruleId":"230","severity":1,"message":"251","line":1,"column":17,"nodeType":"232","messageId":"233","endLine":1,"endColumn":26},{"ruleId":"230","severity":1,"message":"252","line":33,"column":12,"nodeType":"232","messageId":"233","endLine":33,"endColumn":40},{"ruleId":"234","severity":1,"message":"253","line":102,"column":8,"nodeType":"236","endLine":102,"endColumn":38,"suggestions":"254"},{"ruleId":"230","severity":1,"message":"255","line":110,"column":11,"nodeType":"232","messageId":"233","endLine":110,"endColumn":39},{"ruleId":"245","severity":1,"message":"246","line":135,"column":117,"nodeType":"247","endLine":135,"endColumn":132},{"ruleId":"226","replacedBy":"256"},{"ruleId":"228","replacedBy":"257"},{"ruleId":"226","replacedBy":"258"},{"ruleId":"228","replacedBy":"259"},{"ruleId":"230","severity":1,"message":"260","line":125,"column":27,"nodeType":"232","messageId":"233","endLine":125,"endColumn":43},{"ruleId":"230","severity":1,"message":"261","line":126,"column":24,"nodeType":"232","messageId":"233","endLine":126,"endColumn":37},{"ruleId":"262","severity":1,"message":"263","line":269,"column":103,"nodeType":"264","messageId":"265","endLine":269,"endColumn":105},{"ruleId":"234","severity":1,"message":"253","line":179,"column":8,"nodeType":"236","endLine":179,"endColumn":14,"suggestions":"266"},{"ruleId":"267","severity":1,"message":"268","line":235,"column":25,"nodeType":"269","endLine":235,"endColumn":49},{"ruleId":"230","severity":1,"message":"270","line":4,"column":5,"nodeType":"232","messageId":"233","endLine":4,"endColumn":11},{"ruleId":"230","severity":1,"message":"271","line":5,"column":5,"nodeType":"232","messageId":"233","endLine":5,"endColumn":12},{"ruleId":"230","severity":1,"message":"272","line":6,"column":5,"nodeType":"232","messageId":"233","endLine":6,"endColumn":9},{"ruleId":"230","severity":1,"message":"273","line":7,"column":5,"nodeType":"232","messageId":"233","endLine":7,"endColumn":11},{"ruleId":"230","severity":1,"message":"274","line":14,"column":8,"nodeType":"232","messageId":"233","endLine":14,"endColumn":23},{"ruleId":"230","severity":1,"message":"275","line":13,"column":5,"nodeType":"232","messageId":"233","endLine":13,"endColumn":11},{"ruleId":"248","severity":1,"message":"249","line":26,"column":1,"nodeType":"250","endLine":26,"endColumn":51},{"ruleId":"230","severity":1,"message":"276","line":4,"column":5,"nodeType":"232","messageId":"233","endLine":4,"endColumn":14},{"ruleId":"230","severity":1,"message":"277","line":5,"column":5,"nodeType":"232","messageId":"233","endLine":5,"endColumn":17},{"ruleId":"230","severity":1,"message":"278","line":6,"column":5,"nodeType":"232","messageId":"233","endLine":6,"endColumn":15},{"ruleId":"230","severity":1,"message":"279","line":7,"column":28,"nodeType":"232","messageId":"233","endLine":7,"endColumn":37},{"ruleId":"230","severity":1,"message":"280","line":21,"column":11,"nodeType":"232","messageId":"233","endLine":21,"endColumn":18},"no-native-reassign",["281"],"no-negated-in-lhs",["282"],"no-unused-vars","'setBalance' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["283"],"'shareStreamLink' is assigned a value but never used.",["281"],["282"],"React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["284"],["281"],["282"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'openTermsAndConditionsDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["285"],"'closeTermsAndConditionsModal' is assigned a value but never used.",["281"],["282"],["281"],["282"],"'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["286"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.","'Hidden' is defined but never used.","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"295","text":"296"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"297","text":"298"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"299","text":"300"},"Update the dependencies array to be: [query, t, user]",{"range":"301","text":"302"},[17811,17817],"[setPendingMessages, user]",[3563,3601],"[user.uid, user.id, user.refreshToken, t, history]",[4606,4636],"[user, history, isLoadingAuth, query, t]",[4767,4773],"[query, t, user]"]

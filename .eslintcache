[{"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js":"1","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx":"2","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js":"3","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx":"4","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx":"5","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx":"6","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GoalProgressBar/GoalProgressBar.jsx":"7","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx":"8","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js":"9","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx":"10","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx":"11","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx":"12","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx":"13","/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js":"14","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx":"15","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx":"16","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js":"17","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx":"18","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx":"19","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js":"20","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx":"21","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QlanProgressBar/QlanProgressBar.jsx":"22","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx":"23","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx":"24","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js":"25","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/branch.js":"26","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx":"27","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx":"28","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QStore/QStore.jsx":"29","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx":"30","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js":"31","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx":"32","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTerms/QaplaTerms.jsx":"33","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx":"34","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js":"35","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx":"36","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js":"37","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx":"38","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx":"39","/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js":"40","/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js":"41","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx":"42","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx":"43","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx":"44","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx":"45","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx":"46","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx":"47","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx":"48","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx":"49","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js":"50","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx":"51","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js":"52","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx":"53","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx":"54","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx":"55"},{"size":33762,"mtime":1659392099691,"results":"56","hashOfConfig":"57"},{"size":2011,"mtime":1650310829999,"results":"58","hashOfConfig":"57"},{"size":3948,"mtime":1657925501779,"results":"59","hashOfConfig":"57"},{"size":1592,"mtime":1650310830008,"results":"60","hashOfConfig":"57"},{"size":1632,"mtime":1656444166519,"results":"61","hashOfConfig":"57"},{"size":11901,"mtime":1657120015523,"results":"62","hashOfConfig":"57"},{"size":6380,"mtime":1656444166517,"results":"63","hashOfConfig":"57"},{"size":5675,"mtime":1650310830004,"results":"64","hashOfConfig":"57"},{"size":1505,"mtime":1654551560223,"results":"65","hashOfConfig":"57"},{"size":1919,"mtime":1655147842851,"results":"66","hashOfConfig":"57"},{"size":3339,"mtime":1650310830005,"results":"67","hashOfConfig":"57"},{"size":7544,"mtime":1650310829994,"results":"68","hashOfConfig":"57"},{"size":3326,"mtime":1655147842854,"results":"69","hashOfConfig":"57"},{"size":226,"mtime":1649101763451,"results":"70","hashOfConfig":"57"},{"size":6520,"mtime":1654019625274,"results":"71","hashOfConfig":"57"},{"size":629,"mtime":1635283796967,"results":"72","hashOfConfig":"57"},{"size":6918,"mtime":1655147827464,"results":"73","hashOfConfig":"57"},{"size":9694,"mtime":1655147842856,"results":"74","hashOfConfig":"57"},{"size":695,"mtime":1635283796969,"results":"75","hashOfConfig":"57"},{"size":870,"mtime":1650310830028,"results":"76","hashOfConfig":"57"},{"size":3579,"mtime":1614731664824,"results":"77","hashOfConfig":"57"},{"size":6316,"mtime":1656444166518,"results":"78","hashOfConfig":"57"},{"size":13345,"mtime":1659390458267,"results":"79","hashOfConfig":"57"},{"size":3170,"mtime":1655147842857,"results":"80","hashOfConfig":"57"},{"size":527,"mtime":1636998131402,"results":"81","hashOfConfig":"57"},{"size":770,"mtime":1659986321029,"results":"82","hashOfConfig":"57"},{"size":16214,"mtime":1658944572233,"results":"83","hashOfConfig":"57"},{"size":1288,"mtime":1648248621496,"results":"84","hashOfConfig":"57"},{"size":5900,"mtime":1654551560220,"results":"85","hashOfConfig":"57"},{"size":22970,"mtime":1655761146657,"results":"86","hashOfConfig":"57"},{"size":8289,"mtime":1659390458280,"results":"87","hashOfConfig":"57"},{"size":1083,"mtime":1650310829993,"results":"88","hashOfConfig":"57"},{"size":29202,"mtime":1650310830006,"results":"89","hashOfConfig":"57"},{"size":14792,"mtime":1659540937039,"results":"90","hashOfConfig":"57"},{"size":2185,"mtime":1655761146663,"results":"91","hashOfConfig":"57"},{"size":18699,"mtime":1659390458271,"results":"92","hashOfConfig":"57"},{"size":1390,"mtime":1655761146664,"results":"93","hashOfConfig":"57"},{"size":21222,"mtime":1656443878636,"results":"94","hashOfConfig":"57"},{"size":3416,"mtime":1650310830004,"results":"95","hashOfConfig":"57"},{"size":4756,"mtime":1659986482704,"results":"96","hashOfConfig":"57"},{"size":362,"mtime":1614731664838,"results":"97","hashOfConfig":"57"},{"size":2975,"mtime":1614731664830,"results":"98","hashOfConfig":"57"},{"size":835,"mtime":1642711713952,"results":"99","hashOfConfig":"57"},{"size":383,"mtime":1650310830005,"results":"100","hashOfConfig":"57"},{"size":1520,"mtime":1654019625276,"results":"101","hashOfConfig":"57"},{"size":3357,"mtime":1659390458266,"results":"102","hashOfConfig":"57"},{"size":8238,"mtime":1650310829995,"results":"103","hashOfConfig":"57"},{"size":19592,"mtime":1659390458269,"results":"104","hashOfConfig":"57"},{"size":30902,"mtime":1657119901682,"results":"105","hashOfConfig":"57"},{"size":2589,"mtime":1654551560223,"results":"106","hashOfConfig":"57"},{"size":2042,"mtime":1655147842858,"results":"107","hashOfConfig":"57"},{"size":6836,"mtime":1659390458278,"results":"108","hashOfConfig":"57"},{"size":3844,"mtime":1650310830005,"results":"109","hashOfConfig":"57"},{"size":34471,"mtime":1659995821173,"results":"110","hashOfConfig":"57"},{"size":17771,"mtime":1657120015524,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rfo3np",{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"151"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"176","messages":"177","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"135"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"117"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"117"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/database.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageSelect/LanguageSelect.jsx",["240","241"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\n\nconst useStyles = makeStyles(() => ({\n    languageLabel: {\n        color: '#FFF',\n        fontSize: 16,\n        fontWeight: 600\n    }\n}));\n\nconst LanguageSelect = () => {\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\n    const [langData, setLangData] = useState([])\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        let tempLangArr = []\n        getAvailableLanguages().map((languageCode) => (\n            tempLangArr.push({\n                value: languageCode,\n                label: t(`LanguageHandler.languages.${languageCode}`)\n            })\n        ))\n        setLangData(tempLangArr)\n    }, [t])\n\n    const onLanguageChanged = (languageCode) => {\n        changeLanguage(languageCode);\n        setCurrentLanguageCode(languageCode);\n    }\n\n    return (\n        <div style={{\n            display: 'flex'\n        }}>\n            <TranslateIcon style={{\n                display: 'flex'\n            }} />\n            {/* The style of this select needs to be implemented inline */}\n            <div style={{\n                marginTop: '-10px',\n            }}>\n                <StreamerSelect\n                    style={{ backgroundColor: '#141833' }}\n                    data={langData}\n                    value={currentLanguageCode}\n                    onChange={onLanguageChanged}\n                    overflowY='hidden'\n                    overflowX='hidden'\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default LanguageSelect;",["242","243"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/auth.js",[],["244","245"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerDashboardContainer/StreamerDashboardContainer.jsx",["246","247","248","249","250"],"import React from 'react';\nimport {\n    Grid,\n    AppBar,\n    Toolbar,\n    Link,\n    Button\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\n\nimport styles from './StreamerDashboardContainer.module.css';\nimport StreamerSideBar from '../StreamerSideBar/StreamerSideBar';\nimport LanguageHandler from '../LanguageHandler/LanguageHandler';\n\nconst useStyles = makeStyles((theme) => ({\n    gridContainer: {\n        width: '100%',\n        display: 'flex',\n        boxSizing: 'border-box',\n        flexWrap: 'nowrap'\n    },\n    content: {\n        flexGrow: 1,\n        paddingLeft: theme.spacing(4) + 1,\n        paddingTop: theme.spacing(4) + 1,\n    }\n}));\n\nconst StreamerDashboardContainer = ({ children, user, containerStyle = {} }) => {\n    const history = useHistory();\n    const classes = useStyles();\n\n    return (\n        <Grid container className={[classes.gridContainer, styles.container]} alignItems={user ? 'flex-start' : 'center'} justify={user ? 'flex-start' : 'center'}>\n            {!user && user === undefined ?\n                <>\n                    {children}\n                </>\n                :\n                <>\n                    {history.location.pathname !== '/welcome' &&\n                        <StreamerSideBar user={user} />\n                    }\n                    <div className={`${classes.content} ${containerStyle}`}>\n                        {children}\n                    </div>\n                </>\n            }\n        </Grid>\n    );\n}\n\nexport default StreamerDashboardContainer;\n",["251","252"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsLeft/StreamsLeft.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/RequestActivation/RequestActivation.jsx",["253"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport dayjs from 'dayjs';\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\nimport { notifyActivationWithReferralCode } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    containerStyle: {\n        padding: 0\n    },\n    background: {\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        minHeight: '100vh',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    card: {\n        backgroundColor: '#141833',\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\n        borderRadius: '35px',\n        [theme.breakpoints.up('md')]: {\n            width: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        paddingTop: 24,\n        paddingBottom: 0\n    },\n    title: {\n        fontWeight: '600',\n        fontSize: '18px',\n        lineHeight: '32px',\n        textAlign: 'center',\n        color: '#FFFFFF',\n        whiteSpace: 'pre-line'\n    },\n    instructions: {\n        marginTop: 15,\n        fontWeight: '400',\n        fontSize: '14px',\n        lineHeight: '22px',\n        textAlign: 'center',\n        color: '#8F9BBA',\n        whiteSpace: 'pre-line'\n    },\n    textInput: {\n        textAlign: 'center',\n        paddingTop: 12,\n        paddingBottom: 12\n    },\n    activeFreeTrialButton: {\n        marginTop: 32,\n        backgroundColor: '#3B4BF9',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        },\n        marginBottom: 60\n    },\n    noCode: {\n        textAlign: 'center',\n        width: '100%',\n        marginTop: 32,\n        fontWeight: '600',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    referralProgram: {\n        textAlign: 'center',\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 450\n        },\n        paddingLeft: 30,\n        paddingRight: 30,\n        marginTop: 32,\n        fontWeight: '400',\n        fontSize: '16px',\n        lineHeight: '22px',\n        letterSpacing: '0.492px',\n        color: '#FFFFFF'\n    },\n    subscribeButton: {\n        marginTop: 40,\n        backgroundColor: '#00FFDD',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    subscribeButtonCointainer: {\n        marginBottom: 24,\n        marginTop: 180\n    }\n}));\n\nconst RequestActivation = ({ user, onSuccessActivation }) => {\n    const [referralCode, setReferralCode] = useState('');\n    const [validatingCode, setValidatingCode] = useState(false);\n    const history = useHistory();\n    const classes = useStyles();\n    const { t } = useTranslation();\n\n    const validateCode = async () => {\n        if (user.broadcasterType === '') {\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        setValidatingCode(true);\n        if (referralCode) {\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\n            if (referrerUid) {\n                if (referrerUid !== user.uid) {\n                    if (!user.referredBy) {\n                        activateFreeTrialWithReferralCode(referrerUid, {\n                            redemptionsPerStream: 40,\n                            streamsIncluded: 2\n                        });\n                    } else {\n                        setValidatingCode(false);\n                        alert('Ya usaste un código de referido antes');\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('No puedes usar tu propio código');\n                }\n            } else {\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\n                if (invitationCodeSnap.exists()) {\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\n                    }\n                } else {\n                    setValidatingCode(false);\n                    alert('Código invalido');\n                }\n            }\n        } else {\n            setValidatingCode(false);\n        }\n    }\n\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n        await updateStreamerProfile(user.uid, {\n            referredBy: referrerUid,\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\n\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\n\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\n\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\n        const startDate = dayjs.utc().toDate().getTime();\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\n         await updateStreamerProfile(user.uid, {\n            freeTrial: true,\n            premium: true,\n            currentPeriod: { startDate, endDate },\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\n        });\n\n        await updateUserStreamerPublicData(user.uid, {\n            premium: true\n        });\n\n        await removeInvitationCode(code);\n        await onSuccessActivation();\n        setValidatingCode(false);\n    }\n\n    return (\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\n            <div className={classes.background}>\n                <div>\n                <Card className={classes.card}>\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\n                    </div>\n                    <CardContent>\n                        <p className={classes.title}>\n                            {t('RequestActivation.title')} 🚀\n                        </p>\n                        <p className={classes.instructions}>\n                            {validatingCode || !user.referredBy ?\n                                <>\n                                    {t('RequestActivation.descriptionP1')}\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\n                                    {t('RequestActivation.descriptionP2')}\n                                </>\n                                :\n                                t('RequestActivation.buyAMembership')\n                            }\n                        </p>\n                        {validatingCode || !user.referredBy ?\n                            <>\n                                <StreamerTextInput\n                                    placeholder={t('RequestActivation.referralCode')}\n                                    fullWidth\n                                    containerStyle={{ marginTop: 24 }}\n                                    classes={{ input: classes.textInput }}\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\n                                    value={referralCode}\n                                    onChange={(e) => setReferralCode(e.target.value)} />\n                                {validatingCode ?\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\n                                    </div>\n                                    :\n                                    <Button\n                                        onClick={validateCode}\n                                        fullWidth\n                                        classes={{\n                                            root: classes.activeFreeTrialButton\n                                        }}>\n                                        {t('RequestActivation.startFreeTrial')}\n                                    </Button>\n                                }\n                            </>\n                            :\n                            <div className={classes.subscribeButtonCointainer}>\n                                <Button\n                                    fullWidth\n                                    onClick={() => history.push('/membership')}\n                                    classes={{ root: classes.subscribeButton }}>\n                                    {t('RequestActivation.subscribe')}\n                                </Button>\n                            </div>\n                        }\n                    </CardContent>\n                </Card>\n                {validatingCode || !user.referredBy ?\n                    <>\n                        <p className={classes.noCode}>\n                            {t('RequestActivation.dontHaveACode')}\n                        </p>\n                        <Button\n                            fullWidth\n                            onClick={() => history.push('/membership')}\n                            classes={{ root: classes.subscribeButton }}>\n                            {t('RequestActivation.subscribe')}\n                        </Button>\n                    </>\n                    :\n                    <p className={classes.referralProgram}>\n                        {t('RequestActivation.referralProgramP1')}\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\n                        {t('RequestActivation.referralProgramP2')}\n                    </p>\n                }\n                </div>\n            </div>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default RequestActivation;\n",["254","255"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/GoalProgressBar/GoalProgressBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventEndStreamConfirmDialog.jsx",[],["256","257"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/firebase.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ContainedButton/ContainedButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventRewardsRemovedConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BioEditorTextArea/BioEditorTextArea.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStreamSuccessDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/App.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamersSignin/StreamersSignin.jsx",["258"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Button,\n    Hidden\n} from '@material-ui/core';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as TwitchIcon } from './../../assets/twitchIcon.svg';\nimport { ReactComponent as QaplaGaming } from './../../assets/QaplaGamingLandingPage.svg';\nimport styles from './StreamersSignin.module.css';\nimport SignInImage from './../../assets/SignIn.png';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport { signInWithTwitch, signUpOrSignInTwitchUser } from '../../services/auth';\nimport { getUserToken, subscribeStreamerToTwitchWebhook, subscribeStreamerToMailerLiteGroup } from '../../services/functions';\nimport { createStreamerProfile, updateStreamerProfile, userHasPublicProfile } from '../../services/database';\nimport QaplaTerms from '../QaplaTerms/QaplaTerms';\nimport { webhookStreamOffline, webhookStreamOnline } from '../../utilities/Constants';\nimport { getTwitchUserData } from '../../services/twitch';\n\nvar utc = require('dayjs/plugin/utc');\ndayjs.extend(utc);\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst StreamersSignin = ({ user, title }) => {\n    const [isLoadingAuth, setIsLoadingAuth] = useState(false);\n    const [openTermsAndConditionsDialog, setOpenTermsAndConditionsDialog] = useState(false);\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function checkIfUsersIsSigningIn() {\n            const twitchClientCode = query.get('code');\n\n            if (!isLoadingAuth && !user && twitchClientCode) {\n                setIsLoadingAuth(true);\n                const tokenData = await getUserToken(twitchClientCode);\n                if (tokenData && tokenData.data && tokenData.data.access_token) {\n                    const userData = await getTwitchUserData(tokenData.data.access_token);\n                    const user = await signUpOrSignInTwitchUser(userData, tokenData.data);\n\n                    if (user.userData.isNewUser) {\n                        try {\n                            await subscribeStreamerToMailerLiteGroup(user.userData.email, user.userData.displayName);\n                        } catch (error) {\n                            console.error(error);\n                        }\n\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOnline.type, webhookStreamOnline.callback);\n                        await subscribeStreamerToTwitchWebhook(user.userData.id, webhookStreamOffline.type, webhookStreamOffline.callback);\n                        await createStreamerProfile(user.firebaseAuthUser.user.uid, user.userData);\n                    }\n\n                    try {\n                        await updateStreamerProfile(user.firebaseAuthUser.user.uid, {\n                            twitchAccessToken: tokenData.data.access_token,\n                            refreshToken: tokenData.data.refresh_token,\n                            displayName: user.userData.displayName,\n                            photoUrl: user.userData.photoUrl\n                        });\n                    } catch (error) {\n                        console.log(error);\n                    }\n                } else {\n                    alert(t('StreamersSignin.alerts.errorSignIn'));\n                }\n            }\n        }\n        async function redirectUser(uid) {\n            const userHasBeenRedirectedToCreateProfile = localStorage.getItem('userHasBeenRedirectedToCreateProfile');\n\n            if (userHasBeenRedirectedToCreateProfile) {\n                history.push('/profile');\n            } else {\n                if (await userHasPublicProfile(uid)) {\n                    history.push('/profile');\n                } else {\n                    history.push('/editProfile');\n                    localStorage.setItem('userHasBeenRedirectedToCreateProfile', 'true');\n                }\n            }\n        }\n\n        checkIfUsersIsSigningIn();\n\n        if (user) {\n            redirectUser(user.uid);\n        }\n    }, [user, history, isLoadingAuth]);\n\n    const signIn = () => {\n        setIsLoadingAuth(true);\n        signInWithTwitch();\n        setIsLoadingAuth(false);\n    }\n\n    const closeTermsAndConditionsModal = () => setOpenTermsAndConditionsDialog(false);\n\n    if (user === undefined) {\n        return (\n            <StreamerDashboardContainer>\n                <Grid item md='1' />\n                <Grid item md='6' className={styles.mainContainer}>\n                    <QaplaGaming style={{ marginTop: '100px', marginBottom: '80px', transform: 'scale(0.9)' }} />\n                    <p className={styles.getStarted}>\n                        {title}\n                    </p>\n                    <div className={styles.formContainer}>\n                        <Button variant='contained'\n                            className={styles.continueButton}\n                            disabled={isLoadingAuth}\n                            startIcon={<TwitchIcon />}\n                            onClick={signIn}>\n                            {!isLoadingAuth ?\n                                t('StreamersSignin.signIn')\n                                :\n                                t('StreamersSignin.loading')\n                            }\n                        </Button>\n                        <p style={{ marginTop: '38px', color: '#FFF', fontSize: '.8rem' }}>\n                            {t('StreamersSignin.termsAndConditionsP1')}\n                            <u style={{ cursor: 'pointer', color: '#3B4BF9' }} onClick={() => setOpenTermsAndConditionsDialog(true)}>\n                                {t('StreamersSignin.termsAndConditionsP2')}\n                            </u>\n                        </p>\n                    </div>\n                    <Hidden smDown>\n                        <div className={styles.bottomImage} >\n                            <img src={SignInImage} alt='Sign In' />\n                        </div>\n                    </Hidden>\n                </Grid>\n                <Grid item md='1' />\n                <QaplaTerms open={openTermsAndConditionsDialog} onClose={closeTermsAndConditionsModal} />\n            </StreamerDashboardContainer>\n        );\n    }\n\n    return null;\n}\n\nexport default StreamersSignin;",["259","260"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LanguageHandler/LanguageHandler.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/streamQapla.js",[],["261","262"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/CheersSettings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTab.jsx",["263"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/i18n.js",[],["264","265"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EventSent/EventSent.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QlanProgressBar/QlanProgressBar.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventManagementDialog.jsx",["266"],"import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\n\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\n\nconst useStyles = makeStyles((theme) => ({\n    dialogContainer: {\n        backdropFilter: 'blur(50px)',\n        [theme.breakpoints.down('md')]: {\n            backgroundColor: '#141833',\n        }\n    },\n    dialogRoot: {\n    },\n    paper: {\n        backgroundColor: '#141833',\n        color: '#FFF',\n        overflow: 'visible',\n        borderRadius: '35px',\n        padding: '64px',\n        minWidth: 'min-content',\n        [theme.breakpoints.down('md')]: {\n            minWidth: '100%',\n            minHeight: '100%',\n        }\n    },\n    itemsContainer: {\n        display: 'flex',\n        [theme.breakpoints.down('md')]: {\n            padding: '184px 66px 20px 66px',\n        },\n        [theme.breakpoints.down('sm')]: {\n            flexWrap: 'wrap',\n            gap: '50px 0px'\n        }\n    },\n    closeButtonContainer: {\n        position: 'absolute',\n        top: '24px',\n        right: '24px',\n        [theme.breakpoints.down('md')]: {\n            top: '118px',\n            right: '128px',\n        }\n    },\n    closeButton: {\n        '&:hover': {\n            cursor: 'pointer'\n        }\n    },\n    title: {\n        fontSize: '18px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '32px',\n        letterSpacing: '0px'\n    },\n    subtitle: {\n        color: '#FFFFFF9A',\n        fontSize: '12px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '18px',\n        letterSpacing: '0px',\n        marginTop: '8px',\n    },\n    startButtonRoot: {\n        backgroundColor: '#00FFDD',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#0D1021',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#00EACB'\n        },\n        '&:active': {\n            backgroundColor: '#00EACB',\n            opacity: '0.9'\n        }\n    },\n    startText: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        borderRadius: '16px',\n        color: '#FFFFFF'\n    },\n    enabledXQText: {\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '400',\n        lineHeight: '22px',\n        letterSpacing: '0.492000013589859px',\n        height: '56px',\n        color: '#00FFDD'\n    },\n    qoinsButtonRoot: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            background: '#2E3AC1',\n        },\n        '&:active': {\n            background: '#2E3AC1',\n            opacity: '0.9'\n        }\n    },\n    qoinsButtonRootDisabled: {\n        backgroundColor: '#3B4BF9',\n        width: '200px',\n        height: '56px',\n        borderRadius: '16px',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF !important',\n        textTransform: 'none',\n        opacity: '0.2'\n    },\n    textInputContainer: {\n        backgroundColor: '#202750',\n        borderRadius: '16px',\n        paddingRight: '4px',\n        overflow: 'hidden'\n    },\n    sendContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        [theme.breakpoints.up('md')]: {\n            minWidth: '400px',\n        },\n    },\n    sendButtonRoot: {\n        backgroundColor: '#6C5DD3',\n        width: '165px',\n        height: '56px',\n        borderRadius: '16px',\n        alignSelf: 'flex-end',\n        fontSize: '14px',\n        fontStyle: 'normal',\n        fontWeight: '600',\n        lineHeight: '20px',\n        letterSpacing: '0px',\n        color: '#FFF',\n        textTransform: 'none',\n        '&:hover': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.9'\n        },\n        '&:active': {\n            backgroundColor: '#6C5DD3',\n            opacity: '0.8'\n        }\n    },\n    eventNameContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        position: 'absolute',\n        right: '30px',\n        bottom: '-40px',\n        gap: '0px 5px',\n        [theme.breakpoints.down('md')]: {\n            top: '98px',\n            left: '128px',\n            bottom: 'auto',\n            width: '60%',\n            // right: 'auto',\n            paddingTop: '30px',\n            backgroundColor: '#141833'\n        },\n        [theme.breakpoints.down('xs')]: {\n            top: '148px',\n            left: '128px',\n            bottom: 'auto',\n            right: 'auto',\n            paddingTop: '30px',\n            flexWrap: 'wrap',\n            flexDirection: 'column',\n        },\n\n        fontSize: '16px',\n        fontStyle: 'normal',\n        fontWeight: '500',\n        lineHeight: '24px',\n        letterSpacing: '0px',\n    },\n    eventName: {\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\n        backgroundClip: 'text',\n        WebkitBackgroundClip: 'text',\n        WebkitTextFillColor: 'transparent'\n    },\n}));\n\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\n    const classes = useStyles();\n    const [message, setMessage] = useState('');\n    const [dots, setDots] = useState('')\n    const [enablingQoins, setEnablingQoins] = useState(false);\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\n            setTimeout(() => {\n                if (dots.length > 2) {\n                    setDots('');\n                } else {\n                    setDots(dots + '.');\n                }\n            }, 500);\n        }\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\n            setDots('');\n        }\n    }, [streamStarted, dots, enablingQoins]);\n\n    const startStreamHandler = async () => {\n        await startStream();\n    }\n\n    const enableQoinsHandler = async () => {\n        setEnablingQoins(true);\n        await enableQoins();\n        setEnablingQoins(false);\n    }\n\n    const closeStreamHandler = async () => {\n        closeStream();\n    }\n\n    const sendNotificationHandler = async () => {\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\n        await sendMessage(message);\n        setMessage('');\n    }\n\n    return (\n        <Dialog onClose={onClose} open={open} classes={{\n            container: classes.dialogContainer,\n            root: classes.dialogRoot,\n            paper: classes.paper\n        }}\n            maxWidth='sm'\n            fullWidth>\n            <DialogContent style={{ padding: '0px' }}>\n                <div className={classes.closeButtonContainer}>\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\n                </div>\n                <div className={classes.itemsContainer}>\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\n                        <p className={classes.title}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.streamActions')}\n                        </p>\n                        <p className={classes.subtitle}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.manageRewards')}\n                        </p>\n                        <div style={{ height: '20px' }} />\n                        {(!stream && !streamStarted) &&\n                            <Button\n                                style={{ boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)' }}\n                                onClick={startStreamHandler}\n                                classes={{ root: classes.startButtonRoot }}>\n                                {t('QaplaStreamDialogs.EventManagementDialog.start')}\n                            </Button>\n                        }\n\n                        {!stream && streamStarted &&\n                            <p className={classes.startText}>\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.creatingRewards')}${dots}`}\n                            </p>\n                        }\n\n                        {stream && !stream.qoinsEnabled &&\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\n                                <TickSquare style={{ marginTop: '7.5px' }} />\n                                <p className={classes.enabledXQText}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.xqEnabled')}\n                                </p>\n                            </div>\n                        }\n\n                        {stream && enablingQoins &&\n                            <p className={classes.startText}>\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.enablingQoins')}${dots}`}\n                            </p>\n                        }\n\n                        {stream && stream.qoinsEnabled &&\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\n                                <TickSquare style={{ marginTop: '7.5px' }} />\n                                <p className={classes.enabledXQText}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.qoinsEnabled')}\n                                </p>\n                            </div>\n                        }\n                        <div style={{ height: '6px' }} />\n                        {!enablingQoins &&\n                            <Button\n                                onClick={(stream && stream.qoinsEnabled) ? closeStreamHandler : enableQoinsHandler}\n                                classes={{\n                                    root: classes.qoinsButtonRoot,\n                                    disabled: classes.qoinsButtonRootDisabled\n                                }}\n                                style={!stream ? { backgroundColor: '#0000' } : { boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)' }}\n                                disabled={!stream || (stream && enablingQoins) || closingStream}>\n                                {(stream && stream.qoinsEnabled) ?\n                                    t('QaplaStreamDialogs.EventManagementDialog.end')\n                                    :\n                                    t('QaplaStreamDialogs.EventManagementDialog.enableQoins')\n                                }\n                            </Button>\n                        }\n                    </div>\n                    <div className={classes.sendContainer}>\n                        <p className={classes.title}>\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\n                        </p>\n                        <p className={classes.subtitle}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\n                        </p>\n                        <div style={{ height: '20px' }} />\n                        <StreamerTextInput\n                            value={message}\n                            onChange={(e) => setMessage(e.target.value)}\n                            textInputStyle={{ marginTop: '0px' }}\n                            textInputClassName={classes.textInputContainer}\n                            fullWidth\n                            multiline\n                            rows={6}\n                            maxRows={6}\n                            rowsMax={6}\n                        />\n                        <div style={{ height: '12px' }} />\n                        <Button\n                            onClick={sendNotificationHandler}\n                            classes={{\n                                root: classes.sendButtonRoot\n                            }}>\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogContent>\n            <div className={classes.eventNameContainer}>\n                <p className={classes.eventName}>\n                    {`${streamTitle} `}\n                </p>\n                <p>\n                    {`/ ${date} / ${hour}`}\n                </p>\n            </div>\n\n        </Dialog>\n    )\n}\n\nexport default EventManagementDialog;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSelect/StreamerSelect.jsx",["267","268","269"],"import React, { useEffect, useState } from 'react';\nimport {\n    makeStyles,\n    InputBase,\n    NativeSelect,\n    InputLabel,\n    List,\n    ListItem,\n    ListItemText\n} from '@material-ui/core';\n\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\n\nconst useStyles = makeStyles({\n    label: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    input: {\n        display: 'flex',\n        position: 'absolute',\n        zIndex: 90,\n        overflow: 'hidden',\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '16px',\n        color: '#FFF',\n        fontSize: '14px',\n    },\n    icon: {\n        color: 'transparent',\n        marginTop: 8,\n        marginRight: 8,\n        marginLeft: 8\n    }\n});\n\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false)\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\n\n    useEffect(() => {\n        if (data) {\n            data.forEach(e => {\n                if (e.value === value) setSelectedLabel(e.label)\n            });\n        }\n        if (initialLabel && value === undefined) {\n            setSelectedLabel(initialLabel);\n        }\n    }, [data, initialLabel, value])\n\n    return (\n        <div className={classes.input} style={style}>\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\n                        style: {\n                            fontFamily: 'Inter'\n                        }\n                    }} />\n                    <div style={{ width: '10px' }} />\n                    <ArrowIcon style={{\n                        transform: open ? 'rotate(180deg)' : ''\n                    }} />\n                </ListItem>\n                <div style={{\n                    height: open ? maxHeightOpen || '' : '0px',\n                    overflowX: overflowX || 'scroll',\n                    overflowY: overflowY || 'scroll',\n                    marginTop: '-10px'\n                }}>\n                    <List style={{\n                        padding: '0px',\n                    }}>\n                        {data && data.map((dat) => {\n                            return (\n                                <>\n                                    {value !== dat.value &&\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\n                                            <ListItemText primary={dat.label} />\n                                        </ListItem>\n                                    }\n                                </>\n                            )\n                        })}\n                    </List>\n                </div>\n            </List>\n        </div >\n    );\n}\n\nexport default StreamerSelect;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/index.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/branch.js",["270"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/LiveDonations/LiveDonations.jsx",["271","272","273","274"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\n\nimport styles from './LiveDonations.module.css';\nimport { ReactComponent as DonatedQoin } from './../../assets/DonatedQoin.svg';\nimport { listenToUserStreamingStatus, getStreamerUidWithTwitchId, listenForUnreadStreamerCheers, markDonationAsRead, removeListenerForUnreadStreamerCheers, listenForTestCheers, removeTestDonation, getStreamerAlertsSettings, getStreamerMediaContent, listenQaplaChallengeXQProgress, getChallengeLevelGoal, getStreamerChallengeCategory, getChallengePreviousLevelGoal, listenToStreamerAlertsSettings, listenQaplaGoal } from '../../services/database';\nimport donationAudio from '../../assets/notification.wav';\nimport { speakCheerMessage } from '../../services/functions';\nimport { GIPHY_GIFS, GIPHY_STICKERS, MEME, TEST_MESSAGE_SPEECH_URL } from '../../utilities/Constants';\nimport QlanProgressBar from '../QlanProgressBar/QlanProgressBar';\nimport GoalProgressBar from '../GoalProgressBar/GoalProgressBar';\nimport QaplaOnLeft from '../../assets/Qapla-On-Overlay-Left.png';\nimport QaplaOnRight from '../../assets/Qapla-On-Overlay-Right.png';\nimport { getCheerVoiceMessage } from '../../services/storage';\n\nconst LiveDonations = () => {\n    const [streamerUid, setStreamerUid] = useState('');\n    const [donationQueue, setDonationQueue] = useState([]);\n    const [donationToShow, setDonationToShow] = useState(null);\n    const [listenersAreSetted, setListenersAreSetted] = useState(false);\n    const [alertSideRight, setAlertSideRight] = useState(false);\n    const [isPlayingAudio, setIsPlayingAudio] = useState(false);\n    const [mediaContent, setMediaContent] = useState({ videos: [], images: [] });\n    const [qaplaChallengeXQ, setQaplaChallengeXQ] = useState(0);\n    const [nextGoalXQ, setNextGoalXQ] = useState(0);\n    const [previousGoalXQ, setPreviousGoalXQ] = useState(0);\n    const [qoinsGoal, setQoinsGoal] = useState(null);\n    const [qoinsGoalProgress, setQoinsGoalProgress] = useState(null);\n    const [goalTitle, setGoalTitle] = useState('');\n    const [showQaplaChallengeProgress, setShowQaplaChallengeProgress] = useState(false);\n    const [qaplaOnOpacity, setQaplaOnOpacity] = useState(1);\n    const [playQaplaOnAnimation, setPlayQaplaOnAnimation] = useState(\"false\");\n    const { streamerId } = useParams();\n\n    useEffect(() => {\n        queueAnimation();\n        const pushDonation = (donation) => {\n            setDonationQueue((array) => [donation, ...array]);\n        }\n\n        const popDonation = () => {\n            const indexToPop = donationQueue.length - 1;\n            const donationToPop = donationQueue[indexToPop];\n            setDonationQueue(donationQueue.filter((donation) => donation.id !== donationQueue[indexToPop].id));\n\n            return donationToPop;\n        }\n\n        async function getStreamerUid() {\n            if (streamerId) {\n                const uid = await getStreamerUidWithTwitchId(streamerId);\n                setStreamerUid(uid);\n\n                listenToStreamerAlertsSettings(uid, (streamerSettings) => {\n                    if (streamerSettings.exists()) {\n                        setAlertSideRight(streamerSettings.val().alertSideRight);\n                        setShowQaplaChallengeProgress(streamerSettings.val().showQaplaChallengeProgress !== false);\n                    }\n                });\n\n                listenForTestCheers(uid, (donation) => {\n                    pushDonation({ ...donation.val(), id: donation.key });\n                });\n\n                const streamerMedia = await getStreamerMediaContent(uid);\n                setMediaContent(streamerMedia.val());\n            }\n        }\n\n        async function loadDonations() {\n            listenForUnreadStreamerCheers(streamerUid, (donation) => {\n                pushDonation({ ...donation.val(), id: donation.key });\n            });\n        }\n\n        if (streamerUid && !listenersAreSetted) {\n            listenToUserStreamingStatus(streamerUid, (isStreaming) => {\n                setListenersAreSetted(true);\n                if (isStreaming.exists() && isStreaming.val()) {\n                    setTimeout(() => {\n                        loadDonations();\n                    }, 150000);\n                } else {\n                    removeListenerForUnreadStreamerCheers(streamerUid);\n                    setDonationQueue([]);\n                }\n            });\n        }\n\n        if (donationQueue.length > 0 && !isPlayingAudio) {\n            setIsPlayingAudio(true);\n            const donation = popDonation();\n\n            async function showCheer() {\n                let audio = new Audio(donationAudio);\n                if (!donation.repeating) {\n                    if (donation.message) {\n                        if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                            audio = new Audio(TEST_MESSAGE_SPEECH_URL);\n                        } else {\n                            const messageToRead = `${donation.twitchUserName} te ha enviado ${donation.amountQoins} Coins y dice: ${donation.message}`;\n\n                            window.analytics.track('Cheer received', {\n                                user: donation.twitchUserName,\n                                containsMessage: true,\n                                message: messageToRead\n                            });\n                            const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\n                            audio = new Audio(cheerMessageUrl.data);\n                        }\n                    } else {\n                        const messageToRead = `${donation.twitchUserName} te ha enviado ${donation.amountQoins} Coins`;\n\n                        window.analytics.track('Cheer received', {\n                            user: donation.twitchUserName,\n                            containsMessage: false\n                        });\n                        const cheerMessageUrl = await speakCheerMessage(streamerUid, donation.id, messageToRead, 'es-US-Standard-A', 'es-MX');\n                        audio = new Audio(cheerMessageUrl.data);\n                    }\n                } else {\n                    try {\n                        const cheerMessageUrl = await getCheerVoiceMessage(streamerUid, donation.id);\n\n                        if (cheerMessageUrl) {\n                            audio = new Audio(cheerMessageUrl);\n                        }\n                    } catch (error) {\n                        console.log('Message not found, what must be do here?');\n                    }\n                }\n\n                donation.isRightSide = alertSideRight;\n\n                setDonationToShow(donation);\n                audio.onended = () => {\n                    setTimeout(() => {\n                        setDonationToShow(null);\n                    }, 4000);\n                    if (donation.twitchUserName === 'QAPLA' && donation.message === 'Test') {\n                        removeTestDonation(streamerUid, donation.id);\n                    } else {\n                        markDonationAsRead(streamerUid, donation.id);\n                    }\n\n                    setTimeout(() => {\n                        setIsPlayingAudio(false);\n                    }, 6000);\n                }\n\n                audio.play();\n            }\n\n            showCheer();\n        }\n\n        if (!streamerUid) {\n            getStreamerUid();\n        }\n\n        if (streamerUid) {\n            async function checkIfUserIsUserParticipantOfQaplaChallenge() {\n                async function getNextGoal(xq, category) {\n                    const neededXQ = await getChallengeLevelGoal(category, xq + 1);\n                    const previousGoalXQ = await getChallengePreviousLevelGoal(category, xq);\n\n                    if (neededXQ.exists()) {\n                        neededXQ.forEach((levelXQ) => {\n                            setNextGoalXQ(levelXQ.val());\n                        });\n\n                        previousGoalXQ.forEach((pastLevelXQ) => {\n                            setPreviousGoalXQ(pastLevelXQ.val());\n                        });\n\n                        setQaplaChallengeXQ(xq);\n                    } else {\n                        /**\n                         * Show some cool UI to let the streamer know he has achieved all the levels in the\n                         * Qapla Challenge\n                         */\n\n                        previousGoalXQ.forEach((pastLevelXQ) => {\n                            setNextGoalXQ(pastLevelXQ.val());\n                            setQaplaChallengeXQ(pastLevelXQ.val());\n                        });\n                    }\n                }\n\n                const userParticipation = await getStreamerChallengeCategory(streamerUid);\n                if (userParticipation.exists()) {\n                    listenQaplaChallengeXQProgress(streamerUid, (xqProgress) => {\n                        if (xqProgress.exists()) {\n                            getNextGoal(xqProgress.val(), userParticipation.val());\n                        }\n                    });\n                } else {\n                    setShowQaplaChallengeProgress(false);\n                }\n            }\n\n            listenQaplaGoal(streamerUid, (goal) => {\n                if (goal.exists()) {\n                    setQoinsGoal(goal.val().goal);\n                    setQoinsGoalProgress(goal.val().qoins);\n                    setGoalTitle(goal.val().title);\n                }\n            });\n\n            checkIfUserIsUserParticipantOfQaplaChallenge();\n        }\n    }, [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio]);\n\n    const queueAnimation = () => {\n        if (qaplaOnOpacity !== 1){\n            setTimeout(() => {\n                setPlayQaplaOnAnimation(\"true\");\n            }, 10 * 1000)\n        } else {\n            setTimeout(() => {\n                setPlayQaplaOnAnimation(\"true\");\n            }, 60 * 1000)\n        }\n    }\n\n    document.body.style.backgroundColor = 'transparent';\n\n\n    const qaplaChallengeBarProgress = (qaplaChallengeXQ - previousGoalXQ) / (nextGoalXQ - previousGoalXQ);\n    return (\n        <div style={{ display: 'flex', backgroundColor: 'transparent', maxHeight: '100vh', width: '100%', placeItems: 'flex-end' }}>\n            <div\n                onAnimationEnd={() => {\n                    setPlayQaplaOnAnimation(\"false\");\n                    if (qaplaOnOpacity === 1)\n                        setQaplaOnOpacity(0)\n                    if (qaplaOnOpacity === 0)\n                        setQaplaOnOpacity(1)\n                    queueAnimation();\n                }}\n                style={{\n                    position: 'fixed',\n                    bottom: '-15px',\n                    left: alertSideRight ? 'auto' : '-12px',\n                    right: alertSideRight ? '-12px' : 'auto',\n                    width: '150px',\n                }}\n                className=\"qapla-logo-container\"\n                playAnimation={playQaplaOnAnimation}\n            >\n                <style>{`\n                @keyframes dissapear {\n                    from {\n                        opacity: ${qaplaOnOpacity === 1 ? 1 : 0};\n                    }\n                    to {\n                        opacity: ${qaplaOnOpacity === 1 ? 0 : 1};\n                    }\n                }\n                .qapla-logo-container{\n                    opacity: ${qaplaOnOpacity};\n                }\n                .qapla-logo-container[playAnimation=\"true\"] {\n                    animation-name: dissapear;\n                    animation-duration: 5s;\n                    animation-iteration-count: 1;\n                    animation-timing-function: ease-in-out;\n                }\n                `}</style>\n                <img src={alertSideRight ? QaplaOnRight : QaplaOnLeft} alt=\"qapla logo\" />\n            </div>\n            {donationToShow &&\n                <>\n                    <DonationHandler donationToShow={donationToShow} />\n                </>\n            }\n            {qoinsGoal && goalTitle &&\n                <GoalProgressBar\n                    percentage={qoinsGoalProgress / qoinsGoal}\n                    title={goalTitle}\n                    qoins={qoinsGoalProgress || 0}\n                />\n            }\n            {showQaplaChallengeProgress &&\n                <QlanProgressBar\n                    percentage={qaplaChallengeBarProgress}\n                    xq={qaplaChallengeXQ}\n                />\n            }\n        </div>\n    );\n}\n\nconst DonationHandler = (donationToShow) => {\n    const donation = donationToShow.donationToShow;\n    return (\n        <div style={{\n            display: 'flex',\n            flex: 1,\n            flexDirection: 'column',\n            backgroundColor: '#f0f0',\n            padding: '0px 40px',\n            marginBottom: '30px',\n            marginLeft: donation.isRightSide ? '0px' : '20px',\n            marginRight: donation.isRightSide ? '20px' : '0px'\n        }}>\n            {donation.media && (donation.media.type === MEME || donation.media.type === GIPHY_GIFS || donation.media.type === GIPHY_STICKERS) &&\n                <img src={donation.media.url} alt='' style={{\n                    aspectRatio: donation.media.width / donation.media.height,\n                    display: 'flex',\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                    maxHeight: '250px',\n                    objectFit: 'scale-down'\n                }} />\n            }\n            <div\n                style={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-around',\n                    marginTop: '20px',\n                    width: 'fit-content',\n                    backgroundColor: '#4D00FB',\n                    marginLeft: donation.isRightSide ? '0px' : '-30px',\n                    marginRight: donation.isRightSide ? '-30px' : '0px',\n                    borderRadius: '30px',\n                    padding: '24px 24px',\n                    alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                    zIndex: 10\n                }}\n            >\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <p style={{\n                        display: 'flex',\n                        color: 'white',\n                        fontSize: '26px',\n                        textAlign: 'center'\n                    }}>\n                        <b style={{ color: '#0AFFD2' }}>{donation.twitchUserName}</b>\n                        <div style={{ margin: '0 6px' }}>ha enviado</div>\n                        <b style={{ color: '#0AFFD2', fontWeight: '700', }}>{donation.amountQoins} Qoins</b>\n                    </p>\n                </div>\n                <div style={{ width: '10px' }}></div>\n                <div style={{ display: 'flex', alignSelf: 'center' }}>\n                    <DonatedQoin style={{ display: 'flex', width: '38px', height: '38px' }} />\n                </div>\n            </div>\n            {donation.message !== '' &&\n                <>\n                    <div style={{\n                        display: 'flex',\n                        width: 'fit-content',\n                        backgroundColor: '#FFFFFF',\n                        marginTop: '-20px',\n                        borderRadius: '30px',\n                        borderTopLeftRadius: donation.isRightSide ? '30px' : '0px',\n                        borderTopRightRadius: donation.isRightSide ? '0px' : '30px',\n                        padding: '30px',\n                        alignSelf: donation.isRightSide ? 'flex-end' : 'flex-start',\n                    }}>\n                        <p style={{\n                            display: 'flex',\n                            color: '#0D1021',\n                            fontSize: '24px',\n                            fontWeight: '600',\n                            lineHeight: '36px',\n                            letterSpacing: '0.6px'\n                        }}>{donation.message}</p>\n                    </div>\n                </>\n            }\n        </div >\n    )\n}\n\nexport default LiveDonations;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsPackages/StreamsPackages.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QStore/QStore.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/EditStreamerEvent/EditStreamerEvent.jsx",["275"],"import React, { useState, useEffect } from 'react';\nimport {\n    makeStyles,\n    Grid,\n    TableContainer,\n    Table,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    withStyles,\n    Avatar,\n    Hidden,\n    InputLabel,\n    InputAdornment\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useParams, useLocation } from 'react-router';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport DayJsUtils from '@date-io/dayjs';\nimport { useTranslation } from 'react-i18next'\n\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport { ReactComponent as ProfileIcon } from './../../assets/ProfileIcon.svg';\nimport { ReactComponent as EyeIcon } from './../../assets/EyeIcon.svg';\nimport { ReactComponent as DownloadIcon } from './../../assets/DownloadIcon.svg';\n\nimport ContainedButton from '../ContainedButton/ContainedButton';\nimport BackButton from '../BackButton/BackButton';\nimport { SCHEDULED_EVENT_TYPE, PAST_STREAMS_EVENT_TYPE } from '../../utilities/Constants';\nimport { loadApprovedStreamTimeStamp, getStreamParticipantsList, getStreamTitle, getPastStreamTitle, updateStreamDate } from '../../services/database';\nimport { sednPushNotificationToTopic } from '../../services/functions';\nimport { notifyUpdateToQaplaAdmins } from '../../services/discord';\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontSize: '24px',\n        color: '#FFF'\n    },\n    description: {\n        fontSize: '12px',\n        color: 'rgba(255,255,255,0.60)',\n        lineHeight: '18px',\n        paddingRight: '16px',\n        marginTop: '16px'\n    },\n    datePickerLabel: {\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        marginTop: '32px'\n    },\n    containerTextArea: {\n        marginRight: '2.5rem'\n    },\n    textArea: {\n        paddingTop: '1rem'\n    },\n    tableHead: {\n        fontSize: '16px !important',\n        color: '#808191 !important',\n        fontWeight: 'bold'\n    },\n    participantsColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-evenly',\n        alignItems: 'center'\n    },\n    tableRow: {\n        backgroundColor: 'rgba(20, 24, 51, .5)'\n    },\n    tableRowOdd: {\n        backgroundColor: 'transparent'\n    },\n    firstCell: {\n        borderRadius: '1rem 0 0 1rem',\n    },\n    lastCell: {\n        borderRadius: '0 1rem 1rem 0',\n    },\n    avatar: {\n        width: theme.spacing(3),\n        height: theme.spacing(3),\n        marginLeft: '.25rem'\n    },\n    tableContainer: {\n        marginBottom: 16\n    },\n    dateInput: {\n        color: '#FFF',\n        marginTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n}));\n\nconst TableCellStyled = withStyles(() => ({\n    root: {\n        borderColor: 'transparent',\n        paddingTop: '1rem',\n        paddingBottom: '1rem',\n        fontSize: '14px',\n        color: '#FFFFFF'\n    }\n}))(TableCell);\n\nconst SectionHeader = ({ title, description }) => {\n    const classes = useStyles();\n\n    return (\n        <div style={{ marginTop: '48px' }}>\n            <p className={classes.title}>\n                {title}\n            </p>\n            <p className={classes.description}>\n                {description}\n            </p>\n        </div>\n    );\n};\n\nconst EditStreamerEvent = ({ user }) => {\n    const { streamType } = useLocation().state;\n    const { streamId } = useParams();\n    const [title, setTitle] = useState({ en: '', es: '' });\n    const [selectedDate, setSelectedDate] = useState(new Date(1655251661000));\n    const [displayDate, setDisplayDate] = useState(new Date(1655251661000))\n    const [firstTimestamp, setFirstTimestamp] = useState(new Date(1655251661000))\n    const [notificationBody, setNotificationBody] = useState('');\n    const [participantsList, setParticipantsList] = useState({});\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [minDateToAllowUpdates, setMinDateToAllowUpdates] = useState(new Date((new Date()).getTime() + 300000));\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function setStreamData() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const timeStamp = await loadApprovedStreamTimeStamp(streamId);\n                if (timeStamp.exists()) {\n                    setSelectedDate(new Date(timeStamp.val()));\n                    setDisplayDate(new Date(timeStamp.val()));\n                    setFirstTimestamp(new Date(timeStamp.val()));\n                    setMinDateToAllowUpdates(new Date(timeStamp.val() - 300000));\n                }\n            }\n        }\n\n        async function setStreamParticipantsList() {\n            const participantsList = await getStreamParticipantsList(streamId);\n            if (participantsList.exists()) {\n                setParticipantsList(participantsList.val());\n            }\n        }\n\n        async function setStreamTitle() {\n            if (streamType === SCHEDULED_EVENT_TYPE) {\n                const title = await getStreamTitle(streamId);\n                setTitle(title.val());\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\n                if (user.uid) {\n                    const title = await getPastStreamTitle(user.uid, streamId);\n                    setTitle(title.val());\n                }\n            }\n        }\n\n        setStreamData();\n        setStreamParticipantsList();\n        setStreamTitle();\n    }, [streamId, streamType, user]);\n\n    const sendNotification = async () => {\n        const bodys = {\n            es: notificationBody,\n            en: notificationBody\n        };\n\n        const titles = {\n            es: title['en'],\n            en: title['en']\n        };\n\n        try {\n            sednPushNotificationToTopic(streamId, titles, bodys);\n            alert(t('EditStream.alerts.sent'));\n            setNotificationBody('');\n        } catch (error) {\n            alert(t('EditStream.alerts.errorSent'));\n        }\n    }\n\n    const onChangeNotificationBody = (e) => {\n        const body = e.target.value;\n        if (body.length <= 140) {\n            setNotificationBody(body);\n        }\n    }\n\n    const saveDate = async () => {\n        if (selectedDate) {\n            const minValidDate = new Date().getTime() + 300000;\n            if (selectedDate.getTime() >= minValidDate) {\n                const dateRef = new Date(selectedDate);\n                const UTCDay = dateRef.getUTCDate() < 10 ? `0${dateRef.getUTCDate()}` : dateRef.getUTCDate();\n                const UTCMonth = dateRef.getUTCMonth() + 1 < 10 ? `0${dateRef.getUTCMonth() + 1}` : dateRef.getUTCMonth() + 1;\n                let UTCDate = `${UTCDay}-${UTCMonth}-${dateRef.getUTCFullYear()}`;\n\n                const UTCHours = dateRef.getUTCHours() < 10 ? `0${dateRef.getUTCHours()}` : dateRef.getUTCHours();\n                const UTCMinutes = dateRef.getUTCMinutes() < 10 ? `0${dateRef.getUTCMinutes()}` : dateRef.getUTCMinutes();\n                let UTCHour = `${UTCHours}:${UTCMinutes}`;\n\n                const localDay = dateRef.getDate() < 10 ? `0${dateRef.getDate()}` : dateRef.getDate();\n                const localMonth = dateRef.getMonth() + 1 < 10 ? `0${dateRef.getMonth() + 1}` : dateRef.getMonth() + 1;\n                let localDate = `${localDay}-${localMonth}-${dateRef.getFullYear()}`;\n\n                const localHours = dateRef.getHours() < 10 ? `0${dateRef.getHours()}` : dateRef.getHours();\n                const localMinutes = dateRef.getMinutes() < 10 ? `0${dateRef.getMinutes()}` : dateRef.getMinutes();\n                let localHour = `${localHours}:${localMinutes}`;\n\n                await updateStreamDate(user.uid, streamId, UTCDate, UTCHour, localDate, localHour, dateRef.getTime());\n                notifyUpdateToQaplaAdmins(streamId, user.displayName, dateRef);\n                alert(t('EditStream.alerts.updated'));\n            } else {\n                alert(t('EditStream.alerts.errorDate'))\n            }\n        } else {\n            alert(t('EditStream.alerts.errorDate'));\n        }\n    }\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    return (\n        <StreamerDashboardContainer user={user}>\n            <Grid container>\n                <Grid xs={12}>\n                    <BackButton label={title && title['en'] ? title['en'] : ''}\n                        onClick={history.goBack} />\n                </Grid>\n                {streamType === SCHEDULED_EVENT_TYPE &&\n                    <>\n                        <Grid xs={6}>\n                            <SectionHeader\n                                title={t('EditStream.change')}\n                                description={t('EditStream.changeDesc')} />\n                            <Grid item sm={12}>\n                                <Grid container>\n                                    {selectedDate === null ? // to secure that dateState.getTime() isn't from a null\n                                        <></>\n                                        :\n                                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                                            <Grid container style={{\n                                                marginTop: '24px'\n                                            }}>\n                                                <Grid item sm={7} md={4} spacing={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.date')}\n                                                    </InputLabel>\n                                                    <KeyboardDatePicker\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        open={calendarOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setCalendarOpen(true)}\n                                                        onClose={() => setCalendarOpen(false)}\n                                                        clearable\n                                                        disablePast\n                                                        disableToolbar\n                                                        autoOk\n                                                        value={displayDate}\n                                                        placeholder='10-10-2021'\n                                                        onChange={handleDateChange}\n                                                        minDate={new Date()}\n                                                        format='DD-MM-YY ddd'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <CalendarIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                                <div style={{ minWidth: '16px' }} />\n                                                <Grid item sm={7} md={4}>\n                                                    <InputLabel className={classes.datePickerLabel}>\n                                                        {t('NewStream.time')}\n                                                    </InputLabel>\n                                                    <KeyboardTimePicker\n                                                        open={clockOpen}\n                                                        onClick={() => (new Date()).getTime() >= minDateToAllowUpdates.getTime() ? {} : setClockOpen(true)}\n                                                        onOpen={() => { }}\n                                                        onClose={() => setClockOpen(false)}\n                                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        autoOk\n                                                        error={(new Date()).getTime() >= minDateToAllowUpdates.getTime()}\n                                                        helperText={(new Date()).getTime() >= minDateToAllowUpdates.getTime() ? t('EditStream.alerts.updatesPolicy') : ''}\n                                                        value={displayDate}\n                                                        placeholder='08:00 AM'\n                                                        onChange={handleDateChange}\n                                                        // mask='__:__ _M'\n                                                        keyboardIcon={\n                                                            <InputAdornment position='end' >\n                                                                <TimeIcon />\n                                                            </InputAdornment>\n                                                        }\n                                                        InputProps={{\n                                                            disableUnderline: true,\n                                                            className: classes.dateInput\n                                                        }}\n                                                        variant={'inline'}\n                                                        PopoverProps={{\n                                                            PaperProps: {\n                                                                className: classes.popover,\n                                                            }\n                                                        }}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </MuiPickersUtilsProvider>\n                                    }\n                                    <ContainedButton className={classes.button}\n                                        onClick={saveDate}\n                                        disabled={(new Date()).getTime() >= minDateToAllowUpdates || selectedDate.getTime() === firstTimestamp.getTime()}>\n                                        {t('EditStream.save')}\n                                    </ContainedButton>\n                                </Grid>\n                            </Grid>\n                            <SectionHeader title={t('EditStream.sendMessage')}\n                                description={t('EditStream.sendMessageDesc')} />\n                            <Grid item md={12} style={{\n                                marginTop: '24px'\n                            }}>\n                                <StreamerTextInput placeholder={t('EditStream.limit')}\n                                    multiline\n                                    rows={3}\n                                    fullWidth\n                                    textInputClassName={classes.textArea}\n                                    containerClassName={classes.containerTextArea}\n                                    value={notificationBody}\n                                    onChange={onChangeNotificationBody} />\n                                <ContainedButton className={classes.button}\n                                    onClick={sendNotification}>\n                                    {t('QaplaStreamDialogs.EventManagementDialog.send')}\n                                </ContainedButton>\n                            </Grid>\n                        </Grid>\n                        {/** To define how this section is going to work\n                            <Grid xs={6}>\n                                <SectionHeader title='Private Rooms'\n                                    description='If you are hosting a private room and want to give access to the participants of the event, you can share the ID with them directly in the Qapla app. Participants will get a notification to see the ID.' />\n                                <StreamerTextInput label='ID'\n                                    placeholder='ID' />\n                                <br/>\n                                <ContainedButton className={classes.button}>\n                                    Send\n                                </ContainedButton>\n                            </Grid>\n                        */}\n                    </>\n                }\n                <Grid xs={12}>\n                    <SectionHeader title={t('EditStream.participants')} />\n                    <TableContainer className={classes.tableContainer}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCellStyled align='center' padding='checkbox'>\n                                        <ProfileIcon />\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.twitch')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.game')}</TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>{t('EditStream.table.qapla')}</TableCellStyled>\n                                    <TableCellStyled className={classes.participantsColumn}>\n                                        <EyeIcon /> <p>{Object.keys(participantsList).length}</p>\n                                    </TableCellStyled>\n                                    <TableCellStyled className={classes.tableHead}>\n                                        <ContainedButton\n                                            startIcon={<DownloadIcon />}>\n                                            {t('EditStream.table.download')}\n                                        </ContainedButton>\n                                    </TableCellStyled>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {Object.keys(participantsList).map((participantUid, index) => (\n                                    <TableRow className={index % 2 === 0 ? classes.tableRow : classes.tableRowOdd}\n                                        key={`Participant-${participantUid}`}>\n                                        <TableCellStyled align='center' className={classes.firstCell}>\n                                            <Avatar className={classes.avatar} />\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                        <TableCellStyled className={classes.lastCell}>\n                                            {participantsList[participantUid].userName}\n                                        </TableCellStyled>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Grid>\n            </Grid>\n        </StreamerDashboardContainer>\n    );\n}\n\nexport default EditStreamerEvent;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/utilities/Constants.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/BackButton/BackButton.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTerms/QaplaTerms.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/dynamicLinks.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfile/StreamerProfile.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/storage.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/CheersBitsRecordDialog/CheersBitsRecordDialog.jsx",["276","277"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventCustomMessageSentConfirmation.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/Router.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/reportWebVitals.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerOnBoarding/StreamerOnBoarding.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/Settings/Settings.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaTabs/QaplaTabs.jsx",["278"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamsSwitch/StreamsSwitch.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventConfirmStartDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/ChargeConfirmationPage/ChargeConfirmationPage.jsx",["279","280"],"import React, { useState, useEffect, useMemo } from 'react';\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { ReactComponent as ESvg } from './../../assets/e.svg';\nimport HeartHands from './../../assets/HeartHands.png';\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        height: '100vh'\n    },\n    paymentInfoContainer: {\n        paddingLeft: 32,\n        paddingRight: 64,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center'\n    },\n    eImageContainer: {\n        display: 'flex',\n        width: 80,\n        height: 80,\n        borderRadius: 20,\n        backgroundColor: '#141833',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    subscriptionBought: {\n        marginTop: 48,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    subTerms: {\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n    },\n    totalPaid: {\n        fontSize: 48,\n        fontWeight: '600',\n        color: 'rgba(255, 255, 255, .9)'\n    },\n    interval: {\n        marginLeft: 6,\n        fontSize: 14,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    paymentDetails: {\n        marginTop: 48,\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    subscriptionType: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentInterval: {\n        marginTop: 8,\n        fontSize: 14,\n        fontWeight: '400',\n        color: 'rgba(255, 255, 255, .6)'\n    },\n    itemCost: {\n        fontSize: 18,\n        fontWeight: '500',\n        color: '#FFF'\n    },\n    paymentUntilTodayContainer: {\n        marginTop: 56,\n        color: '#FFF',\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    paymentUntilToday: {\n        fontSize: 24,\n        fontWeight: '500'\n    },\n    thanksCardContainer: {\n        width: '450px',\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    thanksCard: {\n        backgroundColor: '#141833',\n        display: 'inline-block',\n        color: '#FFF',\n        maxWidth: '80%',\n        borderRadius: 35\n    },\n    cardContentContainer: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingLeft: 30,\n        paddingRight: 30\n    },\n    thanksTitle: {\n        marginTop: 8,\n        fontSize: 18,\n        fontWeight: '700',\n        textAlign: 'center'\n    },\n    thanksDescription: {\n        marginTop: 24,\n        fontSize: 14,\n        fontWeight: '500',\n        lineHeight: '22px',\n        textAlign: 'center',\n        marginRight: 48,\n        marginLeft: 48\n    },\n    publishButton: {\n        marginTop: 64,\n        marginLeft: 30,\n        marginRight: 30,\n        backgroundColor: '#0AFFD2',\n        borderRadius: 10,\n        color: '#4E2D92',\n        fontSize: 16,\n        fontWeight: '700',\n        paddingTop: 19,\n        paddingBottom: 19,\n        '&:hover': {\n            backgroundColor: '#0AFFD2',\n            opacity: '.95'\n        }\n    },\n    backToDashboardButton: {\n        marginTop: 16,\n        marginBottom: 16,\n        fontSize: 16,\n        fontWeight: '500',\n        color: 'rgba(255, 255, 255, .6)'\n    }\n}));\n\nfunction useQuery() {\n    const { search } = useLocation();\n\n    return useMemo(() => new URLSearchParams(search), [search]);\n}\n\nconst ChargeConfirmationPage = ({ user }) => {\n    const [totalPaid, setTotalPaid] = useState(0);\n    const [interval, setInterval] = useState('');\n    const [intervalText, setIntervalText] = useState('');\n    const [plan, setPlan] = useState('');\n    const classes = useStyles();\n    const history = useHistory();\n    const query = useQuery();\n    const { t } = useTranslation();\n\n    useEffect(() => {\n        async function getDetails() {\n            const id = query.get('subscriptionId');\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\n            setTotalPaid(details.val().totalPaid);\n\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\n\n            setIntervalText(details.val().interval);\n\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\n        }\n\n        if (user && user.uid) {\n            getDetails();\n        }\n    }, [user]);\n\n    const onPublishStreamClick = () => {\n        history.push('/create');\n    }\n\n    const onBackToDashboardClick = () => {\n        history.push('/profile');\n    }\n\n    return (\n        <Grid container alignContent='center' className={classes.container}>\n            <Grid item md={6} className={classes.paymentInfoContainer}>\n                <div className={classes.eImageContainer}>\n                    <ESvg />\n                </div>\n                <p className={classes.subscriptionBought}>\n                    {plan && intervalText &&\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                    }\n                </p>\n                <div className={classes.subTerms}>\n                    <p className={classes.totalPaid}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                    <p className={classes.interval}>\n                        {interval}\n                    </p>\n                </div>\n                <div className={classes.paymentDetails}>\n                    <div>\n                        <p className={classes.subscriptionType}>\n                            {plan}\n                        </p>\n                        <p className={classes.paymentInterval}>\n                            {intervalText &&\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\n                            }\n                        </p>\n                    </div>\n                    <p className={classes.itemCost}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n                <div className={classes.paymentUntilTodayContainer}>\n                    <p className={classes.paymentUntilToday}>\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\n                    </p>\n                    <p className={classes.paymentUntilToday}>\n                        ${(totalPaid).toFixed(2)}\n                    </p>\n                </div>\n            </Grid>\n            <Grid item md={6} className={classes.thanksCardContainer}>\n                <Card className={classes.thanksCard}>\n                    <div className={classes.cardContentContainer}>\n                        <img src={HeartHands} />\n                        <CardContent>\n                            <p className={classes.thanksTitle}>\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\n                            </p>\n                            <p className={classes.thanksDescription}>\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\n                            </p>\n                        </CardContent>\n                        <Button fullWidth variant='contained'\n                            className={classes.publishButton}\n                            onClick={onPublishStreamClick}>\n                            {t('ChargeConfirmationPage.publishStream')}\n                        </Button>\n                        <Button className={classes.backToDashboardButton}\n                            onClick={onBackToDashboardClick}>\n                            {t('ChargeConfirmationPage.backToDashboard')}\n                        </Button>\n                    </div>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default ChargeConfirmationPage;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamCard/StreamCard.jsx",["281"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/NewStream/NewStream.jsx",["282","283","284","285"],"import React, { useState, useReducer, useEffect } from 'react';\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, Accordion, AccordionSummary, AccordionDetails, CircularProgress } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport DayJsUtils from '@date-io/dayjs';\n\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer, updateStreamerProfile } from './../../services/database';\nimport styles from './NewStream.module.css';\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\nimport BackButton from '../BackButton/BackButton';\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\nimport RequestActivation from '../RequestActivation/RequestActivation';\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        color: '#FFF',\n        fontSize: '14px'\n    },\n    datePickerLabel: {\n        marginBottom: theme.spacing(1),\n        fontSize: '12px',\n        color: '#B2B3BD',\n        lineHeight: '16px'\n    },\n    button: {\n        color: '#FFF',\n        backgroundColor: '#6C5DD3',\n        borderRadius: '1rem',\n        padding: '1rem 3rem 1rem 3rem'\n    },\n    dateInput: {\n        color: '#FFF',\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        fontWeight: 'bold',\n        backgroundColor: '#141833',\n        borderRadius: '.5rem',\n        fontSize: '14px',\n        height: '56px',\n        '& .MuiInputAdornment-root': {\n            width: '20px',\n            marginLeft: '-6px',\n            marginRight: '18px',\n            zIndex: '10'\n        }\n    },\n    popover: {\n        backgroundColor: '#141833',\n        color: 'white',\n        padding: '15px',\n        '& .MuiPickersCalendarHeader-switchHeader': {\n            '& .MuiIconButton-root:hover': {\n                backgroundColor: '#707070'\n            }\n        },\n        '& .MuiPickersToolbar-toolbar': {\n            borderRadius: '20px'\n        },\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\n            backgroundColor: '#3f51b5',\n        },\n        '& .MuiPickersDay-day': {\n            color: 'white'\n        },\n        '& .MuiPickersDay-daySelected': {\n            backgroundColor: '#00beff',\n            color: '#000'\n        },\n        '& .MuiPickersDay-dayDisabled': {\n            color: 'gray'\n        },\n        '& .MuiPickersCalendarHeader-dayLabel': {\n            color: 'white'\n        },\n        '& .MuiPickersClockNumber-clockNumber': {\n            color: 'white'\n        },\n        '& .MuiPickersClockPointer-pointer': {\n            backgroundColor: '#00beff',\n            '& .MuiPickersClockPointer-noPoint': {\n                borderColor: '#00beff',\n            },\n            '& .MuiPickersClockPointer-thumb': {\n                borderColor: '#00beff',\n            }\n        },\n        '& .MuiPickersClockNumber-clockNumberSelected': {\n            color: '#000'\n        }\n    },\n    accordionContainer: {\n        marginTop: '3%',\n    },\n    accordion: {\n        backgroundColor: '#0D1021',\n        width: '66%',\n    },\n    accordionGridRoot: {\n        flex: 1,\n        flexGrow: 2,\n    },\n    accordionGridItem: {\n        flex: 1,\n        flexGrow: 2,\n    },\n}));\n\nconst NewStream = ({ user, games }) => {\n    const userLang = navigator.language || navigator.userLanguage;\n    const classes = useStyles();\n    const history = useHistory();\n    const { t } = useTranslation();\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\n    const [selectedGame, setSelectedGame] = useState();\n    const [selectedEvent, setSelectedEvent] = useState('exp');\n    const [stringDate, setStringDate] = useState('');\n    const [clockOpen, setClockOpen] = useState(false);\n    const [calendarOpen, setCalendarOpen] = useState(false);\n    const [gamesData, setGamesData] = useState([]);\n    const [showAccountActviation, setShowAccountActviation] = useState(false);\n    const [lockSendButton, setLockSendButton] = useState(false);\n\n    useEffect(() => {\n        let gameList = [];\n\n        if (games.allGames) {\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\n\n            let tempGamesData = [];\n            gameList.forEach((game) => {\n                tempGamesData.push({\n                    id: game.gameKey,\n                    name: game.gameName\n                })\n            });\n\n            setGamesData(tempGamesData);\n        }\n    }, [games.allGames, user]);\n\n    const optionalDataReducer = (state, action) => {\n        switch (action.target.id) {\n            case 'eventTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        title: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        title: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescriptionTitle':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptionsTitle: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            case 'eventDescription':\n                if (userLang.toLowerCase().includes('es')) {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            es: action.target.value\n                        }\n                    })\n                } else {\n                    return ({\n                        ...state,\n                        descriptions: {\n                            en: action.target.value\n                        }\n                    })\n                }\n            default:\n                break;\n        }\n    }\n\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\n\n    // Minimum valid date is 24 hours since the current date\n    const minDate = new Date((new Date()).getTime() + 86400000);\n\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\n\n    const handleDateChange = (date) => {\n        try {\n            setSelectedDate(date.$d);\n\n        } catch (e) { console.log(e) }\n\n        setDisplayDate(date)\n    };\n\n    const openSuccessWindow = () => {\n        submitEvent();\n    };\n\n    const submitEvent = async () => {\n        setLockSendButton(true);\n        if (user.broadcasterType === '') {\n            setLockSendButton(false);\n            return alert(t('NewStream.alerts.noChannelPoints'));\n        }\n\n        if (!user.premium && !user.freeTrial) {\n            setLockSendButton(false);\n            return setShowAccountActviation(true);\n        }\n\n        if (selectedDate < minDate) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.before24h'));\n            return;\n        }\n        if (!selectedGame) {\n            setLockSendButton(false);\n            alert(t('NewStream.alerts.missingData'));\n            return;\n        }\n\n        if (user.currentPeriod) {\n            const { endDate } = user.currentPeriod;\n\n            /**\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\n             */\n            if (selectedDate.getTime() <= endDate) {\n\n                const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\n\n                let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\n\n                if (!userCanCreateStream) {\n                    if (user.boughtStreams) {\n                        /**\n                         * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\n                         * the user can create the stream, this function will also remove expired packages or packages that has been already used\n                         */\n                        userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\n                            if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\n                                addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\n                                return true;\n                            } else {\n                                removeStreamPackageOfStreamer(user.uid, streamsPackageId);\n                            }\n                        });\n                    }\n                } else {\n                    addToStreamsRequestedOnSubscriptionDetails(user.uid);\n                }\n\n                /**\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\n                 * is lower or equal to the user limit per month then we create the event\n                 */\n                if (userCanCreateStream) {\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n                    let streamerData = {\n                        displayName: user.displayName,\n                        login: user.login,\n                        photoUrl: user.photoUrl\n                    };\n\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\n                    if (userData && userData.data) {\n                        streamerData = {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url\n                        };\n\n                        await updateStreamerProfile(user.uid, {\n                            displayName: userData.data.display_name,\n                            login: userData.data.login,\n                            photoUrl: userData.data.profile_image_url,\n                            broadcasterType: userData.data.broadcaster_type\n                        });\n                    }\n\n                    await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n\n                    window.analytics.track('Stream requested', {\n                        selectedGame,\n                        selectedDate: selectedDate.getTime(),\n                        uid: user.uid\n                    });\n                    setOpenSuccessDialog(true);\n                } else {\n                    setShowAccountActviation(true);\n                }\n            } else {\n                alert(t('NewStream.alerts.beforePlanExpiration'));\n            }\n        } else {\n            setShowAccountActviation(true);\n        }\n    }\n\n    const successActivation = async () => {\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\n\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\n\n        let streamerData = {\n            displayName: user.displayName,\n            login: user.login,\n            photoUrl: user.photoUrl\n        };\n\n        const userData = await getTwitchUserDataCloudFunction(user.id);\n        if (userData && userData.data) {\n            streamerData = {\n                displayName: userData.data.display_name,\n                login: userData.data.login,\n                photoUrl: userData.data.profile_image_url\n            };\n\n            await updateStreamerProfile(user.uid, {\n                displayName: userData.data.display_name,\n                login: userData.data.login,\n                photoUrl: userData.data.profile_image_url,\n                broadcasterType: userData.data.broadcaster_type\n            });\n        }\n\n        await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\n        await addToStreamsRequestedOnSubscriptionDetails(user.uid);\n\n        updateStreamerProfile(user.uid, streamerData);\n\n        window.analytics.track('Free trial started', {\n            uid: user.uid\n        });\n        setOpenSuccessDialog(true);\n    }\n\n    if (!showAccountActviation) {\n        return (\n            <StreamerDashboardContainer user={user}>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <BackButton onClick={history.goBack} />\n                    </Grid>\n                    <Grid item sm={8}>\n                        <h1 className={styles.title}>\n                            {t('NewStream.whatAreYouPlaying')}\n                        </h1>\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                            <Grid item sm={5} style={{ width: '274px', maxWidth: '274px', }}>\n                                <InputLabel className={classes.datePickerLabel}>\n                                    {t('NewStream.pickACategory')}\n                                </InputLabel>\n                                <ReactSearchAutocomplete\n                                    items={gamesData}\n                                    autofocus\n                                    placeholder={t('NewStream.categoryPickerPlaceholder')}\n                                    showItemsOnFocus\n                                    maxResults={5}\n                                    onSelect={(game) => setSelectedGame(game.id)}\n                                    onClear={() => setSelectedGame(null)}\n                                    styling={{\n                                        zIndex: 999,\n                                        height: '56px',\n                                        color: '#FFF',\n                                        hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\n                                        fontSize: '1rem',\n                                        fontWeight: 'bold',\n                                        backgroundColor: '#141833',\n                                        border: 'none',\n                                        borderRadius: '8px',\n                                        placeholderColor: 'rgba(255, 255, 255, 0.5)',\n                                        fontFamily: 'Inter',\n                                        lineColor: 'transparent'\n                                    }}\n                                    showIcon={false}\n                                    formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\n                            </Grid>\n                        </Grid>\n                        <h1 className={styles.title}>\n                            {t('NewStream.when')}\n                        </h1>\n                        <MuiPickersUtilsProvider utils={DayJsUtils}>\n                            <Grid container spacing={4} style={{ marginTop: '2px' }}>\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                    <InputLabel className={classes.datePickerLabel} >\n                                        {t('NewStream.date')}\n                                    </InputLabel>\n                                    <KeyboardDatePicker\n                                        open={calendarOpen}\n                                        onClick={() => setCalendarOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setCalendarOpen(false)}\n                                        clearable\n                                        disablePast\n                                        disableToolbar\n                                        autoOk\n                                        value={displayDate}\n                                        placeholder='10-10-2021'\n                                        onChange={handleDateChange}\n                                        defaultValue={new Date()}\n                                        minDate={minDate}\n                                        minDateMessage={t('NewStream.alerts.before24h')}\n                                        format='DD-MM-YY ddd'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <CalendarIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\n                                    <InputLabel className={classes.datePickerLabel}>\n                                        {t('NewStream.time')}\n                                    </InputLabel>\n                                    <KeyboardTimePicker\n                                        open={clockOpen}\n                                        onClick={() => setClockOpen(true)}\n                                        onOpen={() => { }}\n                                        onClose={() => setClockOpen(false)}\n                                        autoOk\n                                        error={selectedDate <= minDate}\n                                        helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\n                                        value={displayDate}\n                                        placeholder='08:00 AM'\n                                        onChange={handleDateChange}\n                                        // mask='__:__ _M'\n                                        keyboardIcon={\n                                            <InputAdornment position='end' >\n                                                <TimeIcon />\n                                            </InputAdornment>\n                                        }\n                                        InputProps={{\n                                            disableUnderline: true,\n                                            className: classes.dateInput\n                                        }}\n                                        variant={'inline'}\n                                        PopoverProps={{\n                                            PaperProps: {\n                                                className: classes.popover,\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                                {/* <Grid item sm={8} style={{ width: '90%', minWidth: '330px' }}>\n                                    <InputLabel className={classes.datePickerLabel}>\n                                        {t('NewStream.confirmDate')}\n                                    </InputLabel>\n                                    <StreamerTextInput placeholder={t('NewStream.confirmDatePlaceholder')}\n                                        fullWidth\n                                        value={stringDate}\n                                        onChange={handleStringDateChange} />\n                                </Grid> */}\n                            </Grid>\n                        </MuiPickersUtilsProvider>\n                        {/* <h1 className={styles.title}>\n                            {t('NewStream.streamType')}\n                        </h1> */}\n                        {/* <RadioGroup name={'eventType'} value={selectedEvent} onChange={(event) => { handleEventTypeChange(event) }}>\n                            <Grid container>\n                                <Grid item sm={2}>\n                                    <FormControlLabel\n                                        value={'exp'}\n                                        classes={{ label: classes.label }}\n                                        control={\n                                            <Radio defaultChecked\n                                                checkedIcon={<CheckedIcon />}\n                                                icon={<UncheckedIcon />}\n                                                style={{ backgroundColor: 'transparent' }} />\n                                        }\n                                        label={t('NewStream.streamTypes.casual')} />\n                                </Grid>\n                            </Grid>\n                        </RadioGroup> */}\n                        <Grid container className={classes.accordionContainer}>\n                            <Accordion\n                                className={classes.accordion}\n                            >\n                                <AccordionSummary\n                                    expandIcon={<ArrowIcon />}\n                                    id={\"moreOptions\"}\n                                    aria-controls=\"panel1a-content\"\n                                >\n                                    <InputLabel\n                                        className={classes.label}\n                                    >\n                                        {t('NewStream.advanced')}\n                                    </InputLabel>\n                                </AccordionSummary>\n                                <AccordionDetails>\n                                    <Grid container direction={'column'} className={classes.accordionGridRoot}>\n                                        <InputLabel className={classes.label}>\n                                            {t('NewStream.feelingCreative')}\n                                        </InputLabel>\n                                        <Grid container>\n                                            <h1 className={styles.title}>\n                                                {t('NewStream.streamTitle')}\n                                            </h1>\n                                            <Grid container spacing={4}>\n                                                <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\n                                                    <StreamerTextInput\n                                                        label={t('NewStream.streamTitle')}\n                                                        placeholder={t('NewStream.streamTitlePlaceholder')}\n                                                        id='eventTitle'\n                                                        fullWidth={true}\n                                                        value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <h1 className={styles.title}>\n                                            {t('NewStream.streamDescription')}\n                                        </h1>\n                                        {/* <Grid>\n                                            <Grid container spacing={4}>\n                                                <Grid item className={classes.accordionGridItem}>\n                                                    <StreamerTextInput\n                                                        label={t('NewStream.subtitle')}\n                                                        id={'eventDescriptionTitle'}\n                                                        placeholder={t('NewStream.subtitle')}\n                                                        fullWidth={true}\n                                                        value={optionalData.descriptionsTitle ? userLang.toLowerCase().includes('es') ? optionalData.descriptionsTitle.es : optionalData.descriptionsTitle.en : ''}\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Grid> */}\n                                        <Grid>\n                                            <Grid container spacing={4}>\n                                                <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\n                                                    <StreamerTextInput\n                                                        id={'eventDescription'}\n                                                        label={t('NewStream.streamDescription')}\n                                                        placeholder={t('NewStream.descriptionPlaceholder')}\n                                                        multiline={true}\n                                                        rows={3}\n                                                        rowsMax={30}\n                                                        fullWidth={true}\n                                                        value={optionalData.descriptions ? userLang.toLowerCase().includes('es') ? optionalData.descriptions.es : optionalData.descriptions.en : ''}\n                                                        onChange={(e) => optionalDataDispatcher({ target: e.target })}\n                                                    />\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </AccordionDetails>\n                            </Accordion>\n                        </Grid>\n                        <Button\n                            disabled={lockSendButton}\n                            className={styles.button}\n                            onClick={openSuccessWindow}>\n                            {lockSendButton ?\n                                <CircularProgress\n                                    style={{\n                                        color: '#fff7',\n                                        alignSelf: 'center'\n                                    }}\n                                    size={25} />\n                                :\n                                t('NewStream.submit')\n                            }\n                        </Button>\n                    </Grid>\n                </Grid>\n                <NewStreamSuccessDialog\n                    open={openSuccessDialog}\n                    onClose={() => history.push('/profile')}\n                    mainPage={() => history.push('/profile')}\n                />\n            </StreamerDashboardContainer>\n        );\n    } else {\n        return (\n            <>\n                <RequestActivation user={user} onSuccessActivation={successActivation} />\n                <NewStreamSuccessDialog\n                    open={openSuccessDialog}\n                    onClose={() => history.push('/profile')}\n                    mainPage={() => history.push('/profile')}\n                />\n            </>\n        )\n    }\n}\n\nexport default NewStream;","/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/discord.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerTextInput/StreamerTextInput.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/services/twitch.js",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/QaplaStreamDialogs/EventWarningQoinsDialog.jsx",[],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerProfileEditor/StreamerProfileEditor.jsx",["286","287","288","289","290","291","292","293","294"],"/Users/diego/Documents/react/QaplaStreamersDashboard/src/components/StreamerSideBar/StreamerSideBar.jsx",[],{"ruleId":"295","severity":1,"message":"296","line":7,"column":28,"nodeType":"297","messageId":"298","endLine":7,"endColumn":37},{"ruleId":"295","severity":1,"message":"299","line":21,"column":11,"nodeType":"297","messageId":"298","endLine":21,"endColumn":18},{"ruleId":"300","replacedBy":"301"},{"ruleId":"302","replacedBy":"303"},{"ruleId":"300","replacedBy":"304"},{"ruleId":"302","replacedBy":"305"},{"ruleId":"295","severity":1,"message":"306","line":4,"column":5,"nodeType":"297","messageId":"298","endLine":4,"endColumn":11},{"ruleId":"295","severity":1,"message":"307","line":5,"column":5,"nodeType":"297","messageId":"298","endLine":5,"endColumn":12},{"ruleId":"295","severity":1,"message":"308","line":6,"column":5,"nodeType":"297","messageId":"298","endLine":6,"endColumn":9},{"ruleId":"295","severity":1,"message":"309","line":7,"column":5,"nodeType":"297","messageId":"298","endLine":7,"endColumn":11},{"ruleId":"295","severity":1,"message":"310","line":14,"column":8,"nodeType":"297","messageId":"298","endLine":14,"endColumn":23},{"ruleId":"300","replacedBy":"311"},{"ruleId":"302","replacedBy":"312"},{"ruleId":"295","severity":1,"message":"313","line":1,"column":17,"nodeType":"297","messageId":"298","endLine":1,"endColumn":26},{"ruleId":"300","replacedBy":"314"},{"ruleId":"302","replacedBy":"315"},{"ruleId":"300","replacedBy":"316"},{"ruleId":"302","replacedBy":"317"},{"ruleId":"318","severity":1,"message":"319","line":97,"column":8,"nodeType":"320","endLine":97,"endColumn":38,"suggestions":"321"},{"ruleId":"300","replacedBy":"322"},{"ruleId":"302","replacedBy":"323"},{"ruleId":"300","replacedBy":"324"},{"ruleId":"302","replacedBy":"325"},{"ruleId":"326","severity":1,"message":"327","line":26,"column":1,"nodeType":"328","endLine":26,"endColumn":51},{"ruleId":"300","replacedBy":"329"},{"ruleId":"302","replacedBy":"330"},{"ruleId":"318","severity":1,"message":"331","line":243,"column":8,"nodeType":"320","endLine":243,"endColumn":44,"suggestions":"332"},{"ruleId":"295","severity":1,"message":"333","line":4,"column":5,"nodeType":"297","messageId":"298","endLine":4,"endColumn":14},{"ruleId":"295","severity":1,"message":"334","line":5,"column":5,"nodeType":"297","messageId":"298","endLine":5,"endColumn":17},{"ruleId":"295","severity":1,"message":"335","line":6,"column":5,"nodeType":"297","messageId":"298","endLine":6,"endColumn":15},{"ruleId":"336","severity":2,"message":"337","line":2,"column":5,"nodeType":"297","messageId":"338","endLine":2,"endColumn":11},{"ruleId":"295","severity":1,"message":"339","line":4,"column":8,"nodeType":"297","messageId":"298","endLine":4,"endColumn":14},{"ruleId":"295","severity":1,"message":"340","line":6,"column":198,"nodeType":"297","messageId":"298","endLine":6,"endColumn":223},{"ruleId":"295","severity":1,"message":"341","line":23,"column":12,"nodeType":"297","messageId":"298","endLine":23,"endColumn":24},{"ruleId":"318","severity":1,"message":"342","line":212,"column":8,"nodeType":"320","endLine":212,"endColumn":84,"suggestions":"343"},{"ruleId":"295","severity":1,"message":"344","line":13,"column":5,"nodeType":"297","messageId":"298","endLine":13,"endColumn":11},{"ruleId":"295","severity":1,"message":"345","line":273,"column":21,"nodeType":"297","messageId":"298","endLine":273,"endColumn":31},{"ruleId":"318","severity":1,"message":"346","line":457,"column":8,"nodeType":"320","endLine":457,"endColumn":14,"suggestions":"347"},{"ruleId":"326","severity":1,"message":"327","line":16,"column":1,"nodeType":"328","endLine":16,"endColumn":52},{"ruleId":"318","severity":1,"message":"319","line":179,"column":8,"nodeType":"320","endLine":179,"endColumn":14,"suggestions":"348"},{"ruleId":"349","severity":1,"message":"350","line":235,"column":25,"nodeType":"351","endLine":235,"endColumn":49},{"ruleId":"295","severity":1,"message":"352","line":373,"column":11,"nodeType":"297","messageId":"298","endLine":373,"endColumn":26},{"ruleId":"295","severity":1,"message":"353","line":11,"column":8,"nodeType":"297","messageId":"298","endLine":11,"endColumn":22},{"ruleId":"295","severity":1,"message":"354","line":124,"column":27,"nodeType":"297","messageId":"298","endLine":124,"endColumn":43},{"ruleId":"295","severity":1,"message":"355","line":125,"column":24,"nodeType":"297","messageId":"298","endLine":125,"endColumn":37},{"ruleId":"356","severity":1,"message":"357","line":268,"column":103,"nodeType":"358","messageId":"359","endLine":268,"endColumn":105},{"ruleId":"295","severity":1,"message":"360","line":2,"column":67,"nodeType":"297","messageId":"298","endLine":2,"endColumn":74},{"ruleId":"295","severity":1,"message":"361","line":13,"column":28,"nodeType":"297","messageId":"298","endLine":13,"endColumn":36},{"ruleId":"295","severity":1,"message":"362","line":16,"column":28,"nodeType":"297","messageId":"298","endLine":16,"endColumn":33},{"ruleId":"295","severity":1,"message":"363","line":233,"column":12,"nodeType":"297","messageId":"298","endLine":233,"endColumn":29},{"ruleId":"295","severity":1,"message":"364","line":237,"column":12,"nodeType":"297","messageId":"298","endLine":237,"endColumn":23},{"ruleId":"295","severity":1,"message":"365","line":241,"column":12,"nodeType":"297","messageId":"298","endLine":241,"endColumn":21},{"ruleId":"295","severity":1,"message":"366","line":241,"column":23,"nodeType":"297","messageId":"298","endLine":241,"endColumn":35},{"ruleId":"318","severity":1,"message":"367","line":288,"column":8,"nodeType":"320","endLine":288,"endColumn":14,"suggestions":"368"},{"ruleId":"295","severity":1,"message":"369","line":387,"column":11,"nodeType":"297","messageId":"298","endLine":387,"endColumn":24},"no-unused-vars","'ArrowIcon' is defined but never used.","Identifier","unusedVar","'classes' is assigned a value but never used.","no-native-reassign",["370"],"no-negated-in-lhs",["371"],["370"],["371"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.",["370"],["371"],"'useEffect' is defined but never used.",["370"],["371"],["370"],["371"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.","ArrayExpression",["372"],["370"],["371"],["370"],["371"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["370"],["371"],"React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["373"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","no-undef","'branch' is not defined.","undef","'styles' is defined but never used.","'getStreamerAlertsSettings' is defined but never used.","'mediaContent' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'alertSideRight' and 'queueAnimation'. Either include them or remove the dependency array.",["374"],"'Hidden' is defined but never used.","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["375"],["376"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'shareStreamLink' is assigned a value but never used.","'StreamerSelect' is defined but never used.","'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["377"],"'copyTwitchURL' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"390","text":"391"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"392","text":"393"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",{"range":"394","text":"395"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"396","text":"397"},"Update the dependencies array to be: [query, t, user]",{"range":"398","text":"399"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"400","text":"401"},[4293,4323],"[user, history, isLoadingAuth, query, t]",[6720,6756],"[streamStarted, dots, enablingQoins, stream]",[9618,9694],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",[17811,17817],"[setPendingMessages, user]",[4767,4773],"[query, t, user]",[8892,8898],"[socialLinksInitialValue, twitchURL, user]"]
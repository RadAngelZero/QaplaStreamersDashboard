[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js":"20","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx":"21","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx":"22","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx":"23","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"24","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx":"25","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"26","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx":"27","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js":"28","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx":"29","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx":"30","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx":"31","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx":"32","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx":"33","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx":"34","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx":"35","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CardsPayments\\CardsPayments.jsx":"36","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js":"37","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx":"38","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\interactionsQapla.js":"39","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx":"40","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx":"41","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx":"42","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js":"43","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx":"44","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GiphyTextGenerator\\GiphyTextGenerator.jsx":"45","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js":"46","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx":"47","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx":"48","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx":"49","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js":"50","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx":"51","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx":"52","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx":"53","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx":"54","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx":"55","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx":"56","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx":"57","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js":"58"},{"size":545,"mtime":1660938322012,"results":"59","hashOfConfig":"60"},{"size":899,"mtime":1660938322023,"results":"61","hashOfConfig":"60"},{"size":4958,"mtime":1662559722562,"results":"62","hashOfConfig":"60"},{"size":4120,"mtime":1660938322014,"results":"63","hashOfConfig":"60"},{"size":36241,"mtime":1662560524552,"results":"64","hashOfConfig":"60"},{"size":6876,"mtime":1662561274018,"results":"65","hashOfConfig":"60"},{"size":3046,"mtime":1660938321997,"results":"66","hashOfConfig":"60"},{"size":25563,"mtime":1662559722621,"results":"67","hashOfConfig":"60"},{"size":23458,"mtime":1660938321971,"results":"68","hashOfConfig":"60"},{"size":18349,"mtime":1662755291484,"results":"69","hashOfConfig":"60"},{"size":35175,"mtime":1660938322000,"results":"70","hashOfConfig":"60"},{"size":8497,"mtime":1662560524542,"results":"71","hashOfConfig":"60"},{"size":6442,"mtime":1660938322018,"results":"72","hashOfConfig":"60"},{"size":9312,"mtime":1662559722649,"results":"73","hashOfConfig":"60"},{"size":1425,"mtime":1660938322018,"results":"74","hashOfConfig":"60"},{"size":1638,"mtime":1662755291487,"results":"75","hashOfConfig":"60"},{"size":1128,"mtime":1660938321966,"results":"76","hashOfConfig":"60"},{"size":13909,"mtime":1663005595079,"results":"77","hashOfConfig":"60"},{"size":21697,"mtime":1662559722630,"results":"78","hashOfConfig":"60"},{"size":5532,"mtime":1662559722648,"results":"79","hashOfConfig":"60"},{"size":657,"mtime":1660938321974,"results":"80","hashOfConfig":"60"},{"size":720,"mtime":1660938321988,"results":"81","hashOfConfig":"60"},{"size":398,"mtime":1660938321988,"results":"82","hashOfConfig":"60"},{"size":3510,"mtime":1662559722628,"results":"83","hashOfConfig":"60"},{"size":3954,"mtime":1660938321987,"results":"84","hashOfConfig":"60"},{"size":7758,"mtime":1660938321967,"results":"85","hashOfConfig":"60"},{"size":6780,"mtime":1662754843674,"results":"86","hashOfConfig":"60"},{"size":375,"mtime":1660938322013,"results":"87","hashOfConfig":"60"},{"size":1327,"mtime":1660938322010,"results":"88","hashOfConfig":"60"},{"size":21997,"mtime":1662559722623,"results":"89","hashOfConfig":"60"},{"size":1985,"mtime":1660938321970,"results":"90","hashOfConfig":"60"},{"size":15129,"mtime":1660938322002,"results":"91","hashOfConfig":"60"},{"size":517,"mtime":1662754843718,"results":"92","hashOfConfig":"60"},{"size":3435,"mtime":1660938321986,"results":"93","hashOfConfig":"60"},{"size":10204,"mtime":1662754843701,"results":"94","hashOfConfig":"60"},{"size":3148,"mtime":1662658582422,"results":"95","hashOfConfig":"60"},{"size":240,"mtime":1660938321776,"results":"96","hashOfConfig":"60"},{"size":23895,"mtime":1662559722618,"results":"97","hashOfConfig":"60"},{"size":2520,"mtime":1662754843733,"results":"98","hashOfConfig":"60"},{"size":9933,"mtime":1660938321992,"results":"99","hashOfConfig":"60"},{"size":3265,"mtime":1660938322004,"results":"100","hashOfConfig":"60"},{"size":1568,"mtime":1660938322011,"results":"101","hashOfConfig":"60"},{"size":2247,"mtime":1660938322016,"results":"102","hashOfConfig":"60"},{"size":3682,"mtime":1660938321972,"results":"103","hashOfConfig":"60"},{"size":1334,"mtime":1662754843671,"results":"104","hashOfConfig":"60"},{"size":2669,"mtime":1662560524553,"results":"105","hashOfConfig":"60"},{"size":12209,"mtime":1660938321991,"results":"106","hashOfConfig":"60"},{"size":2074,"mtime":1660938321974,"results":"107","hashOfConfig":"60"},{"size":4435,"mtime":1662754843720,"results":"108","hashOfConfig":"60"},{"size":8655,"mtime":1662560524554,"results":"109","hashOfConfig":"60"},{"size":2105,"mtime":1660938322006,"results":"110","hashOfConfig":"60"},{"size":5837,"mtime":1660938321985,"results":"111","hashOfConfig":"60"},{"size":20794,"mtime":1662997648750,"results":"112","hashOfConfig":"60"},{"size":21757,"mtime":1662755291481,"results":"113","hashOfConfig":"60"},{"size":3513,"mtime":1660938321984,"results":"114","hashOfConfig":"60"},{"size":2072,"mtime":1660938322009,"results":"115","hashOfConfig":"60"},{"size":860,"mtime":1660938321993,"results":"116","hashOfConfig":"60"},{"size":1550,"mtime":1660938322017,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"pa48sw",{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"137"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"133"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"133"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"145"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"133"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"133"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js",[],["253","254"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\Router.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\auth.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js",["255","256"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx",["257","258","259","260"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx",[],["261","262"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStream.jsx",["263","264","265"],"import React, { useState, useReducer, useEffect } from 'react';\r\nimport { makeStyles, Grid, Button, InputAdornment, InputLabel, CircularProgress } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker, KeyboardTimePicker } from '@material-ui/pickers'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport DayJsUtils from '@date-io/dayjs';\r\n\r\nimport { addToStreamsRequestedOnStreamsPackage, addToStreamsRequestedOnSubscriptionDetails, createNewStreamRequest, removeStreamPackageOfStreamer, updateStreamerProfile } from './../../services/database';\r\nimport styles from './NewStream.module.css';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimeIcon } from './../../assets/TimeIcon.svg';\r\nimport BackButton from '../BackButton/BackButton';\r\nimport NewStreamSuccessDialog from './NewStreamSuccessDialog';\r\nimport RequestActivation from '../RequestActivation/RequestActivation';\r\nimport { getTwitchUserDataCloudFunction } from '../../services/functions';\r\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    label: {\r\n        color: '#FFF',\r\n        fontSize: '14px'\r\n    },\r\n    titleLabel: {\r\n        marginBottom: 8\r\n    },\r\n    datePickerLabel: {\r\n        marginBottom: theme.spacing(1),\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    button: {\r\n        color: '#FFF',\r\n        backgroundColor: '#6C5DD3',\r\n        borderRadius: '1rem',\r\n        padding: '1rem 3rem 1rem 3rem'\r\n    },\r\n    dateInput: {\r\n        color: '#FFF',\r\n        paddingLeft: theme.spacing(2),\r\n        paddingTop: theme.spacing(1),\r\n        paddingBottom: theme.spacing(1),\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '.5rem',\r\n        fontSize: '14px',\r\n        height: '56px',\r\n        '& .MuiInputAdornment-root': {\r\n            width: '20px',\r\n            marginLeft: '-6px',\r\n            marginRight: '18px',\r\n            zIndex: '10'\r\n        }\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n        '& .MuiPickersToolbar-toolbar': {\r\n            borderRadius: '20px'\r\n        },\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n    accordionContainer: {\r\n        marginTop: '3%',\r\n    },\r\n    accordion: {\r\n        backgroundColor: '#0D1021',\r\n        width: '66%',\r\n    },\r\n    accordionGridRoot: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n    accordionGridItem: {\r\n        flex: 1,\r\n        flexGrow: 2,\r\n    },\r\n}));\r\n\r\nconst NewStream = ({ user, games }) => {\r\n    const userLang = navigator.language || navigator.userLanguage;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n    const [openSuccessDialog, setOpenSuccessDialog] = useState(false);\r\n    const [selectedGame, setSelectedGame] = useState();\r\n    const [selectedEvent, setSelectedEvent] = useState('exp');\r\n    const [stringDate, setStringDate] = useState('');\r\n    const [clockOpen, setClockOpen] = useState(false);\r\n    const [calendarOpen, setCalendarOpen] = useState(false);\r\n    const [gamesData, setGamesData] = useState([]);\r\n    const [showAccountActviation, setShowAccountActviation] = useState(false);\r\n    const [lockSendButton, setLockSendButton] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let gameList = [];\r\n\r\n        if (games.allGames) {\r\n            gameList = Object.keys(games.allGames).map((gameKey) => ({ gameKey, ...games.allGames[gameKey] }));\r\n\r\n            let tempGamesData = [];\r\n            gameList.forEach((game) => {\r\n                tempGamesData.push({\r\n                    id: game.gameKey,\r\n                    name: game.gameName\r\n                })\r\n            });\r\n\r\n            setGamesData(tempGamesData);\r\n        }\r\n    }, [games.allGames, user]);\r\n\r\n    const optionalDataReducer = (state, action) => {\r\n        switch (action.target.id) {\r\n            case 'eventTitle':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        title: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        title: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            case 'eventDescriptionTitle':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        descriptionsTitle: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        descriptionsTitle: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            case 'eventDescription':\r\n                if (userLang.toLowerCase().includes('es')) {\r\n                    return ({\r\n                        ...state,\r\n                        descriptions: {\r\n                            es: action.target.value\r\n                        }\r\n                    })\r\n                } else {\r\n                    return ({\r\n                        ...state,\r\n                        descriptions: {\r\n                            en: action.target.value\r\n                        }\r\n                    })\r\n                }\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const [optionalData, optionalDataDispatcher] = useReducer(optionalDataReducer, {});\r\n\r\n    // Minimum valid date is 24 hours since the current date\r\n    const minDate = new Date((new Date()).getTime() + 86400000);\r\n\r\n    // The default date is the minDate + 15 minutes, to avoid show the error feedback when the streamer open the screen\r\n    const [selectedDate, setSelectedDate] = useState(new Date(minDate.getTime() + 900000));\r\n    const [displayDate, setDisplayDate] = useState(new Date(minDate.getTime() + 900000));\r\n\r\n    const handleDateChange = (date) => {\r\n        try {\r\n            setSelectedDate(date.$d);\r\n\r\n        } catch (e) { console.log(e) }\r\n\r\n        setDisplayDate(date)\r\n    };\r\n\r\n    const openSuccessWindow = () => {\r\n        submitEvent();\r\n    };\r\n\r\n    const submitEvent = async () => {\r\n        setLockSendButton(true);\r\n        if (user.broadcasterType === '') {\r\n            setLockSendButton(false);\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        if (!user.premium && !user.freeTrial) {\r\n            setLockSendButton(false);\r\n            return setShowAccountActviation(true);\r\n        }\r\n\r\n        if (selectedDate < minDate) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.before24h'));\r\n            return;\r\n        }\r\n        if (!selectedGame) {\r\n            setLockSendButton(false);\r\n            alert(t('NewStream.alerts.missingData'));\r\n            return;\r\n        }\r\n\r\n        if (user.currentPeriod) {\r\n            const { endDate } = user.currentPeriod;\r\n\r\n            /**\r\n             * Check if the selected date is valid to create the event based on the end of the streamer subscription\r\n             */\r\n            if (selectedDate.getTime() <= endDate) {\r\n\r\n                const numberOfStreamsInTheSelectedPeriod = user.subscriptionDetails.streamsRequested || 0;\r\n\r\n                let userCanCreateStream = numberOfStreamsInTheSelectedPeriod + 1 <= parseInt(user.subscriptionDetails.streamsIncluded);\r\n\r\n                if (!userCanCreateStream) {\r\n                    if (user.boughtStreams) {\r\n                        /**\r\n                         * Check for packages of streams bought by the streamer, if some package has not expired and has not used the total amount of streams bought\r\n                         * the user can create the stream, this function will also remove expired packages or packages that has been already used\r\n                         */\r\n                        userCanCreateStream = Object.keys(user.boughtStreams).some((streamsPackageId) => {\r\n                            if (selectedDate.getTime() <= user.boughtStreams[streamsPackageId].expirationTimestamp && (!user.boughtStreams[streamsPackageId].streamsRequested || user.boughtStreams[streamsPackageId].streamsRequested + 1 <= user.boughtStreams[streamsPackageId].boughtStreams)) {\r\n                                addToStreamsRequestedOnStreamsPackage(user.uid, streamsPackageId);\r\n                                return true;\r\n                            } else {\r\n                                removeStreamPackageOfStreamer(user.uid, streamsPackageId);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    addToStreamsRequestedOnSubscriptionDetails(user.uid);\r\n                }\r\n\r\n                /**\r\n                 * If the number of streams in the selected period plus 1 (to count the event the streamer is trying to create)\r\n                 * is lower or equal to the user limit per month then we create the event\r\n                 */\r\n                if (userCanCreateStream) {\r\n                    const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\r\n                    const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\r\n                    let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\r\n\r\n                    const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\r\n                    const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\r\n                    let UTCTime = `${UTCHour}:${UTCMinutes}`;\r\n\r\n                    let streamerData = {\r\n                        displayName: user.displayName,\r\n                        login: user.login,\r\n                        photoUrl: user.photoUrl\r\n                    };\r\n\r\n                    const userData = await getTwitchUserDataCloudFunction(user.id);\r\n                    if (userData && userData.data) {\r\n                        streamerData = {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url\r\n                        };\r\n\r\n                        await updateStreamerProfile(user.uid, {\r\n                            displayName: userData.data.display_name,\r\n                            login: userData.data.login,\r\n                            photoUrl: userData.data.profile_image_url,\r\n                            broadcasterType: userData.data.broadcaster_type\r\n                        });\r\n                    }\r\n\r\n                    await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\r\n\r\n                    window.analytics.track('Stream requested', {\r\n                        selectedGame,\r\n                        selectedDate: selectedDate.getTime(),\r\n                        uid: user.uid\r\n                    });\r\n                    setOpenSuccessDialog(true);\r\n                } else {\r\n                    setShowAccountActviation(true);\r\n                }\r\n            } else {\r\n                alert(t('NewStream.alerts.beforePlanExpiration'));\r\n            }\r\n        } else {\r\n            setShowAccountActviation(true);\r\n        }\r\n    }\r\n\r\n    const successActivation = async () => {\r\n        const UTCDay = selectedDate.getUTCDate() < 10 ? `0${selectedDate.getUTCDate()}` : selectedDate.getUTCDate();\r\n        const UTCMonth = selectedDate.getUTCMonth() + 1 < 10 ? `0${selectedDate.getUTCMonth() + 1}` : selectedDate.getUTCMonth() + 1;\r\n        let UTCDate = `${UTCDay}-${UTCMonth}-${selectedDate.getUTCFullYear()}`;\r\n\r\n        const UTCHour = selectedDate.getUTCHours() < 10 ? `0${selectedDate.getUTCHours()}` : selectedDate.getUTCHours();\r\n        const UTCMinutes = selectedDate.getUTCMinutes() < 10 ? `0${selectedDate.getUTCMinutes()}` : selectedDate.getUTCMinutes();\r\n        let UTCTime = `${UTCHour}:${UTCMinutes}`;\r\n\r\n        let streamerData = {\r\n            displayName: user.displayName,\r\n            login: user.login,\r\n            photoUrl: user.photoUrl\r\n        };\r\n\r\n        const userData = await getTwitchUserDataCloudFunction(user.id);\r\n        if (userData && userData.data) {\r\n            streamerData = {\r\n                displayName: userData.data.display_name,\r\n                login: userData.data.login,\r\n                photoUrl: userData.data.profile_image_url\r\n            };\r\n\r\n            await updateStreamerProfile(user.uid, {\r\n                displayName: userData.data.display_name,\r\n                login: userData.data.login,\r\n                photoUrl: userData.data.profile_image_url,\r\n                broadcasterType: userData.data.broadcaster_type\r\n            });\r\n        }\r\n\r\n        await createNewStreamRequest(user.uid, streamerData, selectedGame, UTCDate, UTCTime, selectedEvent, selectedDate.getTime(), optionalData, (new Date()).getTime(), stringDate);\r\n        await addToStreamsRequestedOnSubscriptionDetails(user.uid);\r\n\r\n        updateStreamerProfile(user.uid, streamerData);\r\n\r\n        window.analytics.track('Free trial started', {\r\n            uid: user.uid\r\n        });\r\n        setOpenSuccessDialog(true);\r\n    }\r\n\r\n    if (!showAccountActviation) {\r\n        return (\r\n            <StreamerDashboardContainer user={user}>\r\n                <Grid container>\r\n                    <Grid item xs={12}>\r\n                        <BackButton onClick={history.goBack} />\r\n                    </Grid>\r\n                    <Grid item sm={8}>\r\n                        <h1 className={styles.title}>\r\n                            {t('NewStream.whatAreYouPlaying')}\r\n                        </h1>\r\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                            <Grid item sm={5} style={{ width: '274px', maxWidth: '274px', }}>\r\n                                <InputLabel className={classes.datePickerLabel}>\r\n                                    {t('NewStream.pickACategory')}\r\n                                </InputLabel>\r\n                                <ReactSearchAutocomplete\r\n                                    items={gamesData}\r\n                                    autofocus\r\n                                    placeholder={t('NewStream.categoryPickerPlaceholder')}\r\n                                    showItemsOnFocus\r\n                                    maxResults={5}\r\n                                    onSelect={(game) => setSelectedGame(game.id)}\r\n                                    onClear={() => setSelectedGame(null)}\r\n                                    styling={{\r\n                                        zIndex: 999,\r\n                                        height: '56px',\r\n                                        color: '#FFF',\r\n                                        hoverBackgroundColor: 'rgba(255, 255, 255, 0.25)',\r\n                                        fontSize: '1rem',\r\n                                        fontWeight: 'bold',\r\n                                        backgroundColor: '#141833',\r\n                                        border: 'none',\r\n                                        borderRadius: '8px',\r\n                                        placeholderColor: 'rgba(255, 255, 255, 0.5)',\r\n                                        fontFamily: 'Inter',\r\n                                        lineColor: 'transparent'\r\n                                    }}\r\n                                    showIcon={false}\r\n                                    formatResults={(item) => <span style={{ display: 'block', textAlign: 'left' }}>name: {item.name}</span>} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <h1 className={styles.title}>\r\n                            {t('NewStream.when')}\r\n                        </h1>\r\n                        <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                            <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                    <InputLabel className={classes.datePickerLabel} >\r\n                                        {t('NewStream.date')}\r\n                                    </InputLabel>\r\n                                    <KeyboardDatePicker\r\n                                        open={calendarOpen}\r\n                                        onClick={() => setCalendarOpen(true)}\r\n                                        onOpen={() => { }}\r\n                                        onClose={() => setCalendarOpen(false)}\r\n                                        clearable\r\n                                        disablePast\r\n                                        disableToolbar\r\n                                        autoOk\r\n                                        value={displayDate}\r\n                                        placeholder='10-10-2021'\r\n                                        onChange={handleDateChange}\r\n                                        defaultValue={new Date()}\r\n                                        minDate={minDate}\r\n                                        minDateMessage={t('NewStream.alerts.before24h')}\r\n                                        format='DD-MM-YY ddd'\r\n                                        keyboardIcon={\r\n                                            <InputAdornment position='end' >\r\n                                                <CalendarIcon />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        InputProps={{\r\n                                            disableUnderline: true,\r\n                                            className: classes.dateInput\r\n                                        }}\r\n                                        variant={'inline'}\r\n                                        PopoverProps={{\r\n                                            PaperProps: {\r\n                                                className: classes.popover,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                    <InputLabel className={classes.datePickerLabel}>\r\n                                        {t('NewStream.time')}\r\n                                    </InputLabel>\r\n                                    <KeyboardTimePicker\r\n                                        open={clockOpen}\r\n                                        onClick={() => setClockOpen(true)}\r\n                                        onOpen={() => { }}\r\n                                        onClose={() => setClockOpen(false)}\r\n                                        autoOk\r\n                                        error={selectedDate <= minDate}\r\n                                        helperText={selectedDate >= minDate ? '' : t('NewStream.alerts.before24h')}\r\n                                        value={displayDate}\r\n                                        placeholder='08:00 AM'\r\n                                        onChange={handleDateChange}\r\n                                        // mask='__:__ _M'\r\n                                        keyboardIcon={\r\n                                            <InputAdornment position='end' >\r\n                                                <TimeIcon />\r\n                                            </InputAdornment>\r\n                                        }\r\n                                        InputProps={{\r\n                                            disableUnderline: true,\r\n                                            className: classes.dateInput\r\n                                        }}\r\n                                        variant={'inline'}\r\n                                        PopoverProps={{\r\n                                            PaperProps: {\r\n                                                className: classes.popover,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </MuiPickersUtilsProvider>\r\n                        <Grid container spacing={4} style={{ marginTop: '2px' }}>\r\n                            <Grid item sm={5} style={{ maxWidth: '274px', }}>\r\n                                <Grid container>\r\n                                    <h1 className={styles.title}>\r\n                                        {t('NewStream.streamTitle')}\r\n                                    </h1>\r\n                                    <Grid container spacing={4}>\r\n                                        <Grid item className={classes.accordionGridItem} style={{ marginTop: '10px' }}>\r\n                                            <StreamerTextInput\r\n                                                labelClassName={classes.titleLabel}\r\n                                                label={t('NewStream.streamTitle')}\r\n                                                placeholder={t('NewStream.streamTitlePlaceholder')}\r\n                                                id='eventTitle'\r\n                                                fullWidth={true}\r\n                                                value={optionalData.title ? userLang.toLowerCase().includes('es') ? optionalData.title.es : optionalData.title.en : ''}\r\n                                                onChange={(e) => optionalDataDispatcher({ target: e.target })}\r\n                                            />\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            disabled={lockSendButton}\r\n                            className={styles.button}\r\n                            onClick={openSuccessWindow}>\r\n                            {lockSendButton ?\r\n                                <CircularProgress\r\n                                    style={{\r\n                                        color: '#fff7',\r\n                                        alignSelf: 'center'\r\n                                    }}\r\n                                    size={25} />\r\n                                :\r\n                                t('NewStream.submit')\r\n                            }\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <NewStreamSuccessDialog\r\n                    open={openSuccessDialog}\r\n                    onClose={() => history.push('/profile')}\r\n                    mainPage={() => history.push('/profile')}\r\n                />\r\n            </StreamerDashboardContainer>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <RequestActivation user={user} onSuccessActivation={successActivation} />\r\n                <NewStreamSuccessDialog\r\n                    open={openSuccessDialog}\r\n                    onClose={() => history.push('/profile')}\r\n                    mainPage={() => history.push('/profile')}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewStream;",["266","267"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx",["268"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\PlanPicker\\PlanPicker.jsx",["269","270","271","272","273","274"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx",["275","276","277","278","279","280","281","282","283"],"import React, { useEffect, useState } from 'react';\r\nimport { withStyles, makeStyles, Button, Chip, Switch, Tabs, Tab, Tooltip } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nimport StreamerProfileEditorOnBoarding from '../StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding';\r\n\r\nimport styles from './StreamerProfileEditor.module.css';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { getStreamerLinks, listenStreamerPublicProfile, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\r\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\r\nimport { ReactComponent as EditIcon } from './../../assets/Edit.svg';\r\nimport { ReactComponent as CameraIcon } from './../../assets/Camera.svg';\r\nimport { ReactComponent as XIcon } from './../../assets/xIcon.svg';\r\nimport ContainedButton from '../ContainedButton/ContainedButton';\r\nimport { uploadImage } from '../../services/storage';\r\nimport { MIN_TAGS, PROFILE_BACKGROUND_GRADIENTS } from '../../utilities/Constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridContainer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexWrap: 'nowrap'\r\n    },\r\n    linkPlaceholder: {\r\n        '&::placeholder': {\r\n            color: 'rgba(108, 93, 211, 0.4)'\r\n        }\r\n    },\r\n    linkInput: {\r\n        backgroundColor: '#202750',\r\n        color: '#FFF',\r\n        '&.Mui-disabled': {\r\n            color: '#AAA'\r\n        }\r\n    }\r\n}));\r\n\r\nconst EditBioButton = withStyles(() => ({\r\n    root: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        justifyItems: 'center',\r\n        padding: '0.8rem 1rem',\r\n        borderRadius: '0.8rem',\r\n        maxHeight: '46px',\r\n        textTransform: 'capitalize',\r\n        fontSize: '14px',\r\n        fontWeight: 600,\r\n        '&:hover': {\r\n            backgroundColor: '#24456680'\r\n        },\r\n        '&:disabled': {\r\n            backgroundColor: '#272D5780',\r\n            color: '#FFFFFF99',\r\n        },\r\n        '&#cover': {\r\n            backgroundColor: '#272D5780'\r\n        }\r\n    },\r\n\r\n}))(Button);\r\n\r\nconst QaplaChip = withStyles(() => ({\r\n    root: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFFA6',\r\n        minHeight: '41px',\r\n        borderRadius: '100rem',\r\n        padding: '1.2rem 0.4rem',\r\n        fontWeight: 600,\r\n        '&:focus': {\r\n            backgroundColor: '#4040FF4F',\r\n        },\r\n        '&:hover': {\r\n            backgroundColor: '#4040FF4F',\r\n            opacity: 0.8\r\n        }\r\n    },\r\n    deletable: {\r\n        backgroundColor: '#4040FF4F',\r\n        color: '#FFFFFFA6',\r\n        '&:focus': {\r\n            backgroundColor: '#4040FF4F',\r\n        },\r\n        '&:hover': {\r\n\r\n        }\r\n    },\r\n    deleteIcon: {\r\n        display: 'flex',\r\n        backgroundColor: '#FFFD',\r\n        borderRadius: '100px',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        '&:hover': {\r\n            backgroundColor: '#F00D'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#A00D'\r\n        }\r\n    }\r\n}))(Chip)\r\n\r\nconst QaplaSwitch = withStyles(() => ({\r\n    root: {\r\n\r\n    },\r\n    track: {\r\n        backgroundColor: '#202750'\r\n    },\r\n    checked: {\r\n        color: '#2CE9D2 !important',\r\n        '& + .MuiSwitch-track': {\r\n            backgroundColor: '#202750 !important'\r\n        }\r\n    },\r\n    thumb: {\r\n\r\n    }\r\n}))(Switch);\r\n\r\nconst QaplaTabs = withStyles({\r\n    root: {\r\n        minHeight: 0,\r\n        marginTop: '3rem'\r\n    },\r\n    indicator: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        backgroundColor: 'transparent',\r\n        '& > span': {\r\n            // maxWidth: 50,\r\n            width: '100%',\r\n            backgroundColor: '#0AFFD2',\r\n        },\r\n    },\r\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        padding: '0 0.6rem',\r\n        minWidth: 0,\r\n        minHeight: 0,\r\n        textTransform: 'none',\r\n        color: '#fff',\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        fontSize: theme.typography.pxToRem(15),\r\n        marginRight: theme.spacing(1),\r\n        '&:focus': {\r\n            opacity: 1,\r\n        },\r\n    },\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, className, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`profile-editor-tabpanel-${index}`}\r\n            aria-labelledby={`profile-editor-tab-${index}`}\r\n            {...other}\r\n            className={className}\r\n        >\r\n            {value === index && (\r\n                <>\r\n                    {children}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst StreamerProfileEditor = ({ user }) => {\r\n    const socialLinksInitialValue = [\r\n        {\r\n            socialPage: 'Twitch',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Twitter',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Instagram',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Discord',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Youtube',\r\n            value: ''\r\n        },\r\n        /* {\r\n            socialPage: 'TikTok',\r\n            value: ''\r\n        } */\r\n    ];\r\n\r\n    const socialLinksPlaceholders = {\r\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\r\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\r\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\r\n        Discord: `https://discord.gg/inviteCode`,\r\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`,\r\n        tiktok: `https://www.tiktok.com/@${user ? user.displayName : ''}`\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const [dataIsFetched, setDataIsFetched] = useState(false);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const [editingBio, setEditingBio] = useState(false);\r\n    const [addingTag, setAddingTag] = useState(false);\r\n    const [streamerBio, setStreamerBio] = useState('');\r\n    const [backgroundUrl, setBackgroundUrl] = useState('');\r\n    const [backgroundGradient, setBackgroundGradient] = useState(null);\r\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\r\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\r\n    const [streamerTags, setStreamerTags] = useState([]);\r\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\r\n    const [openTooltip, setOpenTooltip] = useState(false);\r\n    const [onBoardingDone, setOnBoardingDone] = useState(true);\r\n    const [onBoardingStep, setOnBoardingStep] = useState(0);\r\n    const [badge, setBadge] = useState(false);\r\n    const [chipHover, setChipHover] = useState({});\r\n    const { t } = useTranslation();\r\n    const twitchURL = `https://www.twitch.tv/${user && user.login ? user.login : ''}`;\r\n\r\n    useEffect(() => {\r\n        async function getStreamerInfo() {\r\n            listenStreamerPublicProfile(user.uid, async (info) => {\r\n                if (info.exists()) {\r\n                    const { bio, tags, backgroundUrl, backgroundGradient, badge } = info.val();\r\n                    if (!tags || tags.length < MIN_TAGS) {\r\n                        setOnBoardingDone(false);\r\n                        setOnBoardingStep(4);\r\n                    }\r\n\r\n                    if (!bio) {\r\n                        setOnBoardingDone(false);\r\n                        setOnBoardingStep(3);\r\n                    }\r\n                    setStreamerBio(bio || '');\r\n                    setBackgroundGradient(backgroundGradient);\r\n                    setBackgroundUrl(backgroundUrl);\r\n                    setStreamerTags(tags || []);\r\n                    setBadge(badge);\r\n                } else {\r\n                    setOnBoardingDone(false);\r\n                }\r\n\r\n                const links = await getStreamerLinks(user.uid);\r\n                if (links.exists()) {\r\n                    setSocialLinks(links.val());\r\n                } else {\r\n                    /**\r\n                     * Set Twitch Link by default (we already know this link)\r\n                     */\r\n                    const socialLinksWithTwitchAdded = socialLinksInitialValue;\r\n                    socialLinksWithTwitchAdded[0].value = twitchURL;\r\n\r\n                    setSocialLinks(socialLinksInitialValue);\r\n                }\r\n\r\n                setDataIsFetched(true);\r\n            });\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            getStreamerInfo();\r\n        }\r\n    }, [user]);\r\n\r\n    const onBoardingDoneByStreamer = async () => {\r\n        const min = 0;\r\n        const max = 4;\r\n        const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n        const backgroundSelected = PROFILE_BACKGROUND_GRADIENTS[randomIndex];\r\n        setBackgroundGradient(backgroundSelected);\r\n\r\n        await updateStreamerPublicProfile(user.uid, {\r\n            backgroundGradient: backgroundSelected,\r\n            displayName: user.displayName,\r\n            photoUrl: user.photoUrl\r\n        });\r\n\r\n        window.analytics.track('Public profile onboarding done', {\r\n            uid: user.uid,\r\n            timestamp: (new Date()).getTime()\r\n        });\r\n        setOnBoardingDone(true);\r\n    }\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue)\r\n    }\r\n\r\n    const handleTagDelete = async (indexToDelete) => {\r\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\r\n\r\n        try {\r\n            await updateStreamerPublicProfile(user.uid, { tags });\r\n            setStreamerTags(tags);\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(t('StreamerProfileEditor.errors.deleteTag'));\r\n        }\r\n    }\r\n\r\n    const updateSocialLinks = (value, index) => {\r\n        setSocialLinksChanged(true);\r\n        let newArray = [...socialLinks];\r\n        newArray[index] = {\r\n            ...newArray[index],\r\n            value\r\n        };\r\n\r\n        setSocialLinks(newArray);\r\n    }\r\n\r\n    const saveLinks = async () => {\r\n        // Creates an array without the placeholder value\r\n        const objectToSave = {};\r\n        socialLinks.forEach((link, index) => {\r\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\r\n        });\r\n\r\n        try {\r\n            await saveStreamerLinks(user.uid, objectToSave);\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(t('StreamerProfileEditor.errors.updateLinks'));\r\n        }\r\n        setSocialLinksChanged(false);\r\n    }\r\n\r\n    const addTag = async () => {\r\n        setOnBoardingStep(4);\r\n        setAddingTag(true);\r\n    }\r\n\r\n    const uploadBackgroundImage = (e) => {\r\n        if (e.target.files[0]) {\r\n            const newBackgroundImage = (e.target.files[0]);\r\n            uploadImage(\r\n                newBackgroundImage,\r\n                `/StreamersProfilesBackgroundImages/${user.uid}`,\r\n                (progressValue) => setUploadImageStatus(progressValue * 100),\r\n                (error) => { alert('Error al agregar imagen'); console.log(error); },\r\n                async (url) => {\r\n                    try {\r\n                        await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\r\n                        alert(t('StreamerProfileEditor.confirmations.saveImage'));\r\n                    } catch (error) {\r\n                        alert(t('StreamerProfileEditor.errors.saveImage'));\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            );\r\n\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () => {\r\n                setBackgroundUrl(reader.result);\r\n            });\r\n\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const copyTwitchURL = () => {\r\n        navigator.clipboard.writeText(twitchURL);\r\n        setOpenTooltip(true);\r\n        setTimeout(() => {\r\n            setOpenTooltip(false);\r\n        }, 1250);\r\n    }\r\n\r\n    const createLinearGradientCSS = () => {\r\n        if (backgroundGradient) {\r\n            let colorsString = '';\r\n            backgroundGradient.colors.forEach((color, index) => {\r\n                if (index !== backgroundGradient.colors.length - 1) {\r\n                    colorsString += `${color},`;\r\n                } else {\r\n                    colorsString += color;\r\n                }\r\n            });\r\n\r\n            return `linear-gradient(${backgroundGradient.angle}deg, ${colorsString})`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    const editBio = () => {\r\n        setOnBoardingStep(3);\r\n        setEditingBio(true);\r\n    }\r\n\r\n    const cancelEditing = () => {\r\n        setEditingBio(false);\r\n        setAddingTag(false);\r\n    }\r\n\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n        let source = result.source.index\r\n        let destination = result.destination.index\r\n\r\n        if (source === destination) {\r\n            return\r\n        }\r\n\r\n        const socialLinksCopy = [...socialLinks];\r\n        socialLinksCopy.splice(destination, 0, socialLinksCopy.splice(source, 1)[0]);\r\n\r\n        setSocialLinks(socialLinksCopy);\r\n        setSocialLinksChanged(true);\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\r\n            {dataIsFetched &&\r\n                <>\r\n                    {onBoardingDone && !editingBio && !addingTag ?\r\n                        <>\r\n                            <div className={styles.coverContainer}>\r\n                                {backgroundUrl ?\r\n                                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\r\n                                    :\r\n                                    <div className={styles.cover} style={{ background: createLinearGradientCSS() }} />\r\n                                }\r\n                            </div>\r\n                            <div className={styles.editCoverButtonContainer}>\r\n                                <input\r\n                                    accept='image/*'\r\n                                    style={{ display: 'none' }}\r\n                                    type='file'\r\n                                    id='image-input'\r\n                                    onChange={uploadBackgroundImage} />\r\n                                <label htmlFor='image-input'>\r\n                                    <EditBioButton id='cover' component='span'>\r\n                                        <CameraIcon />\r\n                                        <div style={{ width: '0.4rem' }} />\r\n                                        {t('StreamerProfileEditor.editCover')}\r\n                                    </EditBioButton>\r\n                                </label>\r\n                            </div>\r\n                            <div className={styles.profileContainer}>\r\n                                <div className={styles.profilePicContainer}>\r\n                                    <img src={user.photoUrl} alt='User pfp' className={styles.profilePic} />\r\n                                </div>\r\n                                <div className={styles.streamerNameAndEditBioButtonContainer}>\r\n                                    <div className={styles.streamerNameContainer}>\r\n                                        <p className={styles.streamerName}>\r\n                                            {user.displayName}\r\n                                        </p>\r\n                                        <div className={styles.founderBadgeContainer}>\r\n                                            {badge &&\r\n                                                <FounderBadge className={styles.founderBadge} />\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={styles.editBioButtonContainer}>\r\n                                        <EditBioButton variant='contained'\r\n                                            onClick={editBio}>\r\n                                            {!editingBio ?\r\n                                                <>\r\n                                                    <EditIcon />\r\n                                                    <div style={{ width: '0.4rem' }} />\r\n                                                    {t('StreamerProfileEditor.editBio')}\r\n                                                </>\r\n                                                :\r\n                                                t('StreamerProfileEditor.saveChanges')\r\n                                            }\r\n                                        </EditBioButton>\r\n                                    </div>\r\n                                </div>\r\n                                {/* <div className={styles.twitchURLContainer}>\r\n                                    <a href={twitchURL} target='_blank' rel='noreferrer' className={styles.twitchURL} >{twitchURL}</a>\r\n                                    <Tooltip placement='top' open={openTooltip} title='Copiado'>\r\n                                        <CopyIcon onClick={copyTwitchURL} />\r\n                                    </Tooltip>\r\n                                </div> */}\r\n                                <div className={styles.bioContainer}>\r\n                                    <p className={styles.bioText} onClick={editBio}>\r\n                                        {streamerBio}\r\n                                    </p>\r\n                                </div>\r\n                                <ul className={styles.tagsList}>\r\n                                    {streamerTags.map((data, index) => {\r\n                                        return (\r\n                                            <li key={`chip-${data}-${index}`} className={styles.tag}>\r\n                                                <QaplaChip\r\n                                                    label={data}\r\n                                                    onDelete={() => handleTagDelete(index)}\r\n                                                />\r\n                                            </li>\r\n                                        )\r\n                                    })}\r\n                                    <li key='new' className={styles.tag}>\r\n                                        <QaplaChip onClick={addTag}\r\n                                            label={t('StreamerProfileEditor.addTag')}\r\n                                        />\r\n                                    </li>\r\n                                </ul>\r\n                                <div className={styles.showNextStreamsContainer}>\r\n                                    <p className={styles.showNextStreamsText}>\r\n                                        {t('StreamerProfileEditor.showUpcomingStreams')}\r\n                                    </p>\r\n                                    <QaplaSwitch\r\n                                        name='showNextStreams'\r\n                                    /** ToDo: Show streams in profile. Also show twitch status (online or offline) <= more of this on cloud function */\r\n                                    />\r\n                                </div>\r\n                                <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\r\n                                    <QaplaTab wid label={t('StreamerProfileEditor.social')} {...a11yProps(0)} />\r\n                                    {/* <QaplaTab label='Códigos de creador' {...a11yProps(1)} /> */}\r\n                                </QaplaTabs>\r\n                                <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\r\n                                    <DragDropContext onDragEnd={onDragEnd}>\r\n                                        <Droppable droppableId='links-droppable'>\r\n                                            {(provided, snapshot) => (\r\n                                                <div style={{ width: '100%' }}\r\n                                                    {...provided.droppableProps}\r\n                                                    ref={provided.innerRef}\r\n                                                >\r\n                                                    {socialLinks.map((data, index) => (\r\n                                                        <Draggable key={`draggable-link-${index}`} draggableId={`draggable-link-${index}`} index={index}>\r\n                                                            {(provided, snapshot) => (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                >\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            flexDirection: 'row',\r\n                                                                            alignItems: 'center',\r\n                                                                            width: '100%'\r\n                                                                        }}>\r\n                                                                        <div style={{ display: 'flex', width: '100%' }}>\r\n                                                                            <StreamerTextInput\r\n                                                                                label={data.socialPage}\r\n                                                                                containerClassName={styles.socialLinkContainer}\r\n                                                                                labelClassName={styles.socialLinkLabel}\r\n                                                                                value={data.value}\r\n                                                                                disabled={data.socialPage.toLowerCase() === 'twitch'}\r\n                                                                                placeholder={socialLinksPlaceholders[data.socialPage]}\r\n                                                                                classes={{ input: classes.linkPlaceholder }}\r\n                                                                                textInputClassName={classes.linkInput}\r\n                                                                                fullWidth\r\n                                                                                onChange={(e) => updateSocialLinks(e.target.value, index)}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                        <div style={{\r\n                                                                            display: 'flex',\r\n                                                                            backgroundColor: '#141833',\r\n                                                                            width: '30px',\r\n                                                                            minWidth: '30px',\r\n                                                                            height: '45px',\r\n                                                                            marginBottom: '12px',\r\n                                                                            alignSelf: 'flex-end',\r\n                                                                            borderRadius: '8px'\r\n\r\n                                                                        }} >\r\n                                                                            <div style={{\r\n                                                                                display: 'flex',\r\n                                                                                flex: 1,\r\n                                                                                padding: '14px 10px',\r\n                                                                            }}>\r\n                                                                                <div style={{\r\n                                                                                    display: 'flex',\r\n                                                                                    flex: 1,\r\n                                                                                    flexDirection: 'column',\r\n                                                                                    justifyContent: 'space-between',\r\n                                                                                }}>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                </div>\r\n\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </Draggable>\r\n                                                    ))}\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </DragDropContext>\r\n                                    <br />\r\n                                    {socialLinksChanged &&\r\n                                        <ContainedButton onClick={saveLinks}>\r\n                                            {t('StreamerProfileEditor.saveChanges')}\r\n                                        </ContainedButton>\r\n                                    }\r\n                                </TabPanel>\r\n                                <TabPanel value={selectedTab} index={1}>\r\n                                    <p>b</p>\r\n                                </TabPanel>\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <StreamerProfileEditorOnBoarding step={onBoardingStep}\r\n                            user={user}\r\n                            onBoardingDone={onBoardingDoneByStreamer}\r\n                            showOnlySpecificStep={editingBio || addingTag}\r\n                            streamerBio={streamerBio}\r\n                            streamerTags={streamerTags}\r\n                            closeOnBoarding={cancelEditing} />\r\n                    }\r\n                </>\r\n            }\r\n        </StreamerDashboardContainer>\r\n    )\r\n}\r\n\r\nexport default StreamerProfileEditor;",["284","285"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx",["286","287"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Button, Card, CardContent, Grid, makeStyles } from '@material-ui/core';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as ESvg } from './../../assets/e.svg';\r\nimport HeartHands from './../../assets/HeartHands.png';\r\nimport { getSubscriptionPurchaseDetails } from '../../services/database';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        height: '100vh'\r\n    },\r\n    paymentInfoContainer: {\r\n        paddingLeft: 32,\r\n        paddingRight: 64,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    },\r\n    eImageContainer: {\r\n        display: 'flex',\r\n        width: 80,\r\n        height: 80,\r\n        borderRadius: 20,\r\n        backgroundColor: '#141833',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    subscriptionBought: {\r\n        marginTop: 48,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    subTerms: {\r\n        marginTop: 10,\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center'\r\n    },\r\n    totalPaid: {\r\n        fontSize: 48,\r\n        fontWeight: '600',\r\n        color: 'rgba(255, 255, 255, .9)'\r\n    },\r\n    interval: {\r\n        marginLeft: 6,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    paymentDetails: {\r\n        marginTop: 48,\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    subscriptionType: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentInterval: {\r\n        marginTop: 8,\r\n        fontSize: 14,\r\n        fontWeight: '400',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    },\r\n    itemCost: {\r\n        fontSize: 18,\r\n        fontWeight: '500',\r\n        color: '#FFF'\r\n    },\r\n    paymentUntilTodayContainer: {\r\n        marginTop: 56,\r\n        color: '#FFF',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    paymentUntilToday: {\r\n        fontSize: 24,\r\n        fontWeight: '500'\r\n    },\r\n    thanksCardContainer: {\r\n        width: '450px',\r\n        background: 'linear-gradient(128.22deg, #5600E1 23.87%, #B518FF 87.87%), rgba(3, 7, 34, 0.95)',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    thanksCard: {\r\n        backgroundColor: '#141833',\r\n        display: 'inline-block',\r\n        color: '#FFF',\r\n        maxWidth: '80%',\r\n        borderRadius: 35\r\n    },\r\n    cardContentContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        paddingLeft: 30,\r\n        paddingRight: 30\r\n    },\r\n    thanksTitle: {\r\n        marginTop: 8,\r\n        fontSize: 18,\r\n        fontWeight: '700',\r\n        textAlign: 'center'\r\n    },\r\n    thanksDescription: {\r\n        marginTop: 24,\r\n        fontSize: 14,\r\n        fontWeight: '500',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        marginRight: 48,\r\n        marginLeft: 48\r\n    },\r\n    publishButton: {\r\n        marginTop: 64,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        backgroundColor: '#0AFFD2',\r\n        borderRadius: 10,\r\n        color: '#4E2D92',\r\n        fontSize: 16,\r\n        fontWeight: '700',\r\n        paddingTop: 19,\r\n        paddingBottom: 19,\r\n        '&:hover': {\r\n            backgroundColor: '#0AFFD2',\r\n            opacity: '.95'\r\n        }\r\n    },\r\n    backToDashboardButton: {\r\n        marginTop: 16,\r\n        marginBottom: 16,\r\n        fontSize: 16,\r\n        fontWeight: '500',\r\n        color: 'rgba(255, 255, 255, .6)'\r\n    }\r\n}));\r\n\r\nfunction useQuery() {\r\n    const { search } = useLocation();\r\n\r\n    return useMemo(() => new URLSearchParams(search), [search]);\r\n}\r\n\r\nconst ChargeConfirmationPage = ({ user }) => {\r\n    const [totalPaid, setTotalPaid] = useState(0);\r\n    const [interval, setInterval] = useState('');\r\n    const [intervalText, setIntervalText] = useState('');\r\n    const [plan, setPlan] = useState('');\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const query = useQuery();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getDetails() {\r\n            const id = query.get('subscriptionId');\r\n            const details = await getSubscriptionPurchaseDetails(user.uid, id);\r\n            setTotalPaid(details.val().totalPaid);\r\n\r\n            setPlan(details.val().plan[0].toUpperCase() + details.val().plan.substring(1));\r\n\r\n            setIntervalText(details.val().interval);\r\n\r\n            setInterval(t(`ChargeConfirmationPage.intervals.${details.val().interval}`));\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            getDetails();\r\n        }\r\n    }, [user]);\r\n\r\n    const onPublishStreamClick = () => {\r\n        history.push('/create');\r\n    }\r\n\r\n    const onBackToDashboardClick = () => {\r\n        history.push('/profile');\r\n    }\r\n\r\n    return (\r\n        <Grid container alignContent='center' className={classes.container}>\r\n            <Grid item md={6} className={classes.paymentInfoContainer}>\r\n                <div className={classes.eImageContainer}>\r\n                    <ESvg />\r\n                </div>\r\n                <p className={classes.subscriptionBought}>\r\n                    {plan && intervalText &&\r\n                        `Sub ${plan} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                    }\r\n                </p>\r\n                <div className={classes.subTerms}>\r\n                    <p className={classes.totalPaid}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                    <p className={classes.interval}>\r\n                        {interval}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentDetails}>\r\n                    <div>\r\n                        <p className={classes.subscriptionType}>\r\n                            {plan}\r\n                        </p>\r\n                        <p className={classes.paymentInterval}>\r\n                            {intervalText &&\r\n                                `${t('ChargeConfirmationPage.payment')} ${t(`ChargeConfirmationPage.plansPeriods.${intervalText}`)}`\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                    <p className={classes.itemCost}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n                <div className={classes.paymentUntilTodayContainer}>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        {t(`ChargeConfirmationPage.fullPaymentUntilToday`)}\r\n                    </p>\r\n                    <p className={classes.paymentUntilToday}>\r\n                        ${(totalPaid).toFixed(2)}\r\n                    </p>\r\n                </div>\r\n            </Grid>\r\n            <Grid item md={6} className={classes.thanksCardContainer}>\r\n                <Card className={classes.thanksCard}>\r\n                    <div className={classes.cardContentContainer}>\r\n                        <img src={HeartHands} />\r\n                        <CardContent>\r\n                            <p className={classes.thanksTitle}>\r\n                                {t('ChargeConfirmationPage.thanksForSubscribing')}\r\n                            </p>\r\n                            <p className={classes.thanksDescription}>\r\n                                {t('ChargeConfirmationPage.paymentProcessedSuccessfuly')}\r\n                            </p>\r\n                        </CardContent>\r\n                        <Button fullWidth variant='contained'\r\n                            className={classes.publishButton}\r\n                            onClick={onPublishStreamClick}>\r\n                            {t('ChargeConfirmationPage.publishStream')}\r\n                        </Button>\r\n                        <Button className={classes.backToDashboardButton}\r\n                            onClick={onBackToDashboardClick}>\r\n                            {t('ChargeConfirmationPage.backToDashboard')}\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ChargeConfirmationPage;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\functions.js",[],["288","289"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\twitch.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerDashboardContainer\\StreamerDashboardContainer.jsx",["290","291","292","293","294"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx",[],["295","296"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx",["297","298"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, CircularProgress, makeStyles } from \"@material-ui/core\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Modal } from \"@material-ui/core\";\r\n\r\nimport iconEdit from \"../../assets/Edit.svg\";\r\nimport { getCustomReward, updateCustomReward } from \"../../services/twitch\";\r\nimport { getInteractionsRewardData, setAlertSetting, updateStreamerProfile } from \"../../services/database\";\r\nimport { refreshUserAccessToken } from \"../../services/functions\";\r\nimport { auth } from \"../../services/firebase\";\r\nimport { ReactComponent as ConfirmChange } from './../../assets/ConfirmChange.svg';\r\nimport StreamerProfileModalDisableInteractions from \"../StreamerProfileModalDisableInteractions/StreamerProfileModalDisableInteractions\";\r\nimport StreamerProfileImgCoin from '../StreamerProfileImgCoin/StreamerProfileImgCoin';\r\nimport style from \"./StreamerProfileEditCoin.module.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    circularProgress: {\r\n        color: '#0AFFD2',\r\n        alignSelf: 'center'\r\n    }\r\n}));\r\n\r\n\r\nconst StreamerProfileEditCoin = ({ user }) => {\r\n    const [ActiveEditTitle, setActiveEditTitle] = useState(false);\r\n    const [ActiveEditCoins, setActiveEditCoins] = useState(false);\r\n    const [rewardId, setRewardId] = useState('');\r\n    const [rewardName, setRewardName] = useState('');\r\n    const [rewardCost, setRewardCost] = useState('');\r\n    const [savingChanges, setSavingChanges] = useState(false);\r\n    const [rewardBackgroundColor, setRewardBackgroundColor] = useState('');\r\n    const [modal, setModal] = useState(false);\r\n    const [titleCheckbox, setTitleCheckbox] = useState('');\r\n    const [reactionsEnabled, setReactionsEnabled] = useState(true);\r\n    const [qoinsReaction, setQoinsReaction] = useState(false);\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        async function getRewardData() {\r\n            try {\r\n                const rewardData = await getInteractionsRewardData(user.uid);\r\n                if (rewardData.exists()) {\r\n                    const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\r\n                    if (userTokensUpdated.data.status === 200) {\r\n                        const userCredentialsUpdated = userTokensUpdated.data;\r\n                        updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\r\n                        const reward = await getCustomReward(rewardData.val().rewardId, user.id, userCredentialsUpdated.access_token);\r\n                        if (reward && reward.id) {\r\n                            setRewardName(reward.title);\r\n                            setRewardCost(reward.cost);\r\n                            setRewardBackgroundColor(reward.background_color);\r\n                            setReactionsEnabled(!reward.is_paused);\r\n                            setTitleCheckbox(t(!reward.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'));\r\n                            setRewardId(reward.id);\r\n                        } else if (reward === 404) {\r\n                            history.push('/onboarding');\r\n                        }\r\n                    }\r\n                } else {\r\n                    // history.push('/onboarding');\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        if (user.uid) {\r\n            getRewardData();\r\n        }\r\n    }, [user.uid, user.id, user.refreshToken]);\r\n\r\n    const saveData = async (event) => {\r\n        if (event.key === 'Enter' || event.type === 'click') {\r\n            setSavingChanges(true);\r\n            const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\r\n\r\n            if (userTokensUpdated.data.status === 200) {\r\n                const userCredentialsUpdated = userTokensUpdated.data;\r\n                updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\r\n                const rewardUpdated = await updateCustomReward(\r\n                    user.id,\r\n                    userCredentialsUpdated.access_token,\r\n                    rewardId,\r\n                    {\r\n                        title: rewardName,\r\n                        cost: rewardCost\r\n                    }\r\n                );\r\n\r\n                if (rewardUpdated.status === 200) {\r\n                    setRewardName(rewardUpdated.title);\r\n                    setRewardCost(rewardUpdated.cost);\r\n                    setRewardBackgroundColor(rewardUpdated.background_color);\r\n                    setActiveEditCoins(false);\r\n                    setActiveEditTitle(false);\r\n                } else {\r\n                    switch (rewardUpdated.status) {\r\n                        case 404:\r\n                            // Not found (maybe the reward was removed from Twitch)\r\n                            break;\r\n                        case 500:\r\n                            // Twitch internal server error (could not update because of Twitch)\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                setSavingChanges(false);\r\n            } else {\r\n                switch (userTokensUpdated.data.status) {\r\n                    case 401:\r\n                        // Invalid refresh token (need to sign in again)\r\n                        handleExpiredSession();\r\n                        break;\r\n                    case 500:\r\n                        // Twitch internal server error\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const handleCheckbox = (e) => {\r\n        if (!e.target.checked) {\r\n            const dontShowDialog = localStorage.getItem('dontShowCloseDisableReactionsDialog');\r\n            if (!dontShowDialog) {\r\n                setModal(true);\r\n            } else {\r\n                toggleReward();\r\n            }\r\n        } else {\r\n            setTitleCheckbox(t('StreamerProfile.StreamerProfileEditCoin.enabled'));\r\n            toggleReward();\r\n        }\r\n    }\r\n    const handleQoinsReactions = (e) => {\r\n        if(!e.target.checked){\r\n            setQoinsReaction(false)\r\n        }\r\n        else{\r\n            setQoinsReaction(true)\r\n        }\r\n       \r\n    }\r\n\r\n    const toggleReward = async () => {\r\n        setSavingChanges(true);\r\n        const userTokensUpdated = await refreshUserAccessToken(user.refreshToken);\r\n\r\n        if (userTokensUpdated.data.status === 200) {\r\n            const userCredentialsUpdated = userTokensUpdated.data;\r\n            updateStreamerProfile(user.uid, { twitchAccessToken: userCredentialsUpdated.access_token, refreshToken: userCredentialsUpdated.refresh_token });\r\n            const rewardUpdated = await updateCustomReward(\r\n                user.id,\r\n                userCredentialsUpdated.access_token,\r\n                rewardId,\r\n                {\r\n                    is_paused: reactionsEnabled\r\n                }\r\n            );\r\n\r\n            if (rewardUpdated.status === 200) {\r\n                setAlertSetting(user.uid, 'reactionsEnabled', !rewardUpdated.is_paused);\r\n                setReactionsEnabled(!rewardUpdated.is_paused);\r\n                setTitleCheckbox(t(!rewardUpdated.is_paused ? 'StreamerProfile.StreamerProfileEditCoin.enabled' : 'StreamerProfile.StreamerProfileEditCoin.disabled'))\r\n            } else {\r\n                switch (rewardUpdated.status) {\r\n                    case 404:\r\n                        // Not found (maybe the reward was removed from Twitch)\r\n                        break;\r\n                    case 500:\r\n                        // Twitch internal server error (could not update because of Twitch)\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n\r\n            setSavingChanges(false);\r\n        } else {\r\n            switch (userTokensUpdated.data.status) {\r\n                case 401:\r\n                    // Invalid refresh token (need to sign in again)\r\n                    handleExpiredSession();\r\n                    break;\r\n                case 500:\r\n                    // Twitch internal server error\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.containerItereractions}>\r\n            <h1 className={style.Titulo}>\r\n                {t('StreamerProfile.StreamerProfileEditCoin.reactions')}\r\n            </h1>\r\n            {rewardId == '' && !savingChanges ?\r\n                <>\r\n                <StreamerProfileImgCoin rewardCost={rewardCost} backgroundColor={rewardBackgroundColor} />\r\n                <div className={style.content_input}>\r\n                    <div className={style.input}>\r\n                        {ActiveEditTitle ?\r\n                            <>\r\n                            <input\r\n                                className={style.Visibility_input}\r\n                                type=\"text\"\r\n                                maxLength={18}\r\n                                autoFocus\r\n                                value={rewardName}\r\n                                onChange={(event) => setRewardName(event.target.value)}\r\n                                onKeyPress={saveData} />\r\n                            <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                <ConfirmChange />\r\n                            </Button>\r\n                            </>\r\n                            :\r\n                            <>\r\n                            <p className={style.p}>\r\n                                {rewardName}\r\n                            </p>\r\n                            <Button onClick={() => setActiveEditTitle(!ActiveEditTitle)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                <img src={iconEdit} alt=\"icons-edit\" />\r\n                            </Button>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                    <div className={style.input}>\r\n                        {ActiveEditCoins ?\r\n                            <>\r\n                            <input\r\n                                className={style.Visibility_input}\r\n                                type=\"number\"\r\n                                autoFocus\r\n                                value={rewardCost}\r\n                                onChange={(event) => setRewardCost(event.target.value || 0)}\r\n                                onKeyPress={saveData} />\r\n                                <Button onClick={saveData} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                    <ConfirmChange />\r\n                                </Button>\r\n                            </>\r\n                            :\r\n                            <>\r\n                            <p className={style.p}>\r\n                                {rewardCost.toLocaleString()}\r\n                            </p>\r\n                            <Button onClick={() => setActiveEditCoins(!ActiveEditCoins)} style={{ justifyContent: 'flex-end', padding: '6px 0px' }}>\r\n                                <img src={iconEdit} alt=\"icons-edit\" />\r\n                            </Button>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                    <div className={style.disableInteractions}>\r\n                        <p className={style.p}>{t('StreamerProfile.StreamerProfileEditCoin.reactions')} {titleCheckbox}</p>\r\n                        <input\r\n                            className={style.input_checkbox}\r\n                            type=\"checkbox\"\r\n                            id=\"boton\"\r\n                            checked={reactionsEnabled}\r\n                            onChange={(e) => handleCheckbox(e)}\r\n                        />\r\n                        <label for=\"boton\"></label>\r\n                    </div>\r\n                    <div className={style.onlyQoinsReaction}> \r\n                        <p className={style.p}>Only Qoins Reactions</p>\r\n                        <input\r\n                            className={style.input_checkbox}\r\n                            type=\"checkbox\" \r\n                            id=\"switch\"\r\n                            checked={qoinsReaction}\r\n                            onChange={(e)=>handleQoinsReactions(e)}/>\r\n                            <label for=\"switch\"></label>\r\n                    </div>\r\n                </div>\r\n                </>\r\n            :\r\n                <div style={{ display: 'flex', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n                    <CircularProgress className={classes.circularProgress} size={25} />\r\n                </div>\r\n            }\r\n            <Modal className={style.modalContainer}\r\n                open={modal}\r\n                onClose={() => setModal(false)}>\r\n                <StreamerProfileModalDisableInteractions closeDialog={() => setModal(false)}\r\n                    disableReward={toggleReward}\r\n                    setReactionsEnabled={setReactionsEnabled}\r\n                    setTitleCheckbox={setTitleCheckbox} />\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StreamerProfileEditCoin;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",["299"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport { ReactComponent as TimerIcon } from './../../assets/Timer.svg';\r\nimport {\r\n    streamsPlaceholderImages,\r\n    SCHEDULED_EVENT_TYPE,\r\n    PAST_STREAMS_EVENT_TYPE,\r\n    PENDING_APPROVAL_EVENT_TYPE,\r\n    HOUR_IN_MILISECONDS\r\n} from '../../utilities/Constants';\r\nimport {\r\n    cancelStreamRequest,\r\n    getStreamTitle,\r\n    getPastStreamTitle,\r\n    checkActiveCustomReward,\r\n    listenToQoinsEnabled,\r\n    removeQoinsEnabledListener\r\n} from '../../services/database';\r\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\r\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\r\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\r\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\r\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\r\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\r\nimport { auth } from '../../services/firebase';\r\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\r\nimport { sendCustomMessage } from '../../services/functions';\r\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    eventCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '1.5rem',\r\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\r\n        height: '100%',\r\n        minWidth: '250px',\r\n        minHeight: '360px',\r\n    },\r\n    relativeContainer: {\r\n        position: 'relative'\r\n    },\r\n    hourContainer: {\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        top: '1rem',\r\n        background: '#1B1D2159',\r\n        borderRadius: '.5rem'\r\n    },\r\n    hourText: {\r\n        color: '#FFF',\r\n        padding: '2px 8px',\r\n        fontSize: '11px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        letterSpacing: '-0.5px',\r\n        textAlign: 'center'\r\n\r\n    },\r\n    dateContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        bottom: '1rem',\r\n        padding: '2px 10px',\r\n        background: '#1B1D21',\r\n        height: '32px',\r\n        borderRadius: '10px'\r\n    },\r\n    dateText: {\r\n        color: '#FFF',\r\n        fontSize: '13px',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        marginLeft: '10px'\r\n    },\r\n    eventImage: {\r\n        objectFit: 'cover',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        borderRadius: '24px'\r\n    },\r\n    eventCardContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '24px 16px',\r\n        height: '100%'\r\n    },\r\n    eventCardTitle: {\r\n        color: '#FFFFFF',\r\n        fontSize: '16px',\r\n        lineHeight: '24px',\r\n        fontWeight: '500',\r\n        height: '48px',\r\n\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    circle: {\r\n        borderRadius: '100%',\r\n        height: '.55rem',\r\n        width: '.55rem',\r\n        marginRight: '.5rem'\r\n    },\r\n    participantsNumber: {\r\n        fontSize: '12px',\r\n        textAlign: 'right',\r\n        lineHeight: '16px'\r\n    },\r\n    streamButton: {\r\n        backgroundColor: '#6C5DD3 !important',\r\n        color: '#FFF'\r\n    },\r\n    buttonsContainer: {\r\n        marginTop: 'auto'\r\n    },\r\n    startButton: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#0D1021',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    endButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#FFF',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    manageButton: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none'\r\n    }\r\n}));\r\n\r\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\r\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\r\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [stream, setStream] = useState(null);\r\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\r\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\r\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\r\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\r\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\r\n    const [startingStream, setStartingStream] = useState(false);\r\n    const [closingStream, setClosingStream] = useState(false);\r\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\r\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\r\n    const [loadingDots, setLoadingDots] = useState('');\r\n    const [hideStream, setHideStream] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getParticipantsNumber() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                /* const participants = await getStreamParticipantsNumber(streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getStreamTitle(streamId);\r\n                if (title.exists()) {\r\n                    setTitle(title.val());\r\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getPastStreamTitle(user.uid, streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\r\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            }\r\n        }\r\n\r\n        async function checkStreamStatus() {\r\n            const streamStatus = await checkActiveCustomReward(streamId);\r\n            if (streamStatus.exists()) {\r\n                if (streamStatus.val().enableIn && !streamStatus.val().qoinsEnabled) {\r\n                    listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                        if (qoinsEnabled.val()) {\r\n                            setStream({\r\n                                ...{ key: streamStatus.key, ...streamStatus.val() },\r\n                                qoinsEnabled: qoinsEnabled.val()\r\n                            });\r\n\r\n                            removeQoinsEnabledListener(streamId);\r\n                        } else {\r\n                            setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                        }\r\n                    });\r\n                } else {\r\n                    setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                }\r\n\r\n                setShowRewardsOptions(true);\r\n                setHideStream(false);\r\n            } else {\r\n                setStream(null);\r\n            }\r\n        }\r\n\r\n\r\n        getParticipantsNumber();\r\n        checkStreamStatus();\r\n\r\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\r\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\r\n            const currentTimestamp = (new Date()).getTime();\r\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\r\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\r\n                    setHideStream(true);\r\n                } else {\r\n                    setShowRewardsOptions(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startingStream) {\r\n            setTimeout(() => {\r\n                if (loadingDots.length > 2) {\r\n                    setLoadingDots('');\r\n                } else {\r\n                    setLoadingDots(loadingDots + '.');\r\n                }\r\n            }, 500);\r\n        } else if (loadingDots !== '') {\r\n            setLoadingDots('');\r\n        }\r\n\r\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\r\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\r\n\r\n    const cancelStream = (e) => {\r\n        e.stopPropagation();\r\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\r\n            cancelStreamRequest(user.uid, streamId);\r\n            onRemoveStream(streamId);\r\n        }\r\n    }\r\n\r\n    const startStream = async (enableIn) => {\r\n        try {\r\n            setStartingStream(true);\r\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream, enableIn);\r\n\r\n            if (enableIn) {\r\n                listenToQoinsEnabled(streamId, (qoinsEnabled) => {\r\n                    if (qoinsEnabled.val()) {\r\n                        setStream({\r\n                            ...stream,\r\n                            qoinsEnabled: qoinsEnabled.val()\r\n                        });\r\n\r\n                        removeQoinsEnabledListener(streamId);\r\n                    }\r\n                });\r\n            }\r\n\r\n            window.analytics.track('Stream started', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream(streamData);\r\n            if (!openStreamDialog) {\r\n                setOpenStreamStartedDialog(true);\r\n            }\r\n            setStartingStream(false);\r\n\r\n            return streamData;\r\n        } catch (error) {\r\n            if (error && error.status === 401) {\r\n                handleExpiredSession();\r\n            } else {\r\n                alert('Hubo un problema al iniciar, si el problema persiste contacta con soporte tecnico');\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setClosingStream(true);\r\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward, stream.qoinsRewardWebhookId);\r\n\r\n            window.analytics.track('Stream finished', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setOpenRewardsRemovedDialog(true);\r\n\r\n            // Close the rest of Dialogs just in case\r\n            setOpenStreamStartedDialog(false);\r\n            setOpenQoinsWarningDialog(false);\r\n            setOpenStreamDialog(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (stream.qoinsEnabled) {\r\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\r\n            if (dontShowCloseStreamWarning) {\r\n                closeStream();\r\n            } else {\r\n                setOpenEndStreamDialog(true);\r\n            }\r\n        } else {\r\n            setOpenQoinsWarningDialog(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * When reward created inmediately from modal stream can be undefined and give problems for that case we\r\n     * have streamObject as parameter with a default value of stream state\r\n     */\r\n    const enableQoinsReward = async (streamObject = stream) => {\r\n        try {\r\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, streamObject.qoinsReward);\r\n\r\n            window.analytics.track('Qoins enabled', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream({ ...streamObject, qoinsEnabled: true });\r\n        } catch (error) {\r\n            console.log(error);\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\r\n\r\n    const closeDialogsAndOpenManageRewardsDialog = () => {\r\n        setOpenStreamStartedDialog(false);\r\n        setOpenQoinsWarningDialog(false);\r\n        setOpenStreamDialog(true);\r\n    }\r\n\r\n    const closeAndRemoveStream = () => {\r\n        setOpenRewardsRemovedDialog(false);\r\n        onRemoveStream(streamId);\r\n    }\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message) {\r\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\r\n\r\n            window.analytics.track('Custom Message sent', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime(),\r\n                message\r\n            });\r\n            setOpenCustomMessageSentDialog(true);\r\n        }\r\n    }\r\n\r\n    const shareStreamLink = async () => {\r\n        const link = await generateStreamDynamicLink(streamId, {\r\n            title: title && title['en'] ? title['en'] : '',\r\n            description: `Evento de ${user.displayName}`,\r\n            image: image ? image : ''\r\n        });\r\n\r\n        // This does not work on Safari for some reason\r\n        if (link) {\r\n            navigator.clipboard.writeText(link);\r\n        }\r\n    }\r\n\r\n    if (game && !hideStream) {\r\n        return (\r\n            <Card className={classes.eventCard} style={style}>\r\n                <div className={classes.relativeContainer}>\r\n                    <div className={classes.hourContainer}>\r\n                        <p className={classes.hourText}>\r\n                            {hour}\r\n                        </p>\r\n                    </div>\r\n                    <div className={classes.dateContainer}>\r\n                        <CalendarIcon />\r\n                        <p className={classes.dateText}>\r\n                            {date}\r\n                        </p>\r\n                    </div>\r\n                    <img\r\n                        alt='Game'\r\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\r\n                        width='100%'\r\n                        height='180'\r\n                        className={classes.eventImage} />\r\n                </div>\r\n                <div className={classes.eventCardContent}>\r\n                    <p className={classes.eventCardTitle}>\r\n                        {title && title['en'] ? title['en'] : ''}\r\n                    </p>\r\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\r\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\r\n                            <div style={{\r\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\r\n                                width: '8px',\r\n                                height: '8px',\r\n                                borderRadius: '50%'\r\n                            }} />\r\n                            <div style={{ width: '6px' }} />\r\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\r\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                    <div className={classes.buttonsContainer}>\r\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\r\n                            (!startingStream ?\r\n                                (stream ?\r\n                                    (!closingStream && stream.qoinsEnabled ?\r\n                                        <Button size='medium' className={classes.endButton}\r\n                                            disabled={closingStream}\r\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\r\n                                            {t('StreamCard.end')}\r\n                                        </Button>\r\n                                        :\r\n                                        <p style={{ color: '#FFF', textAlign: 'center' }}>\r\n                                            {t('StreamCard.dropsScheduled')}\r\n                                        </p>\r\n                                    )\r\n                                    :\r\n                                    <Button size='medium' className={classes.startButton}\r\n                                        startIcon={<TimerIcon />}\r\n                                        onClick={() => setOpenStreamDialog(true)}>\r\n                                        {t('StreamCard.enableDrops')}\r\n                                    </Button>\r\n                                )\r\n                                :\r\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\r\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\r\n                                </p>\r\n                            )\r\n                        }\r\n                        <div style={{ height: '11px' }} />\r\n                        {streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={manageStream}>\r\n                                {t('StreamCard.manageStream')}\r\n                            </Button>\r\n                        }\r\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\r\n                                {t('StreamCard.cancelStreamRequest')}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <EventManagementDialog open={openStreamDialog}\r\n                    user={user}\r\n                    sendMessage={sendMessage}\r\n                    streamId={streamId}\r\n                    stream={stream}\r\n                    streamStarted={startingStream}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenStreamDialog(false)}\r\n                    startStream={startStream}\r\n                    enableQoins={enableQoinsReward}\r\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\r\n                    streamTitle={title && title['en'] ? title['en'] : ''}\r\n                    date={date}\r\n                    hour={hour} />\r\n                <EventConfirmStartDialog open={openStreamStartedDialog}\r\n                    onClose={() => setOpenStreamStartedDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\r\n                    onClose={() => setOpenQoinsWarningDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenEndStreamDialog(false)}\r\n                    closeStream={closeStream} />\r\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\r\n                    onClose={closeAndRemoveStream}  />\r\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\r\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamCard;",["300","301"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\streamQapla.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx",["302"],"import React from 'react';\r\nimport { withStyles, Tab } from '@material-ui/core';\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(4),\r\n        fontSize: 18,\r\n        '&:hover': {\r\n            color: '#FFF',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#FFF',\r\n            fontWeight: '500',\r\n        },\r\n        '&:focus': {\r\n            color: '#FFF',\r\n        },\r\n    },\r\n    selected: {},\r\n}))((props) => <Tab {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nexport default (props) => <QaplaTab {...props} />;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTabs.jsx",["303"],"import React from 'react';\r\nimport { withStyles, Tabs } from '@material-ui/core';\r\n\r\nconst QaplaTabs = withStyles((theme) => ({\r\n    root: {\r\n        borderBottom: 'transparent',\r\n        [theme.breakpoints.down('md')]: {\r\n            paddingLeft: 45\r\n        }\r\n    },\r\n    indicator: {\r\n        backgroundColor: '#0AFFD2',\r\n    }\r\n}))(Tabs);\r\n\r\nexport default (props) => <QaplaTabs {...props} />;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],["304","305"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ModalQoinsDrops\\ModalQoinsDrops.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\OnBoarding\\OnBoarding.jsx",["306","307"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, Button, Checkbox } from \"@material-ui/core\";\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport styles from './OnBoarding.module.css';\r\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { createInteractionsReward } from \"../../services/interactionsQapla\";\r\nimport { writeTestCheer } from \"../../services/database\";\r\nimport { CHEERS_URI } from \"../../utilities/Constants\";\r\nimport { notifyBugToDevelopTeam } from \"../../services/discord\";\r\n\r\nimport { ReactComponent as Unchecked } from './../../assets/Unchecked.svg';\r\nimport { ReactComponent as Checked } from './../../assets/Checked.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#141833',\r\n        width: '390px',\r\n        height: '60px',\r\n        fontSize: '16px',\r\n        fontWeight: '600',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        textTransform: 'none',\r\n        borderRadius: '16px',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n    },\r\n    copyOverlayLinkButton: {\r\n        backgroundColor: '#202750',\r\n        display: 'flex',\r\n        marginTop: '32px',\r\n        borderRadius: '8px',\r\n        width: '346px',\r\n        height: '45px',\r\n        alignItems: 'center',\r\n        padding: '0',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#202750'\r\n        },\r\n    },\r\n    testButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#fff',\r\n        width: '346px',\r\n        height: '60px',\r\n        fontsize: '16px',\r\n        fontWeight: '600',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        textTransform: 'none',\r\n        borderRadius: '16px',\r\n        '&:hover': {\r\n            backgroundColor: '#2E3BC9'\r\n        },\r\n    },\r\n}));\r\n\r\nconst OnBoarding = ({ user }) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [step, setStep] = useState(0);\r\n    const [channelPointsRewardCost, setChannelPointsRewardCost] = useState(2000);\r\n    const [errorCode, setErrorCode] = useState(0);\r\n    const [overlayLinkCopied, setOverlayLinkCopied] = useState(false);\r\n    const [streamerOverlayLink, setStreamerOverlayLink] = useState(CHEERS_URI);\r\n    const [stepIndicator, setStepIndicator] = useState(0);\r\n    const [acceptPolicies, setAcceptPolicies] = useState(true);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (user && user.id) {\r\n            setStreamerOverlayLink(`${CHEERS_URI}/${user.id}`);\r\n        }\r\n    }, [user]);\r\n\r\n    const handleMainButton = () => {\r\n        if (step === -1) {\r\n            return openDiscordSupport();\r\n        }\r\n        if (step === 0) { // Welcome\r\n            setStepIndicator(1);\r\n        }\r\n        if (step === 1) { // Set channel points cost and create reward\r\n            return createChannelPointsRewards();\r\n        }\r\n        if (step === 3) {\r\n            setStepIndicator(2);\r\n        }\r\n        if (step === 5) {\r\n            return history.push('/profile');\r\n        }\r\n\r\n        setStep(step + 1);\r\n    }\r\n\r\n    const openDiscordSupport = () => {\r\n        window.open('https://discord.gg/2UMQ6ZXPkq', '_blank');\r\n    }\r\n\r\n    const createChannelPointsRewards = async () => {\r\n        setStep(step + 1);\r\n\r\n        const result = await createInteractionsReward(user.uid, user.id, user.refreshToken, 'Qapla Reaction', channelPointsRewardCost);\r\n        if (result.reward.status === 200) {\r\n            if (result.webhookSubscription) {\r\n                onSuccessfullChannelPointsCreation();\r\n            } else {\r\n                notifyBugToDevelopTeam(`${user.uid} Reward webhook creation error`);\r\n                onErrorChannelPointsCreation(500);\r\n            }\r\n        } else {\r\n            notifyBugToDevelopTeam(`${user.uid} Reactions reward creation error: ` + JSON.stringify(result.reward));\r\n            onErrorChannelPointsCreation(result.reward.status);\r\n        }\r\n    }\r\n\r\n    const onSuccessfullChannelPointsCreation = () => {\r\n        setStep(step + 2);\r\n    }\r\n\r\n    const onErrorChannelPointsCreation = (eC) => {\r\n        setErrorCode(eC);\r\n        setStep(-1);\r\n    }\r\n\r\n    const handleChannePointsRewardCostChange = (e) => {\r\n        setChannelPointsRewardCost(e.target.value);\r\n    }\r\n\r\n    const handleCopyOverlayLink = () => {\r\n        copyCheersURL();\r\n        setOverlayLinkCopied(true);\r\n    }\r\n\r\n    const handleTestOverlay = () => {\r\n        writeTestCheer(user.uid);\r\n    }\r\n\r\n    const copyCheersURL = () => {\r\n        navigator.clipboard.writeText(streamerOverlayLink);\r\n    }\r\n\r\n    const handlePoliciesCheckbox = () => setAcceptPolicies(!acceptPolicies);\r\n\r\n    return (\r\n        <div style={{\r\n            background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), rgba(3, 7, 34, 0.95)',\r\n            height: '100vh',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            flexDirection: 'column',\r\n        }}>\r\n            <div style={{\r\n                marginTop: 24,\r\n                position: 'relative',\r\n                display: 'flex',\r\n                backgroundColor: '#141833',\r\n                width: '450px',\r\n                height: step === 4 ? '402px' : '256px',\r\n                borderRadius: '35px',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                flexDirection: 'column',\r\n                zIndex: 500,\r\n            }}>\r\n                {step === -1 &&\r\n                <>\r\n                    <img src={`https://media.giphy.com/media/51Uiuy5QBZNkoF3b2Z/giphy.gif`} alt={`Scared Dog`}\r\n                        style={{\r\n                            position: 'absolute',\r\n                            bottom: 190, // 256 - 23 (height of container - hidden part of the image)\r\n                            width: '238px',\r\n                            height: '239px',\r\n                            zIndex: '1000',\r\n                        }}\r\n                    />\r\n                </>\r\n                }\r\n                {step === 0 &&\r\n                <>\r\n                    <img src={`https://media.giphy.com/media/yQssIXdTQlbN3EEPYj/giphy.gif`} alt={`Barnaby on PC`}\r\n                        style={{\r\n                            zIndex: -1,\r\n                            position: 'absolute',\r\n                            bottom: 256, // 256 - 23 (height of container - hidden part of the image)\r\n                            width: '334px',\r\n                            height: '179px',\r\n                            resize: ''\r\n                        }}\r\n                    />\r\n                </>\r\n                }\r\n                {step === 1 &&\r\n                <>\r\n                    <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Fchannelpoints-pink.gif?alt=media&token=f5ca8128-99cc-4d03-9257-e5e6f960cac4'\r\n                        alt='channel points'\r\n                        style={{\r\n                            position: 'absolute',\r\n                            width: '269px',\r\n                            height: '134px',\r\n                            transform: 'rotate(-15deg)',\r\n                            bottom: 256, // 256 (height of container)\r\n                        }}\r\n                    />\r\n                    <img src={`https://media.giphy.com/media/3oFzlW8dht4DdvwBqg/giphy.gif`} alt={`Barnaby Looking`}\r\n                        style={{\r\n                            position: 'absolute',\r\n                            width: '162px',\r\n                            height: '151px',\r\n                            zIndex: '1000',\r\n                            transform: 'rotate(-3.45deg)',\r\n                            bottom: 244, // 256 - 12 (height of container - hidden part of the image)\r\n                        }}\r\n                    />\r\n                </>\r\n                }\r\n                {step === 2 &&\r\n                <>\r\n                    <img src='https://media.giphy.com/media/3o752nnUPE7OzLeSVW/giphy.gif' alt={`Barnaby Working`}\r\n                        style={{\r\n                            position: 'absolute',\r\n                            bottom: 256, // 256 - 8 (height of container - hidden part of the image)\r\n                            width: '206px',\r\n                            height: '135px',\r\n                            zIndex: '1',\r\n                        }}\r\n                    />\r\n                </>\r\n                }\r\n                {step === 3 &&\r\n                <>\r\n                    <img src='https://media.giphy.com/media/xULW8v7LtZrgcaGvC0/giphy.gif' alt={`Barnaby Says Thanks`}\r\n                        style={{\r\n                            position: 'absolute',\r\n                            bottom: 190, // 256 - 66 (height of container - visible part of the image over the card)\r\n                            width: '239px',\r\n                            height: '239px',\r\n                            zIndex: '1000',\r\n                        }}\r\n                    />\r\n                </>\r\n                }\r\n                {step === 4 &&\r\n                <>\r\n                    <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Foverlay.gif?alt=media&token=178044eb-f697-44ad-860c-81e93741d276'\r\n                        alt='overlay'\r\n                        style={{\r\n                            position: 'absolute',\r\n                            bottom: 402, // 402 - 66 (height of container)\r\n                            width: '300px',\r\n                            height: '150px',\r\n                        }}\r\n                    />\r\n                    <img src={`https://media.giphy.com/media/3oFzlW8dht4DdvwBqg/giphy.gif`} alt={`Barnaby Looking`}\r\n                        style={{\r\n                            position: 'absolute',\r\n                            bottom: 390, // 256 - 12 (height of container - hidden part of the image)\r\n                            width: '162px',\r\n                            height: '151px',\r\n                            zIndex: '1000',\r\n                            transform: 'rotate(-3.45deg)',\r\n                        }}\r\n                    />\r\n                </>\r\n                }\r\n                {step === -1 &&\r\n                <>\r\n                    <p style={{ marginTop: '20px' }} className={styles.headerText}>\r\n                        {t('Onboarding.errorTitle', { errorCode })}\r\n                    </p>\r\n                    <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\r\n                        {t('Onboarding.errorDescription')}\r\n                    </p>\r\n                </>\r\n                }\r\n                {step === 0 &&\r\n                <>\r\n                    <p className={styles.headerText}>\r\n                        {t('Onboarding.letsSetUp')}\r\n                    </p>\r\n                    <ul>\r\n                        <li className={styles.subText}>\r\n                            {t('Onboarding.processDescriptionP1')}\r\n                        </li>\r\n                        <li className={`${styles.subText} ${styles.liMargin}`}>\r\n                            {t('Onboarding.processDescriptionP2')}\r\n                        </li>\r\n                    </ul>\r\n                </>\r\n                }\r\n                {step === 1 &&\r\n                <>\r\n                    <p className={styles.headerText}>\r\n                        {t('Onboarding.setRewardCost')}\r\n                    </p>\r\n                    <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\r\n                        {t('Onboarding.setRewardCostDescription')}\r\n                    </p>\r\n                    <div className={styles.qoinsMainContainer}>\r\n                        <div className={styles.qoinsSubContainer}>\r\n                            <input\r\n                                className={styles.qoins}\r\n                                value={channelPointsRewardCost}\r\n                                onChange={handleChannePointsRewardCostChange}\r\n\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </>\r\n                }\r\n                {step === 2 &&\r\n                <>\r\n                    <h1 className={styles.gradientText}>\r\n                        {t('Onboarding.workingOnRequest')}\r\n                    </h1>\r\n                </>\r\n                }\r\n                {step === 3 &&\r\n                <>\r\n                    <h1 className={styles.gradientText}>\r\n                        {t('Onboarding.rewardCreated')}\r\n                    </h1>\r\n                </>\r\n                }\r\n                {step === 4 &&\r\n                    <>\r\n                    <h1 className={styles.headerText}>\r\n                        {t('Onboarding.addReactionsToOverlay')}\r\n                    </h1>\r\n                    <p className={`${styles.subText} ${styles.subTextMartinTop} ${styles.alignTextCenter}`}>\r\n                        {t('Onboarding.copyLink')}\r\n                    </p>\r\n                    <div style={{\r\n                        marginTop: '32px',\r\n                        display: 'flex',\r\n                    }}>\r\n                        <div style={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            flexDirection: 'row',\r\n                        }}>\r\n                            <p className={styles.overlayResText}>\r\n                                {t('Onboarding.width')}\r\n                            </p>\r\n                            <div className={styles.overlayResNumbContainer}>\r\n                                <p className={styles.overlayResNumb}>\r\n                                    1920\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{\r\n                            marginLeft: '10px',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            flexDirection: 'row',\r\n                        }}>\r\n                            <p className={styles.overlayResText}>\r\n                                {t('Onboarding.height')}\r\n                            </p>\r\n                            <div className={styles.overlayResNumbContainer}>\r\n                                <p className={styles.overlayResNumb}>\r\n                                    1080\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <Button\r\n                        disableRipple\r\n                        onClick={handleCopyOverlayLink}\r\n                        className={classes.copyOverlayLinkButton}>\r\n                        <p style={{\r\n                            color: '#6C5DD3',\r\n                            fontSize: '12px',\r\n                            fontWeight: '500',\r\n                            lineHeight: '24px',\r\n                            textAlign: 'center',\r\n                            flexGrow: 1,\r\n                        }}>\r\n                            {streamerOverlayLink}\r\n                        </p>\r\n                        <CopyIcon style={{\r\n                            justifySelf: 'flex-end',\r\n                        }} />\r\n                    </Button>\r\n                    <div style={{\r\n                        marginTop: '32px',\r\n                    }}>\r\n                        {overlayLinkCopied ?\r\n                            <Button\r\n                                onClick={handleTestOverlay}\r\n                                className={classes.testButton}>\r\n                                {t('Onboarding.testOverlay')}\r\n                            </Button>\r\n                            :\r\n                            <div style={{ height: '60px' }} />\r\n                        }\r\n                    </div>\r\n                </>\r\n                }\r\n                {step === 5 &&\r\n                    <>\r\n                        <img src={`https://media.giphy.com/media/3o751SMzZ5TjLWInoQ/giphy.gif`} alt={`Barnaby Thats Rad`}\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: 135, // 256 - 121\r\n                                width: '351px',\r\n                                height: '220px',\r\n                                marginTop: '-100px',\r\n                            }}\r\n                        />\r\n                        <img src='https://firebasestorage.googleapis.com/v0/b/qapplaapp.appspot.com/o/OnboardingGifs%2Fyou%2520are%2520set.gif?alt=media&token=0c285185-9be1-4f56-ae8e-efd67a7e2099'\r\n                            alt={`you're set`}\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: 24, // 256 - 121\r\n                                width: '400px',\r\n                                height: '107px',\r\n                            }}\r\n                        />\r\n                    </>\r\n                }\r\n            </div>\r\n            <div\r\n                style={{\r\n                    marginTop: 24,\r\n                }}>\r\n                <Button\r\n                    disabled={step === 2 || (step === 4 && !overlayLinkCopied) || (step === 0 && !acceptPolicies)}\r\n                    onClick={handleMainButton}\r\n                    className={classes.button}\r\n                >\r\n                    {step === -1 &&\r\n                        <>\r\n                            {t('Onboarding.goToDiscord')}\r\n                        </>\r\n                    }\r\n                    {step === 0 &&\r\n                        <>\r\n                            {t('Onboarding.letsGo')}\r\n                        </>\r\n                    }\r\n                    {step === 1 &&\r\n                        <>\r\n                            {t('Onboarding.createCustomReward')}\r\n                        </>\r\n                    }\r\n                    {step === 2 &&\r\n                        <>\r\n                            {t('Onboarding.waitABit')}\r\n                        </>\r\n                    }\r\n                    {step === 3 &&\r\n                        <>\r\n                            {t('Onboarding.finishSetUp')}\r\n                        </>\r\n                    }\r\n                    {step === 4 &&\r\n                        <>\r\n                            {overlayLinkCopied ?\r\n                                    t('Onboarding.finishSetUp')\r\n                                :\r\n                                    t('Onboarding.copyToTest')\r\n                            }\r\n                        </>\r\n                    }\r\n                    {step === 5 &&\r\n                        <>\r\n                            {t('Onboarding.goToDashboard')}\r\n                        </>\r\n                    }\r\n                </Button>\r\n            </div>\r\n            {step !== 5 &&\r\n                <div style={{\r\n                    display: 'flex',\r\n                    position: 'absolute',\r\n                    bottom: 72,\r\n                }}>\r\n                    <div style={{\r\n                        backgroundColor: stepIndicator === 0 ? '#00FEDF' : '#00FEDF8A',\r\n                        height: '8px',\r\n                        width: stepIndicator === 0 ? '28px' : '8px',\r\n                        borderRadius: '4px',\r\n                        margin: '0px 6.5px',\r\n                    }} />\r\n                    <div style={{\r\n                        backgroundColor: stepIndicator === 1 ? '#00FEDF' : '#00FEDF8A',\r\n                        height: '8px',\r\n                        width: stepIndicator === 1 ? '28px' : '8px',\r\n                        borderRadius: '4px',\r\n                        margin: '0px 6.5px',\r\n\r\n                    }} />\r\n                    <div style={{\r\n                        backgroundColor: stepIndicator === 2 ? '#00FEDF' : '#00FEDF8A',\r\n                        height: '8px',\r\n                        width: stepIndicator === 2 ? '28px' : '8px',\r\n                        borderRadius: '4px',\r\n                        margin: '0px 6.5px',\r\n                    }} />\r\n                </div>\r\n            }\r\n            {step === 0 &&\r\n                <div style={{ position: 'absolute', bottom: 24, display: 'flex', alignItems: 'center' }}>\r\n                    <Checkbox\r\n                        icon={<Unchecked />}\r\n                        checkedIcon={<Checked />}\r\n                        onChange={handlePoliciesCheckbox}\r\n                        checked={acceptPolicies}\r\n                        style={{ paddingRight: '0px' }}\r\n                    />\r\n                    <div style={{ opacity: acceptPolicies ? 1 : 0.7, color: '#FFF', paddingLeft: '6px' }}>\r\n                        {t('Onboarding.policiesP1')}\r\n                        <a href={t('Onboarding.termsOfUseUrl')} target=\"_blank\"\r\n                            style={{ color: '#00FFDD', marginLeft: 4, marginRight: 4, textDecoration: 'none' }}>\r\n                            {t('Onboarding.policiesP2')}\r\n                        </a>\r\n                        {t('Onboarding.policiesP3')}\r\n                        <a href={t('Onboarding.privacyPolicy')}\r\n                            target=\"_blank\"\r\n                            style={{ color: '#00FFDD', marginLeft: 4, textDecoration: 'none' }}>\r\n                            {t('Onboarding.policiesP4')}\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default OnBoarding;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ContainedButton\\ContainedButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileImgCoin\\StreamerProfileImgCoin.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx",["308","309","310"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CardsPayments\\CardsPayments.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx",["311","312","313"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\interactionsQapla.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\CheersSettings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx",["314","315","316"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GiphyTextGenerator\\GiphyTextGenerator.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx",["317"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button, CardContent, CircularProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport dayjs from 'dayjs';\r\n\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { getInvitationCodeParams, getQlanIdWithQreatorCode, getUserDisplayName, giveReferrerRewardsToStreamer, removeInvitationCode, updateStreamerProfile, updateUserStreamerPublicData } from '../../services/database';\r\nimport { notifyActivationWithReferralCode } from '../../services/discord';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    containerStyle: {\r\n        padding: 0\r\n    },\r\n    background: {\r\n        background: 'conic-gradient(from 134.88deg at 50.55% 49.24%, #5600E1 -61.47deg, #373FFF 26.68deg, #A534FE 167.74deg, #B518FF 197.3deg, #5600E1 298.53deg, #373FFF 386.68deg), linear-gradient(0deg, rgba(3, 7, 34, 0.95), rgba(3, 7, 34, 0.95))',\r\n        display: 'flex',\r\n        flex: 1,\r\n        flexDirection: 'column',\r\n        minHeight: '100vh',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    card: {\r\n        backgroundColor: '#141833',\r\n        boxShadow: '0px 4px 100px 15px rgba(0, 0, 0, 0.25)',\r\n        borderRadius: '35px',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        paddingTop: 24,\r\n        paddingBottom: 0\r\n    },\r\n    title: {\r\n        fontWeight: '600',\r\n        fontSize: '18px',\r\n        lineHeight: '32px',\r\n        textAlign: 'center',\r\n        color: '#FFFFFF',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    instructions: {\r\n        marginTop: 15,\r\n        fontWeight: '400',\r\n        fontSize: '14px',\r\n        lineHeight: '22px',\r\n        textAlign: 'center',\r\n        color: '#8F9BBA',\r\n        whiteSpace: 'pre-line'\r\n    },\r\n    textInput: {\r\n        textAlign: 'center',\r\n        paddingTop: 12,\r\n        paddingBottom: 12\r\n    },\r\n    activeFreeTrialButton: {\r\n        marginTop: 32,\r\n        backgroundColor: '#3B4BF9',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        },\r\n        marginBottom: 60\r\n    },\r\n    noCode: {\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        marginTop: 32,\r\n        fontWeight: '600',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    referralProgram: {\r\n        textAlign: 'center',\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: 450\r\n        },\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        marginTop: 32,\r\n        fontWeight: '400',\r\n        fontSize: '16px',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492px',\r\n        color: '#FFFFFF'\r\n    },\r\n    subscribeButton: {\r\n        marginTop: 40,\r\n        backgroundColor: '#00FFDD',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    subscribeButtonCointainer: {\r\n        marginBottom: 24,\r\n        marginTop: 180\r\n    }\r\n}));\r\n\r\nconst RequestActivation = ({ user, onSuccessActivation }) => {\r\n    const [referralCode, setReferralCode] = useState('');\r\n    const [validatingCode, setValidatingCode] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const validateCode = async () => {\r\n        if (user.broadcasterType === '') {\r\n            return alert(t('NewStream.alerts.noChannelPoints'));\r\n        }\r\n\r\n        setValidatingCode(true);\r\n        if (referralCode) {\r\n            const referrerUid = await getQlanIdWithQreatorCode(referralCode);\r\n            if (referrerUid) {\r\n                if (referrerUid !== user.uid) {\r\n                    if (!user.referredBy) {\r\n                        activateFreeTrialWithReferralCode(referrerUid, {\r\n                            redemptionsPerStream: 40,\r\n                            streamsIncluded: 2\r\n                        });\r\n                    } else {\r\n                        setValidatingCode(false);\r\n                        alert('Ya usaste un código de referido antes');\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('No puedes usar tu propio código');\r\n                }\r\n            } else {\r\n                const invitationCodeSnap = await getInvitationCodeParams(referralCode);\r\n                if (invitationCodeSnap.exists()) {\r\n                    if (invitationCodeSnap.val().freeTrial && invitationCodeSnap.val().subscriptionDetails) {\r\n                        activateFreeTrialWithInvitationCode(referralCode, invitationCodeSnap.val());\r\n                    }\r\n                } else {\r\n                    setValidatingCode(false);\r\n                    alert('Código invalido');\r\n                }\r\n            }\r\n        } else {\r\n            setValidatingCode(false);\r\n        }\r\n    }\r\n\r\n    const activateFreeTrialWithReferralCode = async (referrerUid, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n        const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n        await updateStreamerProfile(user.uid, {\r\n            referredBy: referrerUid,\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await giveReferrerRewardsToStreamer(referrerUid, user.displayName, endDate);\r\n\r\n        const referrerDisplayName = await getUserDisplayName(referrerUid);\r\n\r\n        await notifyActivationWithReferralCode(referrerDisplayName.val(), user.displayName);\r\n\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    const activateFreeTrialWithInvitationCode = async (code, freeTrialInformation) => {\r\n        const startDate = dayjs.utc().toDate().getTime();\r\n         const endDate = dayjs.utc().add(1, 'month').endOf('day').toDate().getTime();\r\n         await updateStreamerProfile(user.uid, {\r\n            freeTrial: true,\r\n            premium: true,\r\n            currentPeriod: { startDate, endDate },\r\n            subscriptionDetails: freeTrialInformation.subscriptionDetails\r\n        });\r\n\r\n        await updateUserStreamerPublicData(user.uid, {\r\n            premium: true\r\n        });\r\n\r\n        await removeInvitationCode(code);\r\n        await onSuccessActivation();\r\n        setValidatingCode(false);\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={classes.containerStyle}>\r\n            <div className={classes.background}>\r\n                <div>\r\n                <Card className={classes.card}>\r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                        <CloseIcon onClick={() => history.goBack()} style={{ cursor: 'pointer' }} />\r\n                    </div>\r\n                    <CardContent>\r\n                        <p className={classes.title}>\r\n                            {t('RequestActivation.title')} 🚀\r\n                        </p>\r\n                        <p className={classes.instructions}>\r\n                            {validatingCode || !user.referredBy ?\r\n                                <>\r\n                                    {t('RequestActivation.descriptionP1')}\r\n                                    <b style={{ color: '#FFF' }}>{t('RequestActivation.descriptionHiglight')}</b>\r\n                                    {t('RequestActivation.descriptionP2')}\r\n                                </>\r\n                                :\r\n                                t('RequestActivation.buyAMembership')\r\n                            }\r\n                        </p>\r\n                        {validatingCode || !user.referredBy ?\r\n                            <>\r\n                                <StreamerTextInput\r\n                                    placeholder={t('RequestActivation.referralCode')}\r\n                                    fullWidth\r\n                                    containerStyle={{ marginTop: 24 }}\r\n                                    classes={{ input: classes.textInput }}\r\n                                    textInputStyle={{ background: '#202750', borderRadius: '16px' }}\r\n                                    value={referralCode}\r\n                                    onChange={(e) => setReferralCode(e.target.value)} />\r\n                                {validatingCode ?\r\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignContent: 'center', marginTop: 32 }}>\r\n                                        <CircularProgress style={{ color: '#3B4BF9' }} />\r\n                                    </div>\r\n                                    :\r\n                                    <Button\r\n                                        onClick={validateCode}\r\n                                        fullWidth\r\n                                        classes={{\r\n                                            root: classes.activeFreeTrialButton\r\n                                        }}>\r\n                                        {t('RequestActivation.startFreeTrial')}\r\n                                    </Button>\r\n                                }\r\n                            </>\r\n                            :\r\n                            <div className={classes.subscribeButtonCointainer}>\r\n                                <Button\r\n                                    fullWidth\r\n                                    onClick={() => history.push('/membership')}\r\n                                    classes={{ root: classes.subscribeButton }}>\r\n                                    {t('RequestActivation.subscribe')}\r\n                                </Button>\r\n                            </div>\r\n                        }\r\n                    </CardContent>\r\n                </Card>\r\n                {validatingCode || !user.referredBy ?\r\n                    <>\r\n                        <p className={classes.noCode}>\r\n                            {t('RequestActivation.dontHaveACode')}\r\n                        </p>\r\n                        <Button\r\n                            fullWidth\r\n                            onClick={() => history.push('/membership')}\r\n                            classes={{ root: classes.subscribeButton }}>\r\n                            {t('RequestActivation.subscribe')}\r\n                        </Button>\r\n                    </>\r\n                    :\r\n                    <p className={classes.referralProgram}>\r\n                        {t('RequestActivation.referralProgramP1')}\r\n                        <b style={{ color: '#FFF' }}>{t('RequestActivation.qreatorCode')}</b>\r\n                        {t('RequestActivation.referralProgramP2')}\r\n                    </p>\r\n                }\r\n                </div>\r\n            </div>\r\n        </StreamerDashboardContainer>\r\n    );\r\n}\r\n\r\nexport default RequestActivation;\r\n","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx",["318","319"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\r\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    languageLabel: {\r\n        color: '#FFF',\r\n        fontSize: 16,\r\n        fontWeight: 600\r\n    }\r\n}));\r\n\r\nconst LanguageSelect = () => {\r\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\r\n    const [langData, setLangData] = useState([])\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        let tempLangArr = []\r\n        getAvailableLanguages().map((languageCode) => (\r\n            tempLangArr.push({\r\n                value: languageCode,\r\n                label: t(`LanguageHandler.languages.${languageCode}`)\r\n            })\r\n        ))\r\n        setLangData(tempLangArr)\r\n    }, [t])\r\n\r\n    const onLanguageChanged = (languageCode) => {\r\n        changeLanguage(languageCode);\r\n        setCurrentLanguageCode(languageCode);\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex'\r\n        }}>\r\n            <TranslateIcon style={{\r\n                display: 'flex'\r\n            }} />\r\n            {/* The style of this select needs to be implemented inline */}\r\n            <div style={{\r\n                marginTop: '-10px',\r\n            }}>\r\n                <StreamerSelect\r\n                    style={{ backgroundColor: '#141833' }}\r\n                    data={langData}\r\n                    value={currentLanguageCode}\r\n                    onChange={onLanguageChanged}\r\n                    overflowY='hidden'\r\n                    overflowX='hidden'\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageSelect;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileModalDisableInteractions\\StreamerProfileModalDisableInteractions.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx",["320","321"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, Slide, Button, Dialog, DialogContent, IconButton, List, ListItem, ListItemAvatar, Avatar, ListItemText, Box } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\r\nimport DayJsUtils from '@date-io/dayjs';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport { ReactComponent as QoinsIcon } from './../../assets/DonatedQoin.svg';\r\nimport { ReactComponent as BitsIcon } from './../../assets/BitsIcon.svg';\r\nimport { ReactComponent as DonatedQoinIcon } from './../../assets/DonatedQoin.svg';\r\nimport { ReactComponent as RepeatIcon } from './../../assets/RepeatIcon.svg';\r\nimport { getPeriodStreamerPayments, listenForLastStreamerCheers, markDonationAsUnreadToRepeat, removeListenerForLastStreamerCheers } from '../../services/database';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toggleButton: {\r\n        borderRadius: 6,\r\n        textAlign: 'center',\r\n        marginRight: 8,\r\n        fontSize: 17,\r\n        fontStyle: 'normal',\r\n        fontWeight: 600,\r\n        paddingLeft: 16,\r\n        paddingRight: 16,\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            opacity: '.80',\r\n            background: '#29326B44 !important'\r\n        }\r\n    },\r\n    scrollPaper: {\r\n        alignItems: 'flex-start',\r\n        justifyContent: 'flex-end'\r\n    },\r\n    paper: {\r\n        height: '100vh',\r\n        background: 'linear-gradient(0deg, #0D1021, #0D1021), #141735',\r\n        borderRadius: 20,\r\n        paddingBottom: '5px',\r\n        padding: '28px 40px',\r\n        maxWidth: '100%',\r\n        width: '100%',\r\n        margin: '21px 17px 0px 0px',\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            width: '100%',\r\n            margin: '0px',\r\n            borderRadius: '0px',\r\n            maxHeight: '100%'\r\n        },\r\n        [theme.breakpoints.up(\"sm\")]: {\r\n            width: '440px'\r\n        }\r\n    },\r\n    dialogRoot: {\r\n        zIndex: '100 !important',\r\n        '& .MuiBackdrop-root': {\r\n            backgroundColor: '#02071E80',\r\n            backdropFilter: 'blur(5px)',\r\n            width: '200wh',\r\n            height: '200vh'\r\n\r\n        }\r\n    },\r\n    dialogHeaderContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        overflow: ''\r\n    },\r\n    balanceCurrencyContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginTop: '23px',\r\n        minWidth: '200px'\r\n    },\r\n    balanceCurrencyValue: {\r\n        display: 'flex',\r\n        color: '#FFF',\r\n        fontSize: '48px',\r\n        lineHeight: '52px',\r\n        fontWeight: 600,\r\n        letterSpacing: '-0.86',\r\n        marginLeft: '12px',\r\n    },\r\n    subDataContainer: {\r\n        marginTop: '30px',\r\n        color: '#8692FF',\r\n        fontWeight: '500',\r\n        fontSize: '14px',\r\n        lineHeight: '17px',\r\n        letterSpacing: '0.35px'\r\n    },\r\n    periodText: {\r\n        color: 'rgba(134, 146, 255, 0.65)',\r\n        fontSize: 14,\r\n        fontWeight: 600,\r\n        letterSpacing: .35,\r\n        marginBottom: 16,\r\n        cursor: 'pointer'\r\n    },\r\n    qoinsDonationPrimaryText: {\r\n        fontSize: 18,\r\n        fontWeight: 600,\r\n        color: '#FFF'\r\n    },\r\n    qoinsCheersecondaryText: {\r\n        fontSize: 14,\r\n        fontWeight: 500,\r\n        color: 'rgba(255, 255, 255, .65)'\r\n    },\r\n    qoinDonationValueContainer: {\r\n        display: 'flex',\r\n        alignSelf: 'flex-start',\r\n        alignItems: 'center',\r\n        marginTop: 6\r\n    },\r\n    qoinDonationValueText: {\r\n        color: '#FFF',\r\n        fontSize: 18,\r\n        fontWeight: 600,\r\n        marginRight: 4\r\n    },\r\n    list: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        paddingRight: '20px',\r\n        marginRight: '-20px',\r\n        position: 'relative',\r\n        overflow: 'auto'\r\n    },\r\n    periodPicker: {\r\n        color: '#FFF',\r\n    },\r\n    popover: {\r\n        backgroundColor: '#141833',\r\n        color: 'white',\r\n        padding: '15px',\r\n        '& .MuiPickersCalendarHeader-switchHeader': {\r\n            '& .MuiIconButton-root:hover': {\r\n                backgroundColor: '#707070'\r\n            }\r\n        },\r\n\r\n        '& .MuiButtonBase-root:hover:not(.MuiPickersDay-daySelected)': {\r\n            backgroundColor: '#3f51b5',\r\n        },\r\n        '& .MuiPickersDay-day': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersDay-daySelected': {\r\n            backgroundColor: '#00beff',\r\n            color: '#000'\r\n        },\r\n        '& .MuiPickersDay-dayDisabled': {\r\n            color: 'gray'\r\n        },\r\n        '& .MuiPickersCalendarHeader-dayLabel': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumber': {\r\n            color: 'white'\r\n        },\r\n        '& .MuiPickersClockPointer-pointer': {\r\n            backgroundColor: '#00beff',\r\n            '& .MuiPickersClockPointer-noPoint': {\r\n                borderColor: '#00beff',\r\n            },\r\n            '& .MuiPickersClockPointer-thumb': {\r\n                borderColor: '#00beff',\r\n            }\r\n        },\r\n        '& .MuiPickersClockNumber-clockNumberSelected': {\r\n            color: '#000'\r\n        }\r\n    },\r\n    repeatButton: {\r\n        alignSelf: 'center',\r\n        fontSize: 11,\r\n        fontWeight: '700',\r\n        color: '#FFF',\r\n        borderRadius: 5,\r\n        backgroundColor: '#22272F',\r\n        marginLeft: 8,\r\n        paddingTop: '2px',\r\n        paddingBottom: '2px',\r\n        paddingLeft: '11px',\r\n        paddingRight: '11px',\r\n        '&:hover': {\r\n            backgroundColor: '#22272F',\r\n            opacity: '.9'\r\n        }\r\n    }\r\n}));\r\n\r\nconst DialoogTransaction = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction='left' ref={ref} {...props} />;\r\n});\r\n\r\nconst ToggleButton = ({ currentValue, value, onChange, label }) => {\r\n    const classes = useStyles();\r\n    const active = currentValue === value;\r\n\r\n    return (\r\n        <Button\r\n            className={classes.toggleButton}\r\n            style={{ background: active ? '#29326B' : 'rgba(41, 50, 107, 0)', color: active ? '#FFF' : 'rgba(255, 255, 255, .6)' }}\r\n            onClick={() => onChange(value)}>\r\n            {label || value}\r\n        </Button>\r\n    );\r\n};\r\n\r\nconst RecordsHeader = ({ value, Icon, showPeriod, onPeriodChange }) => {\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [openMonthPicker, setOpenMonthPicker] = useState(false);\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n\r\n    const monthsArray = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(date.$d);\r\n        setOpenMonthPicker(false);\r\n        if (onPeriodChange) {\r\n            onPeriodChange(date.$d);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ display: 'flex', flexDirection: 'column', minWidth: '200px' }}>\r\n                <div className={classes.balanceCurrencyContainer}>\r\n                    <Icon />\r\n                    <p className={classes.balanceCurrencyValue}>\r\n                        {parseInt(value || 0).toLocaleString()}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            {showPeriod &&\r\n                <MuiPickersUtilsProvider utils={DayJsUtils}>\r\n                    {/**\r\n                     * Box hides the TextField of the picker but allows the user to open\r\n                     * the dialog to select the period\r\n                     */}\r\n                    <Box component='div' visibility='hidden'>\r\n                        <DatePicker format='MM'\r\n                            disableFuture\r\n                            disableToolbar\r\n                            variant='inline'\r\n                            views={['month']}\r\n                            open={openMonthPicker}\r\n                            openTo='month'\r\n                            value={selectedDate}\r\n                            onChange={handleDateChange}\r\n                            PopoverProps={{\r\n                                PaperProps: {\r\n                                    className: classes.popover\r\n                                }\r\n                            }} />\r\n                    </Box>\r\n                    <div className={classes.periodText} onClick={() => setOpenMonthPicker(true)}>\r\n                        {t('CheersBitsRecordDialog.period')} {t(`months.${monthsArray[selectedDate.getMonth()]}`)} {selectedDate.getFullYear()}\r\n                    </div>\r\n                </MuiPickersUtilsProvider>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nconst QoinsCheers = ({ uid, qoinsBalance, cheers, messages, setPendingMessages, qlanBalance }) => {\r\n    const classes = useStyles();\r\n    const [balance, setBalance] = useState(qoinsBalance + qlanBalance);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (setPendingMessages !== undefined) {\r\n            setPendingMessages(0);\r\n        }\r\n    }, [setPendingMessages]);\r\n\r\n    const showDate = () => {\r\n        const today = new Date();\r\n        /**\r\n         * Not all the browsers supports the parameter \"locales\" from the function toLocaleDateString\r\n         * https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\r\n         */\r\n        try {\r\n            return today.toLocaleDateString('es-MX');\r\n        } catch (error) {\r\n            return today.toLocaleDateString();\r\n        }\r\n    }\r\n\r\n    const repeatSelectedCheer = async (cheerId) => {\r\n        await markDonationAsUnreadToRepeat(uid, cheerId);\r\n        window.analytics.track('Cheer repeated');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!messages &&\r\n                <>\r\n                    <RecordsHeader value={balance} Icon={QoinsIcon} />\r\n                    <div className={classes.subDataContainer}>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <p style={{ display: 'flex', width: '62px' }}> Cheers </p>\r\n                            <p style={{ display: 'flex', }}> {qoinsBalance.toLocaleString()} </p>\r\n                        </div>\r\n                        <div style={{ display: 'flex', marginTop: '30px' }}>\r\n                            <p style={{ display: 'flex', width: '62px' }}> Qlan </p>\r\n                            <p style={{ display: 'flex', }}> {qlanBalance.toLocaleString()} </p>\r\n                        </div>\r\n                        <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\r\n                            {t('CheersBitsRecordDialog.cheersReceivedAt', { date: showDate() })}\r\n                        </p>\r\n                    </div>\r\n                </>\r\n            }\r\n            <List className={classes.list} style={{ maxHeight: messages ? '82vh' : '60vh', marginTop: '20px', paddingTop: '0px' }}>\r\n                {Object.keys(cheers).reverse().map((cheerId) => (\r\n                    <>\r\n                        {((messages && cheers[cheerId].message) || (!messages)) &&\r\n                            <ListItem disableGutters style={{ display: 'flex', flexDirection: 'column', padding: '0px', marginBottom: '40px' }}>\r\n                                <div style={{ display: 'flex', width: '100%' }}>\r\n                                    <ListItemAvatar style={{ alignSelf: 'center' }} >\r\n                                        <Avatar alt={cheers[cheerId].twitchUserName}\r\n                                            src={cheers[cheerId].photoURL} />\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={\r\n                                        <div style={{ display: 'flex', alignContent: 'center' }}>\r\n                                            <p>{cheers[cheerId].twitchUserName}</p>\r\n                                            {cheers[cheerId].read &&\r\n                                                <Button onClick={() => repeatSelectedCheer(cheerId)}\r\n                                                    className={classes.repeatButton}\r\n                                                    endIcon={<RepeatIcon />}\r\n                                                    variant='contained'>\r\n                                                    {t('CheersBitsRecordDialog.repeatCheer')}\r\n                                                </Button>\r\n                                            }\r\n                                            {!cheers[cheerId].read && <div style={{ backgroundColor: '#8DEBFF', alignSelf: 'center', marginLeft: '8px', width: '8px', height: '8px', borderRadius: '8px' }}>\r\n                                            </div>}\r\n                                        </div>\r\n                                    }\r\n                                        secondary={formatDate(cheers[cheerId].timestamp)}\r\n                                        classes={{\r\n                                            primary: classes.qoinsDonationPrimaryText,\r\n                                            secondary: classes.qoinsCheersecondaryText\r\n                                        }} />\r\n\r\n                                    <div className={classes.qoinDonationValueContainer}>\r\n                                        <div className={classes.qoinDonationValueText}>\r\n                                            {cheers[cheerId].amountQoins}\r\n                                        </div>\r\n                                        <DonatedQoinIcon style={{ height: 35, width: 35 }} />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {messages && cheers[cheerId].message &&\r\n                                    <div style={{ background: '#3B4BF9', borderRadius: '2px 20px 20px 20px', padding: '16px 20px 16px 20px', alignSelf: 'flex-start' }}>\r\n                                        <p style={{ color: '#FFF', fontSize: 14, fontWeight: 500, letterSpacing: .35 }}>\r\n                                            {cheers[cheerId].message}\r\n                                        </p>\r\n                                    </div>\r\n                                }\r\n                            </ListItem>}\r\n                    </>\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\nconst PaidBits = ({ bitsBalance, valueOfQoinsForStreamer, isPaidUser, payments, onPeriodChange }) => {\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <>\r\n            <RecordsHeader value={bitsBalance}\r\n                Icon={BitsIcon}\r\n                showPeriod\r\n                onPeriodChange={onPeriodChange} />\r\n            <div className={classes.subDataContainer}>\r\n                <p style={{ display: 'flex' }}>\r\n                    200 Qoins = {valueOfQoinsForStreamer} Bits\r\n                </p>\r\n                <p style={{ display: 'flex', color: '#8692FFA6', marginTop: '36px', letterSpacing: '0px' }}>\r\n                    {`${t('CheersBitsRecordDialog.bitsToPay')} ${isPaidUser ? t('CheersBitsRecordDialog.withSubscription') : ''}`}\r\n                </p>\r\n                <p style={{ display: 'flex', color: '#FFFFFFA6', marginTop: '45px', lineHeight: '17px', fontWeight: '400' }}>\r\n                    {t('CheersBitsRecordDialog.deliveredCheers')}\r\n                </p>\r\n            </div>\r\n\r\n            <List className={classes.list} style={{ maxHeight: '54vh', marginTop: '20px', paddingTop: '0px' }}>\r\n                {Object.keys(payments).reverse().map((paymentId) => (\r\n                    <ListItem disableGutters>\r\n                        <ListItemText primary={payments[paymentId].currency}\r\n                            secondary={formatDate(payments[paymentId].timestamp)}\r\n                            classes={{\r\n                                primary: classes.qoinsDonationPrimaryText,\r\n                                secondary: classes.qoinsCheersecondaryText\r\n                            }} />\r\n                        <div className={classes.qoinDonationValueContainer}>\r\n                            <div className={classes.qoinDonationValueText}>\r\n                                {payments[paymentId].amount}\r\n                            </div>\r\n                        </div>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\nconst CheersBitsRecordDialog = ({ user, cheersQoins, qlanQoins, estimatedBits, valueOfQoinsForStreamer, open, onClose, pressed, setPendingMessages }) => {\r\n    const [value, setValue] = useState('Qoins');\r\n    const [qoinsCheers, setQoinsCheers] = useState({});\r\n    const [paymentsHistory, setPaymentsHistory] = useState({});\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function loadDefaultPayments() {\r\n            const date = new Date();\r\n            date.setDate(1);\r\n            date.setHours(0, 0, 0, 0);\r\n            const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\r\n            const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\r\n            setPaymentsHistory(payments.val() || {});\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            listenForLastStreamerCheers(user.uid, 20, (cheers) => {\r\n                if (cheers.exists()) {\r\n                    setQoinsCheers(cheers.val());\r\n                    let seekUnread = Object.values(cheers.val());\r\n                    let unreadCount = 0;\r\n                    seekUnread.forEach(e => {\r\n                        if (!e.read && e.message) {\r\n                            unreadCount++\r\n                        }\r\n                    });\r\n                    setPendingMessages(unreadCount)\r\n                }\r\n            });\r\n            loadDefaultPayments();\r\n        }\r\n\r\n\r\n        return () => {\r\n            if (user && user.uid) {\r\n                removeListenerForLastStreamerCheers(user.uid);\r\n            }\r\n        };\r\n    }, [user]);\r\n\r\n    const loadPaymentsByTimestamp = async (timestamp) => {\r\n        const date = new Date(timestamp);\r\n        date.setDate(1);\r\n        date.setHours(0, 0, 0, 0);\r\n        const lastDayOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0, 23, 59, 59, 59);\r\n        const payments = await getPeriodStreamerPayments(user.uid, date.getTime(), lastDayOfMonth.getTime());\r\n        setPaymentsHistory(payments.val() || {});\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open}\r\n            onClose={onClose}\r\n            scroll='paper'\r\n            TransitionComponent={DialoogTransaction}\r\n            classes={{\r\n                scrollPaper: classes.scrollPaper,\r\n                paper: classes.paper,\r\n                root: classes.dialogRoot\r\n            }}\r\n            TransitionProps={{\r\n                onEnter: () => {\r\n                    setValue(pressed)\r\n                }\r\n            }}>\r\n            <DialogContent style={{ padding: '0px', overflow: 'visible' }}>\r\n                <div className={classes.dialogHeaderContainer}>\r\n                    <div style={{ marginRight: 96 }}>\r\n                        <ToggleButton currentValue={value}\r\n                            value='Qoins'\r\n                            onChange={setValue} />\r\n                        <ToggleButton currentValue={value}\r\n                            value='Bits'\r\n                            onChange={setValue} />\r\n                        <ToggleButton currentValue={value}\r\n                            value='Messages'\r\n                            label={t('CheersBitsRecordDialog.messages')}\r\n                            onChange={setValue} />\r\n                    </div>\r\n                    <IconButton onClick={onClose} style={{ zIndex: '10', alignSelf: 'flex-start', width: '40px', height: '40px', padding: '0px', marginTop: '-4px', marginRight: '-16px' }} >\r\n                        <CloseIcon style={{ width: '40px', height: '40px' }} />\r\n                    </IconButton>\r\n                </div>\r\n                {value === 'Qoins' &&\r\n                    <QoinsCheers uid={user.uid}\r\n                        qoinsBalance={cheersQoins}\r\n                        cheers={qoinsCheers}\r\n                        qlanBalance={qlanQoins} />\r\n                }\r\n                {value === 'Bits' &&\r\n                    <PaidBits bitsBalance={estimatedBits}\r\n                        valueOfQoinsForStreamer={valueOfQoinsForStreamer}\r\n                        isPaidUser={user.premium || user.freeTrial}\r\n                        payments={paymentsHistory}\r\n                        onPeriodChange={loadPaymentsByTimestamp} />\r\n                }\r\n                {value === 'Messages' &&\r\n                    <QoinsCheers uid={user.uid}\r\n                        qoinsBalance={cheersQoins}\r\n                        messages={true}\r\n                        cheers={qoinsCheers}\r\n                        setPendingMessages={setPendingMessages}\r\n                    />\r\n                }\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nfunction formatDate(timestamp) {\r\n    const paymentDate = new Date(timestamp);\r\n\r\n    const date = paymentDate.getDate() >= 10 ? paymentDate.getDate() : `0${paymentDate.getDate()}`;\r\n    const month = (paymentDate.getMonth() + 1) >= 10 ? (paymentDate.getMonth() + 1) : `0${(paymentDate.getMonth() + 1)}`;\r\n\r\n    return `${date}/${month}/${paymentDate.getFullYear().toString().substring(2)}`;\r\n}\r\n\r\nexport default CheersBitsRecordDialog;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js",[],{"ruleId":"322","replacedBy":"323"},{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","severity":1,"message":"327","line":26,"column":7,"nodeType":"328","messageId":"329","endLine":26,"endColumn":35},{"ruleId":"330","severity":1,"message":"331","line":564,"column":9,"nodeType":"332","messageId":"333","endLine":564,"endColumn":14},{"ruleId":"326","severity":1,"message":"334","line":33,"column":12,"nodeType":"328","messageId":"329","endLine":33,"endColumn":40},{"ruleId":"335","severity":1,"message":"336","line":102,"column":8,"nodeType":"337","endLine":102,"endColumn":38,"suggestions":"338"},{"ruleId":"326","severity":1,"message":"339","line":110,"column":11,"nodeType":"328","messageId":"329","endLine":110,"endColumn":39},{"ruleId":"340","severity":1,"message":"341","line":135,"column":117,"nodeType":"342","endLine":135,"endColumn":132},{"ruleId":"322","replacedBy":"343"},{"ruleId":"324","replacedBy":"344"},{"ruleId":"326","severity":1,"message":"345","line":125,"column":27,"nodeType":"328","messageId":"329","endLine":125,"endColumn":43},{"ruleId":"326","severity":1,"message":"346","line":126,"column":24,"nodeType":"328","messageId":"329","endLine":126,"endColumn":37},{"ruleId":"347","severity":1,"message":"348","line":269,"column":103,"nodeType":"349","messageId":"350","endLine":269,"endColumn":105},{"ruleId":"322","replacedBy":"351"},{"ruleId":"324","replacedBy":"352"},{"ruleId":"326","severity":1,"message":"353","line":13,"column":5,"nodeType":"328","messageId":"329","endLine":13,"endColumn":11},{"ruleId":"326","severity":1,"message":"354","line":2,"column":41,"nodeType":"328","messageId":"329","endLine":2,"endColumn":45},{"ruleId":"326","severity":1,"message":"355","line":2,"column":47,"nodeType":"328","messageId":"329","endLine":2,"endColumn":58},{"ruleId":"326","severity":1,"message":"356","line":2,"column":60,"nodeType":"328","messageId":"329","endLine":2,"endColumn":71},{"ruleId":"326","severity":1,"message":"357","line":8,"column":8,"nodeType":"328","messageId":"329","endLine":8,"endColumn":23},{"ruleId":"326","severity":1,"message":"358","line":74,"column":11,"nodeType":"328","messageId":"329","endLine":74,"endColumn":18},{"ruleId":"326","severity":1,"message":"359","line":90,"column":11,"nodeType":"328","messageId":"329","endLine":90,"endColumn":29},{"ruleId":"326","severity":1,"message":"360","line":2,"column":67,"nodeType":"328","messageId":"329","endLine":2,"endColumn":74},{"ruleId":"326","severity":1,"message":"361","line":13,"column":28,"nodeType":"328","messageId":"329","endLine":13,"endColumn":36},{"ruleId":"326","severity":1,"message":"362","line":16,"column":28,"nodeType":"328","messageId":"329","endLine":16,"endColumn":33},{"ruleId":"326","severity":1,"message":"363","line":233,"column":12,"nodeType":"328","messageId":"329","endLine":233,"endColumn":29},{"ruleId":"326","severity":1,"message":"364","line":237,"column":12,"nodeType":"328","messageId":"329","endLine":237,"endColumn":23},{"ruleId":"326","severity":1,"message":"365","line":241,"column":12,"nodeType":"328","messageId":"329","endLine":241,"endColumn":21},{"ruleId":"326","severity":1,"message":"366","line":241,"column":23,"nodeType":"328","messageId":"329","endLine":241,"endColumn":35},{"ruleId":"335","severity":1,"message":"367","line":288,"column":8,"nodeType":"337","endLine":288,"endColumn":14,"suggestions":"368"},{"ruleId":"326","severity":1,"message":"369","line":387,"column":11,"nodeType":"328","messageId":"329","endLine":387,"endColumn":24},{"ruleId":"322","replacedBy":"370"},{"ruleId":"324","replacedBy":"371"},{"ruleId":"335","severity":1,"message":"336","line":179,"column":8,"nodeType":"337","endLine":179,"endColumn":14,"suggestions":"372"},{"ruleId":"373","severity":1,"message":"374","line":235,"column":25,"nodeType":"375","endLine":235,"endColumn":49},{"ruleId":"322","replacedBy":"376"},{"ruleId":"324","replacedBy":"377"},{"ruleId":"326","severity":1,"message":"378","line":4,"column":5,"nodeType":"328","messageId":"329","endLine":4,"endColumn":11},{"ruleId":"326","severity":1,"message":"379","line":5,"column":5,"nodeType":"328","messageId":"329","endLine":5,"endColumn":12},{"ruleId":"326","severity":1,"message":"380","line":6,"column":5,"nodeType":"328","messageId":"329","endLine":6,"endColumn":9},{"ruleId":"326","severity":1,"message":"381","line":7,"column":5,"nodeType":"328","messageId":"329","endLine":7,"endColumn":11},{"ruleId":"326","severity":1,"message":"382","line":14,"column":8,"nodeType":"328","messageId":"329","endLine":14,"endColumn":23},{"ruleId":"322","replacedBy":"383"},{"ruleId":"324","replacedBy":"384"},{"ruleId":"335","severity":1,"message":"385","line":73,"column":8,"nodeType":"337","endLine":73,"endColumn":46,"suggestions":"386"},{"ruleId":"387","severity":1,"message":"388","line":212,"column":23,"nodeType":"389","messageId":"333","endLine":212,"endColumn":25},{"ruleId":"326","severity":1,"message":"390","line":413,"column":11,"nodeType":"328","messageId":"329","endLine":413,"endColumn":26},{"ruleId":"322","replacedBy":"391"},{"ruleId":"324","replacedBy":"392"},{"ruleId":"393","severity":1,"message":"394","line":26,"column":1,"nodeType":"395","endLine":26,"endColumn":51},{"ruleId":"393","severity":1,"message":"394","line":16,"column":1,"nodeType":"395","endLine":16,"endColumn":52},{"ruleId":"322","replacedBy":"396"},{"ruleId":"324","replacedBy":"397"},{"ruleId":"340","severity":1,"message":"341","line":520,"column":65,"nodeType":"342","endLine":520,"endColumn":80},{"ruleId":"340","severity":1,"message":"341","line":526,"column":29,"nodeType":"342","endLine":526,"endColumn":44},{"ruleId":"326","severity":1,"message":"398","line":7,"column":28,"nodeType":"328","messageId":"329","endLine":7,"endColumn":38},{"ruleId":"326","severity":1,"message":"399","line":228,"column":27,"nodeType":"328","messageId":"329","endLine":228,"endColumn":43},{"ruleId":"335","severity":1,"message":"400","line":244,"column":8,"nodeType":"337","endLine":244,"endColumn":44,"suggestions":"401"},{"ruleId":"326","severity":1,"message":"402","line":6,"column":8,"nodeType":"328","messageId":"329","endLine":6,"endColumn":14},{"ruleId":"335","severity":1,"message":"403","line":253,"column":8,"nodeType":"337","endLine":253,"endColumn":102,"suggestions":"404"},{"ruleId":"335","severity":1,"message":"405","line":394,"column":8,"nodeType":"337","endLine":394,"endColumn":42,"suggestions":"406"},{"ruleId":"326","severity":1,"message":"407","line":4,"column":5,"nodeType":"328","messageId":"329","endLine":4,"endColumn":14},{"ruleId":"326","severity":1,"message":"408","line":5,"column":5,"nodeType":"328","messageId":"329","endLine":5,"endColumn":17},{"ruleId":"326","severity":1,"message":"409","line":6,"column":5,"nodeType":"328","messageId":"329","endLine":6,"endColumn":15},{"ruleId":"326","severity":1,"message":"410","line":1,"column":17,"nodeType":"328","messageId":"329","endLine":1,"endColumn":26},{"ruleId":"326","severity":1,"message":"411","line":7,"column":28,"nodeType":"328","messageId":"329","endLine":7,"endColumn":37},{"ruleId":"326","severity":1,"message":"358","line":21,"column":11,"nodeType":"328","messageId":"329","endLine":21,"endColumn":18},{"ruleId":"326","severity":1,"message":"412","line":273,"column":21,"nodeType":"328","messageId":"329","endLine":273,"endColumn":31},{"ruleId":"335","severity":1,"message":"413","line":457,"column":8,"nodeType":"337","endLine":457,"endColumn":14,"suggestions":"414"},"no-native-reassign",["415"],"no-negated-in-lhs",["416"],"no-unused-vars","'streamerCustomMediaForCheers' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'media'.","ObjectExpression","unexpected","'openTermsAndConditionsDialog' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.","ArrayExpression",["417"],"'closeTermsAndConditionsModal' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["415"],["416"],"'setSelectedEvent' is assigned a value but never used.","'setStringDate' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["415"],["416"],"'Hidden' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'ContainedButton' is defined but never used.","'classes' is assigned a value but never used.","'renderTotalPayment' is assigned a value but never used.","'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["418"],"'copyTwitchURL' is assigned a value but never used.",["415"],["416"],["419"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["415"],["416"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'LanguageHandler' is defined but never used.",["415"],["416"],"React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["420"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'shareStreamLink' is assigned a value but never used.",["415"],["416"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["415"],["416"],"'TickSquare' is defined but never used.","'setEnablingQoins' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["421"],"'styles' is defined but never used.","React Hook useEffect has missing dependencies: 'alertSideRight', 'finishReaction', and 'queueAnimation'. Either include them or remove the dependency array.",["422"],"React Hook useEffect has missing dependencies: 'displayDonation', 'donation.media', 'donation.message', and 'donation.messageExtraData'. Either include them or remove the dependency array.",["423"],"'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.","'useEffect' is defined but never used.","'ArrowIcon' is defined but never used.","'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["424"],"no-global-assign","no-unsafe-negation",{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"441","text":"442"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"443","text":"444"},"Update the dependencies array to be: [query, t, user]",{"range":"445","text":"446"},"Update the dependencies array to be: [user.uid, user.id, user.refreshToken, t, history]",{"range":"447","text":"448"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"449","text":"450"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",{"range":"451","text":"452"},"Update the dependencies array to be: [clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",{"range":"453","text":"454"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"455","text":"456"},[4704,4734],"[user, history, isLoadingAuth, query, t]",[9179,9185],"[socialLinksInitialValue, twitchURL, user]",[4945,4951],"[query, t, user]",[3702,3740],"[user.uid, user.id, user.refreshToken, t, history]",[7048,7084],"[streamStarted, dots, enablingQoins, stream]",[11881,11975],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, reactionsEnabled, queueAnimation, alertSideRight, finishReaction]",[17487,17521],"[clip, mediaReady, giphyTextReady, donation.media, donation.messageExtraData, donation.message, displayDonation]",[18267,18273],"[setPendingMessages, user]"]
[{"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js":"1","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js":"2","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js":"3","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx":"4","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx":"5","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js":"6","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStreamSuccessDialog.jsx":"7","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx":"8","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx":"9","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx":"10","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js":"11","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx":"12","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx":"13","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx":"14","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx":"15","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QlanProgressBar\\QlanProgressBar.jsx":"16","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx":"17","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx":"18","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx":"19","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx":"20","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx":"21","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js":"22","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js":"23","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx":"24","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTerms\\QaplaTerms.jsx":"25","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx":"26","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx":"27","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx":"28","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx":"29","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx":"30","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx":"31","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx":"32","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx":"33","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx":"34","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx":"35","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js":"36","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx":"37","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx":"38","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js":"39","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx":"40","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx":"41","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx":"42","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx":"43","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GoalProgressBar\\GoalProgressBar.jsx":"44"},{"size":545,"mtime":1660938322012,"results":"45","hashOfConfig":"46"},{"size":899,"mtime":1660938322023,"results":"47","hashOfConfig":"46"},{"size":240,"mtime":1660938321776,"results":"48","hashOfConfig":"46"},{"size":17018,"mtime":1660938321975,"results":"49","hashOfConfig":"46"},{"size":35175,"mtime":1660938322000,"results":"50","hashOfConfig":"46"},{"size":1425,"mtime":1660938322018,"results":"51","hashOfConfig":"46"},{"size":3422,"mtime":1660938321980,"results":"52","hashOfConfig":"46"},{"size":20096,"mtime":1660938321994,"results":"53","hashOfConfig":"46"},{"size":3265,"mtime":1660938322004,"results":"54","hashOfConfig":"46"},{"size":12209,"mtime":1660938321991,"results":"55","hashOfConfig":"46"},{"size":2247,"mtime":1660938322016,"results":"56","hashOfConfig":"46"},{"size":3435,"mtime":1660938321986,"results":"57","hashOfConfig":"46"},{"size":5837,"mtime":1660938321985,"results":"58","hashOfConfig":"46"},{"size":3452,"mtime":1660938321983,"results":"59","hashOfConfig":"46"},{"size":657,"mtime":1660938321974,"results":"60","hashOfConfig":"46"},{"size":6504,"mtime":1660938321990,"results":"61","hashOfConfig":"46"},{"size":2074,"mtime":1660938321974,"results":"62","hashOfConfig":"46"},{"size":6746,"mtime":1660938322007,"results":"63","hashOfConfig":"46"},{"size":3682,"mtime":1660938321972,"results":"64","hashOfConfig":"46"},{"size":860,"mtime":1660938321993,"results":"65","hashOfConfig":"46"},{"size":8497,"mtime":1660938321968,"results":"66","hashOfConfig":"46"},{"size":8532,"mtime":1660938322021,"results":"67","hashOfConfig":"46"},{"size":2669,"mtime":1660938322016,"results":"68","hashOfConfig":"46"},{"size":1568,"mtime":1660938322011,"results":"69","hashOfConfig":"46"},{"size":29618,"mtime":1660938321989,"results":"70","hashOfConfig":"46"},{"size":2105,"mtime":1660938322006,"results":"71","hashOfConfig":"46"},{"size":15129,"mtime":1660938322002,"results":"72","hashOfConfig":"46"},{"size":3513,"mtime":1660938321984,"results":"73","hashOfConfig":"46"},{"size":18030,"mtime":1660938322005,"results":"74","hashOfConfig":"46"},{"size":19375,"mtime":1661255623222,"results":"75","hashOfConfig":"46"},{"size":3954,"mtime":1660938321987,"results":"76","hashOfConfig":"46"},{"size":1842,"mtime":1661270347919,"results":"77","hashOfConfig":"46"},{"size":13729,"mtime":1660938321985,"results":"78","hashOfConfig":"46"},{"size":21757,"mtime":1660938321969,"results":"79","hashOfConfig":"46"},{"size":2072,"mtime":1660938322009,"results":"80","hashOfConfig":"46"},{"size":35698,"mtime":1661204966373,"results":"81","hashOfConfig":"46"},{"size":23458,"mtime":1660938321971,"results":"82","hashOfConfig":"46"},{"size":1327,"mtime":1660938322010,"results":"83","hashOfConfig":"46"},{"size":1550,"mtime":1660938322017,"results":"84","hashOfConfig":"46"},{"size":720,"mtime":1660938321988,"results":"85","hashOfConfig":"46"},{"size":7758,"mtime":1660938321967,"results":"86","hashOfConfig":"46"},{"size":3046,"mtime":1660938321997,"results":"87","hashOfConfig":"46"},{"size":1128,"mtime":1660938321966,"results":"88","hashOfConfig":"46"},{"size":6568,"mtime":1660938321973,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"pa48sw",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"97"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"114"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\index.js",[],["188","189"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\i18n.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\App.js",[],["190","191"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LiveDonations\\LiveDonations.jsx",["192","193","194","195"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditor\\StreamerProfileEditor.jsx",["196","197","198","199","200","201","202","203","204"],"import React, { useEffect, useState } from 'react';\r\nimport { withStyles, makeStyles, Button, Chip, Switch, Tabs, Tab, Tooltip } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nimport StreamerProfileEditorOnBoarding from '../StreamerProfileEditorOnBoarding/StreamerProfileEditorOnBoarding';\r\n\r\nimport styles from './StreamerProfileEditor.module.css';\r\nimport StreamerDashboardContainer from '../StreamerDashboardContainer/StreamerDashboardContainer';\r\nimport { ReactComponent as FounderBadge } from './../../assets/FounderBadge.svg'\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { getStreamerLinks, listenStreamerPublicProfile, saveStreamerLinks, updateStreamerPublicProfile } from '../../services/database';\r\nimport { ReactComponent as CopyIcon } from './../../assets/CopyPaste.svg';\r\nimport { ReactComponent as EditIcon } from './../../assets/Edit.svg';\r\nimport { ReactComponent as CameraIcon } from './../../assets/Camera.svg';\r\nimport { ReactComponent as XIcon } from './../../assets/xIcon.svg';\r\nimport ContainedButton from '../ContainedButton/ContainedButton';\r\nimport { uploadImage } from '../../services/storage';\r\nimport { MIN_TAGS, PROFILE_BACKGROUND_GRADIENTS } from '../../utilities/Constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    gridContainer: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        boxSizing: 'border-box',\r\n        flexWrap: 'nowrap'\r\n    },\r\n    linkPlaceholder: {\r\n        '&::placeholder': {\r\n            color: 'rgba(108, 93, 211, 0.4)'\r\n        }\r\n    },\r\n    linkInput: {\r\n        backgroundColor: '#202750',\r\n        color: '#FFF',\r\n        '&.Mui-disabled': {\r\n            color: '#AAA'\r\n        }\r\n    }\r\n}));\r\n\r\nconst EditBioButton = withStyles(() => ({\r\n    root: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        justifyItems: 'center',\r\n        padding: '0.8rem 1rem',\r\n        borderRadius: '0.8rem',\r\n        maxHeight: '46px',\r\n        textTransform: 'capitalize',\r\n        fontSize: '14px',\r\n        fontWeight: 600,\r\n        '&:hover': {\r\n            backgroundColor: '#24456680'\r\n        },\r\n        '&:disabled': {\r\n            backgroundColor: '#272D5780',\r\n            color: '#FFFFFF99',\r\n        },\r\n        '&#cover': {\r\n            backgroundColor: '#272D5780'\r\n        }\r\n    },\r\n\r\n}))(Button);\r\n\r\nconst QaplaChip = withStyles(() => ({\r\n    root: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFFA6',\r\n        minHeight: '41px',\r\n        borderRadius: '100rem',\r\n        padding: '1.2rem 0.4rem',\r\n        fontWeight: 600,\r\n        '&:focus': {\r\n            backgroundColor: '#4040FF4F',\r\n        },\r\n        '&:hover': {\r\n            backgroundColor: '#4040FF4F',\r\n            opacity: 0.8\r\n        }\r\n    },\r\n    deletable: {\r\n        backgroundColor: '#4040FF4F',\r\n        color: '#FFFFFFA6',\r\n        '&:focus': {\r\n            backgroundColor: '#4040FF4F',\r\n        },\r\n        '&:hover': {\r\n\r\n        }\r\n    },\r\n    deleteIcon: {\r\n        display: 'flex',\r\n        backgroundColor: '#FFFD',\r\n        borderRadius: '100px',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        '&:hover': {\r\n            backgroundColor: '#F00D'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#A00D'\r\n        }\r\n    }\r\n}))(Chip)\r\n\r\nconst QaplaSwitch = withStyles(() => ({\r\n    root: {\r\n\r\n    },\r\n    track: {\r\n        backgroundColor: '#202750'\r\n    },\r\n    checked: {\r\n        color: '#2CE9D2 !important',\r\n        '& + .MuiSwitch-track': {\r\n            backgroundColor: '#202750 !important'\r\n        }\r\n    },\r\n    thumb: {\r\n\r\n    }\r\n}))(Switch);\r\n\r\nconst QaplaTabs = withStyles({\r\n    root: {\r\n        minHeight: 0,\r\n        marginTop: '3rem'\r\n    },\r\n    indicator: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        backgroundColor: 'transparent',\r\n        '& > span': {\r\n            // maxWidth: 50,\r\n            width: '100%',\r\n            backgroundColor: '#0AFFD2',\r\n        },\r\n    },\r\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\r\n\r\nconst QaplaTab = withStyles((theme) => ({\r\n    root: {\r\n        padding: '0 0.6rem',\r\n        minWidth: 0,\r\n        minHeight: 0,\r\n        textTransform: 'none',\r\n        color: '#fff',\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        fontSize: theme.typography.pxToRem(15),\r\n        marginRight: theme.spacing(1),\r\n        '&:focus': {\r\n            opacity: 1,\r\n        },\r\n    },\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, className, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`profile-editor-tabpanel-${index}`}\r\n            aria-labelledby={`profile-editor-tab-${index}`}\r\n            {...other}\r\n            className={className}\r\n        >\r\n            {value === index && (\r\n                <>\r\n                    {children}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst StreamerProfileEditor = ({ user }) => {\r\n    const socialLinksInitialValue = [\r\n        {\r\n            socialPage: 'Twitch',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Twitter',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Instagram',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Discord',\r\n            value: ''\r\n        },\r\n        {\r\n            socialPage: 'Youtube',\r\n            value: ''\r\n        },\r\n        /* {\r\n            socialPage: 'TikTok',\r\n            value: ''\r\n        } */\r\n    ];\r\n\r\n    const socialLinksPlaceholders = {\r\n        Twitch: `https://twitch.tv/${user ? user.displayName : ''}`,\r\n        Twitter: `https://twitter.com/${user ? user.displayName : ''}`,\r\n        Instagram: `https://instagram.com/${user ? user.displayName : ''}`,\r\n        Discord: `https://discord.gg/inviteCode`,\r\n        Youtube: `https://youtube.com/chanel/Nos3Ns3C0d3`,\r\n        tiktok: `https://www.tiktok.com/@${user ? user.displayName : ''}`\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const [dataIsFetched, setDataIsFetched] = useState(false);\r\n    const [selectedTab, setSelectedTab] = useState(0);\r\n    const [editingBio, setEditingBio] = useState(false);\r\n    const [addingTag, setAddingTag] = useState(false);\r\n    const [streamerBio, setStreamerBio] = useState('');\r\n    const [backgroundUrl, setBackgroundUrl] = useState('');\r\n    const [backgroundGradient, setBackgroundGradient] = useState(null);\r\n    const [uploadImageStatus, setUploadImageStatus] = useState(0);\r\n    const [socialLinks, setSocialLinks] = useState(socialLinksInitialValue);\r\n    const [streamerTags, setStreamerTags] = useState([]);\r\n    const [socialLinksChanged, setSocialLinksChanged] = useState(false);\r\n    const [openTooltip, setOpenTooltip] = useState(false);\r\n    const [onBoardingDone, setOnBoardingDone] = useState(true);\r\n    const [onBoardingStep, setOnBoardingStep] = useState(0);\r\n    const [badge, setBadge] = useState(false);\r\n    const [chipHover, setChipHover] = useState({});\r\n    const { t } = useTranslation();\r\n    const twitchURL = `https://www.twitch.tv/${user && user.login ? user.login : ''}`;\r\n\r\n    useEffect(() => {\r\n        async function getStreamerInfo() {\r\n            listenStreamerPublicProfile(user.uid, async (info) => {\r\n                if (info.exists()) {\r\n                    const { bio, tags, backgroundUrl, backgroundGradient, badge } = info.val();\r\n                    if (!tags || tags.length < MIN_TAGS) {\r\n                        setOnBoardingDone(false);\r\n                        setOnBoardingStep(4);\r\n                    }\r\n\r\n                    if (!bio) {\r\n                        setOnBoardingDone(false);\r\n                        setOnBoardingStep(3);\r\n                    }\r\n                    setStreamerBio(bio || '');\r\n                    setBackgroundGradient(backgroundGradient);\r\n                    setBackgroundUrl(backgroundUrl);\r\n                    setStreamerTags(tags || []);\r\n                    setBadge(badge);\r\n                } else {\r\n                    setOnBoardingDone(false);\r\n                }\r\n\r\n                const links = await getStreamerLinks(user.uid);\r\n                if (links.exists()) {\r\n                    setSocialLinks(links.val());\r\n                } else {\r\n                    /**\r\n                     * Set Twitch Link by default (we already know this link)\r\n                     */\r\n                    const socialLinksWithTwitchAdded = socialLinksInitialValue;\r\n                    socialLinksWithTwitchAdded[0].value = twitchURL;\r\n\r\n                    setSocialLinks(socialLinksInitialValue);\r\n                }\r\n\r\n                setDataIsFetched(true);\r\n            });\r\n        }\r\n\r\n        if (user && user.uid) {\r\n            getStreamerInfo();\r\n        }\r\n    }, [user]);\r\n\r\n    const onBoardingDoneByStreamer = async () => {\r\n        const min = 0;\r\n        const max = 4;\r\n        const randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n        const backgroundSelected = PROFILE_BACKGROUND_GRADIENTS[randomIndex];\r\n        setBackgroundGradient(backgroundSelected);\r\n\r\n        await updateStreamerPublicProfile(user.uid, {\r\n            backgroundGradient: backgroundSelected,\r\n            displayName: user.displayName,\r\n            photoUrl: user.photoUrl\r\n        });\r\n\r\n        window.analytics.track('Public profile onboarding done', {\r\n            uid: user.uid,\r\n            timestamp: (new Date()).getTime()\r\n        });\r\n        setOnBoardingDone(true);\r\n    }\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setSelectedTab(newValue)\r\n    }\r\n\r\n    const handleTagDelete = async (indexToDelete) => {\r\n        const tags = streamerTags.filter((tag, index) => indexToDelete !== index);\r\n\r\n        try {\r\n            await updateStreamerPublicProfile(user.uid, { tags });\r\n            setStreamerTags(tags);\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(t('StreamerProfileEditor.errors.deleteTag'));\r\n        }\r\n    }\r\n\r\n    const updateSocialLinks = (value, index) => {\r\n        setSocialLinksChanged(true);\r\n        let newArray = [...socialLinks];\r\n        newArray[index] = {\r\n            ...newArray[index],\r\n            value\r\n        };\r\n\r\n        setSocialLinks(newArray);\r\n    }\r\n\r\n    const saveLinks = async () => {\r\n        // Creates an array without the placeholder value\r\n        const objectToSave = {};\r\n        socialLinks.forEach((link, index) => {\r\n            objectToSave[index] = { socialPage: link.socialPage, value: link.value };\r\n        });\r\n\r\n        try {\r\n            await saveStreamerLinks(user.uid, objectToSave);\r\n        } catch (error) {\r\n            console.log(error);\r\n            alert(t('StreamerProfileEditor.errors.updateLinks'));\r\n        }\r\n        setSocialLinksChanged(false);\r\n    }\r\n\r\n    const addTag = async () => {\r\n        setOnBoardingStep(4);\r\n        setAddingTag(true);\r\n    }\r\n\r\n    const uploadBackgroundImage = (e) => {\r\n        if (e.target.files[0]) {\r\n            const newBackgroundImage = (e.target.files[0]);\r\n            uploadImage(\r\n                newBackgroundImage,\r\n                `/StreamersProfilesBackgroundImages/${user.uid}`,\r\n                (progressValue) => setUploadImageStatus(progressValue * 100),\r\n                (error) => { alert('Error al agregar imagen'); console.log(error); },\r\n                async (url) => {\r\n                    try {\r\n                        await updateStreamerPublicProfile(user.uid, { backgroundUrl: url });\r\n                        alert(t('StreamerProfileEditor.confirmations.saveImage'));\r\n                    } catch (error) {\r\n                        alert(t('StreamerProfileEditor.errors.saveImage'));\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            );\r\n\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () => {\r\n                setBackgroundUrl(reader.result);\r\n            });\r\n\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const copyTwitchURL = () => {\r\n        navigator.clipboard.writeText(twitchURL);\r\n        setOpenTooltip(true);\r\n        setTimeout(() => {\r\n            setOpenTooltip(false);\r\n        }, 1250);\r\n    }\r\n\r\n    const createLinearGradientCSS = () => {\r\n        if (backgroundGradient) {\r\n            let colorsString = '';\r\n            backgroundGradient.colors.forEach((color, index) => {\r\n                if (index !== backgroundGradient.colors.length - 1) {\r\n                    colorsString += `${color},`;\r\n                } else {\r\n                    colorsString += color;\r\n                }\r\n            });\r\n\r\n            return `linear-gradient(${backgroundGradient.angle}deg, ${colorsString})`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    const editBio = () => {\r\n        setOnBoardingStep(3);\r\n        setEditingBio(true);\r\n    }\r\n\r\n    const cancelEditing = () => {\r\n        setEditingBio(false);\r\n        setAddingTag(false);\r\n    }\r\n\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n        let source = result.source.index\r\n        let destination = result.destination.index\r\n\r\n        if (source === destination) {\r\n            return\r\n        }\r\n\r\n        const socialLinksCopy = [...socialLinks];\r\n        socialLinksCopy.splice(destination, 0, socialLinksCopy.splice(source, 1)[0]);\r\n\r\n        setSocialLinks(socialLinksCopy);\r\n        setSocialLinksChanged(true);\r\n    }\r\n\r\n    return (\r\n        <StreamerDashboardContainer user={user} containerStyle={styles.profileEditorContainer}>\r\n            {dataIsFetched &&\r\n                <>\r\n                    {onBoardingDone && !editingBio && !addingTag ?\r\n                        <>\r\n                            <div className={styles.coverContainer}>\r\n                                {backgroundUrl ?\r\n                                    <img src={backgroundUrl} alt='Cover' className={styles.cover} />\r\n                                    :\r\n                                    <div className={styles.cover} style={{ background: createLinearGradientCSS() }} />\r\n                                }\r\n                            </div>\r\n                            <div className={styles.editCoverButtonContainer}>\r\n                                <input\r\n                                    accept='image/*'\r\n                                    style={{ display: 'none' }}\r\n                                    type='file'\r\n                                    id='image-input'\r\n                                    onChange={uploadBackgroundImage} />\r\n                                <label htmlFor='image-input'>\r\n                                    <EditBioButton id='cover' component='span'>\r\n                                        <CameraIcon />\r\n                                        <div style={{ width: '0.4rem' }} />\r\n                                        {t('StreamerProfileEditor.editCover')}\r\n                                    </EditBioButton>\r\n                                </label>\r\n                            </div>\r\n                            <div className={styles.profileContainer}>\r\n                                <div className={styles.profilePicContainer}>\r\n                                    <img src={user.photoUrl} alt='User pfp' className={styles.profilePic} />\r\n                                </div>\r\n                                <div className={styles.streamerNameAndEditBioButtonContainer}>\r\n                                    <div className={styles.streamerNameContainer}>\r\n                                        <p className={styles.streamerName}>\r\n                                            {user.displayName}\r\n                                        </p>\r\n                                        <div className={styles.founderBadgeContainer}>\r\n                                            {badge &&\r\n                                                <FounderBadge className={styles.founderBadge} />\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className={styles.editBioButtonContainer}>\r\n                                        <EditBioButton variant='contained'\r\n                                            onClick={editBio}>\r\n                                            {!editingBio ?\r\n                                                <>\r\n                                                    <EditIcon />\r\n                                                    <div style={{ width: '0.4rem' }} />\r\n                                                    {t('StreamerProfileEditor.editBio')}\r\n                                                </>\r\n                                                :\r\n                                                t('StreamerProfileEditor.saveChanges')\r\n                                            }\r\n                                        </EditBioButton>\r\n                                    </div>\r\n                                </div>\r\n                                {/* <div className={styles.twitchURLContainer}>\r\n                                    <a href={twitchURL} target='_blank' rel='noreferrer' className={styles.twitchURL} >{twitchURL}</a>\r\n                                    <Tooltip placement='top' open={openTooltip} title='Copiado'>\r\n                                        <CopyIcon onClick={copyTwitchURL} />\r\n                                    </Tooltip>\r\n                                </div> */}\r\n                                <div className={styles.bioContainer}>\r\n                                    <p className={styles.bioText} onClick={editBio}>\r\n                                        {streamerBio}\r\n                                    </p>\r\n                                </div>\r\n                                <ul className={styles.tagsList}>\r\n                                    {streamerTags.map((data, index) => {\r\n                                        return (\r\n                                            <li key={`chip-${data}-${index}`} className={styles.tag}>\r\n                                                <QaplaChip\r\n                                                    label={data}\r\n                                                    onDelete={() => handleTagDelete(index)}\r\n                                                />\r\n                                            </li>\r\n                                        )\r\n                                    })}\r\n                                    <li key='new' className={styles.tag}>\r\n                                        <QaplaChip onClick={addTag}\r\n                                            label={t('StreamerProfileEditor.addTag')}\r\n                                        />\r\n                                    </li>\r\n                                </ul>\r\n                                <div className={styles.showNextStreamsContainer}>\r\n                                    <p className={styles.showNextStreamsText}>\r\n                                        {t('StreamerProfileEditor.showUpcomingStreams')}\r\n                                    </p>\r\n                                    <QaplaSwitch\r\n                                        name='showNextStreams'\r\n                                    /** ToDo: Show streams in profile. Also show twitch status (online or offline) <= more of this on cloud function */\r\n                                    />\r\n                                </div>\r\n                                <QaplaTabs value={selectedTab} onChange={handleTabChange} aria-label='profile editor tabs' >\r\n                                    <QaplaTab wid label={t('StreamerProfileEditor.social')} {...a11yProps(0)} />\r\n                                    {/* <QaplaTab label='Códigos de creador' {...a11yProps(1)} /> */}\r\n                                </QaplaTabs>\r\n                                <TabPanel value={selectedTab} index={0} className={styles.socialLinksContainer}>\r\n                                    <DragDropContext onDragEnd={onDragEnd}>\r\n                                        <Droppable droppableId='links-droppable'>\r\n                                            {(provided, snapshot) => (\r\n                                                <div style={{ width: '100%' }}\r\n                                                    {...provided.droppableProps}\r\n                                                    ref={provided.innerRef}\r\n                                                >\r\n                                                    {socialLinks.map((data, index) => (\r\n                                                        <Draggable key={`draggable-link-${index}`} draggableId={`draggable-link-${index}`} index={index}>\r\n                                                            {(provided, snapshot) => (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                >\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            display: 'flex',\r\n                                                                            flexDirection: 'row',\r\n                                                                            alignItems: 'center',\r\n                                                                            width: '100%'\r\n                                                                        }}>\r\n                                                                        <div style={{ display: 'flex', width: '100%' }}>\r\n                                                                            <StreamerTextInput\r\n                                                                                label={data.socialPage}\r\n                                                                                containerClassName={styles.socialLinkContainer}\r\n                                                                                labelClassName={styles.socialLinkLabel}\r\n                                                                                value={data.value}\r\n                                                                                disabled={data.socialPage.toLowerCase() === 'twitch'}\r\n                                                                                placeholder={socialLinksPlaceholders[data.socialPage]}\r\n                                                                                classes={{ input: classes.linkPlaceholder }}\r\n                                                                                textInputClassName={classes.linkInput}\r\n                                                                                fullWidth\r\n                                                                                onChange={(e) => updateSocialLinks(e.target.value, index)}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                        <div style={{\r\n                                                                            display: 'flex',\r\n                                                                            backgroundColor: '#141833',\r\n                                                                            width: '30px',\r\n                                                                            minWidth: '30px',\r\n                                                                            height: '45px',\r\n                                                                            marginBottom: '12px',\r\n                                                                            alignSelf: 'flex-end',\r\n                                                                            borderRadius: '8px'\r\n\r\n                                                                        }} >\r\n                                                                            <div style={{\r\n                                                                                display: 'flex',\r\n                                                                                flex: 1,\r\n                                                                                padding: '14px 10px',\r\n                                                                            }}>\r\n                                                                                <div style={{\r\n                                                                                    display: 'flex',\r\n                                                                                    flex: 1,\r\n                                                                                    flexDirection: 'column',\r\n                                                                                    justifyContent: 'space-between',\r\n                                                                                }}>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                    <div style={{\r\n                                                                                        display: 'flex',\r\n                                                                                        flex: 1,\r\n                                                                                        flexDirection: 'row',\r\n                                                                                        justifyContent: 'space-between',\r\n                                                                                        maxHeight: '3px'\r\n                                                                                    }}>\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                        <div style={{\r\n                                                                                            display: 'flex',\r\n                                                                                            backgroundColor: '#C4C4C4',\r\n                                                                                            width: '3px',\r\n                                                                                            height: '3px',\r\n                                                                                            borderRadius: '100px'\r\n                                                                                        }} />\r\n                                                                                    </div>\r\n                                                                                </div>\r\n\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            )}\r\n                                                        </Draggable>\r\n                                                    ))}\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )}\r\n                                        </Droppable>\r\n                                    </DragDropContext>\r\n                                    <br />\r\n                                    {socialLinksChanged &&\r\n                                        <ContainedButton onClick={saveLinks}>\r\n                                            {t('StreamerProfileEditor.saveChanges')}\r\n                                        </ContainedButton>\r\n                                    }\r\n                                </TabPanel>\r\n                                <TabPanel value={selectedTab} index={1}>\r\n                                    <p>b</p>\r\n                                </TabPanel>\r\n                            </div>\r\n                        </>\r\n                        :\r\n                        <StreamerProfileEditorOnBoarding step={onBoardingStep}\r\n                            user={user}\r\n                            onBoardingDone={onBoardingDoneByStreamer}\r\n                            showOnlySpecificStep={editingBio || addingTag}\r\n                            streamerBio={streamerBio}\r\n                            streamerTags={streamerTags}\r\n                            closeOnBoarding={cancelEditing} />\r\n                    }\r\n                </>\r\n            }\r\n        </StreamerDashboardContainer>\r\n    )\r\n}\r\n\r\nexport default StreamerProfileEditor;",["205","206"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\storage.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\NewStream\\NewStreamSuccessDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamCard\\StreamCard.jsx",["207"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles, Card, Button, CircularProgress } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ReactComponent as CalendarIcon } from './../../assets/CalendarIcon.svg';\r\nimport {\r\n    streamsPlaceholderImages,\r\n    SCHEDULED_EVENT_TYPE,\r\n    PAST_STREAMS_EVENT_TYPE,\r\n    PENDING_APPROVAL_EVENT_TYPE,\r\n    HOUR_IN_MILISECONDS\r\n} from '../../utilities/Constants';\r\nimport {\r\n    cancelStreamRequest,\r\n    getStreamTitle,\r\n    getPastStreamTitle,\r\n    checkActiveCustomReward\r\n} from '../../services/database';\r\nimport { closeQaplaStream, enableStreamQoinsReward, startQaplaStream } from '../../services/streamQapla';\r\nimport EventManagementDialog from '../QaplaStreamDialogs/EventManagementDialog';\r\nimport EventConfirmStartDialog from '../QaplaStreamDialogs/EventConfirmStartDialog';\r\nimport EventWarningQoinsDialog from '../QaplaStreamDialogs/EventWarningQoinsDialog';\r\nimport EventEndStreamConfirmDialog from '../QaplaStreamDialogs/EventEndStreamConfirmDialog';\r\nimport EventRewardsRemovedConfirmation from '../QaplaStreamDialogs/EventRewardsRemovedConfirmation';\r\nimport { auth } from '../../services/firebase';\r\nimport EventCustomMessageSentConfirmation from '../QaplaStreamDialogs/EventCustomMessageSentConfirmation';\r\nimport { sendCustomMessage } from '../../services/functions';\r\nimport { generateStreamDynamicLink } from '../../services/dynamicLinks';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    eventCard: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '1.5rem',\r\n        boxShadow: '0 6px 15px 0 rgba(0,0,0,0.31)',\r\n        height: '100%',\r\n        minWidth: '250px',\r\n        minHeight: '360px',\r\n    },\r\n    relativeContainer: {\r\n        position: 'relative'\r\n    },\r\n    hourContainer: {\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        top: '1rem',\r\n        background: '#1B1D2159',\r\n        borderRadius: '.5rem'\r\n    },\r\n    hourText: {\r\n        color: '#FFF',\r\n        padding: '2px 8px',\r\n        fontSize: '11px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        letterSpacing: '-0.5px',\r\n        textAlign: 'center'\r\n\r\n    },\r\n    dateContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        position: 'absolute',\r\n        right: '1rem',\r\n        bottom: '1rem',\r\n        padding: '2px 10px',\r\n        background: '#1B1D21',\r\n        height: '32px',\r\n        borderRadius: '10px'\r\n    },\r\n    dateText: {\r\n        color: '#FFF',\r\n        fontSize: '13px',\r\n        fontWeight: '700',\r\n        lineHeight: '20px',\r\n        marginLeft: '10px'\r\n    },\r\n    eventImage: {\r\n        objectFit: 'cover',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center',\r\n        borderRadius: '24px'\r\n    },\r\n    eventCardContent: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        padding: '24px 16px',\r\n        height: '100%'\r\n    },\r\n    eventCardTitle: {\r\n        color: '#FFFFFF',\r\n        fontSize: '16px',\r\n        lineHeight: '24px',\r\n        fontWeight: '500',\r\n        height: '48px',\r\n\r\n    },\r\n    rowContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    circle: {\r\n        borderRadius: '100%',\r\n        height: '.55rem',\r\n        width: '.55rem',\r\n        marginRight: '.5rem'\r\n    },\r\n    participantsNumber: {\r\n        fontSize: '12px',\r\n        textAlign: 'right',\r\n        lineHeight: '16px'\r\n    },\r\n    streamButton: {\r\n        backgroundColor: '#6C5DD3 !important',\r\n        color: '#FFF'\r\n    },\r\n    buttonsContainer: {\r\n        marginTop: 'auto'\r\n    },\r\n    startButton: {\r\n        backgroundColor: '#00FFDD',\r\n        color: '#0D1021',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    endButton: {\r\n        backgroundColor: '#3B4BF9',\r\n        color: '#FFF',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    manageButton: {\r\n        backgroundColor: '#272D5780',\r\n        color: '#FFFFFF99',\r\n        width: '100%',\r\n        borderRadius: '8px',\r\n        textTransform: 'none'\r\n    }\r\n}));\r\n\r\nconst StreamCard = ({ user, streamId, streamType, game, games, date, hour, onRemoveStream, style = {}, timestamp, image }) => {\r\n    // This information is not longer visible in the card but maybe in the future we would want to show it again\r\n    // const [participantsNumber, setParticipantsNumber] = useState(null);\r\n    const [title, setTitle] = useState({ en: '', es: '' });\r\n    const [stream, setStream] = useState(null);\r\n    const [showRewardsOptions, setShowRewardsOptions] = useState(false);\r\n    const [openStreamDialog, setOpenStreamDialog] = useState(false);\r\n    const [openStreamStartedDialog, setOpenStreamStartedDialog] = useState(false);\r\n    const [openQoinsWarningDialog, setOpenQoinsWarningDialog] = useState(false);\r\n    const [openEndStreamDialog, setOpenEndStreamDialog] = useState(false);\r\n    const [startingStream, setStartingStream] = useState(false);\r\n    const [closingStream, setClosingStream] = useState(false);\r\n    const [openRewardsRemovedDialog, setOpenRewardsRemovedDialog] = useState(false);\r\n    const [openCustomMessageSentDialog, setOpenCustomMessageSentDialog] = useState(false);\r\n    const [loadingDots, setLoadingDots] = useState('');\r\n    const [hideStream, setHideStream] = useState(false);\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        async function getParticipantsNumber() {\r\n            if (streamType === SCHEDULED_EVENT_TYPE) {\r\n                /* const participants = await getStreamParticipantsNumber(streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getStreamTitle(streamId);\r\n                if (title.exists()) {\r\n                    setTitle(title.val());\r\n                } else if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            } else if (streamType === PAST_STREAMS_EVENT_TYPE) {\r\n                /* const participants = await getPastStreamParticipantsNumber(user.uid, streamId);\r\n                let participantsNumber = participants.exists() ? participants.val() : 0;\r\n                setParticipantsNumber(participantsNumber); */\r\n\r\n                const title = await getPastStreamTitle(user.uid, streamId);\r\n                setTitle(title.val());\r\n            } else if (streamType === PENDING_APPROVAL_EVENT_TYPE) {\r\n                if (games['allGames'] && games['allGames'][game] && games['allGames'][game].gameName) {\r\n                    setTitle({ en: games['allGames'][game].gameName });\r\n                }\r\n            }\r\n        }\r\n\r\n        async function checkStreamStatus() {\r\n            const streamStatus = await checkActiveCustomReward(streamId);\r\n            if (streamStatus.exists()) {\r\n                setStream({ key: streamStatus.key, ...streamStatus.val() });\r\n                setShowRewardsOptions(true);\r\n                setHideStream(false);\r\n            } else {\r\n                setStream(null);\r\n            }\r\n        }\r\n\r\n\r\n        getParticipantsNumber();\r\n        checkStreamStatus();\r\n\r\n        if (streamType === SCHEDULED_EVENT_TYPE && !showRewardsOptions) {\r\n            const fifteenMinutesInMilliseconds = HOUR_IN_MILISECONDS / 4;\r\n            const currentTimestamp = (new Date()).getTime();\r\n            if ((currentTimestamp + fifteenMinutesInMilliseconds) >= timestamp) {\r\n                if ((timestamp + (HOUR_IN_MILISECONDS * 3)) < currentTimestamp) {\r\n                    setHideStream(true);\r\n                } else {\r\n                    setShowRewardsOptions(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (startingStream) {\r\n            setTimeout(() => {\r\n                if (loadingDots.length > 2) {\r\n                    setLoadingDots('');\r\n                } else {\r\n                    setLoadingDots(loadingDots + '.');\r\n                }\r\n            }, 500);\r\n        } else if (loadingDots !== '') {\r\n            setLoadingDots('');\r\n        }\r\n\r\n        // stream is not in this array intentionally, cause it causes a loop because of the checkActiveCustomReward function\r\n    }, [game, games, streamId, streamType, user, loadingDots, startingStream, showRewardsOptions, timestamp]);\r\n\r\n    const cancelStream = (e) => {\r\n        e.stopPropagation();\r\n        if (window.confirm(t('StreamCard.deleteConfirmation'))) {\r\n            cancelStreamRequest(user.uid, streamId);\r\n            onRemoveStream(streamId);\r\n        }\r\n    }\r\n\r\n    const startStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setStartingStream(true);\r\n            const streamData = await startQaplaStream(user.uid, user.id, user.displayName, user.refreshToken, streamId, user.subscriptionDetails.redemptionsPerStream);\r\n\r\n            window.analytics.track('Stream started', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream(streamData);\r\n            if (!openStreamDialog) {\r\n                setOpenStreamStartedDialog(true);\r\n            }\r\n            setStartingStream(false);\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const closeStream = async (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        try {\r\n            setClosingStream(true);\r\n            await closeQaplaStream(user.uid, user.id, user.refreshToken, streamId, stream.xqReward, stream.xqRewardWebhookId, stream.qoinsReward, stream.qoinsRewardWebhookId);\r\n\r\n            window.analytics.track('Stream finished', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setOpenRewardsRemovedDialog(true);\r\n\r\n            // Close the rest of Dialogs just in case\r\n            setOpenStreamStartedDialog(false);\r\n            setOpenQoinsWarningDialog(false);\r\n            setOpenStreamDialog(false);\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const checkIfCloseStreamDialogMustBeShown = (e) => {\r\n        if (e) {\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (stream.qoinsEnabled) {\r\n            const dontShowCloseStreamWarning = localStorage.getItem('dontShowCloseStreamDialog');\r\n            if (dontShowCloseStreamWarning) {\r\n                closeStream();\r\n            } else {\r\n                setOpenEndStreamDialog(true);\r\n            }\r\n        } else {\r\n            setOpenQoinsWarningDialog(true);\r\n        }\r\n    }\r\n\r\n    const enableQoinsReward = async () => {\r\n        try {\r\n            await enableStreamQoinsReward(user.uid, user.id, user.refreshToken, streamId, stream.qoinsReward);\r\n\r\n            window.analytics.track('Qoins enabled', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime()\r\n            });\r\n            setStream({ ...stream, qoinsEnabled: true });\r\n        } catch (error) {\r\n            handleExpiredSession();\r\n        }\r\n    }\r\n\r\n    const handleExpiredSession = async () => {\r\n        alert(t('StreamCard.sessionExpired'));\r\n        await auth.signOut();\r\n        history.push('/');\r\n    }\r\n\r\n    const manageStream = () => history.push({ pathname: `/edit/${streamId}`, state: { streamType } });\r\n\r\n    const closeDialogsAndOpenManageRewardsDialog = () => {\r\n        setOpenStreamStartedDialog(false);\r\n        setOpenQoinsWarningDialog(false);\r\n        setOpenStreamDialog(true);\r\n    }\r\n\r\n    const closeAndRemoveStream = () => {\r\n        setOpenRewardsRemovedDialog(false);\r\n        onRemoveStream(streamId);\r\n    }\r\n\r\n    const sendMessage = async (message) => {\r\n        if (message) {\r\n            await sendCustomMessage(user.uid, title && title['en'] ? title['en'] : '', message);\r\n\r\n            window.analytics.track('Custom Message sent', {\r\n                streamId,\r\n                uid: user.uid,\r\n                timestamp: (new Date()).getTime(),\r\n                message\r\n            });\r\n            setOpenCustomMessageSentDialog(true);\r\n        }\r\n    }\r\n\r\n    const shareStreamLink = async () => {\r\n        const link = await generateStreamDynamicLink(streamId, {\r\n            title: title && title['en'] ? title['en'] : '',\r\n            description: `Evento de ${user.displayName}`,\r\n            image: image ? image : ''\r\n        });\r\n\r\n        // This does not work on Safari for some reason\r\n        if (link) {\r\n            navigator.clipboard.writeText(link);\r\n        }\r\n    }\r\n\r\n    if (game && !hideStream) {\r\n        return (\r\n            <Card className={classes.eventCard} style={style}>\r\n                <div className={classes.relativeContainer}>\r\n                    <div className={classes.hourContainer}>\r\n                        <p className={classes.hourText}>\r\n                            {hour}\r\n                        </p>\r\n                    </div>\r\n                    <div className={classes.dateContainer}>\r\n                        <CalendarIcon />\r\n                        <p className={classes.dateText}>\r\n                            {date}\r\n                        </p>\r\n                    </div>\r\n                    <img\r\n                        alt='Game'\r\n                        src={image ? image : (streamsPlaceholderImages[game] || (games.allGames[game] ? games.allGames[game].fallbackImageUrl : null))}\r\n                        width='100%'\r\n                        height='180'\r\n                        className={classes.eventImage} />\r\n                </div>\r\n                <div className={classes.eventCardContent}>\r\n                    <p className={classes.eventCardTitle}>\r\n                        {title && title['en'] ? title['en'] : ''}\r\n                    </p>\r\n                    {streamType !== PAST_STREAMS_EVENT_TYPE && !showRewardsOptions &&\r\n                        <div style={{ display: 'flex', marginTop: '14px', alignItems: 'center' }}>\r\n                            <div style={{\r\n                                backgroundColor: streamType === PENDING_APPROVAL_EVENT_TYPE ? '#C6B200' : '#00FFDD',\r\n                                width: '8px',\r\n                                height: '8px',\r\n                                borderRadius: '50%'\r\n                            }} />\r\n                            <div style={{ width: '6px' }} />\r\n                            <p style={{ color: '#FFF', fontSize: '12px', fontWeight: '500', lineHeight: '16px' }}>\r\n                                {streamType === PENDING_APPROVAL_EVENT_TYPE ? t('StreamCard.pendingReview') : t('StreamCard.posted')}\r\n                            </p>\r\n                        </div>\r\n                    }\r\n                    <div className={classes.buttonsContainer}>\r\n                        {(showRewardsOptions && streamType === SCHEDULED_EVENT_TYPE) &&\r\n                            (!startingStream ?\r\n                                (stream ?\r\n                                    (!closingStream ?\r\n                                        <Button size='medium' className={classes.endButton}\r\n                                            disabled={closingStream}\r\n                                            onClick={checkIfCloseStreamDialogMustBeShown}>\r\n                                            {t('StreamCard.end')}\r\n                                        </Button>\r\n                                        :\r\n                                        <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                                            <CircularProgress style={{ color: '#3B4BF9' }} />\r\n                                        </div>\r\n                                    )\r\n                                    :\r\n                                    <Button size='medium' className={classes.startButton}\r\n                                        onClick={startStream }>\r\n                                        {t('StreamCard.start')}\r\n                                    </Button>\r\n                                )\r\n                                :\r\n                                <p style={{ fontSize: 11, fontWeight: '600', textAlign: 'center', color: '#FFF', marginBottom: 16 }}>\r\n                                    {`${t('StreamCard.creatingRewards')}${loadingDots}`}\r\n                                </p>\r\n                            )\r\n                        }\r\n                        <div style={{ height: '11px' }} />\r\n                        {streamType === SCHEDULED_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={showRewardsOptions ? setOpenStreamDialog : manageStream}>\r\n                                {showRewardsOptions ?\r\n                                    t('StreamCard.manageRewards')\r\n                                    :\r\n                                    t('StreamCard.manageStream')\r\n                                }\r\n                            </Button>\r\n                        }\r\n                        {streamType === PENDING_APPROVAL_EVENT_TYPE &&\r\n                            <Button size='medium' className={classes.manageButton} onClick={cancelStream}>\r\n                                {t('StreamCard.cancelStreamRequest')}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <EventManagementDialog open={openStreamDialog}\r\n                    user={user}\r\n                    sendMessage={sendMessage}\r\n                    streamId={streamId}\r\n                    stream={stream}\r\n                    streamStarted={startingStream}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenStreamDialog(false)}\r\n                    startStream={startStream}\r\n                    enableQoins={enableQoinsReward}\r\n                    closeStream={checkIfCloseStreamDialogMustBeShown}\r\n                    streamTitle={title && title['en'] ? title['en'] : ''}\r\n                    date={date}\r\n                    hour={hour} />\r\n                <EventConfirmStartDialog open={openStreamStartedDialog}\r\n                    onClose={() => setOpenStreamStartedDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventWarningQoinsDialog open={openQoinsWarningDialog}\r\n                    onClose={() => setOpenQoinsWarningDialog(false)}\r\n                    manageRewards={closeDialogsAndOpenManageRewardsDialog} />\r\n                <EventEndStreamConfirmDialog open={openEndStreamDialog}\r\n                    closingStream={closingStream}\r\n                    onClose={() => setOpenEndStreamDialog(false)}\r\n                    closeStream={closeStream} />\r\n                <EventRewardsRemovedConfirmation open={openRewardsRemovedDialog}\r\n                    onClose={closeAndRemoveStream}  />\r\n                <EventCustomMessageSentConfirmation open={openCustomMessageSentDialog}\r\n                    onClose={() => setOpenCustomMessageSentDialog(false)} />\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default StreamCard;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSelect\\StreamerSelect.jsx",["208","209","210"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    makeStyles,\r\n    InputBase,\r\n    NativeSelect,\r\n    InputLabel,\r\n    List,\r\n    ListItem,\r\n    ListItemText\r\n} from '@material-ui/core';\r\n\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\n\r\nconst useStyles = makeStyles({\r\n    label: {\r\n        fontSize: '12px',\r\n        color: '#B2B3BD',\r\n        lineHeight: '16px'\r\n    },\r\n    input: {\r\n        display: 'flex',\r\n        position: 'absolute',\r\n        zIndex: 90,\r\n        overflow: 'hidden',\r\n        fontWeight: 'bold',\r\n        backgroundColor: '#141833',\r\n        borderRadius: '16px',\r\n        color: '#FFF',\r\n        fontSize: '14px',\r\n    },\r\n    icon: {\r\n        color: 'transparent',\r\n        marginTop: 8,\r\n        marginRight: 8,\r\n        marginLeft: 8\r\n    }\r\n});\r\n\r\nconst StreamerSelect = ({ children, style, label, Icon, value, onChange, data, maxHeightOpen, overflowX, overflowY, initialLabel }) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false)\r\n    const [selectedLabel, setSelectedLabel] = useState(initialLabel || '')\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            data.forEach(e => {\r\n                if (e.value === value) setSelectedLabel(e.label)\r\n            });\r\n        }\r\n        if (initialLabel && value === undefined) {\r\n            setSelectedLabel(initialLabel);\r\n        }\r\n    }, [data, initialLabel, value])\r\n\r\n    return (\r\n        <div className={classes.input} style={style}>\r\n            <List style={{ display: 'flex', flexDirection: 'column', padding: '0px', width: '100%', minHeight: '58px' }}>\r\n                <ListItem button onClick={() => { setOpen(!open); console.log(data) }} style={{ minHeight: '58px' }}>\r\n                    <ListItemText primary={selectedLabel} primaryTypographyProps={{\r\n                        style: {\r\n                            fontFamily: 'Inter'\r\n                        }\r\n                    }} />\r\n                    <div style={{ width: '10px' }} />\r\n                    <ArrowIcon style={{\r\n                        transform: open ? 'rotate(180deg)' : ''\r\n                    }} />\r\n                </ListItem>\r\n                <div style={{\r\n                    height: open ? maxHeightOpen || '' : '0px',\r\n                    overflowX: overflowX || 'scroll',\r\n                    overflowY: overflowY || 'scroll',\r\n                    marginTop: '-10px'\r\n                }}>\r\n                    <List style={{\r\n                        padding: '0px',\r\n                    }}>\r\n                        {data && data.map((dat) => {\r\n                            return (\r\n                                <>\r\n                                    {value !== dat.value &&\r\n                                        <ListItem button onClick={() => { onChange(dat.value); setOpen(false) }}>\r\n                                            <ListItemText primary={dat.label} />\r\n                                        </ListItem>\r\n                                    }\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </List>\r\n                </div>\r\n            </List>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default StreamerSelect;",["211","212"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\RequestActivation\\RequestActivation.jsx",["213"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\dynamicLinks.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventRewardsRemovedConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventEndStreamConfirmDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventConfirmStartDialog.jsx",[],["214","215"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageHandler\\LanguageHandler.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QlanProgressBar\\QlanProgressBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\LanguageSelect\\LanguageSelect.jsx",["216","217"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { changeLanguage, getAvailableLanguages, getCurrentLanguage } from '../../utilities/i18n';\r\nimport { ReactComponent as TranslateIcon } from './../../assets/Translate.svg';\r\nimport { ReactComponent as ArrowIcon } from './../../assets/Arrow.svg';\r\nimport StreamerSelect from '../StreamerSelect/StreamerSelect';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    languageLabel: {\r\n        color: '#FFF',\r\n        fontSize: 16,\r\n        fontWeight: 600\r\n    }\r\n}));\r\n\r\nconst LanguageSelect = () => {\r\n    const [currentLanguageCode, setCurrentLanguageCode] = useState(getCurrentLanguage());\r\n    const [langData, setLangData] = useState([])\r\n    const classes = useStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        let tempLangArr = []\r\n        getAvailableLanguages().map((languageCode) => (\r\n            tempLangArr.push({\r\n                value: languageCode,\r\n                label: t(`LanguageHandler.languages.${languageCode}`)\r\n            })\r\n        ))\r\n        setLangData(tempLangArr)\r\n    }, [t])\r\n\r\n    const onLanguageChanged = (languageCode) => {\r\n        changeLanguage(languageCode);\r\n        setCurrentLanguageCode(languageCode);\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex'\r\n        }}>\r\n            <TranslateIcon style={{\r\n                display: 'flex'\r\n            }} />\r\n            {/* The style of this select needs to be implemented inline */}\r\n            <div style={{\r\n                marginTop: '-10px',\r\n            }}>\r\n                <StreamerSelect\r\n                    style={{ backgroundColor: '#141833' }}\r\n                    data={langData}\r\n                    value={currentLanguageCode}\r\n                    onChange={onLanguageChanged}\r\n                    overflowY='hidden'\r\n                    overflowX='hidden'\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LanguageSelect;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamersSignin\\StreamersSignin.jsx",["218"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EventSent\\EventSent.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\Settings\\Settings.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\ChargeConfirmationPage\\ChargeConfirmationPage.jsx",["219","220"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\utilities\\Constants.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\discord.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsSwitch\\StreamsSwitch.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTerms\\QaplaTerms.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerTextInput\\StreamerTextInput.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditorOnBoarding\\StreamerProfileEditorOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventCustomMessageSentConfirmation.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerSideBar\\StreamerSideBar.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfile\\StreamerProfile.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventWarningQoinsDialog.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerProfileEditCoin\\StreamerProfileEditCoin.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaStreamDialogs\\EventManagementDialog.jsx",["221"],"import React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button, Dialog, DialogContent, makeStyles } from '@material-ui/core';\r\n\r\nimport StreamerTextInput from '../StreamerTextInput/StreamerTextInput';\r\nimport { ReactComponent as CloseIcon } from './../../assets/CloseIcon.svg';\r\nimport { ReactComponent as TickSquare } from './../../assets/TickSquare.svg';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dialogContainer: {\r\n        backdropFilter: 'blur(50px)',\r\n        [theme.breakpoints.down('md')]: {\r\n            backgroundColor: '#141833',\r\n        }\r\n    },\r\n    dialogRoot: {\r\n    },\r\n    paper: {\r\n        backgroundColor: '#141833',\r\n        color: '#FFF',\r\n        overflow: 'visible',\r\n        borderRadius: '35px',\r\n        padding: '64px',\r\n        minWidth: 'min-content',\r\n        [theme.breakpoints.down('md')]: {\r\n            minWidth: '100%',\r\n            minHeight: '100%',\r\n        }\r\n    },\r\n    itemsContainer: {\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            padding: '184px 66px 20px 66px',\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            flexWrap: 'wrap',\r\n            gap: '50px 0px'\r\n        }\r\n    },\r\n    closeButtonContainer: {\r\n        position: 'absolute',\r\n        top: '24px',\r\n        right: '24px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '118px',\r\n            right: '128px',\r\n        }\r\n    },\r\n    closeButton: {\r\n        '&:hover': {\r\n            cursor: 'pointer'\r\n        }\r\n    },\r\n    title: {\r\n        fontSize: '18px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '32px',\r\n        letterSpacing: '0px'\r\n    },\r\n    subtitle: {\r\n        color: '#FFFFFF9A',\r\n        fontSize: '12px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '18px',\r\n        letterSpacing: '0px',\r\n        marginTop: '8px',\r\n    },\r\n    startButtonRoot: {\r\n        backgroundColor: '#00FFDD',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#0D1021',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#00EACB'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#00EACB',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    startText: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        color: '#FFFFFF'\r\n    },\r\n    enabledXQText: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '400',\r\n        lineHeight: '22px',\r\n        letterSpacing: '0.492000013589859px',\r\n        height: '56px',\r\n        color: '#00FFDD'\r\n    },\r\n    qoinsButtonRoot: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            background: '#2E3AC1',\r\n        },\r\n        '&:active': {\r\n            background: '#2E3AC1',\r\n            opacity: '0.9'\r\n        }\r\n    },\r\n    qoinsButtonRootDisabled: {\r\n        backgroundColor: '#3B4BF9',\r\n        width: '200px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF !important',\r\n        textTransform: 'none',\r\n        opacity: '0.2'\r\n    },\r\n    textInputContainer: {\r\n        backgroundColor: '#202750',\r\n        borderRadius: '16px',\r\n        paddingRight: '4px',\r\n        overflow: 'hidden'\r\n    },\r\n    sendContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        [theme.breakpoints.up('md')]: {\r\n            minWidth: '400px',\r\n        },\r\n    },\r\n    sendButtonRoot: {\r\n        backgroundColor: '#6C5DD3',\r\n        width: '165px',\r\n        height: '56px',\r\n        borderRadius: '16px',\r\n        alignSelf: 'flex-end',\r\n        fontSize: '14px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '600',\r\n        lineHeight: '20px',\r\n        letterSpacing: '0px',\r\n        color: '#FFF',\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.9'\r\n        },\r\n        '&:active': {\r\n            backgroundColor: '#6C5DD3',\r\n            opacity: '0.8'\r\n        }\r\n    },\r\n    eventNameContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        position: 'absolute',\r\n        right: '30px',\r\n        bottom: '-40px',\r\n        gap: '0px 5px',\r\n        [theme.breakpoints.down('md')]: {\r\n            top: '98px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            width: '60%',\r\n            // right: 'auto',\r\n            paddingTop: '30px',\r\n            backgroundColor: '#141833'\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            top: '148px',\r\n            left: '128px',\r\n            bottom: 'auto',\r\n            right: 'auto',\r\n            paddingTop: '30px',\r\n            flexWrap: 'wrap',\r\n            flexDirection: 'column',\r\n        },\r\n\r\n        fontSize: '16px',\r\n        fontStyle: 'normal',\r\n        fontWeight: '500',\r\n        lineHeight: '24px',\r\n        letterSpacing: '0px',\r\n    },\r\n    eventName: {\r\n        background: 'linear-gradient(90deg, #E5BAFF 0%, #FFFCC0 44.48%), #FFFFFF',\r\n        backgroundClip: 'text',\r\n        WebkitBackgroundClip: 'text',\r\n        WebkitTextFillColor: 'transparent'\r\n    },\r\n}));\r\n\r\nconst EventManagementDialog = ({ open, stream = null, streamStarted, streamTitle, date, hour, onClose, startStream, enableQoins, closeStream, closingStream, sendMessage }) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState('');\r\n    const [dots, setDots] = useState('')\r\n    const [enablingQoins, setEnablingQoins] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if ((streamStarted && !stream) || (enablingQoins && !stream.qoinsEnabled)) {\r\n            setTimeout(() => {\r\n                if (dots.length > 2) {\r\n                    setDots('');\r\n                } else {\r\n                    setDots(dots + '.');\r\n                }\r\n            }, 500);\r\n        }\r\n        if ((streamStarted && stream) && !enablingQoins && dots.length > 0) {\r\n            setDots('');\r\n        }\r\n    }, [streamStarted, dots, enablingQoins]);\r\n\r\n    const startStreamHandler = async () => {\r\n        await startStream();\r\n    }\r\n\r\n    const enableQoinsHandler = async () => {\r\n        setEnablingQoins(true);\r\n        await enableQoins();\r\n        setEnablingQoins(false);\r\n    }\r\n\r\n    const closeStreamHandler = async () => {\r\n        closeStream();\r\n    }\r\n\r\n    const sendNotificationHandler = async () => {\r\n        // We need to add validations, check BioEditorTextArea to get an idea for a possible implementation\r\n        await sendMessage(message);\r\n        setMessage('');\r\n    }\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open} classes={{\r\n            container: classes.dialogContainer,\r\n            root: classes.dialogRoot,\r\n            paper: classes.paper\r\n        }}\r\n            maxWidth='sm'\r\n            fullWidth>\r\n            <DialogContent style={{ padding: '0px' }}>\r\n                <div className={classes.closeButtonContainer}>\r\n                    <CloseIcon onClick={onClose} className={classes.closeButton} />\r\n                </div>\r\n                <div className={classes.itemsContainer}>\r\n                    <div style={{ display: 'flex', flexDirection: 'column', minWidth: '210px', width: '210px', marginRight: '70px' }}>\r\n                        <p className={classes.title}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.streamActions')}\r\n                        </p>\r\n                        <p className={classes.subtitle}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.manageRewards')}\r\n                        </p>\r\n                        <div style={{ height: '20px' }} />\r\n                        {(!stream && !streamStarted) &&\r\n                            <Button\r\n                                style={{ boxShadow: '0px 20px 40px -10px rgba(0, 255, 221, 0.2)' }}\r\n                                onClick={startStreamHandler}\r\n                                classes={{ root: classes.startButtonRoot }}>\r\n                                {t('QaplaStreamDialogs.EventManagementDialog.start')}\r\n                            </Button>\r\n                        }\r\n\r\n                        {!stream && streamStarted &&\r\n                            <p className={classes.startText}>\r\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.creatingRewards')}${dots}`}\r\n                            </p>\r\n                        }\r\n\r\n                        {stream && !stream.qoinsEnabled &&\r\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\r\n                                <TickSquare style={{ marginTop: '7.5px' }} />\r\n                                <p className={classes.enabledXQText}>\r\n                                    {t('QaplaStreamDialogs.EventManagementDialog.xqEnabled')}\r\n                                </p>\r\n                            </div>\r\n                        }\r\n\r\n                        {stream && enablingQoins &&\r\n                            <p className={classes.startText}>\r\n                                {`${t('QaplaStreamDialogs.EventManagementDialog.enablingQoins')}${dots}`}\r\n                            </p>\r\n                        }\r\n\r\n                        {stream && stream.qoinsEnabled &&\r\n                            <div style={{ display: 'flex', height: '56px', alignItems: 'center' }}>\r\n                                <TickSquare style={{ marginTop: '7.5px' }} />\r\n                                <p className={classes.enabledXQText}>\r\n                                    {t('QaplaStreamDialogs.EventManagementDialog.qoinsEnabled')}\r\n                                </p>\r\n                            </div>\r\n                        }\r\n                        <div style={{ height: '6px' }} />\r\n                        {!enablingQoins &&\r\n                            <Button\r\n                                onClick={(stream && stream.qoinsEnabled) ? closeStreamHandler : enableQoinsHandler}\r\n                                classes={{\r\n                                    root: classes.qoinsButtonRoot,\r\n                                    disabled: classes.qoinsButtonRootDisabled\r\n                                }}\r\n                                style={!stream ? { backgroundColor: '#0000' } : { boxShadow: '0px 20px 40px -10px rgba(59, 75, 249, 0.4)' }}\r\n                                disabled={!stream || (stream && enablingQoins) || closingStream}>\r\n                                {(stream && stream.qoinsEnabled) ?\r\n                                    t('QaplaStreamDialogs.EventManagementDialog.end')\r\n                                    :\r\n                                    t('QaplaStreamDialogs.EventManagementDialog.enableQoins')\r\n                                }\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                    <div className={classes.sendContainer}>\r\n                        <p className={classes.title}>\r\n                            💬 {t('QaplaStreamDialogs.EventManagementDialog.sendMessage')}\r\n                        </p>\r\n                        <p className={classes.subtitle}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.sendMessageDetails')}\r\n                        </p>\r\n                        <div style={{ height: '20px' }} />\r\n                        <StreamerTextInput\r\n                            value={message}\r\n                            onChange={(e) => setMessage(e.target.value)}\r\n                            textInputStyle={{ marginTop: '0px' }}\r\n                            textInputClassName={classes.textInputContainer}\r\n                            fullWidth\r\n                            multiline\r\n                            rows={6}\r\n                            maxRows={6}\r\n                            rowsMax={6}\r\n                        />\r\n                        <div style={{ height: '12px' }} />\r\n                        <Button\r\n                            onClick={sendNotificationHandler}\r\n                            classes={{\r\n                                root: classes.sendButtonRoot\r\n                            }}>\r\n                            {t('QaplaStreamDialogs.EventManagementDialog.send')}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </DialogContent>\r\n            <div className={classes.eventNameContainer}>\r\n                <p className={classes.eventName}>\r\n                    {`${streamTitle} `}\r\n                </p>\r\n                <p>\r\n                    {`/ ${date} / ${hour}`}\r\n                </p>\r\n            </div>\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default EventManagementDialog;","C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\CheersBitsRecordDialog\\CheersBitsRecordDialog.jsx",["222","223"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsLeft\\StreamsLeft.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\database.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\EditStreamerEvent\\EditStreamerEvent.jsx",["224"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamsPackages\\StreamsPackages.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\services\\firebase.js",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\QaplaTabs\\QaplaTab.jsx",["225"],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BioEditorTextArea\\BioEditorTextArea.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\StreamerOnBoarding\\StreamerOnBoarding.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\BackButton\\BackButton.jsx",[],"C:\\Users\\Usuario\\OneDrive\\Escritorio\\Trabajo Qapla\\QaplaStreamersDashboard\\src\\components\\GoalProgressBar\\GoalProgressBar.jsx",[],{"ruleId":"226","replacedBy":"227"},{"ruleId":"228","replacedBy":"229"},{"ruleId":"226","replacedBy":"230"},{"ruleId":"228","replacedBy":"231"},{"ruleId":"232","severity":1,"message":"233","line":4,"column":8,"nodeType":"234","messageId":"235","endLine":4,"endColumn":14},{"ruleId":"232","severity":1,"message":"236","line":6,"column":198,"nodeType":"234","messageId":"235","endLine":6,"endColumn":223},{"ruleId":"232","severity":1,"message":"237","line":23,"column":12,"nodeType":"234","messageId":"235","endLine":23,"endColumn":24},{"ruleId":"238","severity":1,"message":"239","line":223,"column":8,"nodeType":"240","endLine":223,"endColumn":84,"suggestions":"241"},{"ruleId":"232","severity":1,"message":"242","line":2,"column":67,"nodeType":"234","messageId":"235","endLine":2,"endColumn":74},{"ruleId":"232","severity":1,"message":"243","line":13,"column":28,"nodeType":"234","messageId":"235","endLine":13,"endColumn":36},{"ruleId":"232","severity":1,"message":"244","line":16,"column":28,"nodeType":"234","messageId":"235","endLine":16,"endColumn":33},{"ruleId":"232","severity":1,"message":"245","line":233,"column":12,"nodeType":"234","messageId":"235","endLine":233,"endColumn":29},{"ruleId":"232","severity":1,"message":"246","line":237,"column":12,"nodeType":"234","messageId":"235","endLine":237,"endColumn":23},{"ruleId":"232","severity":1,"message":"247","line":241,"column":12,"nodeType":"234","messageId":"235","endLine":241,"endColumn":21},{"ruleId":"232","severity":1,"message":"248","line":241,"column":23,"nodeType":"234","messageId":"235","endLine":241,"endColumn":35},{"ruleId":"238","severity":1,"message":"249","line":288,"column":8,"nodeType":"240","endLine":288,"endColumn":14,"suggestions":"250"},{"ruleId":"232","severity":1,"message":"251","line":387,"column":11,"nodeType":"234","messageId":"235","endLine":387,"endColumn":24},{"ruleId":"226","replacedBy":"252"},{"ruleId":"228","replacedBy":"253"},{"ruleId":"232","severity":1,"message":"254","line":373,"column":11,"nodeType":"234","messageId":"235","endLine":373,"endColumn":26},{"ruleId":"232","severity":1,"message":"255","line":4,"column":5,"nodeType":"234","messageId":"235","endLine":4,"endColumn":14},{"ruleId":"232","severity":1,"message":"256","line":5,"column":5,"nodeType":"234","messageId":"235","endLine":5,"endColumn":17},{"ruleId":"232","severity":1,"message":"257","line":6,"column":5,"nodeType":"234","messageId":"235","endLine":6,"endColumn":15},{"ruleId":"226","replacedBy":"258"},{"ruleId":"228","replacedBy":"259"},{"ruleId":"232","severity":1,"message":"260","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":26},{"ruleId":"226","replacedBy":"261"},{"ruleId":"228","replacedBy":"262"},{"ruleId":"232","severity":1,"message":"263","line":7,"column":28,"nodeType":"234","messageId":"235","endLine":7,"endColumn":37},{"ruleId":"232","severity":1,"message":"264","line":21,"column":11,"nodeType":"234","messageId":"235","endLine":21,"endColumn":18},{"ruleId":"238","severity":1,"message":"265","line":98,"column":8,"nodeType":"240","endLine":98,"endColumn":38,"suggestions":"266"},{"ruleId":"238","severity":1,"message":"265","line":179,"column":8,"nodeType":"240","endLine":179,"endColumn":14,"suggestions":"267"},{"ruleId":"268","severity":1,"message":"269","line":235,"column":25,"nodeType":"270","endLine":235,"endColumn":49},{"ruleId":"238","severity":1,"message":"271","line":243,"column":8,"nodeType":"240","endLine":243,"endColumn":44,"suggestions":"272"},{"ruleId":"232","severity":1,"message":"273","line":273,"column":21,"nodeType":"234","messageId":"235","endLine":273,"endColumn":31},{"ruleId":"238","severity":1,"message":"274","line":457,"column":8,"nodeType":"240","endLine":457,"endColumn":14,"suggestions":"275"},{"ruleId":"232","severity":1,"message":"276","line":13,"column":5,"nodeType":"234","messageId":"235","endLine":13,"endColumn":11},{"ruleId":"277","severity":1,"message":"278","line":26,"column":1,"nodeType":"279","endLine":26,"endColumn":51},"no-native-reassign",["280"],"no-negated-in-lhs",["281"],["280"],["281"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'getStreamerAlertsSettings' is defined but never used.","'mediaContent' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'alertSideRight' and 'queueAnimation'. Either include them or remove the dependency array.","ArrayExpression",["282"],"'Tooltip' is defined but never used.","'CopyIcon' is defined but never used.","'XIcon' is defined but never used.","'uploadImageStatus' is assigned a value but never used.","'openTooltip' is assigned a value but never used.","'chipHover' is assigned a value but never used.","'setChipHover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'socialLinksInitialValue' and 'twitchURL'. Either include them or remove the dependency array.",["283"],"'copyTwitchURL' is assigned a value but never used.",["280"],["281"],"'shareStreamLink' is assigned a value but never used.","'InputBase' is defined but never used.","'NativeSelect' is defined but never used.","'InputLabel' is defined but never used.",["280"],["281"],"'useEffect' is defined but never used.",["280"],["281"],"'ArrowIcon' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'query' and 't'. Either include them or remove the dependency array.",["284"],["285"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'stream'. Either include it or remove the dependency array.",["286"],"'setBalance' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setPendingMessages'. Either include it or remove the dependency array. If 'setPendingMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["287"],"'Hidden' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},"Update the dependencies array to be: [streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",{"range":"300","text":"301"},"Update the dependencies array to be: [socialLinksInitialValue, twitchURL, user]",{"range":"302","text":"303"},"Update the dependencies array to be: [user, history, isLoadingAuth, query, t]",{"range":"304","text":"305"},"Update the dependencies array to be: [query, t, user]",{"range":"306","text":"307"},"Update the dependencies array to be: [streamStarted, dots, enablingQoins, stream]",{"range":"308","text":"309"},"Update the dependencies array to be: [setPendingMessages, user]",{"range":"310","text":"311"},[10257,10333],"[streamerId, streamerUid, donationQueue, listenersAreSetted, isPlayingAudio, queueAnimation, alertSideRight]",[9179,9185],"[socialLinksInitialValue, twitchURL, user]",[4466,4496],"[user, history, isLoadingAuth, query, t]",[4945,4951],"[query, t, user]",[6962,6998],"[streamStarted, dots, enablingQoins, stream]",[18267,18273],"[setPendingMessages, user]"]